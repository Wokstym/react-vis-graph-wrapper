// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2rAXy":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"fNmB3"}],"fNmB3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"1CJiQ"}],"1CJiQ":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"aMN3l":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "23d9892fa2b4c36f";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"6mQMX":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$cf3d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$cf3d.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxRuntime = require("react/jsx-runtime");
var _ie11 = require("react-app-polyfill/ie11");
var _reactDom = require("react-dom");
var _react = require("react");
var _reactVisGraphWrapper = require("react-vis-graph-wrapper");
var _reactVisGraphWrapperDefault = parcelHelpers.interopDefault(_reactVisGraphWrapper);
var _s = $RefreshSig$();
const options = {
    layout: {
        hierarchical: false
    },
    edges: {
        color: "#000000"
    }
};
function randomColor() {
    const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');
    const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');
    const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');
    return `#${red}${green}${blue}`;
}
const App = ()=>{
    _s();
    const createNode = (x, y)=>{
        const color = randomColor();
        setState(({ graph: { nodes , edges  } , counter , ...rest })=>{
            const id = counter + 1;
            const from = Math.floor(Math.random() * (counter - 1)) + 1;
            return {
                graph: {
                    nodes: [
                        ...nodes,
                        {
                            id,
                            label: `Node ${id}`,
                            color,
                            x,
                            y
                        }
                    ],
                    edges: [
                        ...edges,
                        {
                            from,
                            to: id
                        }
                    ]
                },
                counter: id,
                ...rest
            };
        });
    };
    const [state, setState] = _react.useState({
        counter: 5,
        graph: {
            nodes: [
                {
                    id: 1,
                    label: "Node 1",
                    color: "#e04141"
                },
                {
                    id: 2,
                    label: "Node 2",
                    color: "#e09c41"
                },
                {
                    id: 3,
                    label: "Node 3",
                    color: "#e0df41"
                },
                {
                    id: 4,
                    label: "Node 4",
                    color: "#7be041"
                },
                {
                    id: 5,
                    label: "Node 5",
                    color: "#41e0c9"
                }
            ],
            edges: [
                {
                    from: 1,
                    to: 2
                },
                {
                    from: 1,
                    to: 3
                },
                {
                    from: 2,
                    to: 4
                },
                {
                    from: 2,
                    to: 5
                }
            ]
        },
        events: {
            select: ({ nodes , edges  })=>{
                console.log("Selected nodes:");
                console.log(nodes);
                console.log("Selected edges:");
                console.log(edges);
                alert("Selected node: " + nodes);
            },
            doubleClick: ({ pointer: { canvas  }  })=>{
                createNode(canvas.x, canvas.y);
            }
        }
    });
    const { graph , events  } = state;
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", {
        __source: {
            fileName: "index.tsx",
            lineNumber: 89
        },
        __self: undefined,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("h1", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 90
                },
                __self: undefined,
                children: "React graph vis"
            }),
            /*#__PURE__*/ _jsxRuntime.jsxs("p", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 91
                },
                __self: undefined,
                children: [
                    /*#__PURE__*/ _jsxRuntime.jsx("a", {
                        href: "https://github.com/crubier/react-graph-vis",
                        __source: {
                            fileName: "index.tsx",
                            lineNumber: 92
                        },
                        __self: undefined,
                        children: "Github"
                    }),
                    " -",
                    " ",
                    /*#__PURE__*/ _jsxRuntime.jsx("a", {
                        href: "https://www.npmjs.com/package/react-graph-vis",
                        __source: {
                            fileName: "index.tsx",
                            lineNumber: 93
                        },
                        __self: undefined,
                        children: "NPM"
                    })
                ]
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("p", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 95
                },
                __self: undefined,
                children: /*#__PURE__*/ _jsxRuntime.jsx("a", {
                    href: "https://github.com/crubier/react-graph-vis/tree/master/example/src/index.js",
                    __source: {
                        fileName: "index.tsx",
                        lineNumber: 95
                    },
                    __self: undefined,
                    children: "Source of this page"
                })
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("p", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 96
                },
                __self: undefined,
                children: "A React component to display beautiful network graphs using vis.js"
            }),
            /*#__PURE__*/ _jsxRuntime.jsxs("p", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 97
                },
                __self: undefined,
                children: [
                    "Make sure to visit ",
                    /*#__PURE__*/ _jsxRuntime.jsx("a", {
                        href: "http://visjs.org",
                        __source: {
                            fileName: "index.tsx",
                            lineNumber: 97
                        },
                        __self: undefined,
                        children: "visjs.org"
                    }),
                    " for more info."
                ]
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("p", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 98
                },
                __self: undefined,
                children: "This package allows to render network graphs using vis.js."
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("p", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 99
                },
                __self: undefined,
                children: "Rendered graphs are scrollable, zoomable, retina ready, dynamic"
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("p", {
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 100
                },
                __self: undefined,
                children: "In this example, we manage state with react: on double click we create a new node, and on select we display an alert."
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_reactVisGraphWrapperDefault.default, {
                graph: graph,
                options: options,
                events: events,
                style: {
                    height: "640px"
                },
                __source: {
                    fileName: "index.tsx",
                    lineNumber: 101
                },
                __self: undefined
            })
        ]
    }));
};
_s(App, "P5UCVRzmuC3VW5T8I05ZpBSycFg=");
_c = App;
_reactDom.render(/*#__PURE__*/ _jsxRuntime.jsx(App, {
    __source: {
        fileName: "index.tsx",
        lineNumber: 107
    },
    __self: undefined
}), document.getElementById('root'));
var _c;
$RefreshReg$(_c, "App");

  $parcel$ReactRefreshHelpers$cf3d.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"8xIwr","react-app-polyfill/ie11":"ejaBM","react-dom":"gkWJK","react":"6TuXu","react-vis-graph-wrapper":"gKuGK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J"}],"8xIwr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.development.js');

},{"./cjs/react-jsx-runtime.development.js":"hw7vv"}],"hw7vv":[function(require,module,exports) {
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) key = '' + maybeKey;
        if (hasValidKey(config)) key = '' + config.key;
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (Array.isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"react":"6TuXu","object-assign":"jzTFF"}],"6TuXu":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"9WG5J"}],"9WG5J":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"jzTFF"}],"jzTFF":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"ejaBM":[function(require,module,exports) {
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
if (typeof Promise === 'undefined') {
    // Rejection tracking prevents a common issue where React gets into an
    // inconsistent state due to an error, but it gets swallowed by a Promise,
    // and the user has no idea what causes React's erratic future behavior.
    require('promise/lib/rejection-tracking').enable();
    self.Promise = require('promise/lib/es6-extensions.js');
}
// Make sure we're in a Browser-like environment before importing polyfills
// This prevents `fetch()` from being imported in a Node test environment
if (typeof window !== 'undefined') // fetch() polyfill for making API calls.
require('whatwg-fetch');
// Object.assign() is commonly used with React.
// It will use the native implementation if it's present and isn't buggy.
Object.assign = require('object-assign');
// Support for...of (a commonly used syntax feature that requires Symbols)
require('core-js/features/symbol');
// Support iterable spread (...Set, ...Map)
require('core-js/features/array/from');

},{"promise/lib/rejection-tracking":"1EPj1","promise/lib/es6-extensions.js":"as6nn","whatwg-fetch":"9sW1L","object-assign":"jzTFF","core-js/features/symbol":"8yX1w","core-js/features/array/from":"65ZxO"}],"1EPj1":[function(require,module,exports) {
'use strict';
var Promise1 = require('./core');
var DEFAULT_WHITELIST = [
    ReferenceError,
    TypeError,
    RangeError
];
var enabled = false;
exports.disable = disable;
function disable() {
    enabled = false;
    Promise1._Y = null;
    Promise1._Z = null;
}
exports.enable = enable;
function enable(options) {
    options = options || {
    };
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {
    };
    Promise1._Y = function(promise) {
        if (promise._V === 2 && rejections[promise._1]) {
            if (rejections[promise._1].logged) onHandled(promise._1);
            else clearTimeout(rejections[promise._1].timeout);
            delete rejections[promise._1];
        }
    };
    Promise1._Z = function(promise, err) {
        if (promise._U === 0) {
            promise._1 = id++;
            rejections[promise._1] = {
                displayId: null,
                error: err,
                timeout: setTimeout(onUnhandled.bind(null, promise._1), // For reference errors and type errors, this almost always
                // means the programmer made a mistake, so log them after just
                // 100ms
                // otherwise, wait 2 seconds to see if they get handled
                matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
                logged: false
            };
        }
    };
    function onUnhandled(id1) {
        if (options.allRejections || matchWhitelist(rejections[id1].error, options.whitelist || DEFAULT_WHITELIST)) {
            rejections[id1].displayId = displayId++;
            if (options.onUnhandled) {
                rejections[id1].logged = true;
                options.onUnhandled(rejections[id1].displayId, rejections[id1].error);
            } else {
                rejections[id1].logged = true;
                logError(rejections[id1].displayId, rejections[id1].error);
            }
        }
    }
    function onHandled(id1) {
        if (rejections[id1].logged) {
            if (options.onHandled) options.onHandled(rejections[id1].displayId, rejections[id1].error);
            else if (!rejections[id1].onUnhandled) {
                console.warn('Promise Rejection Handled (id: ' + rejections[id1].displayId + '):');
                console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id1].displayId + '.');
            }
        }
    }
}
function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function(line) {
        console.warn('  ' + line);
    });
}
function matchWhitelist(error, list) {
    return list.some(function(cls) {
        return error instanceof cls;
    });
}

},{"./core":"GNnnO"}],"GNnnO":[function(require,module,exports) {
'use strict';
var asap = require('asap/raw');
function noop() {
}
// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable
// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.
// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {
};
function getThen(obj) {
    try {
        return obj.then;
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallOne(fn, a) {
    try {
        return fn(a);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallTwo(fn, a, b) {
    try {
        fn(a, b);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
module.exports = Promise1;
function Promise1(fn) {
    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('Promise constructor\'s argument is not a function');
    this._U = 0;
    this._V = 0;
    this._W = null;
    this._X = null;
    if (fn === noop) return;
    doResolve(fn, this);
}
Promise1._Y = null;
Promise1._Z = null;
Promise1._0 = noop;
Promise1.prototype.then = function(onFulfilled, onRejected) {
    if (this.constructor !== Promise1) return safeThen(this, onFulfilled, onRejected);
    var res = new Promise1(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
};
function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function(resolve, reject) {
        var res = new Promise1(noop);
        res.then(resolve, reject);
        handle(self, new Handler(onFulfilled, onRejected, res));
    });
}
function handle(self, deferred) {
    while(self._V === 3)self = self._W;
    if (Promise1._Y) Promise1._Y(self);
    if (self._V === 0) {
        if (self._U === 0) {
            self._U = 1;
            self._X = deferred;
            return;
        }
        if (self._U === 1) {
            self._U = 2;
            self._X = [
                self._X,
                deferred
            ];
            return;
        }
        self._X.push(deferred);
        return;
    }
    handleResolved(self, deferred);
}
function handleResolved(self, deferred) {
    asap(function() {
        var cb = self._V === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
            if (self._V === 1) resolve(deferred.promise, self._W);
            else reject(deferred.promise, self._W);
            return;
        }
        var ret = tryCallOne(cb, self._W);
        if (ret === IS_ERROR) reject(deferred.promise, LAST_ERROR);
        else resolve(deferred.promise, ret);
    });
}
function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = getThen(newValue);
        if (then === IS_ERROR) return reject(self, LAST_ERROR);
        if (then === self.then && newValue instanceof Promise1) {
            self._V = 3;
            self._W = newValue;
            finale(self);
            return;
        } else if (typeof then === 'function') {
            doResolve(then.bind(newValue), self);
            return;
        }
    }
    self._V = 1;
    self._W = newValue;
    finale(self);
}
function reject(self, newValue) {
    self._V = 2;
    self._W = newValue;
    if (Promise1._Z) Promise1._Z(self, newValue);
    finale(self);
}
function finale(self) {
    if (self._U === 1) {
        handle(self, self._X);
        self._X = null;
    }
    if (self._U === 2) {
        for(var i = 0; i < self._X.length; i++)handle(self, self._X[i]);
        self._X = null;
    }
}
function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
}
/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */ function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function(value) {
        if (done) return;
        done = true;
        resolve(promise, value);
    }, function(reason) {
        if (done) return;
        done = true;
        reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
    }
}

},{"asap/raw":"ffrvu"}],"ffrvu":[function(require,module,exports) {
var global = arguments[3];
"use strict";
// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}
var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;
// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while(index < queue.length){
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for(var scan = 0, newLength = queue.length - index; scan < newLength; scan++)queue[scan] = queue[scan + index];
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}
// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
/* globals self */ var scope = typeof global !== "undefined" ? global : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") requestFlush = makeRequestCallFromMutationObserver(flush);
else requestFlush = makeRequestCallFromTimer(flush);
// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;
// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {
        characterData: true
    });
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}
// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html
// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.
// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }
// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.
// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }
// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.
// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.
function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);
        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}
// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer; // ASAP was originally a nextTick shim included in Q. This was factored out
 // into this ASAP package. It was later adapted to RSVP which made further
 // amendments. These decisions, particularly to marginalize MessageChannel and
 // to capture the MutationObserver implementation in a closure, were integrated
 // back into ASAP proper.
 // https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

},{}],"as6nn":[function(require,module,exports) {
'use strict';
//This file contains the ES6 extensions to the core Promises/A+ API
var Promise1 = require('./core.js');
module.exports = Promise1;
/* Static Functions */ var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');
function valuePromise(value) {
    var p = new Promise1(Promise1._0);
    p._V = 1;
    p._W = value;
    return p;
}
Promise1.resolve = function(value) {
    if (value instanceof Promise1) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;
    if (typeof value === 'object' || typeof value === 'function') try {
        var then = value.then;
        if (typeof then === 'function') return new Promise1(then.bind(value));
    } catch (ex) {
        return new Promise1(function(resolve, reject) {
            reject(ex);
        });
    }
    return valuePromise(value);
};
var iterableToArray = function(iterable) {
    if (typeof Array.from === 'function') {
        // ES2015+, iterables exist
        iterableToArray = Array.from;
        return Array.from(iterable);
    }
    // ES5, only arrays and array-likes exist
    iterableToArray = function(x) {
        return Array.prototype.slice.call(x);
    };
    return Array.prototype.slice.call(iterable);
};
Promise1.all = function(arr) {
    var args = iterableToArray(arr);
    return new Promise1(function(resolve, reject) {
        if (args.length === 0) return resolve([]);
        var remaining = args.length;
        function res(i, val) {
            if (val && (typeof val === 'object' || typeof val === 'function')) {
                if (val instanceof Promise1 && val.then === Promise1.prototype.then) {
                    while(val._V === 3)val = val._W;
                    if (val._V === 1) return res(i, val._W);
                    if (val._V === 2) reject(val._W);
                    val.then(function(val1) {
                        res(i, val1);
                    }, reject);
                    return;
                } else {
                    var then = val.then;
                    if (typeof then === 'function') {
                        var p = new Promise1(then.bind(val));
                        p.then(function(val1) {
                            res(i, val1);
                        }, reject);
                        return;
                    }
                }
            }
            args[i] = val;
            if ((--remaining) === 0) resolve(args);
        }
        for(var i = 0; i < args.length; i++)res(i, args[i]);
    });
};
Promise1.reject = function(value) {
    return new Promise1(function(resolve, reject) {
        reject(value);
    });
};
Promise1.race = function(values) {
    return new Promise1(function(resolve, reject) {
        iterableToArray(values).forEach(function(value) {
            Promise1.resolve(value).then(resolve, reject);
        });
    });
};
/* Prototype Methods */ Promise1.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
};

},{"./core.js":"GNnnO"}],"9sW1L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Headers", ()=>Headers1
);
parcelHelpers.export(exports, "Request", ()=>Request1
);
parcelHelpers.export(exports, "Response", ()=>Response1
);
parcelHelpers.export(exports, "DOMException", ()=>DOMException1
);
parcelHelpers.export(exports, "fetch", ()=>fetch
);
var global = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global;
var support = {
    searchParams: 'URLSearchParams' in global,
    iterable: 'Symbol' in global && 'iterator' in Symbol,
    blob: 'FileReader' in global && 'Blob' in global && function() {
        try {
            new Blob();
            return true;
        } catch (e) {
            return false;
        }
    }(),
    formData: 'FormData' in global,
    arrayBuffer: 'ArrayBuffer' in global
};
function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj);
}
if (support.arrayBuffer) {
    var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
    ];
    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
}
function normalizeName(name) {
    if (typeof name !== 'string') name = String(name);
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') throw new TypeError('Invalid character in header field name: "' + name + '"');
    return name.toLowerCase();
}
function normalizeValue(value) {
    if (typeof value !== 'string') value = String(value);
    return value;
}
// Build a destructive iterator for the value list
function iteratorFor(items) {
    var iterator = {
        next: function() {
            var value = items.shift();
            return {
                done: value === undefined,
                value: value
            };
        }
    };
    if (support.iterable) iterator[Symbol.iterator] = function() {
        return iterator;
    };
    return iterator;
}
function Headers1(headers) {
    this.map = {
    };
    if (headers instanceof Headers1) headers.forEach(function(value, name) {
        this.append(name, value);
    }, this);
    else if (Array.isArray(headers)) headers.forEach(function(header) {
        this.append(header[0], header[1]);
    }, this);
    else if (headers) Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
    }, this);
}
Headers1.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
};
Headers1.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
};
Headers1.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null;
};
Headers1.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name));
};
Headers1.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
};
Headers1.prototype.forEach = function(callback, thisArg) {
    for(var name in this.map)if (this.map.hasOwnProperty(name)) callback.call(thisArg, this.map[name], name, this);
};
Headers1.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
        items.push(name);
    });
    return iteratorFor(items);
};
Headers1.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
        items.push(value);
    });
    return iteratorFor(items);
};
Headers1.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
        items.push([
            name,
            value
        ]);
    });
    return iteratorFor(items);
};
if (support.iterable) Headers1.prototype[Symbol.iterator] = Headers1.prototype.entries;
function consumed(body) {
    if (body.bodyUsed) return Promise.reject(new TypeError('Already read'));
    body.bodyUsed = true;
}
function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
        reader.onload = function() {
            resolve(reader.result);
        };
        reader.onerror = function() {
            reject(reader.error);
        };
    });
}
function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
}
function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
}
function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);
    for(var i = 0; i < view.length; i++)chars[i] = String.fromCharCode(view[i]);
    return chars.join('');
}
function bufferClone(buf) {
    if (buf.slice) return buf.slice(0);
    else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
    }
}
function Body() {
    this.bodyUsed = false;
    this._initBody = function(body) {
        /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */ this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;
        if (!body) this._bodyText = '';
        else if (typeof body === 'string') this._bodyText = body;
        else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body;
        else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body;
        else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString();
        else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            // IE 10-11 can't handle a DataView body.
            this._bodyInit = new Blob([
                this._bodyArrayBuffer
            ]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) this._bodyArrayBuffer = bufferClone(body);
        else this._bodyText = body = Object.prototype.toString.call(body);
        if (!this.headers.get('content-type')) {
            if (typeof body === 'string') this.headers.set('content-type', 'text/plain;charset=UTF-8');
            else if (this._bodyBlob && this._bodyBlob.type) this.headers.set('content-type', this._bodyBlob.type);
            else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
    };
    if (support.blob) {
        this.blob = function() {
            var rejected = consumed(this);
            if (rejected) return rejected;
            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
            else if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                this._bodyArrayBuffer
            ]));
            else if (this._bodyFormData) throw new Error('could not read FormData body as blob');
            else return Promise.resolve(new Blob([
                this._bodyText
            ]));
        };
        this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) return isConsumed;
                if (ArrayBuffer.isView(this._bodyArrayBuffer)) return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                else return Promise.resolve(this._bodyArrayBuffer);
            } else return this.blob().then(readBlobAsArrayBuffer);
        };
    }
    this.text = function() {
        var rejected = consumed(this);
        if (rejected) return rejected;
        if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
        else if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        else if (this._bodyFormData) throw new Error('could not read FormData body as text');
        else return Promise.resolve(this._bodyText);
    };
    if (support.formData) this.formData = function() {
        return this.text().then(decode);
    };
    this.json = function() {
        return this.text().then(JSON.parse);
    };
    return this;
}
// HTTP methods whose capitalization should be normalized
var methods = [
    'DELETE',
    'GET',
    'HEAD',
    'OPTIONS',
    'POST',
    'PUT'
];
function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request1(input, options) {
    if (!(this instanceof Request1)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    options = options || {
    };
    var body = options.body;
    if (input instanceof Request1) {
        if (input.bodyUsed) throw new TypeError('Already read');
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) this.headers = new Headers1(input.headers);
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
        }
    } else this.url = String(input);
    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) this.headers = new Headers1(options.headers);
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;
    if ((this.method === 'GET' || this.method === 'HEAD') && body) throw new TypeError('Body not allowed for GET or HEAD requests');
    this._initBody(body);
    if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
            // Search for a '_' parameter in the query string
            var reParamSearch = /([?&])_=[^&]*/;
            if (reParamSearch.test(this.url)) // If it already exists then set the value with the current time
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
            else {
                // Otherwise add a new '_' parameter to the end with the current time
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
            }
        }
    }
}
Request1.prototype.clone = function() {
    return new Request1(this, {
        body: this._bodyInit
    });
};
function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function(bytes) {
        if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
    });
    return form;
}
function parseHeaders(rawHeaders) {
    var headers = new Headers1();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders.split('\r').map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
    }).forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
            var value = parts.join(':').trim();
            headers.append(key, value);
        }
    });
    return headers;
}
Body.call(Request1.prototype);
function Response1(bodyInit, options) {
    if (!(this instanceof Response1)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    if (!options) options = {
    };
    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers1(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
}
Body.call(Response1.prototype);
Response1.prototype.clone = function() {
    return new Response1(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers1(this.headers),
        url: this.url
    });
};
Response1.error = function() {
    var response = new Response1(null, {
        status: 0,
        statusText: ''
    });
    response.type = 'error';
    return response;
};
var redirectStatuses = [
    301,
    302,
    303,
    307,
    308
];
Response1.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) throw new RangeError('Invalid status code');
    return new Response1(null, {
        status: status,
        headers: {
            location: url
        }
    });
};
var DOMException1 = global.DOMException;
try {
    new DOMException1();
} catch (err) {
    DOMException1 = function(message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
    };
    DOMException1.prototype = Object.create(Error.prototype);
    DOMException1.prototype.constructor = DOMException1;
}
function fetch(input, init) {
    return new Promise(function(resolve, reject) {
        var request = new Request1(input, init);
        if (request.signal && request.signal.aborted) return reject(new DOMException1('Aborted', 'AbortError'));
        var xhr = new XMLHttpRequest();
        function abortXhr() {
            xhr.abort();
        }
        xhr.onload = function() {
            var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = 'response' in xhr ? xhr.response : xhr.responseText;
            setTimeout(function() {
                resolve(new Response1(body, options));
            }, 0);
        };
        xhr.onerror = function() {
            setTimeout(function() {
                reject(new TypeError('Network request failed'));
            }, 0);
        };
        xhr.ontimeout = function() {
            setTimeout(function() {
                reject(new TypeError('Network request failed'));
            }, 0);
        };
        xhr.onabort = function() {
            setTimeout(function() {
                reject(new DOMException1('Aborted', 'AbortError'));
            }, 0);
        };
        function fixUrl(url) {
            try {
                return url === '' && global.location.href ? global.location.href : url;
            } catch (e) {
                return url;
            }
        }
        xhr.open(request.method, fixUrl(request.url), true);
        if (request.credentials === 'include') xhr.withCredentials = true;
        else if (request.credentials === 'omit') xhr.withCredentials = false;
        if ('responseType' in xhr) {
            if (support.blob) xhr.responseType = 'blob';
            else if (support.arrayBuffer && request.headers.get('Content-Type') && request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1) xhr.responseType = 'arraybuffer';
        }
        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers1)) Object.getOwnPropertyNames(init.headers).forEach(function(name) {
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
        else request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value);
        });
        if (request.signal) {
            request.signal.addEventListener('abort', abortXhr);
            xhr.onreadystatechange = function() {
                // DONE (success or failure)
                if (xhr.readyState === 4) request.signal.removeEventListener('abort', abortXhr);
            };
        }
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
}
fetch.polyfill = true;
if (!global.fetch) {
    global.fetch = fetch;
    global.Headers = Headers1;
    global.Request = Request1;
    global.Response = Response1;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"JacNc":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"8yX1w":[function(require,module,exports) {
var parent = require('../../actual/symbol');
require('../../modules/esnext.symbol.async-dispose');
require('../../modules/esnext.symbol.dispose');
require('../../modules/esnext.symbol.matcher');
require('../../modules/esnext.symbol.metadata');
require('../../modules/esnext.symbol.observable');
// TODO: Remove from `core-js@4`
require('../../modules/esnext.symbol.pattern-match');
// TODO: Remove from `core-js@4`
require('../../modules/esnext.symbol.replace-all');
module.exports = parent;

},{"../../actual/symbol":"gmrFo","../../modules/esnext.symbol.async-dispose":"gibPN","../../modules/esnext.symbol.dispose":"8PCoW","../../modules/esnext.symbol.matcher":"ejple","../../modules/esnext.symbol.metadata":"8us9B","../../modules/esnext.symbol.observable":"c37jl","../../modules/esnext.symbol.pattern-match":"gineQ","../../modules/esnext.symbol.replace-all":"2n22P"}],"gmrFo":[function(require,module,exports) {
var parent = require('../../stable/symbol');
module.exports = parent;

},{"../../stable/symbol":"gEWd2"}],"gEWd2":[function(require,module,exports) {
var parent = require('../../es/symbol');
require('../../modules/web.dom-collections.iterator');
module.exports = parent;

},{"../../es/symbol":"gFDio","../../modules/web.dom-collections.iterator":"gC8gE"}],"gFDio":[function(require,module,exports) {
require('../../modules/es.array.concat');
require('../../modules/es.object.to-string');
require('../../modules/es.symbol');
require('../../modules/es.symbol.async-iterator');
require('../../modules/es.symbol.description');
require('../../modules/es.symbol.has-instance');
require('../../modules/es.symbol.is-concat-spreadable');
require('../../modules/es.symbol.iterator');
require('../../modules/es.symbol.match');
require('../../modules/es.symbol.match-all');
require('../../modules/es.symbol.replace');
require('../../modules/es.symbol.search');
require('../../modules/es.symbol.species');
require('../../modules/es.symbol.split');
require('../../modules/es.symbol.to-primitive');
require('../../modules/es.symbol.to-string-tag');
require('../../modules/es.symbol.unscopables');
require('../../modules/es.json.to-string-tag');
require('../../modules/es.math.to-string-tag');
require('../../modules/es.reflect.to-string-tag');
var path = require('../../internals/path');
module.exports = path.Symbol;

},{"../../modules/es.array.concat":"12BiX","../../modules/es.object.to-string":"bBRVN","../../modules/es.symbol":"h82Ta","../../modules/es.symbol.async-iterator":"4gQKh","../../modules/es.symbol.description":"k6qTH","../../modules/es.symbol.has-instance":"6rypY","../../modules/es.symbol.is-concat-spreadable":"8cPMJ","../../modules/es.symbol.iterator":"54Wkt","../../modules/es.symbol.match":"fci7y","../../modules/es.symbol.match-all":"LEHqP","../../modules/es.symbol.replace":"emMne","../../modules/es.symbol.search":"1pJ8K","../../modules/es.symbol.species":"aUPm6","../../modules/es.symbol.split":"h3StJ","../../modules/es.symbol.to-primitive":"jiMen","../../modules/es.symbol.to-string-tag":"2Dw1B","../../modules/es.symbol.unscopables":"dad1W","../../modules/es.json.to-string-tag":"6YcXi","../../modules/es.math.to-string-tag":"96Wzg","../../modules/es.reflect.to-string-tag":"99fpE","../../internals/path":"cV4BF"}],"12BiX":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');
var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 9007199254740991;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
var TypeError1 = global.TypeError;
// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
});
var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');
var isConcatSpreadable = function(O) {
    if (!isObject(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray(O);
};
var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({
    target: 'Array',
    proto: true,
    forced: FORCED
}, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    concat: function concat(arg) {
        var O = toObject(this);
        var A = arraySpeciesCreate(O, 0);
        var n = 0;
        var i, k, length, len, E;
        for(i = -1, length = arguments.length; i < length; i++){
            E = i === -1 ? O : arguments[i];
            if (isConcatSpreadable(E)) {
                len = lengthOfArrayLike(E);
                if (n + len > MAX_SAFE_INTEGER) throw TypeError1(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                for(k = 0; k < len; k++, n++)if (k in E) createProperty(A, n, E[k]);
            } else {
                if (n >= MAX_SAFE_INTEGER) throw TypeError1(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                createProperty(A, n++, E);
            }
        }
        A.length = n;
        return A;
    }
});

},{"../internals/export":"2mZbc","../internals/global":"a4GR8","../internals/fails":"byxLb","../internals/is-array":"kiY2Q","../internals/is-object":"d60Kc","../internals/to-object":"ghTKi","../internals/length-of-array-like":"feyBo","../internals/create-property":"9DQWQ","../internals/array-species-create":"beybx","../internals/array-method-has-species-support":"67F2b","../internals/well-known-symbol":"6sZ59","../internals/engine-v8-version":"8Ofbb"}],"2mZbc":[function(require,module,exports) {
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var setGlobal = require('../internals/set-global');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');
/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/ module.exports = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) target = global;
    else if (STATIC) target = global[TARGET] || setGlobal(TARGET, {
    });
    else target = (global[TARGET] || {
    }).prototype;
    if (target) for(key in source){
        sourceProperty = source[key];
        if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
        // contained in target
        if (!FORCED && targetProperty !== undefined) {
            if (typeof sourceProperty == typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
        }
        // add a flag to not completely full polyfills
        if (options.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty(sourceProperty, 'sham', true);
        // extend global
        redefine(target, key, sourceProperty, options);
    }
};

},{"../internals/global":"a4GR8","../internals/object-get-own-property-descriptor":"hwpsT","../internals/create-non-enumerable-property":"73EkF","../internals/redefine":"cwrrW","../internals/set-global":"7Z35u","../internals/copy-constructor-properties":"4qgKG","../internals/is-forced":"djqhI"}],"a4GR8":[function(require,module,exports) {
var global = arguments[3];
var check = function(it) {
    return it && it.Math == Math && it;
};
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports = // eslint-disable-next-line es/no-global-this -- safe
check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == 'object' && self) || check(typeof global == 'object' && global) || // eslint-disable-next-line no-new-func -- fallback
(function() {
    return this;
})() || Function('return this')();

},{}],"hwpsT":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var call = require('../internals/function-call');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPropertyKey = require('../internals/to-property-key');
var hasOwn = require('../internals/has-own-property');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPropertyKey(P);
    if (IE8_DOM_DEFINE) try {
        return $getOwnPropertyDescriptor(O, P);
    } catch (error) {
    }
    if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};

},{"../internals/descriptors":"kuDzl","../internals/function-call":"d0MId","../internals/object-property-is-enumerable":"6JYDE","../internals/create-property-descriptor":"5fdHA","../internals/to-indexed-object":"9N8sJ","../internals/to-property-key":"99Lby","../internals/has-own-property":"kL9Yw","../internals/ie8-dom-define":"5FQkl"}],"kuDzl":[function(require,module,exports) {
var fails = require('../internals/fails');
// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty({
    }, 1, {
        get: function() {
            return 7;
        }
    })[1] != 7;
});

},{"../internals/fails":"byxLb"}],"byxLb":[function(require,module,exports) {
module.exports = function(exec) {
    try {
        return !!exec();
    } catch (error) {
        return true;
    }
};

},{}],"d0MId":[function(require,module,exports) {
var call = Function.prototype.call;
module.exports = call.bind ? call.bind(call) : function() {
    return call.apply(call, arguments);
};

},{}],"6JYDE":[function(require,module,exports) {
'use strict';
var $propertyIsEnumerable = {
}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
    1: 2
}, 1);
// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

},{}],"5fdHA":[function(require,module,exports) {
module.exports = function(bitmap, value) {
    return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
    };
};

},{}],"9N8sJ":[function(require,module,exports) {
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
module.exports = function(it) {
    return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":"1hg9G","../internals/require-object-coercible":"1XURO"}],"1hg9G":[function(require,module,exports) {
var global = require('../internals/global');
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');
var Object1 = global.Object;
var split = uncurryThis(''.split);
// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function() {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins -- safe
    return !Object1('z').propertyIsEnumerable(0);
}) ? function(it) {
    return classof(it) == 'String' ? split(it, '') : Object1(it);
} : Object1;

},{"../internals/global":"a4GR8","../internals/function-uncurry-this":"gBsQL","../internals/fails":"byxLb","../internals/classof-raw":"8F0bi"}],"gBsQL":[function(require,module,exports) {
var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = bind && bind.bind(call, call);
module.exports = bind ? function(fn) {
    return fn && uncurryThis(fn);
} : function(fn) {
    return fn && function() {
        return call.apply(fn, arguments);
    };
};

},{}],"8F0bi":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var toString = uncurryThis({
}.toString);
var stringSlice = uncurryThis(''.slice);
module.exports = function(it) {
    return stringSlice(toString(it), 8, -1);
};

},{"../internals/function-uncurry-this":"gBsQL"}],"1XURO":[function(require,module,exports) {
var global = require('../internals/global');
var TypeError1 = global.TypeError;
// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function(it) {
    if (it == undefined) throw TypeError1("Can't call method on " + it);
    return it;
};

},{"../internals/global":"a4GR8"}],"99Lby":[function(require,module,exports) {
var toPrimitive = require('../internals/to-primitive');
var isSymbol = require('../internals/is-symbol');
// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function(argument) {
    var key = toPrimitive(argument, 'string');
    return isSymbol(key) ? key : key + '';
};

},{"../internals/to-primitive":"LSiNW","../internals/is-symbol":"hfIC8"}],"LSiNW":[function(require,module,exports) {
var global = require('../internals/global');
var call = require('../internals/function-call');
var isObject = require('../internals/is-object');
var isSymbol = require('../internals/is-symbol');
var getMethod = require('../internals/get-method');
var ordinaryToPrimitive = require('../internals/ordinary-to-primitive');
var wellKnownSymbol = require('../internals/well-known-symbol');
var TypeError1 = global.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function(input, pref) {
    if (!isObject(input) || isSymbol(input)) return input;
    var exoticToPrim = getMethod(input, TO_PRIMITIVE);
    var result;
    if (exoticToPrim) {
        if (pref === undefined) pref = 'default';
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result)) return result;
        throw TypeError1("Can't convert object to primitive value");
    }
    if (pref === undefined) pref = 'number';
    return ordinaryToPrimitive(input, pref);
};

},{"../internals/global":"a4GR8","../internals/function-call":"d0MId","../internals/is-object":"d60Kc","../internals/is-symbol":"hfIC8","../internals/get-method":"8DyNd","../internals/ordinary-to-primitive":"1rrrl","../internals/well-known-symbol":"6sZ59"}],"d60Kc":[function(require,module,exports) {
var isCallable = require('../internals/is-callable');
module.exports = function(it) {
    return typeof it == 'object' ? it !== null : isCallable(it);
};

},{"../internals/is-callable":"41EnZ"}],"41EnZ":[function(require,module,exports) {
// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function(argument) {
    return typeof argument == 'function';
};

},{}],"hfIC8":[function(require,module,exports) {
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var isCallable = require('../internals/is-callable');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');
var Object1 = global.Object;
module.exports = USE_SYMBOL_AS_UID ? function(it) {
    return typeof it == 'symbol';
} : function(it) {
    var $Symbol = getBuiltIn('Symbol');
    return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object1(it));
};

},{"../internals/global":"a4GR8","../internals/get-built-in":"hqegu","../internals/is-callable":"41EnZ","../internals/object-is-prototype-of":"gFfbX","../internals/use-symbol-as-uid":"dancM"}],"hqegu":[function(require,module,exports) {
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');
var aFunction = function(argument) {
    return isCallable(argument) ? argument : undefined;
};
module.exports = function(namespace, method) {
    return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};

},{"../internals/global":"a4GR8","../internals/is-callable":"41EnZ"}],"gFfbX":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
module.exports = uncurryThis({
}.isPrototypeOf);

},{"../internals/function-uncurry-this":"gBsQL"}],"dancM":[function(require,module,exports) {
/* eslint-disable es/no-symbol -- required for testing */ var NATIVE_SYMBOL = require('../internals/native-symbol');
module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';

},{"../internals/native-symbol":"2gIhS"}],"2gIhS":[function(require,module,exports) {
/* eslint-disable es/no-symbol -- required for testing */ var V8_VERSION = require('../internals/engine-v8-version');
var fails = require('../internals/fails');
// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
    var symbol = Symbol();
    // Chrome 38 Symbol has incorrect toString conversion
    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
    return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

},{"../internals/engine-v8-version":"8Ofbb","../internals/fails":"byxLb"}],"8Ofbb":[function(require,module,exports) {
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');
var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;
if (v8) {
    match = v8.split('.');
    // in old Chrome, versions of V8 isn't V8 = Chrome / 10
    // but their correct versions are not interesting for us
    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}
// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match) version = +match[1];
    }
}
module.exports = version;

},{"../internals/global":"a4GR8","../internals/engine-user-agent":"ihes9"}],"ihes9":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
module.exports = getBuiltIn('navigator', 'userAgent') || '';

},{"../internals/get-built-in":"hqegu"}],"8DyNd":[function(require,module,exports) {
var aCallable = require('../internals/a-callable');
// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function(V, P) {
    var func = V[P];
    return func == null ? undefined : aCallable(func);
};

},{"../internals/a-callable":"jnvBr"}],"jnvBr":[function(require,module,exports) {
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');
var tryToString = require('../internals/try-to-string');
var TypeError1 = global.TypeError;
// `Assert: IsCallable(argument) is true`
module.exports = function(argument) {
    if (isCallable(argument)) return argument;
    throw TypeError1(tryToString(argument) + ' is not a function');
};

},{"../internals/global":"a4GR8","../internals/is-callable":"41EnZ","../internals/try-to-string":"gQsq2"}],"gQsq2":[function(require,module,exports) {
var global = require('../internals/global');
var String1 = global.String;
module.exports = function(argument) {
    try {
        return String1(argument);
    } catch (error) {
        return 'Object';
    }
};

},{"../internals/global":"a4GR8"}],"1rrrl":[function(require,module,exports) {
var global = require('../internals/global');
var call = require('../internals/function-call');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var TypeError1 = global.TypeError;
// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function(input, pref) {
    var fn, val;
    if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
    if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
    if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
    throw TypeError1("Can't convert object to primitive value");
};

},{"../internals/global":"a4GR8","../internals/function-call":"d0MId","../internals/is-callable":"41EnZ","../internals/is-object":"d60Kc"}],"6sZ59":[function(require,module,exports) {
var global = require('../internals/global');
var shared = require('../internals/shared');
var hasOwn = require('../internals/has-own-property');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');
var WellKnownSymbolsStore = shared('wks');
var Symbol1 = global.Symbol;
var symbolFor = Symbol1 && Symbol1['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol1 : Symbol1 && Symbol1.withoutSetter || uid;
module.exports = function(name) {
    if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
        var description = 'Symbol.' + name;
        if (NATIVE_SYMBOL && hasOwn(Symbol1, name)) WellKnownSymbolsStore[name] = Symbol1[name];
        else if (USE_SYMBOL_AS_UID && symbolFor) WellKnownSymbolsStore[name] = symbolFor(description);
        else WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
    return WellKnownSymbolsStore[name];
};

},{"../internals/global":"a4GR8","../internals/shared":"ic92G","../internals/has-own-property":"kL9Yw","../internals/uid":"9DssZ","../internals/native-symbol":"2gIhS","../internals/use-symbol-as-uid":"dancM"}],"ic92G":[function(require,module,exports) {
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');
(module.exports = function(key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {
    });
})('versions', []).push({
    version: '3.20.2',
    mode: IS_PURE ? 'pure' : 'global',
    copyright: '© 2022 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/is-pure":"dlbEd","../internals/shared-store":"4v8Nf"}],"dlbEd":[function(require,module,exports) {
module.exports = false;

},{}],"4v8Nf":[function(require,module,exports) {
var global = require('../internals/global');
var setGlobal = require('../internals/set-global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {
});
module.exports = store;

},{"../internals/global":"a4GR8","../internals/set-global":"7Z35u"}],"7Z35u":[function(require,module,exports) {
var global = require('../internals/global');
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
module.exports = function(key, value) {
    try {
        defineProperty(global, key, {
            value: value,
            configurable: true,
            writable: true
        });
    } catch (error) {
        global[key] = value;
    }
    return value;
};

},{"../internals/global":"a4GR8"}],"kL9Yw":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var toObject = require('../internals/to-object');
var hasOwnProperty = uncurryThis({
}.hasOwnProperty);
// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
module.exports = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty(toObject(it), key);
};

},{"../internals/function-uncurry-this":"gBsQL","../internals/to-object":"ghTKi"}],"ghTKi":[function(require,module,exports) {
var global = require('../internals/global');
var requireObjectCoercible = require('../internals/require-object-coercible');
var Object1 = global.Object;
// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function(argument) {
    return Object1(requireObjectCoercible(argument));
};

},{"../internals/global":"a4GR8","../internals/require-object-coercible":"1XURO"}],"9DssZ":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1..toString);
module.exports = function(key) {
    return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString((++id) + postfix, 36);
};

},{"../internals/function-uncurry-this":"gBsQL"}],"5FQkl":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');
// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(createElement('div'), 'a', {
        get: function() {
            return 7;
        }
    }).a != 7;
});

},{"../internals/descriptors":"kuDzl","../internals/fails":"byxLb","../internals/document-create-element":"2WwO0"}],"2WwO0":[function(require,module,exports) {
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);
module.exports = function(it) {
    return EXISTS ? document.createElement(it) : {
    };
};

},{"../internals/global":"a4GR8","../internals/is-object":"d60Kc"}],"73EkF":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
module.exports = DESCRIPTORS ? function(object, key, value) {
    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function(object, key, value) {
    object[key] = value;
    return object;
};

},{"../internals/descriptors":"kuDzl","../internals/object-define-property":"iKHmb","../internals/create-property-descriptor":"5fdHA"}],"iKHmb":[function(require,module,exports) {
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');
var anObject = require('../internals/an-object');
var toPropertyKey = require('../internals/to-property-key');
var TypeError1 = global.TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';
// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);
    if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O, P);
        if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
                configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
                enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
                writable: false
            };
        }
    }
    return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty1(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
        return $defineProperty(O, P, Attributes);
    } catch (error) {
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError1('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
};

},{"../internals/global":"a4GR8","../internals/descriptors":"kuDzl","../internals/ie8-dom-define":"5FQkl","../internals/v8-prototype-define-bug":"hBwa1","../internals/an-object":"9unxM","../internals/to-property-key":"99Lby"}],"hBwa1":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function() {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(function() {
    }, 'prototype', {
        value: 42,
        writable: false
    }).prototype != 42;
});

},{"../internals/descriptors":"kuDzl","../internals/fails":"byxLb"}],"9unxM":[function(require,module,exports) {
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var String1 = global.String;
var TypeError1 = global.TypeError;
// `Assert: Type(argument) is Object`
module.exports = function(argument) {
    if (isObject(argument)) return argument;
    throw TypeError1(String1(argument) + ' is not an object');
};

},{"../internals/global":"a4GR8","../internals/is-object":"d60Kc"}],"cwrrW":[function(require,module,exports) {
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');
var hasOwn = require('../internals/has-own-property');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var setGlobal = require('../internals/set-global');
var inspectSource = require('../internals/inspect-source');
var InternalStateModule = require('../internals/internal-state');
var CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;
var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');
(module.exports = function(O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    var name = options && options.name !== undefined ? options.name : key;
    var state;
    if (isCallable(value)) {
        if (String(name).slice(0, 7) === 'Symbol(') name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
        if (!hasOwn(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) createNonEnumerableProperty(value, 'name', name);
        state = enforceInternalState(value);
        if (!state.source) state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
    }
    if (O === global) {
        if (simple) O[key] = value;
        else setGlobal(key, value);
        return;
    } else if (!unsafe) delete O[key];
    else if (!noTargetGet && O[key]) simple = true;
    if (simple) O[key] = value;
    else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
    return isCallable(this) && getInternalState(this).source || inspectSource(this);
});

},{"../internals/global":"a4GR8","../internals/is-callable":"41EnZ","../internals/has-own-property":"kL9Yw","../internals/create-non-enumerable-property":"73EkF","../internals/set-global":"7Z35u","../internals/inspect-source":"yqC5G","../internals/internal-state":"ceuiK","../internals/function-name":"fErEm"}],"yqC5G":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var isCallable = require('../internals/is-callable');
var store = require('../internals/shared-store');
var functionToString = uncurryThis(Function.toString);
// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) store.inspectSource = function(it) {
    return functionToString(it);
};
module.exports = store.inspectSource;

},{"../internals/function-uncurry-this":"gBsQL","../internals/is-callable":"41EnZ","../internals/shared-store":"4v8Nf"}],"ceuiK":[function(require,module,exports) {
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var global = require('../internals/global');
var uncurryThis = require('../internals/function-uncurry-this');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var hasOwn = require('../internals/has-own-property');
var shared = require('../internals/shared-store');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError1 = global.TypeError;
var WeakMap1 = global.WeakMap;
var set, get, has;
var enforce = function(it) {
    return has(it) ? get(it) : set(it, {
    });
};
var getterFor = function(TYPE) {
    return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) throw TypeError1('Incompatible receiver, ' + TYPE + ' required');
        return state;
    };
};
if (NATIVE_WEAK_MAP || shared.state) {
    var store = shared.state || (shared.state = new WeakMap1());
    var wmget = uncurryThis(store.get);
    var wmhas = uncurryThis(store.has);
    var wmset = uncurryThis(store.set);
    set = function(it, metadata) {
        if (wmhas(store, it)) throw new TypeError1(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        wmset(store, it, metadata);
        return metadata;
    };
    get = function(it) {
        return wmget(store, it) || {
        };
    };
    has = function(it) {
        return wmhas(store, it);
    };
} else {
    var STATE = sharedKey('state');
    hiddenKeys[STATE] = true;
    set = function(it, metadata) {
        if (hasOwn(it, STATE)) throw new TypeError1(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
    };
    get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {
        };
    };
    has = function(it) {
        return hasOwn(it, STATE);
    };
}
module.exports = {
    set: set,
    get: get,
    has: has,
    enforce: enforce,
    getterFor: getterFor
};

},{"../internals/native-weak-map":"kny3R","../internals/global":"a4GR8","../internals/function-uncurry-this":"gBsQL","../internals/is-object":"d60Kc","../internals/create-non-enumerable-property":"73EkF","../internals/has-own-property":"kL9Yw","../internals/shared-store":"4v8Nf","../internals/shared-key":"65Tv5","../internals/hidden-keys":"8TVAY"}],"kny3R":[function(require,module,exports) {
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');
var inspectSource = require('../internals/inspect-source');
var WeakMap1 = global.WeakMap;
module.exports = isCallable(WeakMap1) && /native code/.test(inspectSource(WeakMap1));

},{"../internals/global":"a4GR8","../internals/is-callable":"41EnZ","../internals/inspect-source":"yqC5G"}],"65Tv5":[function(require,module,exports) {
var shared = require('../internals/shared');
var uid = require('../internals/uid');
var keys = shared('keys');
module.exports = function(key) {
    return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":"ic92G","../internals/uid":"9DssZ"}],"8TVAY":[function(require,module,exports) {
module.exports = {
};

},{}],"fErEm":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var hasOwn = require('../internals/has-own-property');
var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() {
}).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable);
module.exports = {
    EXISTS: EXISTS,
    PROPER: PROPER,
    CONFIGURABLE: CONFIGURABLE
};

},{"../internals/descriptors":"kuDzl","../internals/has-own-property":"kL9Yw"}],"4qgKG":[function(require,module,exports) {
var hasOwn = require('../internals/has-own-property');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
module.exports = function(target, source, exceptions) {
    var keys = ownKeys(source);
    var defineProperty = definePropertyModule.f;
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
};

},{"../internals/has-own-property":"kL9Yw","../internals/own-keys":"dGiV1","../internals/object-get-own-property-descriptor":"hwpsT","../internals/object-define-property":"iKHmb"}],"dGiV1":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
var uncurryThis = require('../internals/function-uncurry-this');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');
var concat = uncurryThis([].concat);
// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
    var keys = getOwnPropertyNamesModule.f(anObject(it));
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};

},{"../internals/get-built-in":"hqegu","../internals/function-uncurry-this":"gBsQL","../internals/object-get-own-property-names":"38UqD","../internals/object-get-own-property-symbols":"3jR7g","../internals/an-object":"9unxM"}],"38UqD":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = enumBugKeys.concat('length', 'prototype');
// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/object-keys-internal":"lhvNb","../internals/enum-bug-keys":"cEKLg"}],"lhvNb":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var hasOwn = require('../internals/has-own-property');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');
var push = uncurryThis([].push);
module.exports = function(object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;
    for(key in O)!hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
    // Don't enum bug & hidden keys
    while(names.length > i)if (hasOwn(O, key = names[i++])) ~indexOf(result, key) || push(result, key);
    return result;
};

},{"../internals/function-uncurry-this":"gBsQL","../internals/has-own-property":"kL9Yw","../internals/to-indexed-object":"9N8sJ","../internals/array-includes":"cmRkV","../internals/hidden-keys":"8TVAY"}],"cmRkV":[function(require,module,exports) {
var toIndexedObject = require('../internals/to-indexed-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');
// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = lengthOfArrayLike(O);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare -- NaN check
        if (IS_INCLUDES && el != el) while(length > index){
            value = O[index++];
            // eslint-disable-next-line no-self-compare -- NaN check
            if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        }
        else for(; length > index; index++){
            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
    };
};
module.exports = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod(false)
};

},{"../internals/to-indexed-object":"9N8sJ","../internals/to-absolute-index":"bWCPe","../internals/length-of-array-like":"feyBo"}],"bWCPe":[function(require,module,exports) {
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');
var max = Math.max;
var min = Math.min;
// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function(index, length) {
    var integer = toIntegerOrInfinity(index);
    return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer-or-infinity":"7H3g3"}],"7H3g3":[function(require,module,exports) {
var ceil = Math.ceil;
var floor = Math.floor;
// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function(argument) {
    var number = +argument;
    // eslint-disable-next-line no-self-compare -- safe
    return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
};

},{}],"feyBo":[function(require,module,exports) {
var toLength = require('../internals/to-length');
// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function(obj) {
    return toLength(obj.length);
};

},{"../internals/to-length":"coWuj"}],"coWuj":[function(require,module,exports) {
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');
var min = Math.min;
// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function(argument) {
    return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer-or-infinity":"7H3g3"}],"cEKLg":[function(require,module,exports) {
// IE8- don't enum bug keys
module.exports = [
    'constructor',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toLocaleString',
    'toString',
    'valueOf'
];

},{}],"3jR7g":[function(require,module,exports) {
// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

},{}],"djqhI":[function(require,module,exports) {
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var replacement = /#|\.prototype\./;
var isForced = function(feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
};
var normalize = isForced.normalize = function(string) {
    return String(string).replace(replacement, '.').toLowerCase();
};
var data = isForced.data = {
};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';
module.exports = isForced;

},{"../internals/fails":"byxLb","../internals/is-callable":"41EnZ"}],"kiY2Q":[function(require,module,exports) {
var classof = require('../internals/classof-raw');
// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
    return classof(argument) == 'Array';
};

},{"../internals/classof-raw":"8F0bi"}],"9DQWQ":[function(require,module,exports) {
'use strict';
var toPropertyKey = require('../internals/to-property-key');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
module.exports = function(object, key, value) {
    var propertyKey = toPropertyKey(key);
    if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
    else object[propertyKey] = value;
};

},{"../internals/to-property-key":"99Lby","../internals/object-define-property":"iKHmb","../internals/create-property-descriptor":"5fdHA"}],"beybx":[function(require,module,exports) {
var arraySpeciesConstructor = require('../internals/array-species-constructor');
// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function(originalArray, length) {
    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

},{"../internals/array-species-constructor":"ipwOm"}],"ipwOm":[function(require,module,exports) {
var global = require('../internals/global');
var isArray = require('../internals/is-array');
var isConstructor = require('../internals/is-constructor');
var isObject = require('../internals/is-object');
var wellKnownSymbol = require('../internals/well-known-symbol');
var SPECIES = wellKnownSymbol('species');
var Array1 = global.Array;
// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function(originalArray) {
    var C;
    if (isArray(originalArray)) {
        C = originalArray.constructor;
        // cross-realm fallback
        if (isConstructor(C) && (C === Array1 || isArray(C.prototype))) C = undefined;
        else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
        }
    }
    return C === undefined ? Array1 : C;
};

},{"../internals/global":"a4GR8","../internals/is-array":"kiY2Q","../internals/is-constructor":"lmyue","../internals/is-object":"d60Kc","../internals/well-known-symbol":"6sZ59"}],"lmyue":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var classof = require('../internals/classof');
var getBuiltIn = require('../internals/get-built-in');
var inspectSource = require('../internals/inspect-source');
var noop = function() {
};
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
var isConstructorModern = function isConstructor(argument) {
    if (!isCallable(argument)) return false;
    try {
        construct(noop, empty, argument);
        return true;
    } catch (error) {
        return false;
    }
};
var isConstructorLegacy = function isConstructor1(argument) {
    if (!isCallable(argument)) return false;
    switch(classof(argument)){
        case 'AsyncFunction':
        case 'GeneratorFunction':
        case 'AsyncGeneratorFunction':
            return false;
    }
    try {
        // we can't check .prototype since constructors produced by .bind haven't it
        // `Function#toString` throws on some built-it function in some legacy engines
        // (for example, `DOMQuad` and similar in FF41-)
        return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
    } catch (error) {
        return true;
    }
};
isConstructorLegacy.sham = true;
// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function() {
    var called;
    return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
        called = true;
    }) || called;
}) ? isConstructorLegacy : isConstructorModern;

},{"../internals/function-uncurry-this":"gBsQL","../internals/fails":"byxLb","../internals/is-callable":"41EnZ","../internals/classof":"gO6DW","../internals/get-built-in":"hqegu","../internals/inspect-source":"yqC5G"}],"gO6DW":[function(require,module,exports) {
var global = require('../internals/global');
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var isCallable = require('../internals/is-callable');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var Object1 = global.Object;
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function() {
    return arguments;
}()) == 'Arguments';
// fallback for IE11 Script Access Denied error
var tryGet = function(it, key) {
    try {
        return it[key];
    } catch (error) {
    }
};
// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (tag = tryGet(O = Object1(it), TO_STRING_TAG)) == 'string' ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};

},{"../internals/global":"a4GR8","../internals/to-string-tag-support":"eaplU","../internals/is-callable":"41EnZ","../internals/classof-raw":"8F0bi","../internals/well-known-symbol":"6sZ59"}],"eaplU":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {
};
test[TO_STRING_TAG] = 'z';
module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":"6sZ59"}],"67F2b":[function(require,module,exports) {
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');
var SPECIES = wellKnownSymbol('species');
module.exports = function(METHOD_NAME) {
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/677
    return V8_VERSION >= 51 || !fails(function() {
        var array = [];
        var constructor = array.constructor = {
        };
        constructor[SPECIES] = function() {
            return {
                foo: 1
            };
        };
        return array[METHOD_NAME](Boolean).foo !== 1;
    });
};

},{"../internals/fails":"byxLb","../internals/well-known-symbol":"6sZ59","../internals/engine-v8-version":"8Ofbb"}],"bBRVN":[function(require,module,exports) {
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var redefine = require('../internals/redefine');
var toString = require('../internals/object-to-string');
// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) redefine(Object.prototype, 'toString', toString, {
    unsafe: true
});

},{"../internals/to-string-tag-support":"eaplU","../internals/redefine":"cwrrW","../internals/object-to-string":"eYll4"}],"eYll4":[function(require,module,exports) {
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');
// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? ({
}).toString : function toString() {
    return '[object ' + classof(this) + ']';
};

},{"../internals/to-string-tag-support":"eaplU","../internals/classof":"gO6DW"}],"h82Ta":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var apply = require('../internals/function-apply');
var call = require('../internals/function-call');
var uncurryThis = require('../internals/function-uncurry-this');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var fails = require('../internals/fails');
var hasOwn = require('../internals/has-own-property');
var isArray = require('../internals/is-array');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var isSymbol = require('../internals/is-symbol');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toIndexedObject = require('../internals/to-indexed-object');
var toPropertyKey = require('../internals/to-property-key');
var $toString = require('../internals/to-string');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var nativeObjectCreate = require('../internals/object-create');
var objectKeys = require('../internals/object-keys');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
var definePropertiesModule = require('../internals/object-define-properties');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var arraySlice = require('../internals/array-slice');
var redefine = require('../internals/redefine');
var shared = require('../internals/shared');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var uid = require('../internals/uid');
var wellKnownSymbol = require('../internals/well-known-symbol');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');
var $forEach = require('../internals/array-iteration').forEach;
var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var TypeError1 = global.TypeError;
var QObject = global.QObject;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push = uncurryThis([].push);
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function() {
    return nativeObjectCreate(nativeDefineProperty({
    }, 'a', {
        get: function() {
            return nativeDefineProperty(this, 'a', {
                value: 7
            }).a;
        }
    })).a != 7;
}) ? function(O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
    if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
    nativeDefineProperty(O, P, Attributes);
    if (ObjectPrototypeDescriptor && O !== ObjectPrototype) nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
} : nativeDefineProperty;
var wrap = function(tag, description) {
    var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
    setInternalState(symbol, {
        type: SYMBOL,
        tag: tag,
        description: description
    });
    if (!DESCRIPTORS) symbol.description = description;
    return symbol;
};
var $defineProperty = function defineProperty(O, P, Attributes) {
    if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject(O);
    var key = toPropertyKey(P);
    anObject(Attributes);
    if (hasOwn(AllSymbols, key)) {
        if (!Attributes.enumerable) {
            if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {
            }));
            O[HIDDEN][key] = true;
        } else {
            if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, {
                enumerable: createPropertyDescriptor(0, false)
            });
        }
        return setSymbolDescriptor(O, key, Attributes);
    }
    return nativeDefineProperty(O, key, Attributes);
};
var $defineProperties = function defineProperties(O, Properties) {
    anObject(O);
    var properties = toIndexedObject(Properties);
    var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
    $forEach(keys, function(key) {
        if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
    });
    return O;
};
var $create = function create(O, Properties) {
    return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};
var $propertyIsEnumerable = function propertyIsEnumerable(V) {
    var P = toPropertyKey(V);
    var enumerable = call(nativePropertyIsEnumerable, this, P);
    if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;
    return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
    var it = toIndexedObject(O);
    var key = toPropertyKey(P);
    if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;
    var descriptor = nativeGetOwnPropertyDescriptor(it, key);
    if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) descriptor.enumerable = true;
    return descriptor;
};
var $getOwnPropertyNames = function getOwnPropertyNames(O) {
    var names = nativeGetOwnPropertyNames(toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
        if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);
    });
    return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
        if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) push(result, AllSymbols[key]);
    });
    return result;
};
// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
    $Symbol = function Symbol1() {
        if (isPrototypeOf(SymbolPrototype, this)) throw TypeError1('Symbol is not a constructor');
        var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
        var tag = uid(description);
        var setter = function(value) {
            if (this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);
            if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };
        if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
            configurable: true,
            set: setter
        });
        return wrap(tag, description);
    };
    SymbolPrototype = $Symbol[PROTOTYPE];
    redefine(SymbolPrototype, 'toString', function toString() {
        return getInternalState(this).tag;
    });
    redefine($Symbol, 'withoutSetter', function(description) {
        return wrap(uid(description), description);
    });
    propertyIsEnumerableModule.f = $propertyIsEnumerable;
    definePropertyModule.f = $defineProperty;
    definePropertiesModule.f = $defineProperties;
    getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
    getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
    wrappedWellKnownSymbolModule.f = function(name) {
        return wrap(wellKnownSymbol(name), name);
    };
    if (DESCRIPTORS) {
        // https://github.com/tc39/proposal-Symbol-description
        nativeDefineProperty(SymbolPrototype, 'description', {
            configurable: true,
            get: function description() {
                return getInternalState(this).description;
            }
        });
        if (!IS_PURE) redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
            unsafe: true
        });
    }
}
$({
    global: true,
    wrap: true,
    forced: !NATIVE_SYMBOL,
    sham: !NATIVE_SYMBOL
}, {
    Symbol: $Symbol
});
$forEach(objectKeys(WellKnownSymbolsStore), function(name) {
    defineWellKnownSymbol(name);
});
$({
    target: SYMBOL,
    stat: true,
    forced: !NATIVE_SYMBOL
}, {
    // `Symbol.for` method
    // https://tc39.es/ecma262/#sec-symbol.for
    'for': function(key) {
        var string = $toString(key);
        if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
        var symbol = $Symbol(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
    },
    // `Symbol.keyFor` method
    // https://tc39.es/ecma262/#sec-symbol.keyfor
    keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError1(sym + ' is not a symbol');
        if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
    },
    useSetter: function() {
        USE_SETTER = true;
    },
    useSimple: function() {
        USE_SETTER = false;
    }
});
$({
    target: 'Object',
    stat: true,
    forced: !NATIVE_SYMBOL,
    sham: !DESCRIPTORS
}, {
    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    create: $create,
    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    defineProperty: $defineProperty,
    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    defineProperties: $defineProperties,
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});
$({
    target: 'Object',
    stat: true,
    forced: !NATIVE_SYMBOL
}, {
    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    getOwnPropertyNames: $getOwnPropertyNames,
    // `Object.getOwnPropertySymbols` method
    // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
    getOwnPropertySymbols: $getOwnPropertySymbols
});
// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({
    target: 'Object',
    stat: true,
    forced: fails(function() {
        getOwnPropertySymbolsModule.f(1);
    })
}, {
    getOwnPropertySymbols: function getOwnPropertySymbols1(it) {
        return getOwnPropertySymbolsModule.f(toObject(it));
    }
});
// `JSON.stringify` method behavior with symbols
// https://tc39.es/ecma262/#sec-json.stringify
if ($stringify) {
    var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
        var symbol = $Symbol();
        // MS Edge converts symbol values to JSON as {}
        return $stringify([
            symbol
        ]) != '[null]' || $stringify({
            a: symbol
        }) != '{}' || $stringify(Object(symbol)) != '{}';
    });
    $({
        target: 'JSON',
        stat: true,
        forced: FORCED_JSON_STRINGIFY
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        stringify: function stringify(it, replacer, space) {
            var args = arraySlice(arguments);
            var $replacer = replacer;
            if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
            if (!isArray(replacer)) replacer = function(key, value) {
                if (isCallable($replacer)) value = call($replacer, this, key, value);
                if (!isSymbol(value)) return value;
            };
            args[1] = replacer;
            return apply($stringify, null, args);
        }
    });
}
// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
if (!SymbolPrototype[TO_PRIMITIVE]) {
    var valueOf = SymbolPrototype.valueOf;
    // eslint-disable-next-line no-unused-vars -- required for .length
    redefine(SymbolPrototype, TO_PRIMITIVE, function(hint) {
        // TODO: improve hint logic
        return call(valueOf, this);
    });
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);
hiddenKeys[HIDDEN] = true;

},{"../internals/export":"2mZbc","../internals/global":"a4GR8","../internals/get-built-in":"hqegu","../internals/function-apply":"hikDN","../internals/function-call":"d0MId","../internals/function-uncurry-this":"gBsQL","../internals/is-pure":"dlbEd","../internals/descriptors":"kuDzl","../internals/native-symbol":"2gIhS","../internals/fails":"byxLb","../internals/has-own-property":"kL9Yw","../internals/is-array":"kiY2Q","../internals/is-callable":"41EnZ","../internals/is-object":"d60Kc","../internals/object-is-prototype-of":"gFfbX","../internals/is-symbol":"hfIC8","../internals/an-object":"9unxM","../internals/to-object":"ghTKi","../internals/to-indexed-object":"9N8sJ","../internals/to-property-key":"99Lby","../internals/to-string":"k0ZQF","../internals/create-property-descriptor":"5fdHA","../internals/object-create":"eYZeq","../internals/object-keys":"7so9x","../internals/object-get-own-property-names":"38UqD","../internals/object-get-own-property-names-external":"ivjog","../internals/object-get-own-property-symbols":"3jR7g","../internals/object-get-own-property-descriptor":"hwpsT","../internals/object-define-property":"iKHmb","../internals/object-define-properties":"4aS77","../internals/object-property-is-enumerable":"6JYDE","../internals/array-slice":"g46xA","../internals/redefine":"cwrrW","../internals/shared":"ic92G","../internals/shared-key":"65Tv5","../internals/hidden-keys":"8TVAY","../internals/uid":"9DssZ","../internals/well-known-symbol":"6sZ59","../internals/well-known-symbol-wrapped":"6xsru","../internals/define-well-known-symbol":"jDA2f","../internals/set-to-string-tag":"cFbSt","../internals/internal-state":"ceuiK","../internals/array-iteration":"ciNJ0"}],"hikDN":[function(require,module,exports) {
var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (bind ? call.bind(apply) : function() {
    return call.apply(apply, arguments);
});

},{}],"k0ZQF":[function(require,module,exports) {
var global = require('../internals/global');
var classof = require('../internals/classof');
var String1 = global.String;
module.exports = function(argument) {
    if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
    return String1(argument);
};

},{"../internals/global":"a4GR8","../internals/classof":"gO6DW"}],"eYZeq":[function(require,module,exports) {
/* global ActiveXObject -- old IE, WSH */ var anObject = require('../internals/an-object');
var definePropertiesModule = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');
var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');
var EmptyConstructor = function() {
};
var scriptTag = function(content) {
    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};
// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function(activeXDocument) {
    activeXDocument.write(scriptTag(''));
    activeXDocument.close();
    var temp = activeXDocument.parentWindow.Object;
    activeXDocument = null; // avoid memory leak
    return temp;
};
// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var JS = 'java' + SCRIPT + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe);
    // https://github.com/zloirock/core-js/issues/475
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag('document.F=Object'));
    iframeDocument.close();
    return iframeDocument.F;
};
// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function() {
    try {
        activeXDocument = new ActiveXObject('htmlfile');
    } catch (error) {
    }
    NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
     : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH
    var length = enumBugKeys.length;
    while(length--)delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    return NullProtoObject();
};
hiddenKeys[IE_PROTO] = true;
// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO] = O;
    } else result = NullProtoObject();
    return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};

},{"../internals/an-object":"9unxM","../internals/object-define-properties":"4aS77","../internals/enum-bug-keys":"cEKLg","../internals/hidden-keys":"8TVAY","../internals/html":"38cYd","../internals/document-create-element":"2WwO0","../internals/shared-key":"65Tv5"}],"4aS77":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var toIndexedObject = require('../internals/to-indexed-object');
var objectKeys = require('../internals/object-keys');
// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var props = toIndexedObject(Properties);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var index = 0;
    var key;
    while(length > index)definePropertyModule.f(O, key = keys[index++], props[key]);
    return O;
};

},{"../internals/descriptors":"kuDzl","../internals/v8-prototype-define-bug":"hBwa1","../internals/object-define-property":"iKHmb","../internals/an-object":"9unxM","../internals/to-indexed-object":"9N8sJ","../internals/object-keys":"7so9x"}],"7so9x":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');
// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
    return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/object-keys-internal":"lhvNb","../internals/enum-bug-keys":"cEKLg"}],"38cYd":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":"hqegu"}],"ivjog":[function(require,module,exports) {
/* eslint-disable es/no-object-getownpropertynames -- safe */ var classof = require('../internals/classof-raw');
var toIndexedObject = require('../internals/to-indexed-object');
var $getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var arraySlice = require('../internals/array-slice-simple');
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it) {
    try {
        return $getOwnPropertyNames(it);
    } catch (error) {
        return arraySlice(windowNames);
    }
};
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && classof(it) == 'Window' ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/classof-raw":"8F0bi","../internals/to-indexed-object":"9N8sJ","../internals/object-get-own-property-names":"38UqD","../internals/array-slice-simple":"cgL4j"}],"cgL4j":[function(require,module,exports) {
var global = require('../internals/global');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var createProperty = require('../internals/create-property');
var Array1 = global.Array;
var max = Math.max;
module.exports = function(O, start, end) {
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = Array1(max(fin - k, 0));
    for(var n = 0; k < fin; k++, n++)createProperty(result, n, O[k]);
    result.length = n;
    return result;
};

},{"../internals/global":"a4GR8","../internals/to-absolute-index":"bWCPe","../internals/length-of-array-like":"feyBo","../internals/create-property":"9DQWQ"}],"g46xA":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
module.exports = uncurryThis([].slice);

},{"../internals/function-uncurry-this":"gBsQL"}],"6xsru":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
exports.f = wellKnownSymbol;

},{"../internals/well-known-symbol":"6sZ59"}],"jDA2f":[function(require,module,exports) {
var path = require('../internals/path');
var hasOwn = require('../internals/has-own-property');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineProperty = require('../internals/object-define-property').f;
module.exports = function(NAME) {
    var Symbol1 = path.Symbol || (path.Symbol = {
    });
    if (!hasOwn(Symbol1, NAME)) defineProperty(Symbol1, NAME, {
        value: wrappedWellKnownSymbolModule.f(NAME)
    });
};

},{"../internals/path":"cV4BF","../internals/has-own-property":"kL9Yw","../internals/well-known-symbol-wrapped":"6xsru","../internals/object-define-property":"iKHmb"}],"cV4BF":[function(require,module,exports) {
var global = require('../internals/global');
module.exports = global;

},{"../internals/global":"a4GR8"}],"cFbSt":[function(require,module,exports) {
var defineProperty = require('../internals/object-define-property').f;
var hasOwn = require('../internals/has-own-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
module.exports = function(target, TAG, STATIC) {
    if (target && !STATIC) target = target.prototype;
    if (target && !hasOwn(target, TO_STRING_TAG)) defineProperty(target, TO_STRING_TAG, {
        configurable: true,
        value: TAG
    });
};

},{"../internals/object-define-property":"iKHmb","../internals/has-own-property":"kL9Yw","../internals/well-known-symbol":"6sZ59"}],"ciNJ0":[function(require,module,exports) {
var bind = require('../internals/function-bind-context');
var uncurryThis = require('../internals/function-uncurry-this');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var arraySpeciesCreate = require('../internals/array-species-create');
var push = uncurryThis([].push);
// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_REJECT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that, specificCreate) {
        var O = toObject($this);
        var self = IndexedObject(O);
        var boundFunction = bind(callbackfn, that);
        var length = lengthOfArrayLike(self);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
        var value, result;
        for(; length > index; index++)if (NO_HOLES || index in self) {
            value = self[index];
            result = boundFunction(value, index, O);
            if (TYPE) {
                if (IS_MAP) target[index] = result; // map
                else if (result) switch(TYPE){
                    case 3:
                        return true; // some
                    case 5:
                        return value; // find
                    case 6:
                        return index; // findIndex
                    case 2:
                        push(target, value); // filter
                }
                else switch(TYPE){
                    case 4:
                        return false; // every
                    case 7:
                        push(target, value); // filterReject
                }
            }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
};
module.exports = {
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    forEach: createMethod(0),
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    map: createMethod(1),
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    filter: createMethod(2),
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    some: createMethod(3),
    // `Array.prototype.every` method
    // https://tc39.es/ecma262/#sec-array.prototype.every
    every: createMethod(4),
    // `Array.prototype.find` method
    // https://tc39.es/ecma262/#sec-array.prototype.find
    find: createMethod(5),
    // `Array.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod(6),
    // `Array.prototype.filterReject` method
    // https://github.com/tc39/proposal-array-filtering
    filterReject: createMethod(7)
};

},{"../internals/function-bind-context":"1epb9","../internals/function-uncurry-this":"gBsQL","../internals/indexed-object":"1hg9G","../internals/to-object":"ghTKi","../internals/length-of-array-like":"feyBo","../internals/array-species-create":"beybx"}],"1epb9":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var aCallable = require('../internals/a-callable');
var bind = uncurryThis(uncurryThis.bind);
// optional / simple context binding
module.exports = function(fn, that) {
    aCallable(fn);
    return that === undefined ? fn : bind ? bind(fn, that) : function() {
        return fn.apply(that, arguments);
    };
};

},{"../internals/function-uncurry-this":"gBsQL","../internals/a-callable":"jnvBr"}],"4gQKh":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.asyncIterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

},{"../internals/define-well-known-symbol":"jDA2f"}],"k6qTH":[function(require,module,exports) {
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var uncurryThis = require('../internals/function-uncurry-this');
var hasOwn = require('../internals/has-own-property');
var isCallable = require('../internals/is-callable');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var toString = require('../internals/to-string');
var defineProperty = require('../internals/object-define-property').f;
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var NativeSymbol = global.Symbol;
var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;
if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) || // Safari 12 bug
NativeSymbol().description !== undefined)) {
    var EmptyStringDescriptionStore = {
    };
    // wrap Symbol constructor for correct work with undefined description
    var SymbolWrapper = function Symbol1() {
        var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);
        var result = isPrototypeOf(SymbolPrototype, this) ? new NativeSymbol(description) : description === undefined ? NativeSymbol() : NativeSymbol(description);
        if (description === '') EmptyStringDescriptionStore[result] = true;
        return result;
    };
    copyConstructorProperties(SymbolWrapper, NativeSymbol);
    SymbolWrapper.prototype = SymbolPrototype;
    SymbolPrototype.constructor = SymbolWrapper;
    var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
    var symbolToString = uncurryThis(SymbolPrototype.toString);
    var symbolValueOf = uncurryThis(SymbolPrototype.valueOf);
    var regexp = /^Symbol\((.*)\)[^)]+$/;
    var replace = uncurryThis(''.replace);
    var stringSlice = uncurryThis(''.slice);
    defineProperty(SymbolPrototype, 'description', {
        configurable: true,
        get: function description() {
            var symbol = symbolValueOf(this);
            var string = symbolToString(symbol);
            if (hasOwn(EmptyStringDescriptionStore, symbol)) return '';
            var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, '$1');
            return desc === '' ? undefined : desc;
        }
    });
    $({
        global: true,
        forced: true
    }, {
        Symbol: SymbolWrapper
    });
}

},{"../internals/export":"2mZbc","../internals/descriptors":"kuDzl","../internals/global":"a4GR8","../internals/function-uncurry-this":"gBsQL","../internals/has-own-property":"kL9Yw","../internals/is-callable":"41EnZ","../internals/object-is-prototype-of":"gFfbX","../internals/to-string":"k0ZQF","../internals/object-define-property":"iKHmb","../internals/copy-constructor-properties":"4qgKG"}],"6rypY":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.hasInstance` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

},{"../internals/define-well-known-symbol":"jDA2f"}],"8cPMJ":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

},{"../internals/define-well-known-symbol":"jDA2f"}],"54Wkt":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

},{"../internals/define-well-known-symbol":"jDA2f"}],"fci7y":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.match` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

},{"../internals/define-well-known-symbol":"jDA2f"}],"LEHqP":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.matchAll` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.matchall
defineWellKnownSymbol('matchAll');

},{"../internals/define-well-known-symbol":"jDA2f"}],"emMne":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.replace` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

},{"../internals/define-well-known-symbol":"jDA2f"}],"1pJ8K":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.search` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

},{"../internals/define-well-known-symbol":"jDA2f"}],"aUPm6":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.species` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

},{"../internals/define-well-known-symbol":"jDA2f"}],"h3StJ":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.split` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

},{"../internals/define-well-known-symbol":"jDA2f"}],"jiMen":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.toPrimitive` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

},{"../internals/define-well-known-symbol":"jDA2f"}],"2Dw1B":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.toStringTag` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

},{"../internals/define-well-known-symbol":"jDA2f"}],"dad1W":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.unscopables` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

},{"../internals/define-well-known-symbol":"jDA2f"}],"6YcXi":[function(require,module,exports) {
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');
// JSON[@@toStringTag] property
// https://tc39.es/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

},{"../internals/global":"a4GR8","../internals/set-to-string-tag":"cFbSt"}],"96Wzg":[function(require,module,exports) {
var setToStringTag = require('../internals/set-to-string-tag');
// Math[@@toStringTag] property
// https://tc39.es/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);

},{"../internals/set-to-string-tag":"cFbSt"}],"99fpE":[function(require,module,exports) {
var $ = require('../internals/export');
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');
$({
    global: true
}, {
    Reflect: {
    }
});
// Reflect[@@toStringTag] property
// https://tc39.es/ecma262/#sec-reflect-@@tostringtag
setToStringTag(global.Reflect, 'Reflect', true);

},{"../internals/export":"2mZbc","../internals/global":"a4GR8","../internals/set-to-string-tag":"cFbSt"}],"gC8gE":[function(require,module,exports) {
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var DOMTokenListPrototype = require('../internals/dom-token-list-prototype');
var ArrayIteratorMethods = require('../modules/es.array.iterator');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;
var handlePrototype = function(CollectionPrototype, COLLECTION_NAME) {
    if (CollectionPrototype) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
            createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
        } catch (error) {
            CollectionPrototype[ITERATOR] = ArrayValues;
        }
        if (!CollectionPrototype[TO_STRING_TAG]) createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
        if (DOMIterables[COLLECTION_NAME]) for(var METHOD_NAME in ArrayIteratorMethods){
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
                createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
            } catch (error) {
                CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
            }
        }
    }
};
for(var COLLECTION_NAME in DOMIterables)handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

},{"../internals/global":"a4GR8","../internals/dom-iterables":"2Umkc","../internals/dom-token-list-prototype":"gLY6L","../modules/es.array.iterator":"8YPvt","../internals/create-non-enumerable-property":"73EkF","../internals/well-known-symbol":"6sZ59"}],"2Umkc":[function(require,module,exports) {
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
};

},{}],"gLY6L":[function(require,module,exports) {
// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = require('../internals/document-create-element');
var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;
module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

},{"../internals/document-create-element":"2WwO0"}],"8YPvt":[function(require,module,exports) {
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineProperty = require('../internals/object-define-property').f;
var defineIterator = require('../internals/define-iterator');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');
var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function(iterated, kind) {
    setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        index: 0,
        kind: kind // kind
    });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function() {
    var state = getInternalState(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
        state.target = undefined;
        return {
            value: undefined,
            done: true
        };
    }
    if (kind == 'keys') return {
        value: index,
        done: false
    };
    if (kind == 'values') return {
        value: target[index],
        done: false
    };
    return {
        value: [
            index,
            target[index]
        ],
        done: false
    };
}, 'values');
// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
    defineProperty(values, 'name', {
        value: 'values'
    });
} catch (error) {
}

},{"../internals/to-indexed-object":"9N8sJ","../internals/add-to-unscopables":"d20N8","../internals/iterators":"gp9Ft","../internals/internal-state":"ceuiK","../internals/object-define-property":"iKHmb","../internals/define-iterator":"6ZPeX","../internals/is-pure":"dlbEd","../internals/descriptors":"kuDzl"}],"d20N8":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var create = require('../internals/object-create');
var definePropertyModule = require('../internals/object-define-property');
var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;
// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
});
// add a key to Array.prototype[@@unscopables]
module.exports = function(key) {
    ArrayPrototype[UNSCOPABLES][key] = true;
};

},{"../internals/well-known-symbol":"6sZ59","../internals/object-create":"eYZeq","../internals/object-define-property":"iKHmb"}],"gp9Ft":[function(require,module,exports) {
module.exports = {
};

},{}],"6ZPeX":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var IS_PURE = require('../internals/is-pure');
var FunctionName = require('../internals/function-name');
var isCallable = require('../internals/is-callable');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');
var IteratorsCore = require('../internals/iterators-core');
var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';
var returnThis = function() {
    return this;
};
module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);
    var getIterationMethod = function(KIND) {
        if (KIND === DEFAULT && defaultIterator) return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
        switch(KIND){
            case KEYS:
                return function keys() {
                    return new IteratorConstructor(this, KIND);
                };
            case VALUES:
                return function values() {
                    return new IteratorConstructor(this, KIND);
                };
            case ENTRIES:
                return function entries() {
                    return new IteratorConstructor(this, KIND);
                };
        }
        return function() {
            return new IteratorConstructor(this);
        };
    };
    var TO_STRING_TAG = NAME + ' Iterator';
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;
    // fix native
    if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
        if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                if (setPrototypeOf) setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
            // Set @@toStringTag to native iterators
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
        }
    }
    // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
    if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
        else {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
                return call(nativeIterator, this);
            };
        }
    }
    // export additional methods
    if (DEFAULT) {
        methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
        };
        if (FORCED) for(KEY in methods)if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) redefine(IterablePrototype, KEY, methods[KEY]);
        else $({
            target: NAME,
            proto: true,
            forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
        }, methods);
    }
    // define iterator
    if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) redefine(IterablePrototype, ITERATOR, defaultIterator, {
        name: DEFAULT
    });
    Iterators[NAME] = defaultIterator;
    return methods;
};

},{"../internals/export":"2mZbc","../internals/function-call":"d0MId","../internals/is-pure":"dlbEd","../internals/function-name":"fErEm","../internals/is-callable":"41EnZ","../internals/create-iterator-constructor":"biz26","../internals/object-get-prototype-of":"4Xd6L","../internals/object-set-prototype-of":"k1Sl0","../internals/set-to-string-tag":"cFbSt","../internals/create-non-enumerable-property":"73EkF","../internals/redefine":"cwrrW","../internals/well-known-symbol":"6sZ59","../internals/iterators":"gp9Ft","../internals/iterators-core":"eCtuD"}],"biz26":[function(require,module,exports) {
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');
var returnThis = function() {
    return this;
};
module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
    var TO_STRING_TAG = NAME + ' Iterator';
    IteratorConstructor.prototype = create(IteratorPrototype, {
        next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next)
    });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
    Iterators[TO_STRING_TAG] = returnThis;
    return IteratorConstructor;
};

},{"../internals/iterators-core":"eCtuD","../internals/object-create":"eYZeq","../internals/create-property-descriptor":"5fdHA","../internals/set-to-string-tag":"cFbSt","../internals/iterators":"gp9Ft"}],"eCtuD":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var create = require('../internals/object-create');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var redefine = require('../internals/redefine');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;
// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
/* eslint-disable es/no-array-prototype-keys -- safe */ if ([].keys) {
    arrayIterator = [].keys();
    // Safari 8 has buggy iterators w/o `next`
    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
    else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
}
var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function() {
    var test = {
    };
    // FF44- legacy iterators case
    return IteratorPrototype[ITERATOR].call(test) !== test;
});
if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {
};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);
// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) redefine(IteratorPrototype, ITERATOR, function() {
    return this;
});
module.exports = {
    IteratorPrototype: IteratorPrototype,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/fails":"byxLb","../internals/is-callable":"41EnZ","../internals/object-create":"eYZeq","../internals/object-get-prototype-of":"4Xd6L","../internals/redefine":"cwrrW","../internals/well-known-symbol":"6sZ59","../internals/is-pure":"dlbEd"}],"4Xd6L":[function(require,module,exports) {
var global = require('../internals/global');
var hasOwn = require('../internals/has-own-property');
var isCallable = require('../internals/is-callable');
var toObject = require('../internals/to-object');
var sharedKey = require('../internals/shared-key');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');
var IE_PROTO = sharedKey('IE_PROTO');
var Object1 = global.Object;
var ObjectPrototype = Object1.prototype;
// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object1.getPrototypeOf : function(O) {
    var object = toObject(O);
    if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
    var constructor = object.constructor;
    if (isCallable(constructor) && object instanceof constructor) return constructor.prototype;
    return object instanceof Object1 ? ObjectPrototype : null;
};

},{"../internals/global":"a4GR8","../internals/has-own-property":"kL9Yw","../internals/is-callable":"41EnZ","../internals/to-object":"ghTKi","../internals/shared-key":"65Tv5","../internals/correct-prototype-getter":"dMqx3"}],"dMqx3":[function(require,module,exports) {
var fails = require('../internals/fails');
module.exports = !fails(function() {
    function F() {
    }
    F.prototype.constructor = null;
    // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
    return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":"byxLb"}],"k1Sl0":[function(require,module,exports) {
/* eslint-disable no-proto -- safe */ var uncurryThis = require('../internals/function-uncurry-this');
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');
// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {
} ? (function() {
    var CORRECT_SETTER = false;
    var test = {
    };
    var setter;
    try {
        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
        setter(test, []);
        CORRECT_SETTER = test instanceof Array;
    } catch (error) {
    }
    return function setPrototypeOf(O, proto) {
        anObject(O);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER) setter(O, proto);
        else O.__proto__ = proto;
        return O;
    };
})() : undefined);

},{"../internals/function-uncurry-this":"gBsQL","../internals/an-object":"9unxM","../internals/a-possible-prototype":"4dKE2"}],"4dKE2":[function(require,module,exports) {
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');
var String1 = global.String;
var TypeError1 = global.TypeError;
module.exports = function(argument) {
    if (typeof argument == 'object' || isCallable(argument)) return argument;
    throw TypeError1("Can't set " + String1(argument) + ' as a prototype');
};

},{"../internals/global":"a4GR8","../internals/is-callable":"41EnZ"}],"gibPN":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.asyncDispose` well-known symbol
// https://github.com/tc39/proposal-using-statement
defineWellKnownSymbol('asyncDispose');

},{"../internals/define-well-known-symbol":"jDA2f"}],"8PCoW":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.dispose` well-known symbol
// https://github.com/tc39/proposal-using-statement
defineWellKnownSymbol('dispose');

},{"../internals/define-well-known-symbol":"jDA2f"}],"ejple":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.matcher` well-known symbol
// https://github.com/tc39/proposal-pattern-matching
defineWellKnownSymbol('matcher');

},{"../internals/define-well-known-symbol":"jDA2f"}],"8us9B":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.metadata` well-known symbol
// https://github.com/tc39/proposal-decorators
defineWellKnownSymbol('metadata');

},{"../internals/define-well-known-symbol":"jDA2f"}],"c37jl":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.observable` well-known symbol
// https://github.com/tc39/proposal-observable
defineWellKnownSymbol('observable');

},{"../internals/define-well-known-symbol":"jDA2f"}],"gineQ":[function(require,module,exports) {
// TODO: remove from `core-js@4`
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
// `Symbol.patternMatch` well-known symbol
// https://github.com/tc39/proposal-pattern-matching
defineWellKnownSymbol('patternMatch');

},{"../internals/define-well-known-symbol":"jDA2f"}],"2n22P":[function(require,module,exports) {
// TODO: remove from `core-js@4`
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
defineWellKnownSymbol('replaceAll');

},{"../internals/define-well-known-symbol":"jDA2f"}],"65ZxO":[function(require,module,exports) {
var parent = require('../../actual/array/from');
module.exports = parent;

},{"../../actual/array/from":"ndKut"}],"ndKut":[function(require,module,exports) {
var parent = require('../../stable/array/from');
module.exports = parent;

},{"../../stable/array/from":"12twv"}],"12twv":[function(require,module,exports) {
var parent = require('../../es/array/from');
module.exports = parent;

},{"../../es/array/from":"ecTs0"}],"ecTs0":[function(require,module,exports) {
require('../../modules/es.string.iterator');
require('../../modules/es.array.from');
var path = require('../../internals/path');
module.exports = path.Array.from;

},{"../../modules/es.string.iterator":"79oCt","../../modules/es.array.from":"fUGae","../../internals/path":"cV4BF"}],"79oCt":[function(require,module,exports) {
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
var toString = require('../internals/to-string');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');
var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function(iterated) {
    setInternalState(this, {
        type: STRING_ITERATOR,
        string: toString(iterated),
        index: 0
    });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
    var state = getInternalState(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length) return {
        value: undefined,
        done: true
    };
    point = charAt(string, index);
    state.index += point.length;
    return {
        value: point,
        done: false
    };
});

},{"../internals/string-multibyte":"dPnMz","../internals/to-string":"k0ZQF","../internals/internal-state":"ceuiK","../internals/define-iterator":"6ZPeX"}],"dPnMz":[function(require,module,exports) {
var uncurryThis = require('../internals/function-uncurry-this');
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');
var toString = require('../internals/to-string');
var requireObjectCoercible = require('../internals/require-object-coercible');
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);
var createMethod = function(CONVERT_TO_STRING) {
    return function($this, pos) {
        var S = toString(requireObjectCoercible($this));
        var position = toIntegerOrInfinity(pos);
        var size = S.length;
        var first, second;
        if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
        first = charCodeAt(S, position);
        return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
    };
};
module.exports = {
    // `String.prototype.codePointAt` method
    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod(true)
};

},{"../internals/function-uncurry-this":"gBsQL","../internals/to-integer-or-infinity":"7H3g3","../internals/to-string":"k0ZQF","../internals/require-object-coercible":"1XURO"}],"fUGae":[function(require,module,exports) {
var $ = require('../internals/export');
var from = require('../internals/array-from');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
    // eslint-disable-next-line es/no-array-from -- required for testing
    Array.from(iterable);
});
// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({
    target: 'Array',
    stat: true,
    forced: INCORRECT_ITERATION
}, {
    from: from
});

},{"../internals/export":"2mZbc","../internals/array-from":"hkJ4P","../internals/check-correctness-of-iteration":"lO6Bq"}],"hkJ4P":[function(require,module,exports) {
'use strict';
var global = require('../internals/global');
var bind = require('../internals/function-bind-context');
var call = require('../internals/function-call');
var toObject = require('../internals/to-object');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var isConstructor = require('../internals/is-constructor');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var createProperty = require('../internals/create-property');
var getIterator = require('../internals/get-iterator');
var getIteratorMethod = require('../internals/get-iterator-method');
var Array1 = global.Array;
// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */ ) {
    var O = toObject(arrayLike);
    var IS_CONSTRUCTOR = isConstructor(this);
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
    var iteratorMethod = getIteratorMethod(O);
    var index = 0;
    var length, result, step, iterator, next, value;
    // if the target is not iterable or it's an array with the default iterator - use a simple case
    if (iteratorMethod && !(this == Array1 && isArrayIteratorMethod(iteratorMethod))) {
        iterator = getIterator(O, iteratorMethod);
        next = iterator.next;
        result = IS_CONSTRUCTOR ? new this() : [];
        for(; !(step = call(next, iterator)).done; index++){
            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [
                step.value,
                index
            ], true) : step.value;
            createProperty(result, index, value);
        }
    } else {
        length = lengthOfArrayLike(O);
        result = IS_CONSTRUCTOR ? new this(length) : Array1(length);
        for(; length > index; index++){
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
        }
    }
    result.length = index;
    return result;
};

},{"../internals/global":"a4GR8","../internals/function-bind-context":"1epb9","../internals/function-call":"d0MId","../internals/to-object":"ghTKi","../internals/call-with-safe-iteration-closing":"cNS8J","../internals/is-array-iterator-method":"fEVgY","../internals/is-constructor":"lmyue","../internals/length-of-array-like":"feyBo","../internals/create-property":"9DQWQ","../internals/get-iterator":"erkff","../internals/get-iterator-method":"btrxT"}],"cNS8J":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var iteratorClose = require('../internals/iterator-close');
// call something on iterator step with safe closing on error
module.exports = function(iterator, fn, value, ENTRIES) {
    try {
        return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (error) {
        iteratorClose(iterator, 'throw', error);
    }
};

},{"../internals/an-object":"9unxM","../internals/iterator-close":"ljRDT"}],"ljRDT":[function(require,module,exports) {
var call = require('../internals/function-call');
var anObject = require('../internals/an-object');
var getMethod = require('../internals/get-method');
module.exports = function(iterator, kind, value) {
    var innerResult, innerError;
    anObject(iterator);
    try {
        innerResult = getMethod(iterator, 'return');
        if (!innerResult) {
            if (kind === 'throw') throw value;
            return value;
        }
        innerResult = call(innerResult, iterator);
    } catch (error) {
        innerError = true;
        innerResult = error;
    }
    if (kind === 'throw') throw value;
    if (innerError) throw innerResult;
    anObject(innerResult);
    return value;
};

},{"../internals/function-call":"d0MId","../internals/an-object":"9unxM","../internals/get-method":"8DyNd"}],"fEVgY":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');
var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;
// check on default Array iterator
module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/well-known-symbol":"6sZ59","../internals/iterators":"gp9Ft"}],"erkff":[function(require,module,exports) {
var global = require('../internals/global');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var anObject = require('../internals/an-object');
var tryToString = require('../internals/try-to-string');
var getIteratorMethod = require('../internals/get-iterator-method');
var TypeError1 = global.TypeError;
module.exports = function(argument, usingIterator) {
    var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
    if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
    throw TypeError1(tryToString(argument) + ' is not iterable');
};

},{"../internals/global":"a4GR8","../internals/function-call":"d0MId","../internals/a-callable":"jnvBr","../internals/an-object":"9unxM","../internals/try-to-string":"gQsq2","../internals/get-iterator-method":"btrxT"}],"btrxT":[function(require,module,exports) {
var classof = require('../internals/classof');
var getMethod = require('../internals/get-method');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
module.exports = function(it) {
    if (it != undefined) return getMethod(it, ITERATOR) || getMethod(it, '@@iterator') || Iterators[classof(it)];
};

},{"../internals/classof":"gO6DW","../internals/get-method":"8DyNd","../internals/iterators":"gp9Ft","../internals/well-known-symbol":"6sZ59"}],"lO6Bq":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;
try {
    var called = 0;
    var iteratorWithReturn = {
        next: function() {
            return {
                done: !!called++
            };
        },
        'return': function() {
            SAFE_CLOSING = true;
        }
    };
    iteratorWithReturn[ITERATOR] = function() {
        return this;
    };
    // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
    Array.from(iteratorWithReturn, function() {
        throw 2;
    });
} catch (error) {
}
module.exports = function(exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
    var ITERATION_SUPPORT = false;
    try {
        var object = {
        };
        object[ITERATOR] = function() {
            return {
                next: function() {
                    return {
                        done: ITERATION_SUPPORT = true
                    };
                }
            };
        };
        exec(object);
    } catch (error) {
    }
    return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":"6sZ59"}],"gkWJK":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"uMwNA"}],"uMwNA":[function(require,module,exports) {
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix1, key) {
        return prefix1 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix1) {
            isUnitlessNumber[prefixKey(prefix1, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies1 = eventRegistry.registrationNameDependencies, possibleRegistrationNames1 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies1.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames1.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames1[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes1 = {
        };
        prefixes1[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes1['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes1['Moz' + styleProp] = 'moz' + eventName;
        return prefixes1;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set1, subset) {
        return (set1 & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set1, subset) {
        return set1 & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root1, offset) {
        var node = getLeafNode(root1);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root1 = rootContainerInstance.documentElement;
                namespace = root1 ? root1.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has1 = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has1(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root1, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root1, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root1, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root1.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root1, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root1, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options1) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options1);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current2 = workInProgress.alternate;
        if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, lanes) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    function getIsHydrating() {
        return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, lanes) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current3.lanes = removeLanes(current3.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current4.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root1, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root1.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root1 = getWorkInProgressRoot();
        if (!(root1 !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root1, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root1, root1.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } catch (error4) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error4;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root1, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderLanes1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderLanes1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderLanes1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateLanes, renderLanes1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current4.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes1)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes1, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current4.lanes;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1);
    }
    function updateOffscreenComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current4 !== null ? current4.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes1);
            } else if (!includesSomeLane(renderLanes1, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes1);
                } else nextBaseLanes = renderLanes1;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes1;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes1); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes1;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderLanes1) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderLanes1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderLanes1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root1.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderLanes1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current4, workInProgress);
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes1) {
        return {
            baseLanes: renderLanes1
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes1) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes1)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress, renderLanes1) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current4 !== null) {
            var suspenseState = current4.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current4, renderLanes1) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current4.childLanes, renderLanes1);
    }
    function updateSuspenseComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current4 === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes1);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes1);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current4.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes1);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren3, renderLanes1);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes1);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current4.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes1);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren5, renderLanes1);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes1, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current4, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current4, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current4, workInProgress, primaryChildren, renderLanes1) {
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes1;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current4, workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes1) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes1);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes1);
        scheduleWorkOnParentPath(fiber.return, renderLanes1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderLanes1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current4, workInProgress, renderLanes1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderLanes1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1) {
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes1, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderLanes1) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes1, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes1, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderLanes1);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current4, workInProgress, renderLanes1);
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderLanes1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateLanes, renderLanes1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderLanes1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderLanes1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderLanes1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderLanes1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderLanes1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderLanes1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderLanes1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderLanes1);
            case Mode:
                return updateMode(current4, workInProgress, renderLanes1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderLanes1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderLanes1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderLanes1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderLanes1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current4, workInProgress, renderLanes1);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current4, workInProgress, renderLanes1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderLanes1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes1; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current4 === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes1 !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current4 !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current4.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error4 = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error4); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error4 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root1, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root1 = finishedWork.stateNode;
                    clearContainer(root1.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current4 === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime1 = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime1, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current4, effect);
                                else safelyCallDestroy(current4, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root2;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4);
        var alternate = current4.alternate;
        detachFiberMutation(current4);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current5, finishedWork) {
        if (current5 !== null) {
            var oldState = current5.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root2, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root2);
            } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root2
                ]);
                else rootsWithPendingDiscreteUpdates.add(root2);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root2;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root3, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root3) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root3.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root3, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root3.hydrate) {
                    root3.hydrate = false;
                    clearContainer(root3.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root3);
        return null;
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root3);
                break;
            case RootSuspended:
                markRootSuspended$1(root3, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root3, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root3.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root3, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root3);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root3);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root3);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root3, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
            }
        } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root3, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root3.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root3, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root3) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root3.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current5, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current5, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root3, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) return null;
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root3.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) rootsWithPendingDiscreteUpdates.delete(root3);
        }
        if (root3 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root3.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root3.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root3.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root3.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root3, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root3 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current6 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current6, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root3, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root3, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root3, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current8 = nextEffect.alternate;
                commitLifeCycles(root3, current8, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error6 = clearCaughtError();
                    captureCommitPhaseError(fiber, error6);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root3.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root3, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error7) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error7;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error7) {
        var errorInfo = createCapturedValue(error7, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error7) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error7);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error7);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error7, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root3 !== null) {
                        markRootUpdated(root3, SyncLane, eventTime);
                        ensureRootIsScheduled(root3, eventTime);
                        schedulePendingInteractions(root3, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error7, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root4, wakeable, pingedLanes) {
        var pingCache = root4.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root4, pingedLanes);
        if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root4, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root4, eventTime);
        schedulePendingInteractions(root4, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root4, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root4.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root4, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root4.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root4, lane) {
        scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root4, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root4.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error7) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error7;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root4, committedLanes) {
        var remainingLanesAfterCommit = root4.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
            }
        } catch (error7) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error7;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root4.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error7) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error7;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root4, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root4, element) {
        if (root4.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root4, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root4, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            // DEV-only fields
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.flags = NoFlags; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childLanes = current9.childLanes;
        workInProgress1.lanes = current9.lanes;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderLanes1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.flags &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childLanes = NoLanes;
            workInProgress1.lanes = renderLanes1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            workInProgress1.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childLanes = current9.childLanes;
            workInProgress1.lanes = current9.lanes;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root4 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root4.current = uninitializedFiber;
        uninitializedFiber.stateNode = root4;
        initializeUpdateQueue(uninitializedFiber);
        return root4;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root4, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root4.mutableSourceEagerHydrationData == null) root4.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root4.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index1) {
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index1 + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index1) {
        var oldKey = oldPath[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === oldPath.length) {
            var newKey = newPath[index1]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index1 + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index1, value) {
        if (index1 >= path.length) return value;
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index1 + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        return currentHook1;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options1) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options1);
    }
    function ReactDOMBlockingRoot(container, tag, options1) {
        this._internalRoot = createRootImpl(container, tag, options1);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root4 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root4.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root4.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root4, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root4 = this._internalRoot;
        var container = root4.containerInfo;
        updateContainer(null, root4, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options1) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options1 != null && options1.hydrate === true;
        var hydrationCallbacks = options1 != null && options1.hydrationOptions || null;
        var mutableSources = options1 != null && options1.hydrationOptions != null && options1.hydrationOptions.mutableSources || null;
        var root4 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root4.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root4, mutableSource);
        }
        return root4;
    }
    function createLegacyRoot(container, options1) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options1);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        var fiberRoot;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"6TuXu","object-assign":"jzTFF","scheduler":"lS3J3","scheduler/tracing":"aEthe"}],"lS3J3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"9ljDM"}],"9ljDM":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"aEthe":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"jlVvF"}],"jlVvF":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"gKuGK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _visData = require("vis-data");
var _visNetwork = require("vis-network");
var _lodashEs = require("lodash-es");
var _visNetworkCss = require("vis-network/styles/vis-network.css");
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var _excluded = [
    "graph",
    "events",
    "getNetwork",
    "options"
];
/**
 * Keeps the value the same permanently.
 * Useful over refs especially in instances where the function creation variant is used
 */ function useSealedState(value) {
    var _useState = _react.useState(value), state = _useState[0];
    return state;
}
/**
 * https://github.com/crubier/react-graph-vis/commit/68bf2e27b2046d6c0bb8b334c2cf974d23443264
 */ var diff = function diff1(current, next, field) {
    if (field === void 0) field = 'id';
    var nextIds = new Set(next.map(function(item) {
        return item[field];
    }));
    var removed = current.filter(function(item) {
        return !nextIds.has(item[field]);
    });
    var unchanged = _lodashEs.intersectionWith(next, current, _lodashEs.isEqual);
    var updated = _lodashEs.differenceWith(_lodashEs.intersectionWith(next, current, function(a, b) {
        return a[field] === b[field];
    }), unchanged, _lodashEs.isEqual);
    var added = _lodashEs.differenceWith(_lodashEs.differenceWith(next, current, _lodashEs.isEqual), updated, _lodashEs.isEqual);
    return {
        removed: removed,
        unchanged: unchanged,
        updated: updated,
        added: added
    };
};
var defaultOptions = {
    physics: {
        stabilization: false
    },
    autoResize: false,
    edges: {
        smooth: false,
        color: '#000000',
        width: 0.5,
        arrows: {
            to: {
                enabled: true,
                scaleFactor: 0.5
            }
        }
    }
};
function useResizeObserver(ref, callback) {
    _react.useEffect(function() {
        // Create an observer instance linked to the callback function
        if (ref.current) {
            var observer = new ResizeObserver(callback); // Start observing the target node for configured mutations
            observer.observe(ref.current);
            return function() {
                observer.disconnect();
            };
        }
        return;
    }, [
        callback,
        ref
    ]);
}
var VisGraph = /*#__PURE__*/ _react.forwardRef(function(_ref, ref) {
    var graph = _ref.graph, events = _ref.events, getNetwork = _ref.getNetwork, propOptions = _ref.options, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    var container = _react.useRef(null);
    var edges = useSealedState(function() {
        return new _visData.DataSet(graph.edges);
    });
    var nodes = useSealedState(function() {
        return new _visData.DataSet(graph.nodes);
    });
    var initialOptions = useSealedState(propOptions);
    var prevNodes = _react.useRef(graph.nodes);
    var prevEdges = _react.useRef(graph.edges);
    _react.useEffect(function() {
        if (_lodashEs.isEqual(graph.nodes, prevNodes.current)) return; // No change!
        var _diff = diff(prevNodes.current, graph.nodes), added = _diff.added, removed = _diff.removed, updated = _diff.updated;
        nodes.remove(removed);
        nodes.add(added);
        nodes.update(updated);
        prevNodes.current = graph.nodes;
    }, [
        graph.nodes,
        nodes
    ]);
    _react.useEffect(function() {
        if (_lodashEs.isEqual(graph.edges, prevEdges.current)) return; // No change!
        var _diff2 = diff(prevEdges.current, graph.edges), added = _diff2.added, removed = _diff2.removed, updated = _diff2.updated;
        edges.remove(removed);
        edges.add(added);
        edges.update(updated);
        prevEdges.current = graph.edges;
    }, [
        graph.edges,
        edges
    ]);
    var _useState2 = _react.useState(), network = _useState2[0], setNetwork = _useState2[1];
    _react.useImperativeHandle(ref, function() {
        return network;
    }, [
        network
    ]);
    _react.useEffect(function() {
        if (!network || !events) return function() {
        };
         // Add user provied events to network
        for(var _i = 0, _Object$entries = Object.entries(events); _i < _Object$entries.length; _i++){
            var _Object$entries$_i = _Object$entries[_i], eventName = _Object$entries$_i[0], callback = _Object$entries$_i[1];
            if (callback) network.on(eventName, callback);
        }
        return function() {
            for(var _i2 = 0, _Object$entries2 = Object.entries(events); _i2 < _Object$entries2.length; _i2++){
                var _Object$entries2$_i = _Object$entries2[_i2], _eventName = _Object$entries2$_i[0], _callback = _Object$entries2$_i[1];
                if (_callback) network.off(_eventName, _callback);
            }
        };
    }, [
        events,
        network
    ]);
    _react.useEffect(function() {
        if (!network || !propOptions) return;
        try {
            network.setOptions(propOptions);
        } catch (error) {
        }
    }, [
        network,
        propOptions
    ]);
    _react.useEffect(function() {
        // Creating the network has to be done in a useEffect because it needs access to a ref
        // merge user provied options with our default ones
        // defaultsDeep mutates the host object
        var mergedOptions = _lodashEs.defaultsDeep(_lodashEs.cloneDeep(initialOptions), defaultOptions);
        var newNetwork = new _visNetwork.Network(container.current, {
            edges: edges,
            nodes: nodes
        }, mergedOptions);
        setNetwork(newNetwork);
        if (getNetwork) getNetwork(newNetwork);
        return function() {
            // Cleanup the network on component unmount
            newNetwork.destroy();
        };
    }, [
        edges,
        initialOptions,
        nodes
    ]); //resize network on window resize
    function onContainerResize() {
        if (network) network.redraw();
    }
    useResizeObserver(container, onContainerResize);
    return _reactDefault.default.createElement("div", Object.assign({
        style: {
            width: '100%',
            height: '100%'
        },
        ref: container
    }, props));
});
exports.default = VisGraph;

},{"react":"6TuXu","vis-data":"2NW8t","vis-network":"ivm0X","lodash-es":"gRGYu","vis-network/styles/vis-network.css":"qMSaL","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2NW8t":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.2
 * @date    2021-01-08T20:37:11.601Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ !function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define([
        "exports"
    ], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).vis = t.vis || {
    });
}(this, function(t) {
    var e = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {
    };
    function r13(t1) {
        var e1 = {
            exports: {
            }
        };
        return t1(e1, e1.exports), e1.exports;
    }
    var n = function(t1) {
        return t1 && t1.Math == Math && t1;
    }, i = n("object" == typeof globalThis && globalThis) || n("object" == typeof window && window) || n("object" == typeof self && self) || n("object" == typeof e && e) || function() {
        return this;
    }() || Function("return this")(), o = function(t1) {
        try {
            return !!t1();
        } catch (t2) {
            return !0;
        }
    }, a = !o(function() {
        return 7 != Object.defineProperty({
        }, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), u6 = {
    }.propertyIsEnumerable, s4 = Object.getOwnPropertyDescriptor, c = {
        f: s4 && !u6.call({
            1: 2
        }, 1) ? function(t1) {
            var e1 = s4(this, t1);
            return !!e1 && e1.enumerable;
        } : u6
    }, f1 = function(t1, e1) {
        return {
            enumerable: !(1 & t1),
            configurable: !(2 & t1),
            writable: !(4 & t1),
            value: e1
        };
    }, l1 = {
    }.toString, h1 = function(t1) {
        return l1.call(t1).slice(8, -1);
    }, p1 = "".split, v1 = o(function() {
        return !Object("z").propertyIsEnumerable(0);
    }) ? function(t1) {
        return "String" == h1(t1) ? p1.call(t1, "") : Object(t1);
    } : Object, d1 = function(t1) {
        if (null == t1) throw TypeError("Can't call method on " + t1);
        return t1;
    }, y1 = function(t1) {
        return v1(d1(t1));
    }, g = function(t1) {
        return "object" == typeof t1 ? null !== t1 : "function" == typeof t1;
    }, m = function(t1, e1) {
        if (!g(t1)) return t1;
        var r1, n1;
        if (e1 && "function" == typeof (r1 = t1.toString) && !g(n1 = r1.call(t1))) return n1;
        if ("function" == typeof (r1 = t1.valueOf) && !g(n1 = r1.call(t1))) return n1;
        if (!e1 && "function" == typeof (r1 = t1.toString) && !g(n1 = r1.call(t1))) return n1;
        throw TypeError("Can't convert object to primitive value");
    }, b = {
    }.hasOwnProperty, _ = function(t1, e1) {
        return b.call(t1, e1);
    }, w = i.document, E = g(w) && g(w.createElement), O = function(t1) {
        return E ? w.createElement(t1) : {
        };
    }, T = !a && !o(function() {
        return 7 != Object.defineProperty(O("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), S1 = Object.getOwnPropertyDescriptor, x = {
        f: a ? S1 : function(t1, e1) {
            if (t1 = y1(t1), e1 = m(e1, !0), T) try {
                return S1(t1, e1);
            } catch (t2) {
            }
            if (_(t1, e1)) return f1(!c.f.call(t1, e1), t1[e1]);
        }
    }, k = /#|\.prototype\./, A1 = function(t1, e1) {
        var r1 = I1[j1(t1)];
        return r1 == D || r1 != P && ("function" == typeof e1 ? o(e1) : !!e1);
    }, j1 = A1.normalize = function(t1) {
        return String(t1).replace(k, ".").toLowerCase();
    }, I1 = A1.data = {
    }, P = A1.NATIVE = "N", D = A1.POLYFILL = "P", L = A1, C = {
    }, R = function(t1) {
        if ("function" != typeof t1) throw TypeError(String(t1) + " is not a function");
        return t1;
    }, M = function(t1, e1, r1) {
        if (R(t1), (void 0) === e1) return t1;
        switch(r1){
            case 0:
                return function() {
                    return t1.call(e1);
                };
            case 1:
                return function(r2) {
                    return t1.call(e1, r2);
                };
            case 2:
                return function(r2, n1) {
                    return t1.call(e1, r2, n1);
                };
            case 3:
                return function(r2, n1, i1) {
                    return t1.call(e1, r2, n1, i1);
                };
        }
        return function() {
            return t1.apply(e1, arguments);
        };
    }, N = function(t1) {
        if (!g(t1)) throw TypeError(String(t1) + " is not an object");
        return t1;
    }, F = Object.defineProperty, z = {
        f: a ? F : function(t1, e1, r1) {
            if (N(t1), e1 = m(e1, !0), N(r1), T) try {
                return F(t1, e1, r1);
            } catch (t2) {
            }
            if ("get" in r1 || "set" in r1) throw TypeError("Accessors not supported");
            return "value" in r1 && (t1[e1] = r1.value), t1;
        }
    }, q = a ? function(t1, e1, r1) {
        return z.f(t1, e1, f1(1, r1));
    } : function(t1, e1, r1) {
        return t1[e1] = r1, t1;
    }, Y = x.f, U = function(t1) {
        var e1 = function(e2, r1, n1) {
            if (this instanceof t1) {
                switch(arguments.length){
                    case 0:
                        return new t1;
                    case 1:
                        return new t1(e2);
                    case 2:
                        return new t1(e2, r1);
                }
                return new t1(e2, r1, n1);
            }
            return t1.apply(this, arguments);
        };
        return e1.prototype = t1.prototype, e1;
    }, X = function(t1, e1) {
        var r1, n1, o1, a1, u1, s1, c1, f1, l1 = t1.target, h1 = t1.global, p1 = t1.stat, v1 = t1.proto, d1 = h1 ? i : p1 ? i[l1] : (i[l1] || {
        }).prototype, y1 = h1 ? C : C[l1] || (C[l1] = {
        }), g1 = y1.prototype;
        for(o1 in e1)r1 = !L(h1 ? o1 : l1 + (p1 ? "." : "#") + o1, t1.forced) && d1 && _(d1, o1), u1 = y1[o1], r1 && (s1 = t1.noTargetGet ? (f1 = Y(d1, o1)) && f1.value : d1[o1]), a1 = r1 && s1 ? s1 : e1[o1], r1 && typeof u1 == typeof a1 || (c1 = t1.bind && r1 ? M(a1, i) : t1.wrap && r1 ? U(a1) : v1 && "function" == typeof a1 ? M(Function.call, a1) : a1, (t1.sham || a1 && a1.sham || u1 && u1.sham) && q(c1, "sham", !0), y1[o1] = c1, v1 && (_(C, n1 = l1 + "Prototype") || q(C, n1, {
        }), C[n1][o1] = a1, t1.real && g1 && !g1[o1] && q(g1, o1, a1)));
    }, V = Array.isArray || function(t1) {
        return "Array" == h1(t1);
    }, W = Math.ceil, G = Math.floor, H = function(t1) {
        return isNaN(t1 = +t1) ? 0 : (t1 > 0 ? G : W)(t1);
    }, $ = Math.min, J = function(t1) {
        return t1 > 0 ? $(H(t1), 9007199254740991) : 0;
    }, Q = function(t1, e1, r1, n1, i1, o1, a1, u1) {
        for(var s1, c1 = i1, f1 = 0, l1 = !!a1 && M(a1, u1, 3); f1 < n1;){
            if (f1 in r1) {
                if (s1 = l1 ? l1(r1[f1], f1, e1) : r1[f1], o1 > 0 && V(s1)) c1 = Q(t1, e1, s1, J(s1.length), c1, o1 - 1) - 1;
                else {
                    if (c1 >= 9007199254740991) throw TypeError("Exceed the acceptable array length");
                    t1[c1] = s1;
                }
                c1++;
            }
            f1++;
        }
        return c1;
    }, B = Q, K = function(t1) {
        return Object(d1(t1));
    }, Z = "__core-js_shared__", tt = i[Z] || function(t1, e1) {
        try {
            q(i, t1, e1);
        } catch (r1) {
            i[t1] = e1;
        }
        return e1;
    }(Z, {
    }), et = r13(function(t1) {
        (t1.exports = function(t2, e1) {
            return tt[t2] || (tt[t2] = (void 0) !== e1 ? e1 : {
            });
        })("versions", []).push({
            version: "3.7.0",
            mode: "pure",
            copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
        });
    }), rt = 0, nt = Math.random(), it = function(t1) {
        return "Symbol(" + String((void 0) === t1 ? "" : t1) + ")_" + ((++rt) + nt).toString(36);
    }, ot = !!Object.getOwnPropertySymbols && !o(function() {
        return !String(Symbol());
    }), at = ot && !Symbol.sham && "symbol" == typeof Symbol.iterator, ut = et("wks"), st = i.Symbol, ct = at ? st : st && st.withoutSetter || it, ft = function(t1) {
        return _(ut, t1) || (ot && _(st, t1) ? ut[t1] = st[t1] : ut[t1] = ct("Symbol." + t1)), ut[t1];
    }, lt = ft("species"), ht = function(t1, e1) {
        var r1;
        return V(t1) && ("function" != typeof (r1 = t1.constructor) || r1 !== Array && !V(r1.prototype) ? g(r1) && null === (r1 = r1[lt]) && (r1 = void 0) : r1 = void 0), new ((void 0) === r1 ? Array : r1)(0 === e1 ? 0 : e1);
    };
    X({
        target: "Array",
        proto: !0
    }, {
        flatMap: function(t1) {
            var e1, r1 = K(this), n1 = J(r1.length);
            return R(t1), (e1 = ht(r1, 0)).length = B(e1, r1, r1, n1, 0, 1, t1, arguments.length > 1 ? arguments[1] : void 0), e1;
        }
    });
    var pt, vt, dt = function(t1) {
        return C[t1 + "Prototype"];
    }, yt = dt("Array").flatMap, gt = Array.prototype, mt = function(t1) {
        var e1 = t1.flatMap;
        return t1 === gt || t1 instanceof Array && e1 === gt.flatMap ? yt : e1;
    }, bt = [].push, _t = function(t1) {
        var e1 = 1 == t1, r1 = 2 == t1, n1 = 3 == t1, i1 = 4 == t1, o1 = 6 == t1, a1 = 5 == t1 || o1;
        return function(u1, s1, c1, f1) {
            for(var l1, h1, p1 = K(u1), d1 = v1(p1), y1 = M(s1, c1, 3), g1 = J(d1.length), m1 = 0, b1 = f1 || ht, _1 = e1 ? b1(u1, g1) : r1 ? b1(u1, 0) : void 0; g1 > m1; m1++)if ((a1 || m1 in d1) && (h1 = y1(l1 = d1[m1], m1, p1), t1)) {
                if (e1) _1[m1] = h1;
                else if (h1) switch(t1){
                    case 3:
                        return !0;
                    case 5:
                        return l1;
                    case 6:
                        return m1;
                    case 2:
                        bt.call(_1, l1);
                }
                else if (i1) return !1;
            }
            return o1 ? -1 : n1 || i1 ? i1 : _1;
        };
    }, wt = {
        forEach: _t(0),
        map: _t(1),
        filter: _t(2),
        some: _t(3),
        every: _t(4),
        find: _t(5),
        findIndex: _t(6)
    }, Et = function(t1) {
        return "function" == typeof t1 ? t1 : void 0;
    }, Ot = function(t1, e1) {
        return arguments.length < 2 ? Et(C[t1]) || Et(i[t1]) : C[t1] && C[t1][e1] || i[t1] && i[t1][e1];
    }, Tt = Ot("navigator", "userAgent") || "", St = i.process, xt = St && St.versions, kt = xt && xt.v8;
    kt ? vt = (pt = kt.split("."))[0] + pt[1] : Tt && (!(pt = Tt.match(/Edge\/(\d+)/)) || pt[1] >= 74) && (pt = Tt.match(/Chrome\/(\d+)/)) && (vt = pt[1]);
    var At = vt && +vt, jt = ft("species"), It = function(t1) {
        return At >= 51 || !o(function() {
            var e1 = [];
            return (e1.constructor = {
            })[jt] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e1[t1](Boolean).foo;
        });
    }, Pt = Object.defineProperty, Dt = {
    }, Lt = function(t1) {
        throw t1;
    }, Ct = function(t1, e1) {
        if (_(Dt, t1)) return Dt[t1];
        e1 || (e1 = {
        });
        var r1 = [][t1], n1 = !!_(e1, "ACCESSORS") && e1.ACCESSORS, i1 = _(e1, 0) ? e1[0] : Lt, u1 = _(e1, 1) ? e1[1] : void 0;
        return Dt[t1] = !!r1 && !o(function() {
            if (n1 && !a) return !0;
            var t2 = {
                length: -1
            };
            n1 ? Pt(t2, 1, {
                enumerable: !0,
                get: Lt
            }) : t2[1] = 1, r1.call(t2, i1, u1);
        });
    }, Rt = wt.map, Mt = It("map"), Nt = Ct("map");
    X({
        target: "Array",
        proto: !0,
        forced: !Mt || !Nt
    }, {
        map: function(t1) {
            return Rt(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Ft = dt("Array").map, zt = Array.prototype, qt = function(t1) {
        var e1 = t1.map;
        return t1 === zt || t1 instanceof Array && e1 === zt.map ? Ft : e1;
    }, Yt = wt.filter, Ut = It("filter"), Xt = Ct("filter");
    X({
        target: "Array",
        proto: !0,
        forced: !Ut || !Xt
    }, {
        filter: function(t1) {
            return Yt(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Vt = dt("Array").filter, Wt = Array.prototype, Gt = function(t1) {
        var e1 = t1.filter;
        return t1 === Wt || t1 instanceof Array && e1 === Wt.filter ? Vt : e1;
    }, Ht = function(t1) {
        return function(e1, r1, n1, i1) {
            R(r1);
            var o1 = K(e1), a1 = v1(o1), u1 = J(o1.length), s1 = t1 ? u1 - 1 : 0, c1 = t1 ? -1 : 1;
            if (n1 < 2) for(;;){
                if (s1 in a1) {
                    i1 = a1[s1], s1 += c1;
                    break;
                }
                if (s1 += c1, t1 ? s1 < 0 : u1 <= s1) throw TypeError("Reduce of empty array with no initial value");
            }
            for(; t1 ? s1 >= 0 : u1 > s1; s1 += c1)s1 in a1 && (i1 = r1(i1, a1[s1], s1, o1));
            return i1;
        };
    }, $t = {
        left: Ht(!1),
        right: Ht(!0)
    }, Jt = function(t1, e1) {
        var r1 = [][t1];
        return !!r1 && o(function() {
            r1.call(null, e1 || function() {
                throw 1;
            }, 1);
        });
    }, Qt = "process" == h1(i.process), Bt = $t.left, Kt = Jt("reduce"), Zt = Ct("reduce", {
        1: 0
    });
    X({
        target: "Array",
        proto: !0,
        forced: !Kt || !Zt || !Qt && At > 79 && At < 83
    }, {
        reduce: function(t1) {
            return Bt(this, t1, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var te = dt("Array").reduce, ee = Array.prototype, re = function(t1) {
        var e1 = t1.reduce;
        return t1 === ee || t1 instanceof Array && e1 === ee.reduce ? te : e1;
    }, ne = [].slice, ie = {
    }, oe = function(t1, e1, r1) {
        if (!(e1 in ie)) {
            for(var n1 = [], i1 = 0; i1 < e1; i1++)n1[i1] = "a[" + i1 + "]";
            ie[e1] = Function("C,a", "return new C(" + n1.join(",") + ")");
        }
        return ie[e1](t1, r1);
    }, ae = Function.bind || function(t1) {
        var e1 = R(this), r1 = ne.call(arguments, 1), n2 = function() {
            var i2 = r1.concat(ne.call(arguments));
            return this instanceof n2 ? oe(e1, i2.length, i2) : e1.apply(t1, i2);
        };
        return g(e1.prototype) && (n2.prototype = e1.prototype), n2;
    };
    X({
        target: "Function",
        proto: !0
    }, {
        bind: ae
    });
    var ue = dt("Function").bind, se = Function.prototype, ce = function(t1) {
        var e1 = t1.bind;
        return t1 === se || t1 instanceof Function && e1 === se.bind ? ue : e1;
    };
    var fe = function(t1, e1) {
        if (!(t1 instanceof e1)) throw new TypeError("Cannot call a class as a function");
    };
    X({
        target: "Object",
        stat: !0,
        forced: !a,
        sham: !a
    }, {
        defineProperty: z.f
    });
    var le = r13(function(t1) {
        var e1 = C.Object, r1 = t1.exports = function(t2, r2, n2) {
            return e1.defineProperty(t2, r2, n2);
        };
        e1.defineProperty.sham && (r1.sham = !0);
    }), he = le;
    function pe(t1, e1) {
        for(var r1 = 0; r1 < e1.length; r1++){
            var n2 = e1[r1];
            n2.enumerable = n2.enumerable || !1, n2.configurable = !0, "value" in n2 && (n2.writable = !0), he(t1, n2.key, n2);
        }
    }
    var ve = function(t1, e1, r1) {
        return e1 && pe(t1.prototype, e1), r1 && pe(t1, r1), t1;
    };
    var de = function() {
        function t1(e1, r1, n3) {
            var i2, o1, a1;
            fe(this, t1), this._source = e1, this._transformers = r1, this._target = n3, this._listeners = {
                add: ce(i2 = this._add).call(i2, this),
                remove: ce(o1 = this._remove).call(o1, this),
                update: ce(a1 = this._update).call(a1, this)
            };
        }
        return ve(t1, [
            {
                key: "all",
                value: function() {
                    return this._target.update(this._transformItems(this._source.get())), this;
                }
            },
            {
                key: "start",
                value: function() {
                    return this._source.on("add", this._listeners.add), this._source.on("remove", this._listeners.remove), this._source.on("update", this._listeners.update), this;
                }
            },
            {
                key: "stop",
                value: function() {
                    return this._source.off("add", this._listeners.add), this._source.off("remove", this._listeners.remove), this._source.off("update", this._listeners.update), this;
                }
            },
            {
                key: "_transformItems",
                value: function(t2) {
                    var e1;
                    return re(e1 = this._transformers).call(e1, function(t3, e2) {
                        return e2(t3);
                    }, t2);
                }
            },
            {
                key: "_add",
                value: function(t2, e1) {
                    null != e1 && this._target.add(this._transformItems(this._source.get(e1.items)));
                }
            },
            {
                key: "_update",
                value: function(t2, e1) {
                    null != e1 && this._target.update(this._transformItems(this._source.get(e1.items)));
                }
            },
            {
                key: "_remove",
                value: function(t2, e1) {
                    null != e1 && this._target.remove(this._transformItems(e1.oldData));
                }
            }
        ]), t1;
    }(), ye = function() {
        function t1(e1) {
            fe(this, t1), this._source = e1, this._transformers = [];
        }
        return ve(t1, [
            {
                key: "filter",
                value: function(t2) {
                    return this._transformers.push(function(e1) {
                        return Gt(e1).call(e1, t2);
                    }), this;
                }
            },
            {
                key: "map",
                value: function(t2) {
                    return this._transformers.push(function(e1) {
                        return qt(e1).call(e1, t2);
                    }), this;
                }
            },
            {
                key: "flatMap",
                value: function(t2) {
                    return this._transformers.push(function(e1) {
                        return mt(e1).call(e1, t2);
                    }), this;
                }
            },
            {
                key: "to",
                value: function(t2) {
                    return new de(this._source, this._transformers, t2);
                }
            }
        ]), t1;
    }(), ge = le, me = Math.max, be = Math.min, _e = function(t1, e1) {
        var r1 = H(t1);
        return r1 < 0 ? me(r1 + e1, 0) : be(r1, e1);
    }, we = function(t1) {
        return function(e1, r1, n3) {
            var i2, o1 = y1(e1), a1 = J(o1.length), u1 = _e(n3, a1);
            if (t1 && r1 != r1) {
                for(; a1 > u1;)if ((i2 = o1[u1++]) != i2) return !0;
            } else for(; a1 > u1; u1++)if ((t1 || u1 in o1) && o1[u1] === r1) return t1 || u1 || 0;
            return !t1 && -1;
        };
    }, Ee = {
        includes: we(!0),
        indexOf: we(!1)
    }, Oe = {
    }, Te = Ee.indexOf, Se = function(t1, e1) {
        var r1, n3 = y1(t1), i2 = 0, o1 = [];
        for(r1 in n3)!_(Oe, r1) && _(n3, r1) && o1.push(r1);
        for(; e1.length > i2;)_(n3, r1 = e1[i2++]) && (~Te(o1, r1) || o1.push(r1));
        return o1;
    }, xe = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], ke = Object.keys || function(t1) {
        return Se(t1, xe);
    }, Ae = a ? Object.defineProperties : function(t1, e1) {
        N(t1);
        for(var r1, n3 = ke(e1), i2 = n3.length, o1 = 0; i2 > o1;)z.f(t1, r1 = n3[o1++], e1[r1]);
        return t1;
    };
    X({
        target: "Object",
        stat: !0,
        forced: !a,
        sham: !a
    }, {
        defineProperties: Ae
    });
    var je = r13(function(t1) {
        var e1 = C.Object, r1 = t1.exports = function(t2, r2) {
            return e1.defineProperties(t2, r2);
        };
        e1.defineProperties.sham && (r1.sham = !0);
    }), Ie = xe.concat("length", "prototype"), Pe = {
        f: Object.getOwnPropertyNames || function(t1) {
            return Se(t1, Ie);
        }
    }, De = {
        f: Object.getOwnPropertySymbols
    }, Le = Ot("Reflect", "ownKeys") || function(t1) {
        var e1 = Pe.f(N(t1)), r1 = De.f;
        return r1 ? e1.concat(r1(t1)) : e1;
    }, Ce = function(t1, e1, r1) {
        var n3 = m(e1);
        n3 in t1 ? z.f(t1, n3, f1(0, r1)) : t1[n3] = r1;
    };
    X({
        target: "Object",
        stat: !0,
        sham: !a
    }, {
        getOwnPropertyDescriptors: function(t1) {
            for(var e1, r1, n3 = y1(t1), i2 = x.f, o1 = Le(n3), a1 = {
            }, u1 = 0; o1.length > u1;)(void 0) !== (r1 = i2(n3, e1 = o1[u1++])) && Ce(a1, e1, r1);
            return a1;
        }
    });
    var Re = C.Object.getOwnPropertyDescriptors, Me = x.f, Ne = o(function() {
        Me(1);
    });
    X({
        target: "Object",
        stat: !0,
        forced: !a || Ne,
        sham: !a
    }, {
        getOwnPropertyDescriptor: function(t1, e1) {
            return Me(y1(t1), e1);
        }
    });
    var Fe, ze = r13(function(t1) {
        var e1 = C.Object, r1 = t1.exports = function(t2, r2) {
            return e1.getOwnPropertyDescriptor(t2, r2);
        };
        e1.getOwnPropertyDescriptor.sham && (r1.sham = !0);
    }), qe = Ot("document", "documentElement"), Ye = et("keys"), Ue = function(t1) {
        return Ye[t1] || (Ye[t1] = it(t1));
    }, Xe = Ue("IE_PROTO"), Ve = function() {
    }, We = function(t1) {
        return "<script>" + t1 + "</" + "script>";
    }, Ge = function() {
        try {
            Fe = document.domain && new ActiveXObject("htmlfile");
        } catch (t1) {
        }
        var t1, e1;
        Ge = Fe ? (function(t2) {
            t2.write(We("")), t2.close();
            var e2 = t2.parentWindow.Object;
            return t2 = null, e2;
        })(Fe) : ((e1 = O("iframe")).style.display = "none", qe.appendChild(e1), e1.src = String("javascript:"), (t1 = e1.contentWindow.document).open(), t1.write(We("document.F=Object")), t1.close(), t1.F);
        for(var r1 = xe.length; r1--;)delete Ge.prototype[xe[r1]];
        return Ge();
    };
    Oe[Xe] = !0;
    var He = Object.create || function(t1, e1) {
        var r1;
        return null !== t1 ? (Ve.prototype = N(t1), r1 = new Ve, Ve.prototype = null, r1[Xe] = t1) : r1 = Ge(), (void 0) === e1 ? r1 : Ae(r1, e1);
    }, $e = Pe.f, Je = {
    }.toString, Qe = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [], Be = {
        f: function(t1) {
            return Qe && "[object Window]" == Je.call(t1) ? (function(t2) {
                try {
                    return $e(t2);
                } catch (t3) {
                    return Qe.slice();
                }
            })(t1) : $e(y1(t1));
        }
    }, Ke = function(t1, e1, r1, n3) {
        n3 && n3.enumerable ? t1[e1] = r1 : q(t1, e1, r1);
    }, Ze = {
        f: ft
    }, tr = z.f, er = function(t1) {
        var e1 = C.Symbol || (C.Symbol = {
        });
        _(e1, t1) || tr(e1, t1, {
            value: Ze.f(t1)
        });
    }, rr = {
    };
    rr[ft("toStringTag")] = "z";
    var nr = "[object z]" === String(rr), ir = ft("toStringTag"), or = "Arguments" == h1(function() {
        return arguments;
    }()), ar = nr ? h1 : function(t1) {
        var e1, r1, n3;
        return (void 0) === t1 ? "Undefined" : null === t1 ? "Null" : "string" == typeof (r1 = function(t2, e2) {
            try {
                return t2[e2];
            } catch (t3) {
            }
        }(e1 = Object(t1), ir)) ? r1 : or ? h1(e1) : "Object" == (n3 = h1(e1)) && "function" == typeof e1.callee ? "Arguments" : n3;
    }, ur = nr ? {
    }.toString : function() {
        return "[object " + ar(this) + "]";
    }, sr = z.f, cr = ft("toStringTag"), fr = function(t1, e1, r1, n3) {
        if (t1) {
            var i2 = r1 ? t1 : t1.prototype;
            _(i2, cr) || sr(i2, cr, {
                configurable: !0,
                value: e1
            }), n3 && !nr && q(i2, "toString", ur);
        }
    }, lr = Function.toString;
    "function" != typeof tt.inspectSource && (tt.inspectSource = function(t1) {
        return lr.call(t1);
    });
    var hr, pr, vr, dr = tt.inspectSource, yr = i.WeakMap, gr = "function" == typeof yr && /native code/.test(dr(yr)), mr = i.WeakMap;
    if (gr) {
        var br = tt.state || (tt.state = new mr), _r = br.get, wr = br.has, Er = br.set;
        hr = function(t1, e1) {
            return e1.facade = t1, Er.call(br, t1, e1), e1;
        }, pr = function(t1) {
            return _r.call(br, t1) || {
            };
        }, vr = function(t1) {
            return wr.call(br, t1);
        };
    } else {
        var Or = Ue("state");
        Oe[Or] = !0, hr = function(t1, e1) {
            return e1.facade = t1, q(t1, Or, e1), e1;
        }, pr = function(t1) {
            return _(t1, Or) ? t1[Or] : {
            };
        }, vr = function(t1) {
            return _(t1, Or);
        };
    }
    var Tr = {
        set: hr,
        get: pr,
        has: vr,
        enforce: function(t1) {
            return vr(t1) ? pr(t1) : hr(t1, {
            });
        },
        getterFor: function(t1) {
            return function(e1) {
                var r1;
                if (!g(e1) || (r1 = pr(e1)).type !== t1) throw TypeError("Incompatible receiver, " + t1 + " required");
                return r1;
            };
        }
    }, Sr = wt.forEach, xr = Ue("hidden"), kr = "Symbol", Ar = ft("toPrimitive"), jr = Tr.set, Ir = Tr.getterFor(kr), Pr = Object.prototype, Dr = i.Symbol, Lr = Ot("JSON", "stringify"), Cr = x.f, Rr = z.f, Mr = Be.f, Nr = c.f, Fr = et("symbols"), zr = et("op-symbols"), qr = et("string-to-symbol-registry"), Yr = et("symbol-to-string-registry"), Ur = et("wks"), Xr = i.QObject, Vr = !Xr || !Xr.prototype || !Xr.prototype.findChild, Wr = a && o(function() {
        return 7 != He(Rr({
        }, "a", {
            get: function() {
                return Rr(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? function(t1, e1, r1) {
        var n3 = Cr(Pr, e1);
        n3 && delete Pr[e1], Rr(t1, e1, r1), n3 && t1 !== Pr && Rr(Pr, e1, n3);
    } : Rr, Gr = function(t1, e1) {
        var r1 = Fr[t1] = He(Dr.prototype);
        return jr(r1, {
            type: kr,
            tag: t1,
            description: e1
        }), a || (r1.description = e1), r1;
    }, Hr = at ? function(t1) {
        return "symbol" == typeof t1;
    } : function(t1) {
        return Object(t1) instanceof Dr;
    }, $r = function(t1, e1, r1) {
        t1 === Pr && $r(zr, e1, r1), N(t1);
        var n3 = m(e1, !0);
        return N(r1), _(Fr, n3) ? (r1.enumerable ? (_(t1, xr) && t1[xr][n3] && (t1[xr][n3] = !1), r1 = He(r1, {
            enumerable: f1(0, !1)
        })) : (_(t1, xr) || Rr(t1, xr, f1(1, {
        })), t1[xr][n3] = !0), Wr(t1, n3, r1)) : Rr(t1, n3, r1);
    }, Jr = function(t1, e1) {
        N(t1);
        var r1 = y1(e1), n3 = ke(r1).concat(Zr(r1));
        return Sr(n3, function(e2) {
            a && !Qr.call(r1, e2) || $r(t1, e2, r1[e2]);
        }), t1;
    }, Qr = function(t1) {
        var e1 = m(t1, !0), r1 = Nr.call(this, e1);
        return !(this === Pr && _(Fr, e1) && !_(zr, e1)) && (!(r1 || !_(this, e1) || !_(Fr, e1) || _(this, xr) && this[xr][e1]) || r1);
    }, Br = function(t1, e1) {
        var r1 = y1(t1), n3 = m(e1, !0);
        if (r1 !== Pr || !_(Fr, n3) || _(zr, n3)) {
            var i3 = Cr(r1, n3);
            return !i3 || !_(Fr, n3) || _(r1, xr) && r1[xr][n3] || (i3.enumerable = !0), i3;
        }
    }, Kr = function(t1) {
        var e1 = Mr(y1(t1)), r1 = [];
        return Sr(e1, function(t2) {
            _(Fr, t2) || _(Oe, t2) || r1.push(t2);
        }), r1;
    }, Zr = function(t1) {
        var e1 = t1 === Pr, r1 = Mr(e1 ? zr : y1(t1)), n3 = [];
        return Sr(r1, function(t2) {
            !_(Fr, t2) || e1 && !_(Pr, t2) || n3.push(Fr[t2]);
        }), n3;
    };
    if (ot || (Ke((Dr = function() {
        if (this instanceof Dr) throw TypeError("Symbol is not a constructor");
        var t1 = arguments.length && (void 0) !== arguments[0] ? String(arguments[0]) : void 0, e1 = it(t1), r1 = function(t2) {
            this === Pr && r1.call(zr, t2), _(this, xr) && _(this[xr], e1) && (this[xr][e1] = !1), Wr(this, e1, f1(1, t2));
        };
        return a && Vr && Wr(Pr, e1, {
            configurable: !0,
            set: r1
        }), Gr(e1, t1);
    }).prototype, "toString", function() {
        return Ir(this).tag;
    }), Ke(Dr, "withoutSetter", function(t1) {
        return Gr(it(t1), t1);
    }), c.f = Qr, z.f = $r, x.f = Br, Pe.f = Be.f = Kr, De.f = Zr, Ze.f = function(t1) {
        return Gr(ft(t1), t1);
    }, a && Rr(Dr.prototype, "description", {
        configurable: !0,
        get: function() {
            return Ir(this).description;
        }
    })), X({
        global: !0,
        wrap: !0,
        forced: !ot,
        sham: !ot
    }, {
        Symbol: Dr
    }), Sr(ke(Ur), function(t1) {
        er(t1);
    }), X({
        target: kr,
        stat: !0,
        forced: !ot
    }, {
        for: function(t1) {
            var e1 = String(t1);
            if (_(qr, e1)) return qr[e1];
            var r1 = Dr(e1);
            return qr[e1] = r1, Yr[r1] = e1, r1;
        },
        keyFor: function(t1) {
            if (!Hr(t1)) throw TypeError(t1 + " is not a symbol");
            if (_(Yr, t1)) return Yr[t1];
        },
        useSetter: function() {
            Vr = !0;
        },
        useSimple: function() {
            Vr = !1;
        }
    }), X({
        target: "Object",
        stat: !0,
        forced: !ot,
        sham: !a
    }, {
        create: function(t1, e1) {
            return (void 0) === e1 ? He(t1) : Jr(He(t1), e1);
        },
        defineProperty: $r,
        defineProperties: Jr,
        getOwnPropertyDescriptor: Br
    }), X({
        target: "Object",
        stat: !0,
        forced: !ot
    }, {
        getOwnPropertyNames: Kr,
        getOwnPropertySymbols: Zr
    }), X({
        target: "Object",
        stat: !0,
        forced: o(function() {
            De.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t1) {
            return De.f(K(t1));
        }
    }), Lr) {
        var tn = !ot || o(function() {
            var t1 = Dr();
            return "[null]" != Lr([
                t1
            ]) || "{}" != Lr({
                a: t1
            }) || "{}" != Lr(Object(t1));
        });
        X({
            target: "JSON",
            stat: !0,
            forced: tn
        }, {
            stringify: function(t1, e1, r1) {
                for(var n3, i4 = [
                    t1
                ], o1 = 1; arguments.length > o1;)i4.push(arguments[o1++]);
                if (n3 = e1, (g(e1) || (void 0) !== t1) && !Hr(t1)) return V(e1) || (e1 = function(t2, e2) {
                    if ("function" == typeof n3 && (e2 = n3.call(this, t2, e2)), !Hr(e2)) return e2;
                }), i4[1] = e1, Lr.apply(null, i4);
            }
        });
    }
    Dr.prototype[Ar] || q(Dr.prototype, Ar, Dr.prototype.valueOf), fr(Dr, kr), Oe[xr] = !0;
    var en, rn, nn, on = C.Object.getOwnPropertySymbols, an = {
    }, un = !o(function() {
        function t1() {
        }
        return t1.prototype.constructor = null, Object.getPrototypeOf(new t1) !== t1.prototype;
    }), sn = Ue("IE_PROTO"), cn = Object.prototype, fn = un ? Object.getPrototypeOf : function(t1) {
        return t1 = K(t1), _(t1, sn) ? t1[sn] : "function" == typeof t1.constructor && t1 instanceof t1.constructor ? t1.constructor.prototype : t1 instanceof Object ? cn : null;
    }, ln = (ft("iterator"), !1);
    [].keys && ("next" in (nn = [].keys()) ? (rn = fn(fn(nn))) !== Object.prototype && (en = rn) : ln = !0), null == en && (en = {
    });
    var hn = {
        IteratorPrototype: en,
        BUGGY_SAFARI_ITERATORS: ln
    }, pn = hn.IteratorPrototype, vn = function() {
        return this;
    }, dn = Object.setPrototypeOf || ("__proto__" in {
    } ? function() {
        var t1, e1 = !1, r1 = {
        };
        try {
            (t1 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r1, []), e1 = r1 instanceof Array;
        } catch (t2) {
        }
        return function(r2, n3) {
            return N(r2), (function(t2) {
                if (!g(t2) && null !== t2) throw TypeError("Can't set " + String(t2) + " as a prototype");
            })(n3), e1 ? t1.call(r2, n3) : r2.__proto__ = n3, r2;
        };
    }() : void 0), yn = hn.IteratorPrototype, gn = hn.BUGGY_SAFARI_ITERATORS, mn = ft("iterator"), bn = "keys", _n = "values", wn = "entries", En = function() {
        return this;
    }, On = function(t1, e1, r1, n3, i4, o1, a1) {
        !function(t2, e2, r2) {
            var n4 = e2 + " Iterator";
            t2.prototype = He(pn, {
                next: f1(1, r2)
            }), fr(t2, n4, !1, !0), an[n4] = vn;
        }(r1, e1, n3);
        var u1, s1, c1, l1 = function(t2) {
            if (t2 === i4 && y2) return y2;
            if (!gn && t2 in v2) return v2[t2];
            switch(t2){
                case bn:
                case _n:
                case wn:
                    return function() {
                        return new r1(this, t2);
                    };
            }
            return function() {
                return new r1(this);
            };
        }, h1 = e1 + " Iterator", p1 = !1, v2 = t1.prototype, d1 = v2[mn] || v2["@@iterator"] || i4 && v2[i4], y2 = !gn && d1 || l1(i4), g1 = "Array" == e1 && v2.entries || d1;
        if (g1 && (u1 = fn(g1.call(new t1)), yn !== Object.prototype && u1.next && (fr(u1, h1, !0, !0), an[h1] = En)), i4 == _n && d1 && d1.name !== _n && (p1 = !0, y2 = function() {
            return d1.call(this);
        }), a1 && v2[mn] !== y2 && q(v2, mn, y2), an[e1] = y2, i4) {
            if (s1 = {
                values: l1(_n),
                keys: o1 ? y2 : l1(bn),
                entries: l1(wn)
            }, a1) for(c1 in s1)(gn || p1 || !(c1 in v2)) && Ke(v2, c1, s1[c1]);
            else X({
                target: e1,
                proto: !0,
                forced: gn || p1
            }, s1);
        }
        return s1;
    }, Tn = "Array Iterator", Sn = Tr.set, xn = Tr.getterFor(Tn);
    On(Array, "Array", function(t1, e1) {
        Sn(this, {
            type: Tn,
            target: y1(t1),
            index: 0,
            kind: e1
        });
    }, function() {
        var t1 = xn(this), e1 = t1.target, r1 = t1.kind, n3 = t1.index++;
        return !e1 || n3 >= e1.length ? (t1.target = void 0, {
            value: void 0,
            done: !0
        }) : "keys" == r1 ? {
            value: n3,
            done: !1
        } : "values" == r1 ? {
            value: e1[n3],
            done: !1
        } : {
            value: [
                n3,
                e1[n3]
            ],
            done: !1
        };
    }, "values");
    an.Arguments = an.Array;
    var kn = ft("toStringTag");
    for(var An in {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }){
        var jn = i[An], In = jn && jn.prototype;
        In && ar(In) !== kn && q(In, kn, An), an[An] = an.Array;
    }
    var Pn = function(t1) {
        return function(e1, r1) {
            var n3, i4, o1 = String(d1(e1)), a1 = H(r1), u1 = o1.length;
            return a1 < 0 || a1 >= u1 ? t1 ? "" : void 0 : (n3 = o1.charCodeAt(a1)) < 55296 || n3 > 56319 || a1 + 1 === u1 || (i4 = o1.charCodeAt(a1 + 1)) < 56320 || i4 > 57343 ? t1 ? o1.charAt(a1) : n3 : t1 ? o1.slice(a1, a1 + 2) : i4 - 56320 + (n3 - 55296 << 10) + 65536;
        };
    }, Dn = {
        codeAt: Pn(!1),
        charAt: Pn(!0)
    }.charAt, Ln = "String Iterator", Cn = Tr.set, Rn = Tr.getterFor(Ln);
    On(String, "String", function(t1) {
        Cn(this, {
            type: Ln,
            string: String(t1),
            index: 0
        });
    }, function() {
        var t1, e1 = Rn(this), r1 = e1.string, n3 = e1.index;
        return n3 >= r1.length ? {
            value: void 0,
            done: !0
        } : (t1 = Dn(r1, n3), e1.index += t1.length, {
            value: t1,
            done: !1
        });
    });
    var Mn = ft("iterator"), Nn = function(t1) {
        if (null != t1) return t1[Mn] || t1["@@iterator"] || an[ar(t1)];
    }, Fn = function(t1) {
        var e1 = Nn(t1);
        if ("function" != typeof e1) throw TypeError(String(t1) + " is not iterable");
        return N(e1.call(t1));
    }, zn = Nn, qn = function(t1) {
        var e1 = t1.return;
        if ((void 0) !== e1) return N(e1.call(t1)).value;
    }, Yn = function(t1, e1, r1, n3) {
        try {
            return n3 ? e1(N(r1)[0], r1[1]) : e1(r1);
        } catch (e2) {
            throw qn(t1), e2;
        }
    }, Un = ft("iterator"), Xn = Array.prototype, Vn = function(t1) {
        return (void 0) !== t1 && (an.Array === t1 || Xn[Un] === t1);
    }, Wn = ft("iterator"), Gn = !1;
    try {
        var Hn = 0, $n = {
            next: function() {
                return {
                    done: !!Hn++
                };
            },
            return: function() {
                Gn = !0;
            }
        };
        $n[Wn] = function() {
            return this;
        }, Array.from($n, function() {
            throw 2;
        });
    } catch (t1) {
    }
    var Jn = !function(t1, e1) {
        if (!e1 && !Gn) return !1;
        var r1 = !1;
        try {
            var n3 = {
            };
            n3[Wn] = function() {
                return {
                    next: function() {
                        return {
                            done: r1 = !0
                        };
                    }
                };
            }, t1(n3);
        } catch (t2) {
        }
        return r1;
    }(function(t1) {
        Array.from(t1);
    });
    X({
        target: "Array",
        stat: !0,
        forced: Jn
    }, {
        from: function(t1) {
            var e1, r1, n3, i4, o1, a1, u1 = K(t1), s1 = "function" == typeof this ? this : Array, c1 = arguments.length, f1 = c1 > 1 ? arguments[1] : void 0, l1 = (void 0) !== f1, h1 = Nn(u1), p1 = 0;
            if (l1 && (f1 = M(f1, c1 > 2 ? arguments[2] : void 0, 2)), null == h1 || s1 == Array && Vn(h1)) for(r1 = new s1(e1 = J(u1.length)); e1 > p1; p1++)a1 = l1 ? f1(u1[p1], p1) : u1[p1], Ce(r1, p1, a1);
            else for(o1 = (i4 = h1.call(u1)).next, r1 = new s1; !(n3 = o1.call(i4)).done; p1++)a1 = l1 ? Yn(i4, f1, [
                n3.value,
                p1
            ], !0) : n3.value, Ce(r1, p1, a1);
            return r1.length = p1, r1;
        }
    });
    var Qn = C.Array.from, Bn = Qn;
    X({
        target: "Array",
        proto: !0
    }, {
        fill: function(t1) {
            for(var e1 = K(this), r1 = J(e1.length), n3 = arguments.length, i4 = _e(n3 > 1 ? arguments[1] : void 0, r1), o1 = n3 > 2 ? arguments[2] : void 0, a1 = (void 0) === o1 ? r1 : _e(o1, r1); a1 > i4;)e1[i4++] = t1;
            return e1;
        }
    });
    dt("Array").fill;
    var Kn = [].slice, Zn = /MSIE .\./.test(Tt), ti = function(t1) {
        return function(e1, r1) {
            var n3 = arguments.length > 2, i4 = n3 ? Kn.call(arguments, 2) : void 0;
            return t1(n3 ? function() {
                ("function" == typeof e1 ? e1 : Function(e1)).apply(this, i4);
            } : e1, r1);
        };
    };
    X({
        global: !0,
        bind: !0,
        forced: Zn
    }, {
        setTimeout: ti(i.setTimeout),
        setInterval: ti(i.setInterval)
    });
    var ei = C.setTimeout, ri = Ot("JSON", "stringify"), ni = /[\uD800-\uDFFF]/g, ii = /^[\uD800-\uDBFF]$/, oi = /^[\uDC00-\uDFFF]$/, ai = function(t1, e1, r1) {
        var n3 = r1.charAt(e1 - 1), i4 = r1.charAt(e1 + 1);
        return ii.test(t1) && !oi.test(i4) || oi.test(t1) && !ii.test(n3) ? "\\u" + t1.charCodeAt(0).toString(16) : t1;
    }, ui = o(function() {
        return '"\\udf06\\ud834"' !== ri("\udf06\ud834") || '"\\udead"' !== ri("\udead");
    });
    ri && X({
        target: "JSON",
        stat: !0,
        forced: ui
    }, {
        stringify: function(t1, e1, r1) {
            var n3 = ri.apply(null, arguments);
            return "string" == typeof n3 ? n3.replace(ni, ai) : n3;
        }
    }), C.JSON || (C.JSON = {
        stringify: JSON.stringify
    });
    var si = function(t1, e1, r1) {
        return C.JSON.stringify.apply(null, arguments);
    };
    X({
        target: "Object",
        stat: !0,
        sham: !a
    }, {
        create: He
    });
    var ci = C.Object, fi = function(t1, e1) {
        return ci.create(t1, e1);
    }, li = fi;
    var hi, pi = function(t1, e1, r1) {
        return e1 in t1 ? he(t1, e1, {
            value: r1,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t1[e1] = r1, t1;
    }, vi = "\t\n\v\f\r                　\u2028\u2029\ufeff", di = "[" + vi + "]", yi = RegExp("^" + di + di + "*"), gi = RegExp(di + di + "*$"), mi = function(t1) {
        return function(e1) {
            var r1 = String(d1(e1));
            return 1 & t1 && (r1 = r1.replace(yi, "")), 2 & t1 && (r1 = r1.replace(gi, "")), r1;
        };
    }, bi = {
        start: mi(1),
        end: mi(2),
        trim: mi(3)
    }, _i = bi.trim;
    X({
        target: "String",
        proto: !0,
        forced: (hi = "trim", o(function() {
            return !!vi[hi]() || "​᠎" != "​᠎"[hi]() || vi[hi].name !== hi;
        }))
    }, {
        trim: function() {
            return _i(this);
        }
    });
    dt("String").trim;
    var wi = Ee.indexOf, Ei = [].indexOf, Oi = !!Ei && 1 / [
        1
    ].indexOf(1, -0) < 0, Ti = Jt("indexOf"), Si = Ct("indexOf", {
        ACCESSORS: !0,
        1: 0
    });
    X({
        target: "Array",
        proto: !0,
        forced: Oi || !Ti || !Si
    }, {
        indexOf: function(t1) {
            return Oi ? Ei.apply(this, arguments) || 0 : wi(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    dt("Array").indexOf;
    var xi = bi.trim, ki = i.parseInt, Ai = /^[+-]?0[Xx]/, ji = 8 !== ki(vi + "08") || 22 !== ki(vi + "0x16") ? function(t1, e1) {
        var r1 = xi(String(t1));
        return ki(r1, e1 >>> 0 || (Ai.test(r1) ? 16 : 10));
    } : ki;
    X({
        global: !0,
        forced: parseInt != ji
    }, {
        parseInt: ji
    });
    var Ii = c.f, Pi = function(t1) {
        return function(e1) {
            for(var r1, n3 = y1(e1), i4 = ke(n3), o1 = i4.length, u1 = 0, s1 = []; o1 > u1;)r1 = i4[u1++], a && !Ii.call(n3, r1) || s1.push(t1 ? [
                r1,
                n3[r1]
            ] : n3[r1]);
            return s1;
        };
    }, Di = {
        entries: Pi(!0),
        values: Pi(!1)
    }.values;
    X({
        target: "Object",
        stat: !0
    }, {
        values: function(t1) {
            return Di(t1);
        }
    });
    C.Object.values;
    var Li = o(function() {
        fn(1);
    });
    X({
        target: "Object",
        stat: !0,
        forced: Li,
        sham: !un
    }, {
        getPrototypeOf: function(t1) {
            return fn(K(t1));
        }
    });
    var Ci = C.Object.getPrototypeOf, Ri = Ee.includes, Mi = Ct("indexOf", {
        ACCESSORS: !0,
        1: 0
    });
    X({
        target: "Array",
        proto: !0,
        forced: !Mi
    }, {
        includes: function(t1) {
            return Ri(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    dt("Array").includes;
    var Ni = ft("match"), Fi = function(t1) {
        if ((function(t2) {
            var e1;
            return g(t2) && ((void 0) !== (e1 = t2[Ni]) ? !!e1 : "RegExp" == h1(t2));
        })(t1)) throw TypeError("The method doesn't accept regular expressions");
        return t1;
    }, zi = ft("match");
    X({
        target: "String",
        proto: !0,
        forced: !function(t1) {
            var e1 = /./;
            try {
                "/./"[t1](e1);
            } catch (r1) {
                try {
                    return e1[zi] = !1, "/./"[t1](e1);
                } catch (t2) {
                }
            }
            return !1;
        }("includes")
    }, {
        includes: function(t1) {
            return !!~String(d1(this)).indexOf(Fi(t1), arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    dt("String").includes;
    var qi = Object.assign, Yi = Object.defineProperty, Ui = !qi || o(function() {
        if (a && 1 !== qi({
            b: 1
        }, qi(Yi({
        }, "a", {
            enumerable: !0,
            get: function() {
                Yi(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t1 = {
        }, e1 = {
        }, r1 = Symbol(), n3 = "abcdefghijklmnopqrst";
        return t1[r1] = 7, n3.split("").forEach(function(t2) {
            e1[t2] = t2;
        }), 7 != qi({
        }, t1)[r1] || ke(qi({
        }, e1)).join("") != n3;
    }) ? function(t1, e1) {
        for(var r1 = K(t1), n3 = arguments.length, i4 = 1, o1 = De.f, u1 = c.f; n3 > i4;)for(var s1, f1 = v1(arguments[i4++]), l1 = o1 ? ke(f1).concat(o1(f1)) : ke(f1), h1 = l1.length, p1 = 0; h1 > p1;)s1 = l1[p1++], a && !u1.call(f1, s1) || (r1[s1] = f1[s1]);
        return r1;
    } : qi;
    X({
        target: "Object",
        stat: !0,
        forced: Object.assign !== Ui
    }, {
        assign: Ui
    });
    var Xi = C.Object.assign, Vi = It("splice"), Wi = Ct("splice", {
        ACCESSORS: !0,
        0: 0,
        1: 2
    }), Gi = Math.max, Hi = Math.min, $i = 9007199254740991, Ji = "Maximum allowed length exceeded";
    X({
        target: "Array",
        proto: !0,
        forced: !Vi || !Wi
    }, {
        splice: function(t1, e1) {
            var r1, n3, i4, o1, a1, u1, s1 = K(this), c1 = J(s1.length), f1 = _e(t1, c1), l1 = arguments.length;
            if (0 === l1 ? r1 = n3 = 0 : 1 === l1 ? (r1 = 0, n3 = c1 - f1) : (r1 = l1 - 2, n3 = Hi(Gi(H(e1), 0), c1 - f1)), c1 + r1 - n3 > $i) throw TypeError(Ji);
            for(i4 = ht(s1, n3), o1 = 0; o1 < n3; o1++)(a1 = f1 + o1) in s1 && Ce(i4, o1, s1[a1]);
            if (i4.length = n3, r1 < n3) {
                for(o1 = f1; o1 < c1 - n3; o1++)u1 = o1 + r1, (a1 = o1 + n3) in s1 ? s1[u1] = s1[a1] : delete s1[u1];
                for(o1 = c1; o1 > c1 - n3 + r1; o1--)delete s1[o1 - 1];
            } else if (r1 > n3) for(o1 = c1 - n3; o1 > f1; o1--)u1 = o1 + r1 - 1, (a1 = o1 + n3 - 1) in s1 ? s1[u1] = s1[a1] : delete s1[u1];
            for(o1 = 0; o1 < r1; o1++)s1[o1 + f1] = arguments[o1 + 2];
            return s1.length = c1 - n3 + r1, i4;
        }
    });
    var Qi = dt("Array").splice, Bi = Array.prototype, Ki = function(t1) {
        var e1 = t1.splice;
        return t1 === Bi || t1 instanceof Array && e1 === Bi.splice ? Qi : e1;
    }, Zi = [].reverse, to = [
        1,
        2
    ];
    X({
        target: "Array",
        proto: !0,
        forced: String(to) === String(to.reverse())
    }, {
        reverse: function() {
            return V(this) && (this.length = this.length), Zi.call(this);
        }
    });
    var eo = dt("Array").reverse, ro = Array.prototype, no = function(t1) {
        var e1 = t1.reverse;
        return t1 === ro || t1 instanceof Array && e1 === ro.reverse ? eo : e1;
    }, io = wt.forEach, oo = Jt("forEach"), ao = Ct("forEach"), uo = oo && ao ? [].forEach : function(t1) {
        return io(this, t1, arguments.length > 1 ? arguments[1] : void 0);
    };
    X({
        target: "Array",
        proto: !0,
        forced: [].forEach != uo
    }, {
        forEach: uo
    });
    var so = dt("Array").forEach, co = Array.prototype, fo = {
        DOMTokenList: !0,
        NodeList: !0
    }, lo = function(t1) {
        var e1 = t1.forEach;
        return t1 === co || t1 instanceof Array && e1 === co.forEach || fo.hasOwnProperty(ar(t1)) ? so : e1;
    };
    X({
        target: "Array",
        stat: !0
    }, {
        isArray: V
    });
    var ho = C.Array.isArray, po = ho;
    var vo = function(t1) {
        if (po(t1)) return t1;
    }, yo = ft("iterator"), go = function(t1) {
        var e1 = Object(t1);
        return (void 0) !== e1[yo] || "@@iterator" in e1 || an.hasOwnProperty(ar(e1));
    }, mo = ft("isConcatSpreadable"), bo = 9007199254740991, _o = "Maximum allowed index exceeded", wo = At >= 51 || !o(function() {
        var t1 = [];
        return t1[mo] = !1, t1.concat()[0] !== t1;
    }), Eo = It("concat"), Oo = function(t1) {
        if (!g(t1)) return !1;
        var e1 = t1[mo];
        return (void 0) !== e1 ? !!e1 : V(t1);
    };
    X({
        target: "Array",
        proto: !0,
        forced: !wo || !Eo
    }, {
        concat: function(t1) {
            var e1, r1, n3, i4, o1, a1 = K(this), u1 = ht(a1, 0), s1 = 0;
            for(e1 = -1, n3 = arguments.length; e1 < n3; e1++)if (Oo(o1 = -1 === e1 ? a1 : arguments[e1])) {
                if (s1 + (i4 = J(o1.length)) > bo) throw TypeError(_o);
                for(r1 = 0; r1 < i4; r1++, s1++)r1 in o1 && Ce(u1, s1, o1[r1]);
            } else {
                if (s1 >= bo) throw TypeError(_o);
                Ce(u1, s1++, o1);
            }
            return u1.length = s1, u1;
        }
    }), er("asyncIterator"), er("hasInstance"), er("isConcatSpreadable"), er("iterator"), er("match"), er("matchAll"), er("replace"), er("search"), er("species"), er("split"), er("toPrimitive"), er("toStringTag"), er("unscopables"), fr(i.JSON, "JSON", !0);
    var To = C.Symbol;
    er("asyncDispose"), er("dispose"), er("observable"), er("patternMatch"), er("replaceAll");
    var So = To;
    var xo = function(t1, e1) {
        if ((void 0) !== So && go(Object(t1))) {
            var r1 = [], n3 = !0, i4 = !1, o1 = void 0;
            try {
                for(var a1, u1 = Fn(t1); !(n3 = (a1 = u1.next()).done) && (r1.push(a1.value), !e1 || r1.length !== e1); n3 = !0);
            } catch (t2) {
                i4 = !0, o1 = t2;
            } finally{
                try {
                    n3 || null == u1.return || u1.return();
                } finally{
                    if (i4) throw o1;
                }
            }
            return r1;
        }
    }, ko = Qn, Ao = It("slice"), jo = Ct("slice", {
        ACCESSORS: !0,
        0: 0,
        1: 2
    }), Io = ft("species"), Po = [].slice, Do = Math.max;
    X({
        target: "Array",
        proto: !0,
        forced: !Ao || !jo
    }, {
        slice: function(t1, e1) {
            var r2, n4, i5, o2 = y1(this), a2 = J(o2.length), u2 = _e(t1, a2), s1 = _e((void 0) === e1 ? a2 : e1, a2);
            if (V(o2) && ("function" != typeof (r2 = o2.constructor) || r2 !== Array && !V(r2.prototype) ? g(r2) && null === (r2 = r2[Io]) && (r2 = void 0) : r2 = void 0, r2 === Array || (void 0) === r2)) return Po.call(o2, u2, s1);
            for(n4 = new ((void 0) === r2 ? Array : r2)(Do(s1 - u2, 0)), i5 = 0; u2 < s1; u2++, i5++)u2 in o2 && Ce(n4, i5, o2[u2]);
            return n4.length = i5, n4;
        }
    });
    var Lo = dt("Array").slice, Co = Array.prototype, Ro = function(t1) {
        var e1 = t1.slice;
        return t1 === Co || t1 instanceof Array && e1 === Co.slice ? Lo : e1;
    }, Mo = Ro;
    var No = function(t1, e1) {
        (null == e1 || e1 > t1.length) && (e1 = t1.length);
        for(var r2 = 0, n4 = new Array(e1); r2 < e1; r2++)n4[r2] = t1[r2];
        return n4;
    };
    var Fo = function(t1, e1) {
        var r2;
        if (t1) {
            if ("string" == typeof t1) return No(t1, e1);
            var n4 = Mo(r2 = Object.prototype.toString.call(t1)).call(r2, 8, -1);
            return "Object" === n4 && t1.constructor && (n4 = t1.constructor.name), "Map" === n4 || "Set" === n4 ? ko(t1) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? No(t1, e1) : void 0;
        }
    };
    var zo = function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    };
    var qo = function(t1, e1) {
        return vo(t1) || xo(t1, e1) || Fo(t1, e1) || zo();
    };
    X({
        target: "Date",
        stat: !0
    }, {
        now: function() {
            return (new Date).getTime();
        }
    });
    C.Date.now;
    var Yo = o(function() {
        ke(1);
    });
    X({
        target: "Object",
        stat: !0,
        forced: Yo
    }, {
        keys: function(t1) {
            return ke(K(t1));
        }
    });
    var Uo = C.Object.keys, Xo = ho, Vo = Ze.f("iterator"), Wo = Vo, Go = r13(function(t1) {
        function e1(r2) {
            return t1.exports = e1 = "function" == typeof So && "symbol" == typeof Wo ? function(t2) {
                return typeof t2;
            } : function(t2) {
                return t2 && "function" == typeof So && t2.constructor === So && t2 !== So.prototype ? "symbol" : typeof t2;
            }, e1(r2);
        }
        t1.exports = e1;
    });
    X({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: Le
    });
    var Ho = C.Reflect.ownKeys, $o = Ro;
    var Jo = function(t1) {
        if (po(t1)) return No(t1);
    };
    var Qo = function(t1) {
        if ((void 0) !== So && go(Object(t1))) return ko(t1);
    };
    var Bo = function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    };
    var Ko = function(t1) {
        return Jo(t1) || Qo(t1) || Fo(t1) || Bo();
    }, Zo = dt("Array").concat, ta = Array.prototype, ea = function(t1) {
        var e1 = t1.concat;
        return t1 === ta || t1 instanceof Array && e1 === ta.concat ? Zo : e1;
    }, ra = To, na = r13(function(t1) {
        function e1(t2) {
            if (t2) return (function(t3) {
                for(var r2 in e1.prototype)t3[r2] = e1.prototype[r2];
                return t3;
            })(t2);
        }
        t1.exports = e1, e1.prototype.on = e1.prototype.addEventListener = function(t2, e2) {
            return this._callbacks = this._callbacks || {
            }, (this._callbacks["$" + t2] = this._callbacks["$" + t2] || []).push(e2), this;
        }, e1.prototype.once = function(t2, e2) {
            function r2() {
                this.off(t2, r2), e2.apply(this, arguments);
            }
            return r2.fn = e2, this.on(t2, r2), this;
        }, e1.prototype.off = e1.prototype.removeListener = e1.prototype.removeAllListeners = e1.prototype.removeEventListener = function(t2, e2) {
            if (this._callbacks = this._callbacks || {
            }, 0 == arguments.length) return this._callbacks = {
            }, this;
            var r2, n5 = this._callbacks["$" + t2];
            if (!n5) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t2], this;
            for(var i5 = 0; i5 < n5.length; i5++)if ((r2 = n5[i5]) === e2 || r2.fn === e2) {
                n5.splice(i5, 1);
                break;
            }
            return 0 === n5.length && delete this._callbacks["$" + t2], this;
        }, e1.prototype.emit = function(t2) {
            this._callbacks = this._callbacks || {
            };
            for(var e2 = new Array(arguments.length - 1), r2 = this._callbacks["$" + t2], n5 = 1; n5 < arguments.length; n5++)e2[n5 - 1] = arguments[n5];
            if (r2) {
                n5 = 0;
                for(var i5 = (r2 = r2.slice(0)).length; n5 < i5; ++n5)r2[n5].apply(this, e2);
            }
            return this;
        }, e1.prototype.listeners = function(t2) {
            return this._callbacks = this._callbacks || {
            }, this._callbacks["$" + t2] || [];
        }, e1.prototype.hasListeners = function(t2) {
            return !!this.listeners(t2).length;
        };
    });
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function ia() {
        return (ia = Object.assign || function(t1) {
            for(var e1 = 1; e1 < arguments.length; e1++){
                var r2 = arguments[e1];
                for(var n5 in r2)Object.prototype.hasOwnProperty.call(r2, n5) && (t1[n5] = r2[n5]);
            }
            return t1;
        }).apply(this, arguments);
    }
    function oa(t1, e1) {
        t1.prototype = Object.create(e1.prototype), t1.prototype.constructor = t1, t1.__proto__ = e1;
    }
    function aa(t1) {
        if ((void 0) === t1) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t1;
    }
    var ua, sa = "function" != typeof Object.assign ? function(t1) {
        if (null == t1) throw new TypeError("Cannot convert undefined or null to object");
        for(var e1 = Object(t1), r3 = 1; r3 < arguments.length; r3++){
            var n6 = arguments[r3];
            if (null != n6) for(var i6 in n6)n6.hasOwnProperty(i6) && (e1[i6] = n6[i6]);
        }
        return e1;
    } : Object.assign, ca = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], fa = "undefined" == typeof document ? {
        style: {
        }
    } : document.createElement("div"), la = Math.round, ha = Math.abs, pa = Date.now;
    function va(t1, e1) {
        for(var r3, n7, i7 = e1[0].toUpperCase() + e1.slice(1), o2 = 0; o2 < ca.length;){
            if ((n7 = (r3 = ca[o2]) ? r3 + i7 : e1) in t1) return n7;
            o2++;
        }
    }
    ua = "undefined" == typeof window ? {
    } : window;
    var da = va(fa.style, "touchAction"), ya = (void 0) !== da;
    var ga = "compute", ma = "auto", ba = "manipulation", _a = "none", wa = "pan-x", Ea = "pan-y", Oa = function() {
        if (!ya) return !1;
        var t1 = {
        }, e1 = ua.CSS && ua.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(r3) {
            return t1[r3] = !e1 || ua.CSS.supports("touch-action", r3);
        }), t1;
    }(), Ta = "ontouchstart" in ua, Sa = (void 0) !== va(ua, "PointerEvent"), xa = Ta && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), ka = "touch", Aa = "mouse", ja = 16, Ia = 24, Pa = [
        "x",
        "y"
    ], Da = [
        "clientX",
        "clientY"
    ];
    function La(t1, e1, r3) {
        var n7;
        if (t1) {
            if (t1.forEach) t1.forEach(e1, r3);
            else if ((void 0) !== t1.length) for(n7 = 0; n7 < t1.length;)e1.call(r3, t1[n7], n7, t1), n7++;
            else for(n7 in t1)t1.hasOwnProperty(n7) && e1.call(r3, t1[n7], n7, t1);
        }
    }
    function Ca(t1, e1) {
        return "function" == typeof t1 ? t1.apply(e1 && e1[0] || void 0, e1) : t1;
    }
    function Ra(t1, e1) {
        return t1.indexOf(e1) > -1;
    }
    var Ma = function() {
        function t1(t2, e1) {
            this.manager = t2, this.set(e1);
        }
        var e1 = t1.prototype;
        return e1.set = function(t2) {
            t2 === ga && (t2 = this.compute()), ya && this.manager.element.style && Oa[t2] && (this.manager.element.style[da] = t2), this.actions = t2.toLowerCase().trim();
        }, e1.update = function() {
            this.set(this.manager.options.touchAction);
        }, e1.compute = function() {
            var t2 = [];
            return La(this.manager.recognizers, function(e2) {
                Ca(e2.options.enable, [
                    e2
                ]) && (t2 = t2.concat(e2.getTouchAction()));
            }), (function(t3) {
                if (Ra(t3, _a)) return _a;
                var e2 = Ra(t3, wa), r3 = Ra(t3, Ea);
                return e2 && r3 ? _a : e2 || r3 ? e2 ? wa : Ea : Ra(t3, ba) ? ba : ma;
            })(t2.join(" "));
        }, e1.preventDefaults = function(t2) {
            var e2 = t2.srcEvent, r3 = t2.offsetDirection;
            if (this.manager.session.prevented) e2.preventDefault();
            else {
                var n7 = this.actions, i7 = Ra(n7, _a) && !Oa.none, o2 = Ra(n7, Ea) && !Oa["pan-y"], a2 = Ra(n7, wa) && !Oa["pan-x"];
                if (i7) {
                    var u2 = 1 === t2.pointers.length, s1 = t2.distance < 2, c1 = t2.deltaTime < 250;
                    if (u2 && s1 && c1) return;
                }
                if (!a2 || !o2) return i7 || o2 && 6 & r3 || a2 && r3 & Ia ? this.preventSrc(e2) : void 0;
            }
        }, e1.preventSrc = function(t2) {
            this.manager.session.prevented = !0, t2.preventDefault();
        }, t1;
    }();
    function Na(t1, e1) {
        for(; t1;){
            if (t1 === e1) return !0;
            t1 = t1.parentNode;
        }
        return !1;
    }
    function Fa(t1) {
        var e1 = t1.length;
        if (1 === e1) return {
            x: la(t1[0].clientX),
            y: la(t1[0].clientY)
        };
        for(var r3 = 0, n8 = 0, i8 = 0; i8 < e1;)r3 += t1[i8].clientX, n8 += t1[i8].clientY, i8++;
        return {
            x: la(r3 / e1),
            y: la(n8 / e1)
        };
    }
    function za(t1) {
        for(var e1 = [], r3 = 0; r3 < t1.pointers.length;)e1[r3] = {
            clientX: la(t1.pointers[r3].clientX),
            clientY: la(t1.pointers[r3].clientY)
        }, r3++;
        return {
            timeStamp: pa(),
            pointers: e1,
            center: Fa(e1),
            deltaX: t1.deltaX,
            deltaY: t1.deltaY
        };
    }
    function qa(t1, e1, r3) {
        r3 || (r3 = Pa);
        var n8 = e1[r3[0]] - t1[r3[0]], i8 = e1[r3[1]] - t1[r3[1]];
        return Math.sqrt(n8 * n8 + i8 * i8);
    }
    function Ya(t1, e1, r3) {
        r3 || (r3 = Pa);
        var n8 = e1[r3[0]] - t1[r3[0]], i8 = e1[r3[1]] - t1[r3[1]];
        return 180 * Math.atan2(i8, n8) / Math.PI;
    }
    function Ua(t1, e1) {
        return t1 === e1 ? 1 : ha(t1) >= ha(e1) ? t1 < 0 ? 2 : 4 : e1 < 0 ? 8 : ja;
    }
    function Xa(t1, e1, r3) {
        return {
            x: e1 / t1 || 0,
            y: r3 / t1 || 0
        };
    }
    function Va(t1, e1) {
        var r3 = t1.session, n8 = e1.pointers, i8 = n8.length;
        r3.firstInput || (r3.firstInput = za(e1)), i8 > 1 && !r3.firstMultiple ? r3.firstMultiple = za(e1) : 1 === i8 && (r3.firstMultiple = !1);
        var o3 = r3.firstInput, a3 = r3.firstMultiple, u3 = a3 ? a3.center : o3.center, s2 = e1.center = Fa(n8);
        e1.timeStamp = pa(), e1.deltaTime = e1.timeStamp - o3.timeStamp, e1.angle = Ya(u3, s2), e1.distance = qa(u3, s2), (function(t2, e2) {
            var r4 = e2.center, n9 = t2.offsetDelta || {
            }, i9 = t2.prevDelta || {
            }, o4 = t2.prevInput || {
            };
            1 !== e2.eventType && 4 !== o4.eventType || (i9 = t2.prevDelta = {
                x: o4.deltaX || 0,
                y: o4.deltaY || 0
            }, n9 = t2.offsetDelta = {
                x: r4.x,
                y: r4.y
            }), e2.deltaX = i9.x + (r4.x - n9.x), e2.deltaY = i9.y + (r4.y - n9.y);
        })(r3, e1), e1.offsetDirection = Ua(e1.deltaX, e1.deltaY);
        var c2, f1, l1 = Xa(e1.deltaTime, e1.deltaX, e1.deltaY);
        e1.overallVelocityX = l1.x, e1.overallVelocityY = l1.y, e1.overallVelocity = ha(l1.x) > ha(l1.y) ? l1.x : l1.y, e1.scale = a3 ? (c2 = a3.pointers, qa((f1 = n8)[0], f1[1], Da) / qa(c2[0], c2[1], Da)) : 1, e1.rotation = a3 ? (function(t2, e2) {
            return Ya(e2[1], e2[0], Da) + Ya(t2[1], t2[0], Da);
        })(a3.pointers, n8) : 0, e1.maxPointers = r3.prevInput ? e1.pointers.length > r3.prevInput.maxPointers ? e1.pointers.length : r3.prevInput.maxPointers : e1.pointers.length, (function(t2, e2) {
            var r4, n9, i9, o4, a4 = t2.lastInterval || e2, u4 = e2.timeStamp - a4.timeStamp;
            if (8 !== e2.eventType && (u4 > 25 || (void 0) === a4.velocity)) {
                var s3 = e2.deltaX - a4.deltaX, c3 = e2.deltaY - a4.deltaY, f2 = Xa(u4, s3, c3);
                n9 = f2.x, i9 = f2.y, r4 = ha(f2.x) > ha(f2.y) ? f2.x : f2.y, o4 = Ua(s3, c3), t2.lastInterval = e2;
            } else r4 = a4.velocity, n9 = a4.velocityX, i9 = a4.velocityY, o4 = a4.direction;
            e2.velocity = r4, e2.velocityX = n9, e2.velocityY = i9, e2.direction = o4;
        })(r3, e1);
        var h1, p1 = t1.element, v2 = e1.srcEvent;
        Na(h1 = v2.composedPath ? v2.composedPath()[0] : v2.path ? v2.path[0] : v2.target, p1) && (p1 = h1), e1.target = p1;
    }
    function Wa(t1, e1, r3) {
        var n8 = r3.pointers.length, i8 = r3.changedPointers.length, o3 = 1 & e1 && n8 - i8 == 0, a3 = 12 & e1 && n8 - i8 == 0;
        r3.isFirst = !!o3, r3.isFinal = !!a3, o3 && (t1.session = {
        }), r3.eventType = e1, Va(t1, r3), t1.emit("hammer.input", r3), t1.recognize(r3), t1.session.prevInput = r3;
    }
    function Ga(t1) {
        return t1.trim().split(/\s+/g);
    }
    function Ha(t1, e1, r3) {
        La(Ga(e1), function(e2) {
            t1.addEventListener(e2, r3, !1);
        });
    }
    function $a(t1, e1, r3) {
        La(Ga(e1), function(e2) {
            t1.removeEventListener(e2, r3, !1);
        });
    }
    function Ja(t1) {
        var e1 = t1.ownerDocument || t1;
        return e1.defaultView || e1.parentWindow || window;
    }
    var Qa = function() {
        function t1(t2, e1) {
            var r3 = this;
            this.manager = t2, this.callback = e1, this.element = t2.element, this.target = t2.options.inputTarget, this.domHandler = function(e2) {
                Ca(t2.options.enable, [
                    t2
                ]) && r3.handler(e2);
            }, this.init();
        }
        var e1 = t1.prototype;
        return e1.handler = function() {
        }, e1.init = function() {
            this.evEl && Ha(this.element, this.evEl, this.domHandler), this.evTarget && Ha(this.target, this.evTarget, this.domHandler), this.evWin && Ha(Ja(this.element), this.evWin, this.domHandler);
        }, e1.destroy = function() {
            this.evEl && $a(this.element, this.evEl, this.domHandler), this.evTarget && $a(this.target, this.evTarget, this.domHandler), this.evWin && $a(Ja(this.element), this.evWin, this.domHandler);
        }, t1;
    }();
    function Ba(t1, e1, r3) {
        if (t1.indexOf && !r3) return t1.indexOf(e1);
        for(var n8 = 0; n8 < t1.length;){
            if (r3 && t1[n8][r3] == e1 || !r3 && t1[n8] === e1) return n8;
            n8++;
        }
        return -1;
    }
    var Ka = {
        pointerdown: 1,
        pointermove: 2,
        pointerup: 4,
        pointercancel: 8,
        pointerout: 8
    }, Za = {
        2: ka,
        3: "pen",
        4: Aa,
        5: "kinect"
    }, tu = "pointerdown", eu = "pointermove pointerup pointercancel";
    ua.MSPointerEvent && !ua.PointerEvent && (tu = "MSPointerDown", eu = "MSPointerMove MSPointerUp MSPointerCancel");
    var ru = function(t1) {
        function e1() {
            var r3, n8 = e1.prototype;
            return n8.evEl = tu, n8.evWin = eu, (r3 = t1.apply(this, arguments) || this).store = r3.manager.session.pointerEvents = [], r3;
        }
        return oa(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = this.store, r3 = !1, n8 = t2.type.toLowerCase().replace("ms", ""), i8 = Ka[n8], o3 = Za[t2.pointerType] || t2.pointerType, a3 = o3 === ka, u3 = Ba(e2, t2.pointerId, "pointerId");
            1 & i8 && (0 === t2.button || a3) ? u3 < 0 && (e2.push(t2), u3 = e2.length - 1) : 12 & i8 && (r3 = !0), u3 < 0 || (e2[u3] = t2, this.callback(this.manager, i8, {
                pointers: e2,
                changedPointers: [
                    t2
                ],
                pointerType: o3,
                srcEvent: t2
            }), r3 && e2.splice(u3, 1));
        }, e1;
    }(Qa);
    function nu(t1) {
        return Array.prototype.slice.call(t1, 0);
    }
    function iu(t1, e1, r3) {
        for(var n8 = [], i8 = [], o3 = 0; o3 < t1.length;){
            var a3 = e1 ? t1[o3][e1] : t1[o3];
            Ba(i8, a3) < 0 && n8.push(t1[o3]), i8[o3] = a3, o3++;
        }
        return r3 && (n8 = e1 ? n8.sort(function(t2, r4) {
            return t2[e1] > r4[e1];
        }) : n8.sort()), n8;
    }
    var ou = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, au = "touchstart touchmove touchend touchcancel", uu = function(t1) {
        function e1() {
            var r3;
            return e1.prototype.evTarget = au, (r3 = t1.apply(this, arguments) || this).targetIds = {
            }, r3;
        }
        return oa(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = ou[t2.type], r3 = su.call(this, t2, e2);
            r3 && this.callback(this.manager, e2, {
                pointers: r3[0],
                changedPointers: r3[1],
                pointerType: ka,
                srcEvent: t2
            });
        }, e1;
    }(Qa);
    function su(t1, e1) {
        var r3, n8, i8 = nu(t1.touches), o3 = this.targetIds;
        if (3 & e1 && 1 === i8.length) return o3[i8[0].identifier] = !0, [
            i8,
            i8
        ];
        var a4 = nu(t1.changedTouches), u3 = [], s2 = this.target;
        if (n8 = i8.filter(function(t2) {
            return Na(t2.target, s2);
        }), 1 === e1) for(r3 = 0; r3 < n8.length;)o3[n8[r3].identifier] = !0, r3++;
        for(r3 = 0; r3 < a4.length;)o3[a4[r3].identifier] && u3.push(a4[r3]), 12 & e1 && delete o3[a4[r3].identifier], r3++;
        return u3.length ? [
            iu(n8.concat(u3), "identifier", !0),
            u3
        ] : void 0;
    }
    var cu = {
        mousedown: 1,
        mousemove: 2,
        mouseup: 4
    }, fu = "mousedown", lu = "mousemove mouseup", hu = function(t1) {
        function e1() {
            var r3, n8 = e1.prototype;
            return n8.evEl = fu, n8.evWin = lu, (r3 = t1.apply(this, arguments) || this).pressed = !1, r3;
        }
        return oa(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = cu[t2.type];
            1 & e2 && 0 === t2.button && (this.pressed = !0), 2 & e2 && 1 !== t2.which && (e2 = 4), this.pressed && (4 & e2 && (this.pressed = !1), this.callback(this.manager, e2, {
                pointers: [
                    t2
                ],
                changedPointers: [
                    t2
                ],
                pointerType: Aa,
                srcEvent: t2
            }));
        }, e1;
    }(Qa);
    function pu(t1) {
        var e1 = t1.changedPointers[0];
        if (e1.identifier === this.primaryTouch) {
            var r3 = {
                x: e1.clientX,
                y: e1.clientY
            }, n8 = this.lastTouches;
            this.lastTouches.push(r3);
            setTimeout(function() {
                var t2 = n8.indexOf(r3);
                t2 > -1 && n8.splice(t2, 1);
            }, 2500);
        }
    }
    function vu(t1, e1) {
        1 & t1 ? (this.primaryTouch = e1.changedPointers[0].identifier, pu.call(this, e1)) : 12 & t1 && pu.call(this, e1);
    }
    function du(t1) {
        for(var e1 = t1.srcEvent.clientX, r4 = t1.srcEvent.clientY, n9 = 0; n9 < this.lastTouches.length; n9++){
            var i8 = this.lastTouches[n9], o3 = Math.abs(e1 - i8.x), a4 = Math.abs(r4 - i8.y);
            if (o3 <= 25 && a4 <= 25) return !0;
        }
        return !1;
    }
    var yu = function() {
        return (function(t1) {
            function e1(e2, r4) {
                var n9;
                return (n9 = t1.call(this, e2, r4) || this).handler = function(t2, e3, r5) {
                    var i9 = r5.pointerType === ka, o4 = r5.pointerType === Aa;
                    if (!(o4 && r5.sourceCapabilities && r5.sourceCapabilities.firesTouchEvents)) {
                        if (i9) vu.call(aa(aa(n9)), e3, r5);
                        else if (o4 && du.call(aa(aa(n9)), r5)) return;
                        n9.callback(t2, e3, r5);
                    }
                }, n9.touch = new uu(n9.manager, n9.handler), n9.mouse = new hu(n9.manager, n9.handler), n9.primaryTouch = null, n9.lastTouches = [], n9;
            }
            return oa(e1, t1), e1.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e1;
        })(Qa);
    }();
    function gu(t1, e1, r4) {
        return !!Array.isArray(t1) && (La(t1, r4[e1], r4), !0);
    }
    var mu = 32, bu = 1;
    function _u(t1, e1) {
        var r4 = e1.manager;
        return r4 ? r4.get(t1) : t1;
    }
    function wu(t1) {
        return 16 & t1 ? "cancel" : 8 & t1 ? "end" : 4 & t1 ? "move" : 2 & t1 ? "start" : "";
    }
    var Eu = function() {
        function t1(t2) {
            (void 0) === t2 && (t2 = {
            }), this.options = ia({
                enable: !0
            }, t2), this.id = bu++, this.manager = null, this.state = 1, this.simultaneous = {
            }, this.requireFail = [];
        }
        var e1 = t1.prototype;
        return e1.set = function(t2) {
            return sa(this.options, t2), this.manager && this.manager.touchAction.update(), this;
        }, e1.recognizeWith = function(t2) {
            if (gu(t2, "recognizeWith", this)) return this;
            var e2 = this.simultaneous;
            return e2[(t2 = _u(t2, this)).id] || (e2[t2.id] = t2, t2.recognizeWith(this)), this;
        }, e1.dropRecognizeWith = function(t2) {
            return gu(t2, "dropRecognizeWith", this) || (t2 = _u(t2, this), delete this.simultaneous[t2.id]), this;
        }, e1.requireFailure = function(t2) {
            if (gu(t2, "requireFailure", this)) return this;
            var e2 = this.requireFail;
            return -1 === Ba(e2, t2 = _u(t2, this)) && (e2.push(t2), t2.requireFailure(this)), this;
        }, e1.dropRequireFailure = function(t2) {
            if (gu(t2, "dropRequireFailure", this)) return this;
            t2 = _u(t2, this);
            var e2 = Ba(this.requireFail, t2);
            return e2 > -1 && this.requireFail.splice(e2, 1), this;
        }, e1.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e1.canRecognizeWith = function(t2) {
            return !!this.simultaneous[t2.id];
        }, e1.emit = function(t2) {
            var e2 = this, r4 = this.state;
            function n9(r5) {
                e2.manager.emit(r5, t2);
            }
            r4 < 8 && n9(e2.options.event + wu(r4)), n9(e2.options.event), t2.additionalEvent && n9(t2.additionalEvent), r4 >= 8 && n9(e2.options.event + wu(r4));
        }, e1.tryEmit = function(t2) {
            if (this.canEmit()) return this.emit(t2);
            this.state = mu;
        }, e1.canEmit = function() {
            for(var t2 = 0; t2 < this.requireFail.length;){
                if (!(33 & this.requireFail[t2].state)) return !1;
                t2++;
            }
            return !0;
        }, e1.recognize = function(t2) {
            var e2 = sa({
            }, t2);
            if (!Ca(this.options.enable, [
                this,
                e2
            ])) return this.reset(), void (this.state = mu);
            56 & this.state && (this.state = 1), this.state = this.process(e2), 30 & this.state && this.tryEmit(e2);
        }, e1.process = function(t2) {
        }, e1.getTouchAction = function() {
        }, e1.reset = function() {
        }, t1;
    }(), Ou = function(t1) {
        function e1(e2) {
            var r4;
            return (void 0) === e2 && (e2 = {
            }), (r4 = t1.call(this, ia({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e2)) || this).pTime = !1, r4.pCenter = !1, r4._timer = null, r4._input = null, r4.count = 0, r4;
        }
        oa(e1, t1);
        var r4 = e1.prototype;
        return r4.getTouchAction = function() {
            return [
                ba
            ];
        }, r4.process = function(t2) {
            var e2 = this, r5 = this.options, n9 = t2.pointers.length === r5.pointers, i9 = t2.distance < r5.threshold, o4 = t2.deltaTime < r5.time;
            if (this.reset(), 1 & t2.eventType && 0 === this.count) return this.failTimeout();
            if (i9 && o4 && n9) {
                if (4 !== t2.eventType) return this.failTimeout();
                var a5 = !this.pTime || t2.timeStamp - this.pTime < r5.interval, u3 = !this.pCenter || qa(this.pCenter, t2.center) < r5.posThreshold;
                if (this.pTime = t2.timeStamp, this.pCenter = t2.center, u3 && a5 ? this.count += 1 : this.count = 1, this._input = t2, 0 === this.count % r5.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e2.state = 8, e2.tryEmit();
                }, r5.interval), 2) : 8;
            }
            return mu;
        }, r4.failTimeout = function() {
            var t2 = this;
            return this._timer = setTimeout(function() {
                t2.state = mu;
            }, this.options.interval), mu;
        }, r4.reset = function() {
            clearTimeout(this._timer);
        }, r4.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e1;
    }(Eu), Tu = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, ia({
                pointers: 1
            }, e2)) || this;
        }
        oa(e1, t1);
        var r4 = e1.prototype;
        return r4.attrTest = function(t2) {
            var e2 = this.options.pointers;
            return 0 === e2 || t2.pointers.length === e2;
        }, r4.process = function(t2) {
            var e2 = this.state, r5 = t2.eventType, n9 = 6 & e2, i9 = this.attrTest(t2);
            return n9 && (8 & r5 || !i9) ? 16 | e2 : n9 || i9 ? 4 & r5 ? 8 | e2 : 2 & e2 ? 4 | e2 : 2 : mu;
        }, e1;
    }(Eu);
    function Su(t1) {
        return t1 === ja ? "down" : 8 === t1 ? "up" : 2 === t1 ? "left" : 4 === t1 ? "right" : "";
    }
    var xu = function(t1) {
        function e1(e2) {
            var r4;
            return (void 0) === e2 && (e2 = {
            }), (r4 = t1.call(this, ia({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: 30
            }, e2)) || this).pX = null, r4.pY = null, r4;
        }
        oa(e1, t1);
        var r4 = e1.prototype;
        return r4.getTouchAction = function() {
            var t2 = this.options.direction, e2 = [];
            return 6 & t2 && e2.push(Ea), t2 & Ia && e2.push(wa), e2;
        }, r4.directionTest = function(t2) {
            var e2 = this.options, r5 = !0, n9 = t2.distance, i9 = t2.direction, o4 = t2.deltaX, a6 = t2.deltaY;
            return i9 & e2.direction || (6 & e2.direction ? (i9 = 0 === o4 ? 1 : o4 < 0 ? 2 : 4, r5 = o4 !== this.pX, n9 = Math.abs(t2.deltaX)) : (i9 = 0 === a6 ? 1 : a6 < 0 ? 8 : ja, r5 = a6 !== this.pY, n9 = Math.abs(t2.deltaY))), t2.direction = i9, r5 && n9 > e2.threshold && i9 & e2.direction;
        }, r4.attrTest = function(t2) {
            return Tu.prototype.attrTest.call(this, t2) && (2 & this.state || !(2 & this.state) && this.directionTest(t2));
        }, r4.emit = function(e2) {
            this.pX = e2.deltaX, this.pY = e2.deltaY;
            var r5 = Su(e2.direction);
            r5 && (e2.additionalEvent = this.options.event + r5), t1.prototype.emit.call(this, e2);
        }, e1;
    }(Tu), ku = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, ia({
                event: "swipe",
                threshold: 10,
                velocity: 0.3,
                direction: 30,
                pointers: 1
            }, e2)) || this;
        }
        oa(e1, t1);
        var r4 = e1.prototype;
        return r4.getTouchAction = function() {
            return xu.prototype.getTouchAction.call(this);
        }, r4.attrTest = function(e2) {
            var r5, n9 = this.options.direction;
            return 30 & n9 ? r5 = e2.overallVelocity : 6 & n9 ? r5 = e2.overallVelocityX : n9 & Ia && (r5 = e2.overallVelocityY), t1.prototype.attrTest.call(this, e2) && n9 & e2.offsetDirection && e2.distance > this.options.threshold && e2.maxPointers === this.options.pointers && ha(r5) > this.options.velocity && 4 & e2.eventType;
        }, r4.emit = function(t2) {
            var e2 = Su(t2.offsetDirection);
            e2 && this.manager.emit(this.options.event + e2, t2), this.manager.emit(this.options.event, t2);
        }, e1;
    }(Tu), Au = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, ia({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e2)) || this;
        }
        oa(e1, t1);
        var r4 = e1.prototype;
        return r4.getTouchAction = function() {
            return [
                _a
            ];
        }, r4.attrTest = function(e2) {
            return t1.prototype.attrTest.call(this, e2) && (Math.abs(e2.scale - 1) > this.options.threshold || 2 & this.state);
        }, r4.emit = function(e2) {
            if (1 !== e2.scale) {
                var r5 = e2.scale < 1 ? "in" : "out";
                e2.additionalEvent = this.options.event + r5;
            }
            t1.prototype.emit.call(this, e2);
        }, e1;
    }(Tu), ju = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, ia({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e2)) || this;
        }
        oa(e1, t1);
        var r4 = e1.prototype;
        return r4.getTouchAction = function() {
            return [
                _a
            ];
        }, r4.attrTest = function(e2) {
            return t1.prototype.attrTest.call(this, e2) && (Math.abs(e2.rotation) > this.options.threshold || 2 & this.state);
        }, e1;
    }(Tu), Iu = function(t1) {
        function e1(e2) {
            var r4;
            return (void 0) === e2 && (e2 = {
            }), (r4 = t1.call(this, ia({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e2)) || this)._timer = null, r4._input = null, r4;
        }
        oa(e1, t1);
        var r4 = e1.prototype;
        return r4.getTouchAction = function() {
            return [
                ma
            ];
        }, r4.process = function(t2) {
            var e2 = this, r6 = this.options, n9 = t2.pointers.length === r6.pointers, i9 = t2.distance < r6.threshold, o4 = t2.deltaTime > r6.time;
            if (this._input = t2, !i9 || !n9 || 12 & t2.eventType && !o4) this.reset();
            else if (1 & t2.eventType) this.reset(), this._timer = setTimeout(function() {
                e2.state = 8, e2.tryEmit();
            }, r6.time);
            else if (4 & t2.eventType) return 8;
            return mu;
        }, r4.reset = function() {
            clearTimeout(this._timer);
        }, r4.emit = function(t2) {
            8 === this.state && (t2 && 4 & t2.eventType ? this.manager.emit(this.options.event + "up", t2) : (this._input.timeStamp = pa(), this.manager.emit(this.options.event, this._input)));
        }, e1;
    }(Eu), Pu = {
        domEvents: !1,
        touchAction: ga,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, Du = [
        [
            ju,
            {
                enable: !1
            }
        ],
        [
            Au,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            ku,
            {
                direction: 6
            }
        ],
        [
            xu,
            {
                direction: 6
            },
            [
                "swipe"
            ]
        ],
        [
            Ou
        ],
        [
            Ou,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            Iu
        ]
    ];
    function Lu(t1, e1) {
        var r4, n9 = t1.element;
        n9.style && (La(t1.options.cssProps, function(i9, o4) {
            r4 = va(n9.style, o4), e1 ? (t1.oldCssProps[r4] = n9.style[r4], n9.style[r4] = i9) : n9.style[r4] = t1.oldCssProps[r4] || "";
        }), e1 || (t1.oldCssProps = {
        }));
    }
    var Cu = function() {
        function t1(t2, e1) {
            var r4, n9 = this;
            this.options = sa({
            }, Pu, e1 || {
            }), this.options.inputTarget = this.options.inputTarget || t2, this.handlers = {
            }, this.session = {
            }, this.recognizers = [], this.oldCssProps = {
            }, this.element = t2, this.input = new ((r4 = this).options.inputClass || (Sa ? ru : (xa ? uu : (Ta ? yu : hu))))(r4, Wa), this.touchAction = new Ma(this, this.options.touchAction), Lu(this, !0), La(this.options.recognizers, function(t3) {
                var e2 = n9.add(new t3[0](t3[1]));
                t3[2] && e2.recognizeWith(t3[2]), t3[3] && e2.requireFailure(t3[3]);
            }, this);
        }
        var e1 = t1.prototype;
        return e1.set = function(t2) {
            return sa(this.options, t2), t2.touchAction && this.touchAction.update(), t2.inputTarget && (this.input.destroy(), this.input.target = t2.inputTarget, this.input.init()), this;
        }, e1.stop = function(t2) {
            this.session.stopped = t2 ? 2 : 1;
        }, e1.recognize = function(t2) {
            var e2 = this.session;
            if (!e2.stopped) {
                var r4;
                this.touchAction.preventDefaults(t2);
                var n9 = this.recognizers, i9 = e2.curRecognizer;
                (!i9 || i9 && 8 & i9.state) && (e2.curRecognizer = null, i9 = null);
                for(var o4 = 0; o4 < n9.length;)r4 = n9[o4], 2 === e2.stopped || i9 && r4 !== i9 && !r4.canRecognizeWith(i9) ? r4.reset() : r4.recognize(t2), !i9 && 14 & r4.state && (e2.curRecognizer = r4, i9 = r4), o4++;
            }
        }, e1.get = function(t2) {
            if (t2 instanceof Eu) return t2;
            for(var e2 = this.recognizers, r6 = 0; r6 < e2.length; r6++)if (e2[r6].options.event === t2) return e2[r6];
            return null;
        }, e1.add = function(t2) {
            if (gu(t2, "add", this)) return this;
            var e2 = this.get(t2.options.event);
            return e2 && this.remove(e2), this.recognizers.push(t2), t2.manager = this, this.touchAction.update(), t2;
        }, e1.remove = function(t2) {
            if (gu(t2, "remove", this)) return this;
            var e2 = this.get(t2);
            if (t2) {
                var r6 = this.recognizers, n10 = Ba(r6, e2);
                -1 !== n10 && (r6.splice(n10, 1), this.touchAction.update());
            }
            return this;
        }, e1.on = function(t2, e2) {
            if ((void 0) === t2 || (void 0) === e2) return this;
            var r7 = this.handlers;
            return La(Ga(t2), function(t3) {
                r7[t3] = r7[t3] || [], r7[t3].push(e2);
            }), this;
        }, e1.off = function(t2, e2) {
            if ((void 0) === t2) return this;
            var r7 = this.handlers;
            return La(Ga(t2), function(t3) {
                e2 ? r7[t3] && r7[t3].splice(Ba(r7[t3], e2), 1) : delete r7[t3];
            }), this;
        }, e1.emit = function(t2, e2) {
            this.options.domEvents && (function(t3, e3) {
                var r7 = document.createEvent("Event");
                r7.initEvent(t3, !0, !0), r7.gesture = e3, e3.target.dispatchEvent(r7);
            })(t2, e2);
            var r7 = this.handlers[t2] && this.handlers[t2].slice();
            if (r7 && r7.length) {
                e2.type = t2, e2.preventDefault = function() {
                    e2.srcEvent.preventDefault();
                };
                for(var n11 = 0; n11 < r7.length;)r7[n11](e2), n11++;
            }
        }, e1.destroy = function() {
            this.element && Lu(this, !1), this.handlers = {
            }, this.session = {
            }, this.input.destroy(), this.element = null;
        }, t1;
    }(), Ru = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, Mu = "touchstart", Nu = "touchstart touchmove touchend touchcancel", Fu = function(t1) {
        function e1() {
            var r7, n12 = e1.prototype;
            return n12.evTarget = Mu, n12.evWin = Nu, (r7 = t1.apply(this, arguments) || this).started = !1, r7;
        }
        return oa(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = Ru[t2.type];
            if (1 === e2 && (this.started = !0), this.started) {
                var r7 = zu.call(this, t2, e2);
                12 & e2 && r7[0].length - r7[1].length == 0 && (this.started = !1), this.callback(this.manager, e2, {
                    pointers: r7[0],
                    changedPointers: r7[1],
                    pointerType: ka,
                    srcEvent: t2
                });
            }
        }, e1;
    }(Qa);
    function zu(t1, e1) {
        var r8 = nu(t1.touches), n12 = nu(t1.changedTouches);
        return 12 & e1 && (r8 = iu(r8.concat(n12), "identifier", !0)), [
            r8,
            n12
        ];
    }
    function qu(t1, e1, r8) {
        var n12 = "DEPRECATED METHOD: " + e1 + "\n" + r8 + " AT \n";
        return function() {
            var e2 = new Error("get-stack-trace"), r9 = e2 && e2.stack ? e2.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", i10 = window.console && (window.console.warn || window.console.log);
            return i10 && i10.call(window.console, n12, r9), t1.apply(this, arguments);
        };
    }
    var Yu = qu(function(t1, e1, r8) {
        for(var n12 = Object.keys(e1), i10 = 0; i10 < n12.length;)(!r8 || r8 && (void 0) === t1[n12[i10]]) && (t1[n12[i10]] = e1[n12[i10]]), i10++;
        return t1;
    }, "extend", "Use `assign`."), Uu = qu(function(t1, e1) {
        return Yu(t1, e1, !0);
    }, "merge", "Use `assign`.");
    function Xu(t1, e1, r8) {
        var n12, i10 = e1.prototype;
        (n12 = t1.prototype = Object.create(i10)).constructor = t1, n12._super = i10, r8 && sa(n12, r8);
    }
    function Vu(t1, e1) {
        return function() {
            return t1.apply(e1, arguments);
        };
    }
    var Wu = function() {
        var t1 = function(t2, e1) {
            return (void 0) === e1 && (e1 = {
            }), new Cu(t2, ia({
                recognizers: Du.concat()
            }, e1));
        };
        return t1.VERSION = "2.0.17-rc", t1.DIRECTION_ALL = 30, t1.DIRECTION_DOWN = ja, t1.DIRECTION_LEFT = 2, t1.DIRECTION_RIGHT = 4, t1.DIRECTION_UP = 8, t1.DIRECTION_HORIZONTAL = 6, t1.DIRECTION_VERTICAL = Ia, t1.DIRECTION_NONE = 1, t1.DIRECTION_DOWN = ja, t1.INPUT_START = 1, t1.INPUT_MOVE = 2, t1.INPUT_END = 4, t1.INPUT_CANCEL = 8, t1.STATE_POSSIBLE = 1, t1.STATE_BEGAN = 2, t1.STATE_CHANGED = 4, t1.STATE_ENDED = 8, t1.STATE_RECOGNIZED = 8, t1.STATE_CANCELLED = 16, t1.STATE_FAILED = mu, t1.Manager = Cu, t1.Input = Qa, t1.TouchAction = Ma, t1.TouchInput = uu, t1.MouseInput = hu, t1.PointerEventInput = ru, t1.TouchMouseInput = yu, t1.SingleTouchInput = Fu, t1.Recognizer = Eu, t1.AttrRecognizer = Tu, t1.Tap = Ou, t1.Pan = xu, t1.Swipe = ku, t1.Pinch = Au, t1.Rotate = ju, t1.Press = Iu, t1.on = Ha, t1.off = $a, t1.each = La, t1.merge = Uu, t1.extend = Yu, t1.bindFn = Vu, t1.assign = sa, t1.inherit = Xu, t1.bindFn = Vu, t1.prefixed = va, t1.toArray = nu, t1.inArray = Ba, t1.uniqueArray = iu, t1.splitStr = Ga, t1.boolOrFn = Ca, t1.hasParent = Na, t1.addEventListeners = Ha, t1.removeEventListeners = $a, t1.defaults = sa({
        }, Pu, {
            preset: Du
        }), t1;
    }();
    function Gu(t1, e1) {
        var r8;
        if ((void 0) === ra || null == zn(t1)) {
            if (Xo(t1) || (r8 = (function(t2, e2) {
                var r9;
                if (!t2) return;
                if ("string" == typeof t2) return Hu(t2, e2);
                var n12 = $o(r9 = Object.prototype.toString.call(t2)).call(r9, 8, -1);
                "Object" === n12 && t2.constructor && (n12 = t2.constructor.name);
                if ("Map" === n12 || "Set" === n12) return Bn(t2);
                if ("Arguments" === n12 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n12)) return Hu(t2, e2);
            })(t1)) || e1 && t1 && "number" == typeof t1.length) {
                r8 && (t1 = r8);
                var n12 = 0, i10 = function() {
                };
                return {
                    s: i10,
                    n: function() {
                        return n12 >= t1.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t1[n12++]
                        };
                    },
                    e: function(t2) {
                        throw t2;
                    },
                    f: i10
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o5, a6 = !0, u4 = !1;
        return {
            s: function() {
                r8 = Fn(t1);
            },
            n: function() {
                var t2 = r8.next();
                return a6 = t2.done, t2;
            },
            e: function(t2) {
                u4 = !0, o5 = t2;
            },
            f: function() {
                try {
                    a6 || null == r8.return || r8.return();
                } finally{
                    if (u4) throw o5;
                }
            }
        };
    }
    function Hu(t1, e1) {
        (null == e1 || e1 > t1.length) && (e1 = t1.length);
        for(var r8 = 0, n13 = new Array(e1); r8 < e1; r8++)n13[r8] = t1[r8];
        return n13;
    }
    var $u = ra("DELETE");
    function Ju() {
        var t1 = Qu.apply(void 0, arguments);
        return Ku(t1), t1;
    }
    function Qu() {
        for(var t1 = arguments.length, e1 = new Array(t1), r8 = 0; r8 < t1; r8++)e1[r8] = arguments[r8];
        if (e1.length < 2) return e1[0];
        var n13;
        if (e1.length > 2) return Qu.apply(void 0, ea(n13 = [
            Ju(e1[0], e1[1])
        ]).call(n13, Ko($o(e1).call(e1, 2))));
        var i11, o5 = e1[0], a6 = e1[1], u4 = Gu(Ho(a6));
        try {
            for(u4.s(); !(i11 = u4.n()).done;){
                var s2 = i11.value;
                Object.prototype.propertyIsEnumerable.call(a6, s2) && (a6[s2] === $u ? delete o5[s2] : null === o5[s2] || null === a6[s2] || "object" !== Go(o5[s2]) || "object" !== Go(a6[s2]) || Xo(o5[s2]) || Xo(a6[s2]) ? o5[s2] = Bu(a6[s2]) : o5[s2] = Qu(o5[s2], a6[s2]));
            }
        } catch (t2) {
            u4.e(t2);
        } finally{
            u4.f();
        }
        return o5;
    }
    function Bu(t1) {
        return Xo(t1) ? qt(t1).call(t1, function(t2) {
            return Bu(t2);
        }) : "object" === Go(t1) && null !== t1 ? Qu({
        }, t1) : t1;
    }
    function Ku(t1) {
        for(var e1 = 0, r8 = Uo(t1); e1 < r8.length; e1++){
            var n13 = r8[e1];
            t1[n13] === $u ? delete t1[n13] : "object" === Go(t1[n13]) && null !== t1[n13] && Ku(t1[n13]);
        }
    }
    var Zu = "undefined" != typeof window ? window.Hammer || Wu : function() {
        var t1;
        return {
            on: t1 = function() {
            },
            off: t1,
            destroy: t1,
            emit: t1,
            get: function() {
                return {
                    set: t1
                };
            }
        };
    };
    function ts(t1) {
        var e1, r8 = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t1,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            r8._dom.overlay.parentNode.removeChild(r8._dom.overlay);
        });
        var n14 = Zu(this._dom.overlay);
        n14.on("tap", ce(e1 = this._onTapOverlay).call(e1, this)), this._cleanupQueue.push(function() {
            n14.destroy();
        });
        var i11 = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        lo(i11).call(i11, function(t2) {
            n14.on(t2, function(t3) {
                t3.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e2) {
            (function(t2, e3) {
                for(; t2;){
                    if (t2 === e3) return !0;
                    t2 = t2.parentNode;
                }
                return !1;
            })(e2.target, t1) || r8.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", r8._onClick);
        })), this._escListener = function(t2) {
            ("key" in t2 ? "Escape" === t2.key : 27 === t2.keyCode) && r8.deactivate();
        };
    }
    na(ts.prototype), ts.current = null, ts.prototype.destroy = function() {
        var t1, e1;
        this.deactivate();
        var r8, n14 = Gu(no(t1 = Ki(e1 = this._cleanupQueue).call(e1, 0)).call(t1));
        try {
            for(n14.s(); !(r8 = n14.n()).done;)r8.value();
        } catch (t2) {
            n14.e(t2);
        } finally{
            n14.f();
        }
    }, ts.prototype.activate = function() {
        ts.current && ts.current.deactivate(), ts.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, ts.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, ts.prototype._onTapOverlay = function(t1) {
        this.activate(), t1.srcEvent.stopPropagation();
    };
    var es = Ot("Reflect", "construct"), rs = o(function() {
        function t1() {
        }
        return !(es(function() {
        }, [], t1) instanceof t1);
    }), ns = !o(function() {
        es(function() {
        });
    }), is = rs || ns;
    X({
        target: "Reflect",
        stat: !0,
        forced: is,
        sham: is
    }, {
        construct: function(t1, e1) {
            R(t1), N(e1);
            var r8 = arguments.length < 3 ? t1 : R(arguments[2]);
            if (ns && !rs) return es(t1, e1, r8);
            if (t1 == r8) {
                switch(e1.length){
                    case 0:
                        return new t1;
                    case 1:
                        return new t1(e1[0]);
                    case 2:
                        return new t1(e1[0], e1[1]);
                    case 3:
                        return new t1(e1[0], e1[1], e1[2]);
                    case 4:
                        return new t1(e1[0], e1[1], e1[2], e1[3]);
                }
                var n14 = [
                    null
                ];
                return n14.push.apply(n14, e1), new (ae.apply(t1, n14));
            }
            var i11 = r8.prototype, o5 = He(g(i11) ? i11 : Object.prototype), a6 = Function.apply.call(t1, o5, e1);
            return g(a6) ? a6 : o5;
        }
    });
    var os = C.Reflect.construct, as = dt("Array").entries, us = Array.prototype, ss = {
        DOMTokenList: !0,
        NodeList: !0
    }, cs = function(t1) {
        var e1 = t1.entries;
        return t1 === us || t1 instanceof Array && e1 === us.entries || ss.hasOwnProperty(ar(t1)) ? as : e1;
    }, fs = r13(function(t1) {
        var e1 = function(t2) {
            var e2, r8 = Object.prototype, n15 = r8.hasOwnProperty, i11 = "function" == typeof Symbol ? Symbol : {
            }, o5 = i11.iterator || "@@iterator", a6 = i11.asyncIterator || "@@asyncIterator", u4 = i11.toStringTag || "@@toStringTag";
            function s4(t3, e3, r9) {
                return Object.defineProperty(t3, e3, {
                    value: r9,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }), t3[e3];
            }
            try {
                s4({
                }, "");
            } catch (t3) {
                s4 = function(t4, e3, r9) {
                    return t4[e3] = r9;
                };
            }
            function c2(t3, e3, r9, n16) {
                var i12 = e3 && e3.prototype instanceof y2 ? e3 : y2, o6 = Object.create(i12.prototype), a7 = new A2(n16 || []);
                return o6._invoke = (function(t4, e4, r10) {
                    var n17 = l2;
                    return function(i13, o7) {
                        if (n17 === p2) throw new Error("Generator is already running");
                        if (n17 === v2) {
                            if ("throw" === i13) throw o7;
                            return I2();
                        }
                        for(r10.method = i13, r10.arg = o7;;){
                            var a8 = r10.delegate;
                            if (a8) {
                                var u5 = S2(a8, r10);
                                if (u5) {
                                    if (u5 === d2) continue;
                                    return u5;
                                }
                            }
                            if ("next" === r10.method) r10.sent = r10._sent = r10.arg;
                            else if ("throw" === r10.method) {
                                if (n17 === l2) throw n17 = v2, r10.arg;
                                r10.dispatchException(r10.arg);
                            } else "return" === r10.method && r10.abrupt("return", r10.arg);
                            n17 = p2;
                            var s5 = f3(t4, e4, r10);
                            if ("normal" === s5.type) {
                                if (n17 = r10.done ? v2 : h2, s5.arg === d2) continue;
                                return {
                                    value: s5.arg,
                                    done: r10.done
                                };
                            }
                            "throw" === s5.type && (n17 = v2, r10.method = "throw", r10.arg = s5.arg);
                        }
                    };
                })(t3, r9, a7), o6;
            }
            function f3(t3, e3, r9) {
                try {
                    return {
                        type: "normal",
                        arg: t3.call(e3, r9)
                    };
                } catch (t4) {
                    return {
                        type: "throw",
                        arg: t4
                    };
                }
            }
            t2.wrap = c2;
            var l2 = "suspendedStart", h2 = "suspendedYield", p2 = "executing", v2 = "completed", d2 = {
            };
            function y2() {
            }
            function g1() {
            }
            function m1() {
            }
            var b1 = {
            };
            b1[o5] = function() {
                return this;
            };
            var _1 = Object.getPrototypeOf, w1 = _1 && _1(_1(j2([])));
            w1 && w1 !== r8 && n15.call(w1, o5) && (b1 = w1);
            var E1 = m1.prototype = y2.prototype = Object.create(b1);
            function O1(t3) {
                [
                    "next",
                    "throw",
                    "return"
                ].forEach(function(e3) {
                    s4(t3, e3, function(t4) {
                        return this._invoke(e3, t4);
                    });
                });
            }
            function T1(t3, e3) {
                function r9(i12, o6, a7, u6) {
                    var s6 = f3(t3[i12], t3, o6);
                    if ("throw" !== s6.type) {
                        var c4 = s6.arg, l3 = c4.value;
                        return l3 && "object" == typeof l3 && n15.call(l3, "__await") ? e3.resolve(l3.__await).then(function(t4) {
                            r9("next", t4, a7, u6);
                        }, function(t4) {
                            r9("throw", t4, a7, u6);
                        }) : e3.resolve(l3).then(function(t4) {
                            c4.value = t4, a7(c4);
                        }, function(t4) {
                            return r9("throw", t4, a7, u6);
                        });
                    }
                    u6(s6.arg);
                }
                var i12;
                this._invoke = function(t4, n16) {
                    function o6() {
                        return new e3(function(e4, i13) {
                            r9(t4, n16, e4, i13);
                        });
                    }
                    return i12 = i12 ? i12.then(o6, o6) : o6();
                };
            }
            function S2(t3, r9) {
                var n16 = t3.iterator[r9.method];
                if (n16 === e2) {
                    if (r9.delegate = null, "throw" === r9.method) {
                        if (t3.iterator.return && (r9.method = "return", r9.arg = e2, S2(t3, r9), "throw" === r9.method)) return d2;
                        r9.method = "throw", r9.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return d2;
                }
                var i12 = f3(n16, t3.iterator, r9.arg);
                if ("throw" === i12.type) return r9.method = "throw", r9.arg = i12.arg, r9.delegate = null, d2;
                var o6 = i12.arg;
                return o6 ? o6.done ? (r9[t3.resultName] = o6.value, r9.next = t3.nextLoc, "return" !== r9.method && (r9.method = "next", r9.arg = e2), r9.delegate = null, d2) : o6 : (r9.method = "throw", r9.arg = new TypeError("iterator result is not an object"), r9.delegate = null, d2);
            }
            function x1(t3) {
                var e3 = {
                    tryLoc: t3[0]
                };
                1 in t3 && (e3.catchLoc = t3[1]), 2 in t3 && (e3.finallyLoc = t3[2], e3.afterLoc = t3[3]), this.tryEntries.push(e3);
            }
            function k1(t3) {
                var e3 = t3.completion || {
                };
                e3.type = "normal", delete e3.arg, t3.completion = e3;
            }
            function A2(t3) {
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ], t3.forEach(x1, this), this.reset(!0);
            }
            function j2(t3) {
                if (t3) {
                    var r9 = t3[o5];
                    if (r9) return r9.call(t3);
                    if ("function" == typeof t3.next) return t3;
                    if (!isNaN(t3.length)) {
                        var i12 = -1, a7 = function r10() {
                            for(; (++i12) < t3.length;)if (n15.call(t3, i12)) return r10.value = t3[i12], r10.done = !1, r10;
                            return r10.value = e2, r10.done = !0, r10;
                        };
                        return a7.next = a7;
                    }
                }
                return {
                    next: I2
                };
            }
            function I2() {
                return {
                    value: e2,
                    done: !0
                };
            }
            return g1.prototype = E1.constructor = m1, m1.constructor = g1, g1.displayName = s4(m1, u4, "GeneratorFunction"), t2.isGeneratorFunction = function(t3) {
                var e3 = "function" == typeof t3 && t3.constructor;
                return !!e3 && (e3 === g1 || "GeneratorFunction" === (e3.displayName || e3.name));
            }, t2.mark = function(t3) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(t3, m1) : (t3.__proto__ = m1, s4(t3, u4, "GeneratorFunction")), t3.prototype = Object.create(E1), t3;
            }, t2.awrap = function(t3) {
                return {
                    __await: t3
                };
            }, O1(T1.prototype), T1.prototype[a6] = function() {
                return this;
            }, t2.AsyncIterator = T1, t2.async = function(e3, r10, n16, i13, o6) {
                (void 0) === o6 && (o6 = Promise);
                var a9 = new T1(c2(e3, r10, n16, i13), o6);
                return t2.isGeneratorFunction(r10) ? a9 : a9.next().then(function(t3) {
                    return t3.done ? t3.value : a9.next();
                });
            }, O1(E1), s4(E1, u4, "Generator"), E1[o5] = function() {
                return this;
            }, E1.toString = function() {
                return "[object Generator]";
            }, t2.keys = function(t3) {
                var e3 = [];
                for(var r10 in t3)e3.push(r10);
                return e3.reverse(), function r11() {
                    for(; e3.length;){
                        var n16 = e3.pop();
                        if (n16 in t3) return r11.value = n16, r11.done = !1, r11;
                    }
                    return r11.done = !0, r11;
                };
            }, t2.values = j2, A2.prototype = {
                constructor: A2,
                reset: function(t3) {
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = e2, this.done = !1, this.delegate = null, this.method = "next", this.arg = e2, this.tryEntries.forEach(k1), !t3) for(var r10 in this)"t" === r10.charAt(0) && n15.call(this, r10) && !isNaN(+r10.slice(1)) && (this[r10] = e2);
                },
                stop: function() {
                    this.done = !0;
                    var t3 = this.tryEntries[0].completion;
                    if ("throw" === t3.type) throw t3.arg;
                    return this.rval;
                },
                dispatchException: function(t3) {
                    if (this.done) throw t3;
                    var r10 = this;
                    function i13(n17, i14) {
                        return u7.type = "throw", u7.arg = t3, r10.next = n17, i14 && (r10.method = "next", r10.arg = e2), !!i14;
                    }
                    for(var o6 = this.tryEntries.length - 1; o6 >= 0; --o6){
                        var a9 = this.tryEntries[o6], u7 = a9.completion;
                        if ("root" === a9.tryLoc) return i13("end");
                        if (a9.tryLoc <= this.prev) {
                            var s6 = n15.call(a9, "catchLoc"), c5 = n15.call(a9, "finallyLoc");
                            if (s6 && c5) {
                                if (this.prev < a9.catchLoc) return i13(a9.catchLoc, !0);
                                if (this.prev < a9.finallyLoc) return i13(a9.finallyLoc);
                            } else if (s6) {
                                if (this.prev < a9.catchLoc) return i13(a9.catchLoc, !0);
                            } else {
                                if (!c5) throw new Error("try statement without catch or finally");
                                if (this.prev < a9.finallyLoc) return i13(a9.finallyLoc);
                            }
                        }
                    }
                },
                abrupt: function(t3, e3) {
                    for(var r10 = this.tryEntries.length - 1; r10 >= 0; --r10){
                        var i13 = this.tryEntries[r10];
                        if (i13.tryLoc <= this.prev && n15.call(i13, "finallyLoc") && this.prev < i13.finallyLoc) {
                            var o6 = i13;
                            break;
                        }
                    }
                    o6 && ("break" === t3 || "continue" === t3) && o6.tryLoc <= e3 && e3 <= o6.finallyLoc && (o6 = null);
                    var a10 = o6 ? o6.completion : {
                    };
                    return a10.type = t3, a10.arg = e3, o6 ? (this.method = "next", this.next = o6.finallyLoc, d2) : this.complete(a10);
                },
                complete: function(t3, e3) {
                    if ("throw" === t3.type) throw t3.arg;
                    return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e3 && (this.next = e3), d2;
                },
                finish: function(t3) {
                    for(var e3 = this.tryEntries.length - 1; e3 >= 0; --e3){
                        var r10 = this.tryEntries[e3];
                        if (r10.finallyLoc === t3) return this.complete(r10.completion, r10.afterLoc), k1(r10), d2;
                    }
                },
                catch: function(t3) {
                    for(var e3 = this.tryEntries.length - 1; e3 >= 0; --e3){
                        var r11 = this.tryEntries[e3];
                        if (r11.tryLoc === t3) {
                            var n17 = r11.completion;
                            if ("throw" === n17.type) {
                                var i14 = n17.arg;
                                k1(r11);
                            }
                            return i14;
                        }
                    }
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function(t3, r12, n18) {
                    return this.delegate = {
                        iterator: j2(t3),
                        resultName: r12,
                        nextLoc: n18
                    }, "next" === this.method && (this.arg = e2), d2;
                }
            }, t2;
        }(t1.exports);
        try {
            regeneratorRuntime = e1;
        } catch (t2) {
            Function("r", "regeneratorRuntime = r")(e1);
        }
    }), ls = Vo, hs = dt("Array").values, ps = Array.prototype, vs = {
        DOMTokenList: !0,
        NodeList: !0
    }, ds = function(t1) {
        var e1 = t1.values;
        return t1 === ps || t1 instanceof Array && e1 === ps.values || vs.hasOwnProperty(ar(t1)) ? hs : e1;
    }, ys = [], gs = ys.sort, ms = o(function() {
        ys.sort(void 0);
    }), bs = o(function() {
        ys.sort(null);
    }), _s = Jt("sort");
    X({
        target: "Array",
        proto: !0,
        forced: ms || !bs || !_s
    }, {
        sort: function(t1) {
            return (void 0) === t1 ? gs.call(K(this)) : gs.call(K(this), R(t1));
        }
    });
    var ws = dt("Array").sort, Es = Array.prototype, Os = function(t1) {
        var e1 = t1.sort;
        return t1 === Es || t1 instanceof Array && e1 === Es.sort ? ws : e1;
    }, Ts = dt("Array").keys, Ss = Array.prototype, xs = {
        DOMTokenList: !0,
        NodeList: !0
    }, ks = function(t1) {
        var e1 = t1.keys;
        return t1 === Ss || t1 instanceof Array && e1 === Ss.keys || xs.hasOwnProperty(ar(t1)) ? Ts : e1;
    }, As = wt.some, js = Jt("some"), Is = Ct("some");
    X({
        target: "Array",
        proto: !0,
        forced: !js || !Is
    }, {
        some: function(t1) {
            return As(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Ps = dt("Array").some, Ds = Array.prototype, Ls = function(t1) {
        var e1 = t1.some;
        return t1 === Ds || t1 instanceof Array && e1 === Ds.some ? Ps : e1;
    }, Cs = !o(function() {
        return Object.isExtensible(Object.preventExtensions({
        }));
    }), Rs = r13(function(t1) {
        var e1 = z.f, r8 = it("meta"), n15 = 0, i11 = Object.isExtensible || function() {
            return !0;
        }, o5 = function(t2) {
            e1(t2, r8, {
                value: {
                    objectID: "O" + ++n15,
                    weakData: {
                    }
                }
            });
        }, a6 = t1.exports = {
            REQUIRED: !1,
            fastKey: function(t2, e2) {
                if (!g(t2)) return "symbol" == typeof t2 ? t2 : ("string" == typeof t2 ? "S" : "P") + t2;
                if (!_(t2, r8)) {
                    if (!i11(t2)) return "F";
                    if (!e2) return "E";
                    o5(t2);
                }
                return t2[r8].objectID;
            },
            getWeakData: function(t2, e2) {
                if (!_(t2, r8)) {
                    if (!i11(t2)) return !0;
                    if (!e2) return !1;
                    o5(t2);
                }
                return t2[r8].weakData;
            },
            onFreeze: function(t2) {
                return Cs && a6.REQUIRED && i11(t2) && !_(t2, r8) && o5(t2), t2;
            }
        };
        Oe[r8] = !0;
    }), Ms = function(t1, e1) {
        this.stopped = t1, this.result = e1;
    }, Ns = function(t1, e1, r8) {
        var n15, i11, o5, a6, u4, s4, c2, f3 = r8 && r8.that, l2 = !(!r8 || !r8.AS_ENTRIES), h2 = !(!r8 || !r8.IS_ITERATOR), p2 = !(!r8 || !r8.INTERRUPTED), v2 = M(e1, f3, 1 + l2 + p2), d2 = function(t2) {
            return n15 && qn(n15), new Ms(!0, t2);
        }, y2 = function(t2) {
            return l2 ? (N(t2), p2 ? v2(t2[0], t2[1], d2) : v2(t2[0], t2[1])) : p2 ? v2(t2, d2) : v2(t2);
        };
        if (h2) n15 = t1;
        else {
            if ("function" != typeof (i11 = Nn(t1))) throw TypeError("Target is not iterable");
            if (Vn(i11)) {
                for(o5 = 0, a6 = J(t1.length); a6 > o5; o5++)if ((u4 = y2(t1[o5])) && u4 instanceof Ms) return u4;
                return new Ms(!1);
            }
            n15 = i11.call(t1);
        }
        for(s4 = n15.next; !(c2 = s4.call(n15)).done;){
            try {
                u4 = y2(c2.value);
            } catch (t2) {
                throw qn(n15), t2;
            }
            if ("object" == typeof u4 && u4 && u4 instanceof Ms) return u4;
        }
        return new Ms(!1);
    }, Fs = function(t1, e1, r8) {
        if (!(t1 instanceof e1)) throw TypeError("Incorrect " + (r8 ? r8 + " " : "") + "invocation");
        return t1;
    }, zs = z.f, qs = wt.forEach, Ys = Tr.set, Us = Tr.getterFor, Xs = function(t1, e1, r8) {
        var n15, u4 = -1 !== t1.indexOf("Map"), s4 = -1 !== t1.indexOf("Weak"), c2 = u4 ? "set" : "add", f3 = i[t1], l2 = f3 && f3.prototype, h2 = {
        };
        if (a && "function" == typeof f3 && (s4 || l2.forEach && !o(function() {
            (new f3).entries().next();
        }))) {
            n15 = e1(function(e2, r12) {
                Ys(Fs(e2, n15, t1), {
                    type: t1,
                    collection: new f3
                }), null != r12 && Ns(r12, e2[c2], {
                    that: e2,
                    AS_ENTRIES: u4
                });
            });
            var p2 = Us(t1);
            qs([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t2) {
                var e2 = "add" == t2 || "set" == t2;
                !(t2 in l2) || s4 && "clear" == t2 || q(n15.prototype, t2, function(r12, n18) {
                    var i11 = p2(this).collection;
                    if (!e2 && s4 && !g(r12)) return "get" == t2 && void 0;
                    var o5 = i11[t2](0 === r12 ? 0 : r12, n18);
                    return e2 ? this : o5;
                });
            }), s4 || zs(n15.prototype, "size", {
                configurable: !0,
                get: function() {
                    return p2(this).collection.size;
                }
            });
        } else n15 = r8.getConstructor(e1, t1, u4, c2), Rs.REQUIRED = !0;
        return fr(n15, t1, !1, !0), h2[t1] = n15, X({
            global: !0,
            forced: !0
        }, h2), s4 || r8.setStrong(n15, t1, u4), n15;
    }, Vs = function(t1, e1, r8) {
        for(var n15 in e1)r8 && r8.unsafe && t1[n15] ? t1[n15] = e1[n15] : Ke(t1, n15, e1[n15], r8);
        return t1;
    }, Ws = ft("species"), Gs = z.f, Hs = Rs.fastKey, $s = Tr.set, Js = Tr.getterFor, Qs = {
        getConstructor: function(t1, e1, r8, n15) {
            var i11 = t1(function(t2, o5) {
                Fs(t2, i11, e1), $s(t2, {
                    type: e1,
                    index: He(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), a || (t2.size = 0), null != o5 && Ns(o5, t2[n15], {
                    that: t2,
                    AS_ENTRIES: r8
                });
            }), o5 = Js(e1), u4 = function(t2, e2, r12) {
                var n18, i15, u8 = o5(t2), c2 = s7(t2, e2);
                return c2 ? c2.value = r12 : (u8.last = c2 = {
                    index: i15 = Hs(e2, !0),
                    key: e2,
                    value: r12,
                    previous: n18 = u8.last,
                    next: void 0,
                    removed: !1
                }, u8.first || (u8.first = c2), n18 && (n18.next = c2), a ? u8.size++ : t2.size++, "F" !== i15 && (u8.index[i15] = c2)), t2;
            }, s7 = function(t2, e2) {
                var r12, n18 = o5(t2), i15 = Hs(e2);
                if ("F" !== i15) return n18.index[i15];
                for(r12 = n18.first; r12; r12 = r12.next)if (r12.key == e2) return r12;
            };
            return Vs(i11.prototype, {
                clear: function() {
                    for(var t2 = o5(this), e2 = t2.index, r12 = t2.first; r12;)r12.removed = !0, r12.previous && (r12.previous = r12.previous.next = void 0), delete e2[r12.index], r12 = r12.next;
                    t2.first = t2.last = void 0, a ? t2.size = 0 : this.size = 0;
                },
                delete: function(t2) {
                    var e2 = this, r12 = o5(e2), n18 = s7(e2, t2);
                    if (n18) {
                        var i15 = n18.next, u8 = n18.previous;
                        delete r12.index[n18.index], n18.removed = !0, u8 && (u8.next = i15), i15 && (i15.previous = u8), r12.first == n18 && (r12.first = i15), r12.last == n18 && (r12.last = u8), a ? r12.size-- : e2.size--;
                    }
                    return !!n18;
                },
                forEach: function(t2) {
                    for(var e2, r12 = o5(this), n18 = M(t2, arguments.length > 1 ? arguments[1] : void 0, 3); e2 = e2 ? e2.next : r12.first;)for(n18(e2.value, e2.key, this); e2 && e2.removed;)e2 = e2.previous;
                },
                has: function(t2) {
                    return !!s7(this, t2);
                }
            }), Vs(i11.prototype, r8 ? {
                get: function(t2) {
                    var e2 = s7(this, t2);
                    return e2 && e2.value;
                },
                set: function(t2, e2) {
                    return u4(this, 0 === t2 ? 0 : t2, e2);
                }
            } : {
                add: function(t2) {
                    return u4(this, t2 = 0 === t2 ? 0 : t2, t2);
                }
            }), a && Gs(i11.prototype, "size", {
                get: function() {
                    return o5(this).size;
                }
            }), i11;
        },
        setStrong: function(t1, e1, r8) {
            var n15 = e1 + " Iterator", i11 = Js(e1), o5 = Js(n15);
            On(t1, e1, function(t2, e2) {
                $s(this, {
                    type: n15,
                    target: t2,
                    state: i11(t2),
                    kind: e2,
                    last: void 0
                });
            }, function() {
                for(var t2 = o5(this), e2 = t2.kind, r12 = t2.last; r12 && r12.removed;)r12 = r12.previous;
                return t2.target && (t2.last = r12 = r12 ? r12.next : t2.state.first) ? "keys" == e2 ? {
                    value: r12.key,
                    done: !1
                } : "values" == e2 ? {
                    value: r12.value,
                    done: !1
                } : {
                    value: [
                        r12.key,
                        r12.value
                    ],
                    done: !1
                } : (t2.target = void 0, {
                    value: void 0,
                    done: !0
                });
            }, r8 ? "entries" : "values", !r8, !0), (function(t2) {
                var e2 = Ot(t2), r12 = z.f;
                a && e2 && !e2[Ws] && r12(e2, Ws, {
                    configurable: !0,
                    get: function() {
                        return this;
                    }
                });
            })(e1);
        }
    }, Bs = (Xs("Map", function(t1) {
        return function() {
            return t1(this, arguments.length ? arguments[0] : void 0);
        };
    }, Qs), C.Map), Ks = fi;
    X({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: dn
    });
    var Zs = C.Object.setPrototypeOf, tc = r13(function(t1) {
        function e1(r8, n15) {
            return t1.exports = e1 = Zs || function(t2, e2) {
                return t2.__proto__ = e2, t2;
            }, e1(r8, n15);
        }
        t1.exports = e1;
    });
    var ec = function(t1, e1) {
        if ("function" != typeof e1 && null !== e1) throw new TypeError("Super expression must either be null or a function");
        t1.prototype = Ks(e1 && e1.prototype, {
            constructor: {
                value: t1,
                writable: !0,
                configurable: !0
            }
        }), e1 && tc(t1, e1);
    };
    var rc = function(t1) {
        if ((void 0) === t1) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t1;
    };
    var nc, ic = function(t1, e1) {
        return !e1 || "object" !== Go(e1) && "function" != typeof e1 ? rc(t1) : e1;
    }, oc = Ci, ac = r13(function(t1) {
        function e1(r8) {
            return t1.exports = e1 = Zs ? oc : function(t2) {
                return t2.__proto__ || oc(t2);
            }, e1(r8);
        }
        t1.exports = e1;
    }), uc = new Uint8Array(16);
    function sc() {
        if (!nc && !(nc = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return nc(uc);
    }
    var cc = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function fc(t1) {
        return "string" == typeof t1 && cc.test(t1);
    }
    for(var lc = [], hc = 0; hc < 256; ++hc)lc.push((hc + 256).toString(16).substr(1));
    function pc(t1, e1, r8) {
        var n15 = (t1 = t1 || {
        }).random || (t1.rng || sc)();
        if (n15[6] = 15 & n15[6] | 64, n15[8] = 63 & n15[8] | 128, e1) {
            r8 = r8 || 0;
            for(var i11 = 0; i11 < 16; ++i11)e1[r8 + i11] = n15[i11];
            return e1;
        }
        return (function(t2) {
            var e2 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : 0, r12 = (lc[t2[e2 + 0]] + lc[t2[e2 + 1]] + lc[t2[e2 + 2]] + lc[t2[e2 + 3]] + "-" + lc[t2[e2 + 4]] + lc[t2[e2 + 5]] + "-" + lc[t2[e2 + 6]] + lc[t2[e2 + 7]] + "-" + lc[t2[e2 + 8]] + lc[t2[e2 + 9]] + "-" + lc[t2[e2 + 10]] + lc[t2[e2 + 11]] + lc[t2[e2 + 12]] + lc[t2[e2 + 13]] + lc[t2[e2 + 14]] + lc[t2[e2 + 15]]).toLowerCase();
            if (!fc(r12)) throw TypeError("Stringified UUID is invalid");
            return r12;
        })(n15);
    }
    function vc(t1) {
        return "string" == typeof t1 || "number" == typeof t1;
    }
    var dc = function() {
        function t1(e1) {
            fe(this, t1), this._queue = [], this._timeout = null, this._extended = null, this.delay = null, this.max = 1 / 0, this.setOptions(e1);
        }
        return ve(t1, [
            {
                key: "setOptions",
                value: function(t2) {
                    t2 && (void 0) !== t2.delay && (this.delay = t2.delay), t2 && (void 0) !== t2.max && (this.max = t2.max), this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                value: function() {
                    if (this.flush(), this._extended) {
                        for(var t2 = this._extended.object, e1 = this._extended.methods, r8 = 0; r8 < e1.length; r8++){
                            var n15 = e1[r8];
                            n15.original ? t2[n15.name] = n15.original : delete t2[n15.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function(t3, e2) {
                    var r12 = this, n18 = t3[e2];
                    if (!n18) throw new Error("Method " + e2 + " undefined");
                    t3[e2] = function() {
                        for(var t4 = arguments.length, e3 = new Array(t4), i16 = 0; i16 < t4; i16++)e3[i16] = arguments[i16];
                        r12.queue({
                            args: e3,
                            fn: n18,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function(t3) {
                    "function" == typeof t3 ? this._queue.push({
                        fn: t3
                    }) : this._queue.push(t3), this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function() {
                    var t3 = this;
                    this._queue.length > this.max && this.flush(), null != this._timeout && (clearTimeout(this._timeout), this._timeout = null), this.queue.length > 0 && "number" == typeof this.delay && (this._timeout = ei(function() {
                        t3.flush();
                    }, this.delay));
                }
            },
            {
                key: "flush",
                value: function() {
                    var t3, e2;
                    lo(t3 = Ki(e2 = this._queue).call(e2, 0)).call(t3, function(t4) {
                        t4.fn.apply(t4.context || t4.fn, t4.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function(e2, r12) {
                    var n18 = new t1(r12);
                    if ((void 0) !== e2.flush) throw new Error("Target object already has a property flush");
                    e2.flush = function() {
                        n18.flush();
                    };
                    var i16 = [
                        {
                            name: "flush",
                            original: void 0
                        }
                    ];
                    if (r12 && r12.replace) for(var o5 = 0; o5 < r12.replace.length; o5++){
                        var a6 = r12.replace[o5];
                        i16.push({
                            name: a6,
                            original: e2[a6]
                        }), n18.replace(e2, a6);
                    }
                    return n18._extended = {
                        object: e2,
                        methods: i16
                    }, n18;
                }
            }
        ]), t1;
    }(), yc = function() {
        function t1() {
            fe(this, t1), this._subscribers = {
                "*": [],
                add: [],
                remove: [],
                update: []
            }, this.subscribe = t1.prototype.on, this.unsubscribe = t1.prototype.off;
        }
        return ve(t1, [
            {
                key: "_trigger",
                value: function(t3, e2, r12) {
                    var n18, i16;
                    if ("*" === t3) throw new Error("Cannot trigger event *");
                    lo(n18 = ea(i16 = []).call(i16, Ko(this._subscribers[t3]), Ko(this._subscribers["*"]))).call(n18, function(n19) {
                        n19(t3, e2, null != r12 ? r12 : null);
                    });
                }
            },
            {
                key: "on",
                value: function(t3, e2) {
                    "function" == typeof e2 && this._subscribers[t3].push(e2);
                }
            },
            {
                key: "off",
                value: function(t3, e2) {
                    var r12;
                    this._subscribers[t3] = Gt(r12 = this._subscribers[t3]).call(r12, function(t4) {
                        return t4 !== e2;
                    });
                }
            }
        ]), t1;
    }(), gc = (Xs("Set", function(t1) {
        return function() {
            return t1(this, arguments.length ? arguments[0] : void 0);
        };
    }, Qs), C.Set);
    function mc(t1, e2) {
        var r12;
        if ((void 0) === ra || null == zn(t1)) {
            if (Xo(t1) || (r12 = (function(t3, e3) {
                var r13;
                if (!t3) return;
                if ("string" == typeof t3) return bc(t3, e3);
                var n18 = $o(r13 = Object.prototype.toString.call(t3)).call(r13, 8, -1);
                "Object" === n18 && t3.constructor && (n18 = t3.constructor.name);
                if ("Map" === n18 || "Set" === n18) return Bn(t3);
                if ("Arguments" === n18 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n18)) return bc(t3, e3);
            })(t1)) || e2 && t1 && "number" == typeof t1.length) {
                r12 && (t1 = r12);
                var n18 = 0, i16 = function() {
                };
                return {
                    s: i16,
                    n: function() {
                        return n18 >= t1.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t1[n18++]
                        };
                    },
                    e: function(t3) {
                        throw t3;
                    },
                    f: i16
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o5, a10 = !0, u4 = !1;
        return {
            s: function() {
                r12 = Fn(t1);
            },
            n: function() {
                var t3 = r12.next();
                return a10 = t3.done, t3;
            },
            e: function(t3) {
                u4 = !0, o5 = t3;
            },
            f: function() {
                try {
                    a10 || null == r12.return || r12.return();
                } finally{
                    if (u4) throw o5;
                }
            }
        };
    }
    function bc(t1, e2) {
        (null == e2 || e2 > t1.length) && (e2 = t1.length);
        for(var r12 = 0, n19 = new Array(e2); r12 < e2; r12++)n19[r12] = t1[r12];
        return n19;
    }
    var _c = function() {
        function t1(e2) {
            fe(this, t1), this._pairs = e2;
        }
        return ve(t1, [
            {
                key: ls,
                value: fs.mark(function t3() {
                    var e2, r12, n19, i17, o5;
                    return fs.wrap(function(t4) {
                        for(;;)switch(t4.prev = t4.next){
                            case 0:
                                e2 = mc(this._pairs), t4.prev = 1, e2.s();
                            case 3:
                                if ((r12 = e2.n()).done) {
                                    t4.next = 9;
                                    break;
                                }
                                return n19 = qo(r12.value, 2), i17 = n19[0], o5 = n19[1], t4.next = 7, [
                                    i17,
                                    o5
                                ];
                            case 7:
                                t4.next = 3;
                                break;
                            case 9:
                                t4.next = 14;
                                break;
                            case 11:
                                t4.prev = 11, t4.t0 = t4.catch(1), e2.e(t4.t0);
                            case 14:
                                return t4.prev = 14, e2.f(), t4.finish(14);
                            case 17:
                            case "end":
                                return t4.stop();
                        }
                    }, t3, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: fs.mark(function t3() {
                    var e2, r12, n19, i17, o5;
                    return fs.wrap(function(t4) {
                        for(;;)switch(t4.prev = t4.next){
                            case 0:
                                e2 = mc(this._pairs), t4.prev = 1, e2.s();
                            case 3:
                                if ((r12 = e2.n()).done) {
                                    t4.next = 9;
                                    break;
                                }
                                return n19 = qo(r12.value, 2), i17 = n19[0], o5 = n19[1], t4.next = 7, [
                                    i17,
                                    o5
                                ];
                            case 7:
                                t4.next = 3;
                                break;
                            case 9:
                                t4.next = 14;
                                break;
                            case 11:
                                t4.prev = 11, t4.t0 = t4.catch(1), e2.e(t4.t0);
                            case 14:
                                return t4.prev = 14, e2.f(), t4.finish(14);
                            case 17:
                            case "end":
                                return t4.stop();
                        }
                    }, t3, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: fs.mark(function t3() {
                    var e2, r12, n19, i17;
                    return fs.wrap(function(t4) {
                        for(;;)switch(t4.prev = t4.next){
                            case 0:
                                e2 = mc(this._pairs), t4.prev = 1, e2.s();
                            case 3:
                                if ((r12 = e2.n()).done) {
                                    t4.next = 9;
                                    break;
                                }
                                return n19 = qo(r12.value, 1), i17 = n19[0], t4.next = 7, i17;
                            case 7:
                                t4.next = 3;
                                break;
                            case 9:
                                t4.next = 14;
                                break;
                            case 11:
                                t4.prev = 11, t4.t0 = t4.catch(1), e2.e(t4.t0);
                            case 14:
                                return t4.prev = 14, e2.f(), t4.finish(14);
                            case 17:
                            case "end":
                                return t4.stop();
                        }
                    }, t3, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: fs.mark(function t3() {
                    var e2, r12, n19, i17;
                    return fs.wrap(function(t4) {
                        for(;;)switch(t4.prev = t4.next){
                            case 0:
                                e2 = mc(this._pairs), t4.prev = 1, e2.s();
                            case 3:
                                if ((r12 = e2.n()).done) {
                                    t4.next = 9;
                                    break;
                                }
                                return n19 = qo(r12.value, 2), i17 = n19[1], t4.next = 7, i17;
                            case 7:
                                t4.next = 3;
                                break;
                            case 9:
                                t4.next = 14;
                                break;
                            case 11:
                                t4.prev = 11, t4.t0 = t4.catch(1), e2.e(t4.t0);
                            case 14:
                                return t4.prev = 14, e2.f(), t4.finish(14);
                            case 17:
                            case "end":
                                return t4.stop();
                        }
                    }, t3, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function() {
                    var t3;
                    return qt(t3 = Ko(this._pairs)).call(t3, function(t4) {
                        return t4[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function() {
                    var t3;
                    return qt(t3 = Ko(this._pairs)).call(t3, function(t4) {
                        return t4[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function() {
                    return Ko(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function() {
                    var t3, e2 = li(null), r12 = mc(this._pairs);
                    try {
                        for(r12.s(); !(t3 = r12.n()).done;){
                            var n19 = qo(t3.value, 2), i17 = n19[0], o5 = n19[1];
                            e2[i17] = o5;
                        }
                    } catch (t4) {
                        r12.e(t4);
                    } finally{
                        r12.f();
                    }
                    return e2;
                }
            },
            {
                key: "toMap",
                value: function() {
                    return new Bs(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function() {
                    return new gc(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function() {
                    return new gc(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function() {
                    return new t1(Ko(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function(t3) {
                    var e2, r12 = new gc, n20 = mc(this._pairs);
                    try {
                        for(n20.s(); !(e2 = n20.n()).done;){
                            var i18 = qo(e2.value, 2), o7 = i18[0], a10 = i18[1];
                            r12.add(t3(a10, o7));
                        }
                    } catch (t4) {
                        n20.e(t4);
                    } finally{
                        n20.f();
                    }
                    return r12;
                }
            },
            {
                key: "filter",
                value: function(e2) {
                    var r12 = this._pairs;
                    return new t1(pi({
                    }, ls, fs.mark(function t3() {
                        var n20, i19, o8, a11, u4;
                        return fs.wrap(function(t4) {
                            for(;;)switch(t4.prev = t4.next){
                                case 0:
                                    n20 = mc(r12), t4.prev = 1, n20.s();
                                case 3:
                                    if ((i19 = n20.n()).done) {
                                        t4.next = 10;
                                        break;
                                    }
                                    if (o8 = qo(i19.value, 2), a11 = o8[0], u4 = o8[1], !e2(u4, a11)) {
                                        t4.next = 8;
                                        break;
                                    }
                                    return t4.next = 8, [
                                        a11,
                                        u4
                                    ];
                                case 8:
                                    t4.next = 3;
                                    break;
                                case 10:
                                    t4.next = 15;
                                    break;
                                case 12:
                                    t4.prev = 12, t4.t0 = t4.catch(1), n20.e(t4.t0);
                                case 15:
                                    return t4.prev = 15, n20.f(), t4.finish(15);
                                case 18:
                                case "end":
                                    return t4.stop();
                            }
                        }, t3, null, [
                            [
                                1,
                                12,
                                15,
                                18
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "forEach",
                value: function(t3) {
                    var e2, r12 = mc(this._pairs);
                    try {
                        for(r12.s(); !(e2 = r12.n()).done;){
                            var n20 = qo(e2.value, 2), i19 = n20[0];
                            t3(n20[1], i19);
                        }
                    } catch (t4) {
                        r12.e(t4);
                    } finally{
                        r12.f();
                    }
                }
            },
            {
                key: "map",
                value: function(e2) {
                    var r12 = this._pairs;
                    return new t1(pi({
                    }, ls, fs.mark(function t3() {
                        var n21, i20, o8, a11, u4;
                        return fs.wrap(function(t4) {
                            for(;;)switch(t4.prev = t4.next){
                                case 0:
                                    n21 = mc(r12), t4.prev = 1, n21.s();
                                case 3:
                                    if ((i20 = n21.n()).done) {
                                        t4.next = 9;
                                        break;
                                    }
                                    return o8 = qo(i20.value, 2), a11 = o8[0], u4 = o8[1], t4.next = 7, [
                                        a11,
                                        e2(u4, a11)
                                    ];
                                case 7:
                                    t4.next = 3;
                                    break;
                                case 9:
                                    t4.next = 14;
                                    break;
                                case 11:
                                    t4.prev = 11, t4.t0 = t4.catch(1), n21.e(t4.t0);
                                case 14:
                                    return t4.prev = 14, n21.f(), t4.finish(14);
                                case 17:
                                case "end":
                                    return t4.stop();
                            }
                        }, t3, null, [
                            [
                                1,
                                11,
                                14,
                                17
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "max",
                value: function(t3) {
                    var e2 = Fn(this._pairs), r12 = e2.next();
                    if (r12.done) return null;
                    for(var n21 = r12.value[1], i20 = t3(r12.value[1], r12.value[0]); !(r12 = e2.next()).done;){
                        var o8 = qo(r12.value, 2), a11 = o8[0], u4 = o8[1], s7 = t3(u4, a11);
                        s7 > i20 && (i20 = s7, n21 = u4);
                    }
                    return n21;
                }
            },
            {
                key: "min",
                value: function(t3) {
                    var e2 = Fn(this._pairs), r12 = e2.next();
                    if (r12.done) return null;
                    for(var n21 = r12.value[1], i20 = t3(r12.value[1], r12.value[0]); !(r12 = e2.next()).done;){
                        var o9 = qo(r12.value, 2), a12 = o9[0], u9 = o9[1], s8 = t3(u9, a12);
                        s8 < i20 && (i20 = s8, n21 = u9);
                    }
                    return n21;
                }
            },
            {
                key: "reduce",
                value: function(t3, e2) {
                    var r12, n21 = mc(this._pairs);
                    try {
                        for(n21.s(); !(r12 = n21.n()).done;){
                            var i20 = qo(r12.value, 2), o10 = i20[0];
                            e2 = t3(e2, i20[1], o10);
                        }
                    } catch (t4) {
                        n21.e(t4);
                    } finally{
                        n21.f();
                    }
                    return e2;
                }
            },
            {
                key: "sort",
                value: function(e2) {
                    var r12 = this;
                    return new t1(pi({
                    }, ls, function() {
                        var t3;
                        return Fn(Os(t3 = Ko(r12._pairs)).call(t3, function(t4, r13) {
                            var n21 = qo(t4, 2), i21 = n21[0], o11 = n21[1], a13 = qo(r13, 2), u10 = a13[0], s9 = a13[1];
                            return e2(o11, s9, i21, u10);
                        }));
                    }));
                }
            }
        ]), t1;
    }();
    function wc(t1, e2) {
        var r12 = Uo(t1);
        if (on) {
            var n21 = on(t1);
            e2 && (n21 = Gt(n21).call(n21, function(e3) {
                return ze(t1, e3).enumerable;
            })), r12.push.apply(r12, n21);
        }
        return r12;
    }
    function Ec(t1) {
        for(var e2 = 1; e2 < arguments.length; e2++){
            var r12, n22 = null != arguments[e2] ? arguments[e2] : {
            };
            if (e2 % 2) lo(r12 = wc(Object(n22), !0)).call(r12, function(e3) {
                pi(t1, e3, n22[e3]);
            });
            else if (Re) je(t1, Re(n22));
            else {
                var i21;
                lo(i21 = wc(Object(n22))).call(i21, function(e3) {
                    ge(t1, e3, ze(n22, e3));
                });
            }
        }
        return t1;
    }
    function Oc(t1, e2) {
        var r13;
        if ((void 0) === ra || null == zn(t1)) {
            if (Xo(t1) || (r13 = (function(t3, e3) {
                var r14;
                if (!t3) return;
                if ("string" == typeof t3) return Tc(t3, e3);
                var n23 = $o(r14 = Object.prototype.toString.call(t3)).call(r14, 8, -1);
                "Object" === n23 && t3.constructor && (n23 = t3.constructor.name);
                if ("Map" === n23 || "Set" === n23) return Bn(t3);
                if ("Arguments" === n23 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n23)) return Tc(t3, e3);
            })(t1)) || e2 && t1 && "number" == typeof t1.length) {
                r13 && (t1 = r13);
                var n23 = 0, i22 = function() {
                };
                return {
                    s: i22,
                    n: function() {
                        return n23 >= t1.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t1[n23++]
                        };
                    },
                    e: function(t3) {
                        throw t3;
                    },
                    f: i22
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o11, a13 = !0, u10 = !1;
        return {
            s: function() {
                r13 = Fn(t1);
            },
            n: function() {
                var t3 = r13.next();
                return a13 = t3.done, t3;
            },
            e: function(t3) {
                u10 = !0, o11 = t3;
            },
            f: function() {
                try {
                    a13 || null == r13.return || r13.return();
                } finally{
                    if (u10) throw o11;
                }
            }
        };
    }
    function Tc(t1, e2) {
        (null == e2 || e2 > t1.length) && (e2 = t1.length);
        for(var r13 = 0, n24 = new Array(e2); r13 < e2; r13++)n24[r13] = t1[r13];
        return n24;
    }
    function Sc(t1) {
        var e2 = function() {
            if ("undefined" == typeof Reflect || !os) return !1;
            if (os.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Date.prototype.toString.call(os(Date, [], function() {
                })), !0;
            } catch (t3) {
                return !1;
            }
        }();
        return function() {
            var r13, n24 = ac(t1);
            if (e2) {
                var i23 = ac(this).constructor;
                r13 = os(n24, arguments, i23);
            } else r13 = n24.apply(this, arguments);
            return ic(this, r13);
        };
    }
    var xc = function(t1) {
        ec(r14, t1);
        var e2 = Sc(r14);
        function r14(t3, n24) {
            var i24;
            return fe(this, r14), (i24 = e2.call(this))._queue = null, t3 && !Xo(t3) && (n24 = t3, t3 = []), i24._options = n24 || {
            }, i24._data = new Bs, i24.length = 0, i24._idProp = i24._options.fieldId || "id", t3 && t3.length && i24.add(t3), i24.setOptions(n24), i24;
        }
        return ve(r14, [
            {
                key: "setOptions",
                value: function(t3) {
                    t3 && (void 0) !== t3.queue && (!1 === t3.queue ? this._queue && (this._queue.destroy(), this._queue = null) : (this._queue || (this._queue = dc.extend(this, {
                        replace: [
                            "add",
                            "update",
                            "remove"
                        ]
                    })), t3.queue && "object" === Go(t3.queue) && this._queue.setOptions(t3.queue)));
                }
            },
            {
                key: "add",
                value: function(t3, e3) {
                    var r15, n24 = this, i24 = [];
                    if (Xo(t3)) {
                        var o11 = qt(t3).call(t3, function(t4) {
                            return t4[n24._idProp];
                        });
                        if (Ls(o11).call(o11, function(t4) {
                            return n24._data.has(t4);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var a13 = 0, u10 = t3.length; a13 < u10; a13++)r15 = this._addItem(t3[a13]), i24.push(r15);
                    } else {
                        if (!t3 || "object" !== Go(t3)) throw new Error("Unknown dataType");
                        r15 = this._addItem(t3), i24.push(r15);
                    }
                    return i24.length && this._trigger("add", {
                        items: i24
                    }, e3), i24;
                }
            },
            {
                key: "update",
                value: function(t3, e3) {
                    var r15 = this, n24 = [], i24 = [], o12 = [], a14 = [], u11 = this._idProp, s9 = function(t4) {
                        var e4 = t4[u11];
                        if (null != e4 && r15._data.has(e4)) {
                            var s10 = t4, c2 = Xi({
                            }, r15._data.get(e4)), f3 = r15._updateItem(s10);
                            i24.push(f3), a14.push(s10), o12.push(c2);
                        } else {
                            var l2 = r15._addItem(t4);
                            n24.push(l2);
                        }
                    };
                    if (Xo(t3)) for(var c6 = 0, f4 = t3.length; c6 < f4; c6++)t3[c6] && "object" === Go(t3[c6]) ? s9(t3[c6]) : console.warn("Ignoring input item, which is not an object at index " + c6);
                    else {
                        if (!t3 || "object" !== Go(t3)) throw new Error("Unknown dataType");
                        s9(t3);
                    }
                    if (n24.length && this._trigger("add", {
                        items: n24
                    }, e3), i24.length) {
                        var l4 = {
                            items: i24,
                            oldData: o12,
                            data: a14
                        };
                        this._trigger("update", l4, e3);
                    }
                    return ea(n24).call(n24, i24);
                }
            },
            {
                key: "updateOnly",
                value: function(t3, e3) {
                    var r15, n24 = this;
                    Xo(t3) || (t3 = [
                        t3
                    ]);
                    var i24 = qt(r15 = qt(t3).call(t3, function(t4) {
                        var e4 = n24._data.get(t4[n24._idProp]);
                        if (null == e4) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData: e4,
                            update: t4
                        };
                    })).call(r15, function(t4) {
                        var e4 = t4.oldData, r16 = t4.update, i25 = e4[n24._idProp], o12 = function(t5) {
                            for(var e5, r17 = arguments.length, n25 = new Array(r17 > 1 ? r17 - 1 : 0), i26 = 1; i26 < r17; i26++)n25[i26 - 1] = arguments[i26];
                            return Ju.apply(void 0, ea(e5 = [
                                {
                                },
                                t5
                            ]).call(e5, n25));
                        }(e4, r16);
                        return n24._data.set(i25, o12), {
                            id: i25,
                            oldData: e4,
                            updatedData: o12
                        };
                    });
                    if (i24.length) {
                        var o12 = {
                            items: qt(i24).call(i24, function(t4) {
                                return t4.id;
                            }),
                            oldData: qt(i24).call(i24, function(t4) {
                                return t4.oldData;
                            }),
                            data: qt(i24).call(i24, function(t4) {
                                return t4.updatedData;
                            })
                        };
                        return this._trigger("update", o12, e3), o12.items;
                    }
                    return [];
                }
            },
            {
                key: "get",
                value: function(t3, e3) {
                    var r15 = void 0, n24 = void 0, i24 = void 0;
                    vc(t3) ? (r15 = t3, i24 = e3) : Xo(t3) ? (n24 = t3, i24 = e3) : i24 = t3;
                    var o13, a14 = i24 && "Object" === i24.returnType ? "Object" : "Array", u11 = i24 && Gt(i24), s9 = [], c6 = void 0, f4 = void 0, l5 = void 0;
                    if (null != r15) (c6 = this._data.get(r15)) && u11 && !u11(c6) && (c6 = void 0);
                    else if (null != n24) for(var h2 = 0, p3 = n24.length; h2 < p3; h2++)null == (c6 = this._data.get(n24[h2])) || u11 && !u11(c6) || s9.push(c6);
                    else for(var v2, d2 = 0, y2 = (f4 = Ko(ks(v2 = this._data).call(v2))).length; d2 < y2; d2++)l5 = f4[d2], null == (c6 = this._data.get(l5)) || u11 && !u11(c6) || s9.push(c6);
                    if (i24 && i24.order && null == r15 && this._sort(s9, i24.order), i24 && i24.fields) {
                        var g1 = i24.fields;
                        if (null != r15 && null != c6) c6 = this._filterFields(c6, g1);
                        else for(var m1 = 0, b1 = s9.length; m1 < b1; m1++)s9[m1] = this._filterFields(s9[m1], g1);
                    }
                    if ("Object" == a14) {
                        for(var _1 = {
                        }, w1 = 0, E1 = s9.length; w1 < E1; w1++){
                            var O1 = s9[w1];
                            _1[O1[this._idProp]] = O1;
                        }
                        return _1;
                    }
                    return null != r15 ? null !== (o13 = c6) && (void 0) !== o13 ? o13 : null : s9;
                }
            },
            {
                key: "getIds",
                value: function(t3) {
                    var e3 = this._data, r15 = t3 && Gt(t3), n24 = t3 && t3.order, i24 = Ko(ks(e3).call(e3)), o13 = [];
                    if (r15) {
                        if (n24) {
                            for(var a14 = [], u11 = 0, s9 = i24.length; u11 < s9; u11++){
                                var c6 = i24[u11], f4 = this._data.get(c6);
                                null != f4 && r15(f4) && a14.push(f4);
                            }
                            this._sort(a14, n24);
                            for(var l5 = 0, h2 = a14.length; l5 < h2; l5++)o13.push(a14[l5][this._idProp]);
                        } else for(var p3 = 0, v2 = i24.length; p3 < v2; p3++){
                            var d2 = i24[p3], y2 = this._data.get(d2);
                            null != y2 && r15(y2) && o13.push(y2[this._idProp]);
                        }
                    } else if (n24) {
                        for(var g2 = [], m2 = 0, b2 = i24.length; m2 < b2; m2++){
                            var _2 = i24[m2];
                            g2.push(e3.get(_2));
                        }
                        this._sort(g2, n24);
                        for(var w2 = 0, E2 = g2.length; w2 < E2; w2++)o13.push(g2[w2][this._idProp]);
                    } else for(var O2 = 0, T1 = i24.length; O2 < T1; O2++){
                        var S2 = i24[O2], x1 = e3.get(S2);
                        null != x1 && o13.push(x1[this._idProp]);
                    }
                    return o13;
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function(t3, e3) {
                    var r15 = e3 && Gt(e3), n24 = this._data, i24 = Ko(ks(n24).call(n24));
                    if (e3 && e3.order) for(var o13 = this.get(e3), a15 = 0, u12 = o13.length; a15 < u12; a15++){
                        var s11 = o13[a15];
                        t3(s11, s11[this._idProp]);
                    }
                    else for(var c7 = 0, f5 = i24.length; c7 < f5; c7++){
                        var l6 = i24[c7], h3 = this._data.get(l6);
                        null == h3 || r15 && !r15(h3) || t3(h3, l6);
                    }
                }
            },
            {
                key: "map",
                value: function(t3, e3) {
                    for(var r15 = e3 && Gt(e3), n24 = [], i24 = this._data, o13 = Ko(ks(i24).call(i24)), a15 = 0, u12 = o13.length; a15 < u12; a15++){
                        var s12 = o13[a15], c7 = this._data.get(s12);
                        null == c7 || r15 && !r15(c7) || n24.push(t3(c7, s12));
                    }
                    return e3 && e3.order && this._sort(n24, e3.order), n24;
                }
            },
            {
                key: "_filterFields",
                value: function(t3, e3) {
                    var r15;
                    return t3 ? re(r15 = Xo(e3) ? e3 : Uo(e3)).call(r15, function(e4, r16) {
                        return e4[r16] = t3[r16], e4;
                    }, {
                    }) : t3;
                }
            },
            {
                key: "_sort",
                value: function(t3, e3) {
                    if ("string" == typeof e3) {
                        var r15 = e3;
                        Os(t3).call(t3, function(t4, e4) {
                            var n24 = t4[r15], i24 = e4[r15];
                            return n24 > i24 ? 1 : n24 < i24 ? -1 : 0;
                        });
                    } else {
                        if ("function" != typeof e3) throw new TypeError("Order must be a function or a string");
                        Os(t3).call(t3, e3);
                    }
                }
            },
            {
                key: "remove",
                value: function(t3, e3) {
                    for(var r16 = [], n24 = [], i24 = Xo(t3) ? t3 : [
                        t3
                    ], o13 = 0, a15 = i24.length; o13 < a15; o13++){
                        var u12 = this._remove(i24[o13]);
                        if (u12) {
                            var s13 = u12[this._idProp];
                            null != s13 && (r16.push(s13), n24.push(u12));
                        }
                    }
                    return r16.length && this._trigger("remove", {
                        items: r16,
                        oldData: n24
                    }, e3), r16;
                }
            },
            {
                key: "_remove",
                value: function(t3) {
                    var e3;
                    if (vc(t3) ? e3 = t3 : t3 && "object" === Go(t3) && (e3 = t3[this._idProp]), null != e3 && this._data.has(e3)) {
                        var r16 = this._data.get(e3) || null;
                        return this._data.delete(e3), --this.length, r16;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function(t3) {
                    for(var e3, r17 = Ko(ks(e3 = this._data).call(e3)), n24 = [], i24 = 0, o13 = r17.length; i24 < o13; i24++)n24.push(this._data.get(r17[i24]));
                    return this._data.clear(), this.length = 0, this._trigger("remove", {
                        items: r17,
                        oldData: n24
                    }, t3), r17;
                }
            },
            {
                key: "max",
                value: function(t3) {
                    var e3, r17, n24 = null, i24 = null, o13 = Oc(ds(e3 = this._data).call(e3));
                    try {
                        for(o13.s(); !(r17 = o13.n()).done;){
                            var a15 = r17.value, u13 = a15[t3];
                            "number" == typeof u13 && (null == i24 || u13 > i24) && (n24 = a15, i24 = u13);
                        }
                    } catch (t4) {
                        o13.e(t4);
                    } finally{
                        o13.f();
                    }
                    return n24 || null;
                }
            },
            {
                key: "min",
                value: function(t3) {
                    var e3, r17, n24 = null, i24 = null, o13 = Oc(ds(e3 = this._data).call(e3));
                    try {
                        for(o13.s(); !(r17 = o13.n()).done;){
                            var a16 = r17.value, u14 = a16[t3];
                            "number" == typeof u14 && (null == i24 || u14 < i24) && (n24 = a16, i24 = u14);
                        }
                    } catch (t4) {
                        o13.e(t4);
                    } finally{
                        o13.f();
                    }
                    return n24 || null;
                }
            },
            {
                key: "distinct",
                value: function(t3) {
                    for(var e3 = this._data, r17 = Ko(ks(e3).call(e3)), n24 = [], i24 = 0, o13 = 0, a17 = r17.length; o13 < a17; o13++){
                        for(var u15 = r17[o13], s14 = e3.get(u15)[t3], c8 = !1, f5 = 0; f5 < i24; f5++)if (n24[f5] == s14) {
                            c8 = !0;
                            break;
                        }
                        c8 || (void 0) === s14 || (n24[i24] = s14, i24++);
                    }
                    return n24;
                }
            },
            {
                key: "_addItem",
                value: function(t3) {
                    var e3 = function(t4, e4) {
                        return null == t4[e4] && (t4[e4] = pc()), t4;
                    }(t3, this._idProp), r17 = e3[this._idProp];
                    if (this._data.has(r17)) throw new Error("Cannot add item: item with id " + r17 + " already exists");
                    return this._data.set(r17, e3), ++this.length, r17;
                }
            },
            {
                key: "_updateItem",
                value: function(t3) {
                    var e3 = t3[this._idProp];
                    if (null == e3) throw new Error("Cannot update item: item has no id (item: " + si(t3) + ")");
                    var r17 = this._data.get(e3);
                    if (!r17) throw new Error("Cannot update item: no item with id " + e3 + " found");
                    return this._data.set(e3, Ec(Ec({
                    }, r17), t3)), e3;
                }
            },
            {
                key: "stream",
                value: function(t3) {
                    if (t3) {
                        var e3 = this._data;
                        return new _c(pi({
                        }, ls, fs.mark(function r17() {
                            var n24, i24, o13, a17;
                            return fs.wrap(function(r18) {
                                for(;;)switch(r18.prev = r18.next){
                                    case 0:
                                        n24 = Oc(t3), r18.prev = 1, n24.s();
                                    case 3:
                                        if ((i24 = n24.n()).done) {
                                            r18.next = 11;
                                            break;
                                        }
                                        if (o13 = i24.value, null == (a17 = e3.get(o13))) {
                                            r18.next = 9;
                                            break;
                                        }
                                        return r18.next = 9, [
                                            o13,
                                            a17
                                        ];
                                    case 9:
                                        r18.next = 3;
                                        break;
                                    case 11:
                                        r18.next = 16;
                                        break;
                                    case 13:
                                        r18.prev = 13, r18.t0 = r18.catch(1), n24.e(r18.t0);
                                    case 16:
                                        return r18.prev = 16, n24.f(), r18.finish(16);
                                    case 19:
                                    case "end":
                                        return r18.stop();
                                }
                            }, r17, null, [
                                [
                                    1,
                                    13,
                                    16,
                                    19
                                ]
                            ]);
                        })));
                    }
                    var r17;
                    return new _c(pi({
                    }, ls, ce(r17 = cs(this._data)).call(r17, this._data)));
                }
            },
            {
                key: "idProp",
                get: function() {
                    return this._idProp;
                }
            }
        ]), r14;
    }(yc);
    function kc(t1, e2) {
        var r14;
        if ((void 0) === ra || null == zn(t1)) {
            if (Xo(t1) || (r14 = (function(t3, e4) {
                var r17;
                if (!t3) return;
                if ("string" == typeof t3) return Ac(t3, e4);
                var n24 = $o(r17 = Object.prototype.toString.call(t3)).call(r17, 8, -1);
                "Object" === n24 && t3.constructor && (n24 = t3.constructor.name);
                if ("Map" === n24 || "Set" === n24) return Bn(t3);
                if ("Arguments" === n24 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n24)) return Ac(t3, e4);
            })(t1)) || e2 && t1 && "number" == typeof t1.length) {
                r14 && (t1 = r14);
                var n24 = 0, i24 = function() {
                };
                return {
                    s: i24,
                    n: function() {
                        return n24 >= t1.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t1[n24++]
                        };
                    },
                    e: function(t3) {
                        throw t3;
                    },
                    f: i24
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o13, a17 = !0, u16 = !1;
        return {
            s: function() {
                r14 = Fn(t1);
            },
            n: function() {
                var t3 = r14.next();
                return a17 = t3.done, t3;
            },
            e: function(t3) {
                u16 = !0, o13 = t3;
            },
            f: function() {
                try {
                    a17 || null == r14.return || r14.return();
                } finally{
                    if (u16) throw o13;
                }
            }
        };
    }
    function Ac(t1, e2) {
        (null == e2 || e2 > t1.length) && (e2 = t1.length);
        for(var r14 = 0, n25 = new Array(e2); r14 < e2; r14++)n25[r14] = t1[r14];
        return n25;
    }
    function jc(t1) {
        var e2 = function() {
            if ("undefined" == typeof Reflect || !os) return !1;
            if (os.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Date.prototype.toString.call(os(Date, [], function() {
                })), !0;
            } catch (t3) {
                return !1;
            }
        }();
        return function() {
            var r14, n25 = ac(t1);
            if (e2) {
                var i25 = ac(this).constructor;
                r14 = os(n25, arguments, i25);
            } else r14 = n25.apply(this, arguments);
            return ic(this, r14);
        };
    }
    var Ic = function(t1) {
        ec(r14, t1);
        var e2 = jc(r14);
        function r14(t3, n25) {
            var i26, o13;
            return fe(this, r14), (o13 = e2.call(this)).length = 0, o13._ids = new gc, o13._options = n25 || {
            }, o13._listener = ce(i26 = o13._onEvent).call(i26, rc(o13)), o13.setData(t3), o13;
        }
        return ve(r14, [
            {
                key: "setData",
                value: function(t3) {
                    if (this._data) {
                        this._data.off && this._data.off("*", this._listener);
                        var e4 = this._data.getIds({
                            filter: Gt(this._options)
                        }), r17 = this._data.get(e4);
                        this._ids.clear(), this.length = 0, this._trigger("remove", {
                            items: e4,
                            oldData: r17
                        });
                    }
                    if (null != t3) {
                        this._data = t3;
                        for(var n25 = this._data.getIds({
                            filter: Gt(this._options)
                        }), i26 = 0, o13 = n25.length; i26 < o13; i26++){
                            var a17 = n25[i26];
                            this._ids.add(a17);
                        }
                        this.length = n25.length, this._trigger("add", {
                            items: n25
                        });
                    } else this._data = new xc;
                    this._data.on && this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function() {
                    for(var t3 = this._data.getIds({
                        filter: Gt(this._options)
                    }), e5 = Ko(this._ids), r18 = {
                    }, n26 = [], i27 = [], o14 = [], a18 = 0, u16 = t3.length; a18 < u16; a18++){
                        var s15 = t3[a18];
                        r18[s15] = !0, this._ids.has(s15) || (n26.push(s15), this._ids.add(s15));
                    }
                    for(var c9 = 0, f6 = e5.length; c9 < f6; c9++){
                        var l7 = e5[c9], h4 = this._data.get(l7);
                        null == h4 ? console.error("If you see this, report it please.") : r18[l7] || (i27.push(l7), o14.push(h4), this._ids.delete(l7));
                    }
                    this.length += n26.length - i27.length, n26.length && this._trigger("add", {
                        items: n26
                    }), i27.length && this._trigger("remove", {
                        items: i27,
                        oldData: o14
                    });
                }
            },
            {
                key: "get",
                value: function(t3, e5) {
                    if (null == this._data) return null;
                    var r18, n26 = null;
                    vc(t3) || Xo(t3) ? (n26 = t3, r18 = e5) : r18 = t3;
                    var i27 = Xi({
                    }, this._options, r18), o14 = Gt(this._options), a18 = r18 && Gt(r18);
                    return o14 && a18 && (i27.filter = function(t4) {
                        return o14(t4) && a18(t4);
                    }), null == n26 ? this._data.get(i27) : this._data.get(n26, i27);
                }
            },
            {
                key: "getIds",
                value: function(t3) {
                    if (this._data.length) {
                        var e5, r18 = Gt(this._options), n26 = null != t3 ? Gt(t3) : null;
                        return e5 = n26 ? r18 ? function(t4) {
                            return r18(t4) && n26(t4);
                        } : n26 : r18, this._data.getIds({
                            filter: e5,
                            order: t3 && t3.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "forEach",
                value: function(t3, e6) {
                    if (this._data) {
                        var r19, n27, i27 = Gt(this._options), o14 = e6 && Gt(e6);
                        n27 = o14 ? i27 ? function(t4) {
                            return i27(t4) && o14(t4);
                        } : o14 : i27, lo(r19 = this._data).call(r19, t3, {
                            filter: n27,
                            order: e6 && e6.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function(t3, e6) {
                    if (this._data) {
                        var r20, n28, i28 = Gt(this._options), o15 = e6 && Gt(e6);
                        return n28 = o15 ? i28 ? function(t4) {
                            return i28(t4) && o15(t4);
                        } : o15 : i28, qt(r20 = this._data).call(r20, t3, {
                            filter: n28,
                            order: e6 && e6.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function(t3) {
                    var e6;
                    return this._data.stream(t3 || pi({
                    }, ls, ce(e6 = ks(this._ids)).call(e6, this._ids)));
                }
            },
            {
                key: "dispose",
                value: function() {
                    var t3;
                    null !== (t3 = this._data) && (void 0) !== t3 && t3.off && this._data.off("*", this._listener);
                    var e6, n29 = "This data view has already been disposed of.", i29 = {
                        get: function() {
                            throw new Error(n29);
                        },
                        set: function() {
                            throw new Error(n29);
                        },
                        configurable: !1
                    }, o16 = kc(Ho(r14.prototype));
                    try {
                        for(o16.s(); !(e6 = o16.n()).done;){
                            var a18 = e6.value;
                            ge(this, a18, i29);
                        }
                    } catch (t4) {
                        o16.e(t4);
                    } finally{
                        o16.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function(t3, e6, r21) {
                    if (e6 && e6.items && this._data) {
                        var n29 = e6.items, i29 = [], o16 = [], a19 = [], u16 = [], s16 = [], c9 = [];
                        switch(t3){
                            case "add":
                                for(var f6 = 0, l8 = n29.length; f6 < l8; f6++){
                                    var h5 = n29[f6];
                                    this.get(h5) && (this._ids.add(h5), i29.push(h5));
                                }
                                break;
                            case "update":
                                for(var p4 = 0, v3 = n29.length; p4 < v3; p4++){
                                    var d3 = n29[p4];
                                    this.get(d3) ? this._ids.has(d3) ? (o16.push(d3), s16.push(e6.data[p4]), u16.push(e6.oldData[p4])) : (this._ids.add(d3), i29.push(d3)) : this._ids.has(d3) && (this._ids.delete(d3), a19.push(d3), c9.push(e6.oldData[p4]));
                                }
                                break;
                            case "remove":
                                for(var y3 = 0, g3 = n29.length; y3 < g3; y3++){
                                    var m3 = n29[y3];
                                    this._ids.has(m3) && (this._ids.delete(m3), a19.push(m3), c9.push(e6.oldData[y3]));
                                }
                        }
                        this.length += i29.length - a19.length, i29.length && this._trigger("add", {
                            items: i29
                        }, r21), o16.length && this._trigger("update", {
                            items: o16,
                            oldData: u16,
                            data: s16
                        }, r21), a19.length && this._trigger("remove", {
                            items: a19,
                            oldData: c9
                        }, r21);
                    }
                }
            },
            {
                key: "idProp",
                get: function() {
                    return this.getDataSet().idProp;
                }
            }
        ]), r14;
    }(yc);
    function Pc(t1, e2) {
        return "object" === Go(e2) && null !== e2 && t1 === e2.idProp && "function" == typeof e2.add && "function" == typeof e2.clear && "function" == typeof e2.distinct && "function" == typeof lo(e2) && "function" == typeof e2.get && "function" == typeof e2.getDataSet && "function" == typeof e2.getIds && "number" == typeof e2.length && "function" == typeof qt(e2) && "function" == typeof e2.max && "function" == typeof e2.min && "function" == typeof e2.off && "function" == typeof e2.on && "function" == typeof e2.remove && "function" == typeof e2.setOptions && "function" == typeof e2.stream && "function" == typeof e2.update && "function" == typeof e2.updateOnly;
    }
    t.DELETE = $u, t.DataSet = xc, t.DataStream = _c, t.DataView = Ic, t.Queue = dc, t.createNewDataPipeFrom = function(t1) {
        return new ye(t1);
    }, t.isDataSetLike = Pc, t.isDataViewLike = function(t1, e2) {
        return "object" === Go(e2) && null !== e2 && t1 === e2.idProp && "function" == typeof lo(e2) && "function" == typeof e2.get && "function" == typeof e2.getDataSet && "function" == typeof e2.getIds && "number" == typeof e2.length && "function" == typeof qt(e2) && "function" == typeof e2.off && "function" == typeof e2.on && "function" == typeof e2.stream && Pc(t1, e2.getDataSet());
    }, Object.defineProperty(t, "__esModule", {
        value: !0
    });
});

},{}],"ivm0X":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-network
 * https://visjs.github.io/vis-network/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 9.1.0
 * @date    2021-08-29T08:43:14.666Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ !function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports, require("vis-data/peer/umd/vis-data.js")) : "function" == typeof define && define.amd ? define([
        "exports",
        "vis-data/peer/umd/vis-data.js"
    ], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).vis = t.vis || {
    }, t.vis);
}(this, function(t1, e) {
    var i23 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {
    }, o = function(t1) {
        return t1 && t1.Math == Math && t1;
    }, n = o("object" == typeof globalThis && globalThis) || o("object" == typeof window && window) || o("object" == typeof self && self) || o("object" == typeof i23 && i23) || function() {
        return this;
    }() || Function("return this")(), r = {
    }, s = function(t1) {
        try {
            return !!t1();
        } catch (t2) {
            return !0;
        }
    }, a15 = !s(function() {
        return 7 != Object.defineProperty({
        }, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), h = {
    }, d24 = {
    }.propertyIsEnumerable, l24 = Object.getOwnPropertyDescriptor, c = l24 && !d24.call({
        1: 2
    }, 1);
    h.f = c ? function(t1) {
        var e1 = l24(this, t1);
        return !!e1 && e1.enumerable;
    } : d24;
    var u, f1, p = function(t1, e1) {
        return {
            enumerable: !(1 & t1),
            configurable: !(2 & t1),
            writable: !(4 & t1),
            value: e1
        };
    }, v1 = {
    }.toString, g = function(t1) {
        return v1.call(t1).slice(8, -1);
    }, y = g, m = "".split, b = s(function() {
        return !Object("z").propertyIsEnumerable(0);
    }) ? function(t1) {
        return "String" == y(t1) ? m.call(t1, "") : Object(t1);
    } : Object, w = function(t1) {
        if (null == t1) throw TypeError("Can't call method on " + t1);
        return t1;
    }, k = b, _ = w, x = function(t1) {
        return k(_(t1));
    }, E = function(t1) {
        return "object" == typeof t1 ? null !== t1 : "function" == typeof t1;
    }, O = {
    }, C = O, S = n, T = function(t1) {
        return "function" == typeof t1 ? t1 : void 0;
    }, M = function(t1, e1) {
        return arguments.length < 2 ? T(C[t1]) || T(S[t1]) : C[t1] && C[t1][e1] || S[t1] && S[t1][e1];
    }, P = M("navigator", "userAgent") || "", D = n, B = P, I = D.process, z = D.Deno, F = I && I.versions || z && z.version, N = F && F.v8;
    N ? f1 = (u = N.split("."))[0] < 4 ? 1 : u[0] + u[1] : B && (!(u = B.match(/Edge\/(\d+)/)) || u[1] >= 74) && (u = B.match(/Chrome\/(\d+)/)) && (f1 = u[1]);
    var A = f1 && +f1, R = A, j = s, L = !!Object.getOwnPropertySymbols && !j(function() {
        var t1 = Symbol();
        return !String(t1) || !(Object(t1) instanceof Symbol) || !Symbol.sham && R && R < 41;
    }), H = L && !Symbol.sham && "symbol" == typeof Symbol.iterator, W = M, V = H ? function(t1) {
        return "symbol" == typeof t1;
    } : function(t1) {
        var e1 = W("Symbol");
        return "function" == typeof e1 && Object(t1) instanceof e1;
    }, q = E, U = {
        exports: {
        }
    }, Y = n, X = function(t1, e1) {
        try {
            Object.defineProperty(Y, t1, {
                value: e1,
                configurable: !0,
                writable: !0
            });
        } catch (i1) {
            Y[t1] = e1;
        }
        return e1;
    }, G = "__core-js_shared__", K = n[G] || X(G, {
    }), $ = K;
    (U.exports = function(t1, e1) {
        return $[t1] || ($[t1] = (void 0) !== e1 ? e1 : {
        });
    })("versions", []).push({
        version: "3.16.1",
        mode: "pure",
        copyright: "© 2021 Denis Pushkarev (zloirock.ru)"
    });
    var Z = w, Q = function(t1) {
        return Object(Z(t1));
    }, J = Q, tt = {
    }.hasOwnProperty, et = Object.hasOwn || function(t1, e1) {
        return tt.call(J(t1), e1);
    }, it = 0, ot = Math.random(), nt = function(t1) {
        return "Symbol(" + String((void 0) === t1 ? "" : t1) + ")_" + ((++it) + ot).toString(36);
    }, rt = n, st = U.exports, at = et, ht = nt, dt = L, lt = H, ct = st("wks"), ut = rt.Symbol, ft = lt ? ut : ut && ut.withoutSetter || ht, pt = function(t1) {
        return at(ct, t1) && (dt || "string" == typeof ct[t1]) || (dt && at(ut, t1) ? ct[t1] = ut[t1] : ct[t1] = ft("Symbol." + t1)), ct[t1];
    }, vt = E, gt = V, yt = function(t1, e1) {
        var i1, o1;
        if ("string" === e1 && "function" == typeof (i1 = t1.toString) && !q(o1 = i1.call(t1))) return o1;
        if ("function" == typeof (i1 = t1.valueOf) && !q(o1 = i1.call(t1))) return o1;
        if ("string" !== e1 && "function" == typeof (i1 = t1.toString) && !q(o1 = i1.call(t1))) return o1;
        throw TypeError("Can't convert object to primitive value");
    }, mt = pt("toPrimitive"), bt = function(t1, e1) {
        if (!vt(t1) || gt(t1)) return t1;
        var i1, o1 = t1[mt];
        if ((void 0) !== o1) {
            if ((void 0) === e1 && (e1 = "default"), i1 = o1.call(t1, e1), !vt(i1) || gt(i1)) return i1;
            throw TypeError("Can't convert object to primitive value");
        }
        return (void 0) === e1 && (e1 = "number"), yt(t1, e1);
    }, wt = V, kt = function(t1) {
        var e1 = bt(t1, "string");
        return wt(e1) ? e1 : String(e1);
    }, _t = E, xt = n.document, Et = _t(xt) && _t(xt.createElement), Ot = function(t1) {
        return Et ? xt.createElement(t1) : {
        };
    }, Ct = Ot, St = !a15 && !s(function() {
        return 7 != Object.defineProperty(Ct("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), Tt = a15, Mt = h, Pt = p, Dt = x, Bt = kt, It = et, zt = St, Ft = Object.getOwnPropertyDescriptor;
    r.f = Tt ? Ft : function(t1, e1) {
        if (t1 = Dt(t1), e1 = Bt(e1), zt) try {
            return Ft(t1, e1);
        } catch (t2) {
        }
        if (It(t1, e1)) return Pt(!Mt.f.call(t1, e1), t1[e1]);
    };
    var Nt = s, At = /#|\.prototype\./, Rt = function(t1, e1) {
        var i1 = Lt[jt(t1)];
        return i1 == Wt || i1 != Ht && ("function" == typeof e1 ? Nt(e1) : !!e1);
    }, jt = Rt.normalize = function(t1) {
        return String(t1).replace(At, ".").toLowerCase();
    }, Lt = Rt.data = {
    }, Ht = Rt.NATIVE = "N", Wt = Rt.POLYFILL = "P", Vt = Rt, qt = function(t1) {
        if ("function" != typeof t1) throw TypeError(String(t1) + " is not a function");
        return t1;
    }, Ut = qt, Yt = function(t1, e1, i1) {
        if (Ut(t1), (void 0) === e1) return t1;
        switch(i1){
            case 0:
                return function() {
                    return t1.call(e1);
                };
            case 1:
                return function(i2) {
                    return t1.call(e1, i2);
                };
            case 2:
                return function(i2, o1) {
                    return t1.call(e1, i2, o1);
                };
            case 3:
                return function(i2, o1, n1) {
                    return t1.call(e1, i2, o1, n1);
                };
        }
        return function() {
            return t1.apply(e1, arguments);
        };
    }, Xt = {
    }, Gt = E, Kt = function(t1) {
        if (!Gt(t1)) throw TypeError(String(t1) + " is not an object");
        return t1;
    }, $t = a15, Zt = St, Qt = Kt, Jt = kt, te = Object.defineProperty;
    Xt.f = $t ? te : function(t1, e1, i1) {
        if (Qt(t1), e1 = Jt(e1), Qt(i1), Zt) try {
            return te(t1, e1, i1);
        } catch (t2) {
        }
        if ("get" in i1 || "set" in i1) throw TypeError("Accessors not supported");
        return "value" in i1 && (t1[e1] = i1.value), t1;
    };
    var ee = Xt, ie = p, oe = a15 ? function(t1, e1, i1) {
        return ee.f(t1, e1, ie(1, i1));
    } : function(t1, e1, i1) {
        return t1[e1] = i1, t1;
    }, ne = n, re = r.f, se = Vt, ae = O, he = Yt, de = oe, le = et, ce = function(t1) {
        var e1 = function(e2, i1, o1) {
            if (this instanceof t1) {
                switch(arguments.length){
                    case 0:
                        return new t1;
                    case 1:
                        return new t1(e2);
                    case 2:
                        return new t1(e2, i1);
                }
                return new t1(e2, i1, o1);
            }
            return t1.apply(this, arguments);
        };
        return e1.prototype = t1.prototype, e1;
    }, ue = function(t1, e1) {
        var i1, o1, n1, r1, s1, a1, h1, d1, l1 = t1.target, c1 = t1.global, u1 = t1.stat, f1 = t1.proto, p1 = c1 ? ne : u1 ? ne[l1] : (ne[l1] || {
        }).prototype, v1 = c1 ? ae : ae[l1] || (ae[l1] = {
        }), g1 = v1.prototype;
        for(n1 in e1)i1 = !se(c1 ? n1 : l1 + (u1 ? "." : "#") + n1, t1.forced) && p1 && le(p1, n1), s1 = v1[n1], i1 && (a1 = t1.noTargetGet ? (d1 = re(p1, n1)) && d1.value : p1[n1]), r1 = i1 && a1 ? a1 : e1[n1], i1 && typeof s1 == typeof r1 || (h1 = t1.bind && i1 ? he(r1, ne) : t1.wrap && i1 ? ce(r1) : f1 && "function" == typeof r1 ? he(Function.call, r1) : r1, (t1.sham || r1 && r1.sham || s1 && s1.sham) && de(h1, "sham", !0), v1[n1] = h1, f1 && (le(ae, o1 = l1 + "Prototype") || de(ae, o1, {
        }), ae[o1][n1] = r1, t1.real && g1 && !g1[n1] && de(g1, n1, r1)));
    }, fe = Math.ceil, pe = Math.floor, ve = function(t1) {
        return isNaN(t1 = +t1) ? 0 : (t1 > 0 ? pe : fe)(t1);
    }, ge = ve, ye = Math.min, me = function(t1) {
        return t1 > 0 ? ye(ge(t1), 9007199254740991) : 0;
    }, be = ve, we = Math.max, ke = Math.min, _e = function(t1, e1) {
        var i1 = be(t1);
        return i1 < 0 ? we(i1 + e1, 0) : ke(i1, e1);
    }, xe = x, Ee = me, Oe = _e, Ce = function(t1) {
        return function(e1, i1, o1) {
            var n1, r1 = xe(e1), s1 = Ee(r1.length), a1 = Oe(o1, s1);
            if (t1 && i1 != i1) {
                for(; s1 > a1;)if ((n1 = r1[a1++]) != n1) return !0;
            } else for(; s1 > a1; a1++)if ((t1 || a1 in r1) && r1[a1] === i1) return t1 || a1 || 0;
            return !t1 && -1;
        };
    }, Se = {
        includes: Ce(!0),
        indexOf: Ce(!1)
    }, Te = {
    }, Me = et, Pe = x, De = Se.indexOf, Be = Te, Ie = function(t1, e1) {
        var i1, o1 = Pe(t1), n1 = 0, r1 = [];
        for(i1 in o1)!Me(Be, i1) && Me(o1, i1) && r1.push(i1);
        for(; e1.length > n1;)Me(o1, i1 = e1[n1++]) && (~De(r1, i1) || r1.push(i1));
        return r1;
    }, ze = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], Fe = Ie, Ne = ze, Ae = Object.keys || function(t1) {
        return Fe(t1, Ne);
    }, Re = {
    };
    Re.f = Object.getOwnPropertySymbols;
    var je = a15, Le = s, He = Ae, We = Re, Ve = h, qe = Q, Ue = b, Ye = Object.assign, Xe = Object.defineProperty, Ge = !Ye || Le(function() {
        if (je && 1 !== Ye({
            b: 1
        }, Ye(Xe({
        }, "a", {
            enumerable: !0,
            get: function() {
                Xe(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t1 = {
        }, e1 = {
        }, i1 = Symbol(), o1 = "abcdefghijklmnopqrst";
        return t1[i1] = 7, o1.split("").forEach(function(t2) {
            e1[t2] = t2;
        }), 7 != Ye({
        }, t1)[i1] || He(Ye({
        }, e1)).join("") != o1;
    }) ? function(t1, e1) {
        for(var i1 = qe(t1), o1 = arguments.length, n1 = 1, r1 = We.f, s1 = Ve.f; o1 > n1;)for(var a1, h1 = Ue(arguments[n1++]), d1 = r1 ? He(h1).concat(r1(h1)) : He(h1), l1 = d1.length, c1 = 0; l1 > c1;)a1 = d1[c1++], je && !s1.call(h1, a1) || (i1[a1] = h1[a1]);
        return i1;
    } : Ye;
    ue({
        target: "Object",
        stat: !0,
        forced: Object.assign !== Ge
    }, {
        assign: Ge
    });
    var Ke = O.Object.assign, $e = qt, Ze = E, Qe = [].slice, Je = {
    }, ti = function(t1, e1, i1) {
        if (!(e1 in Je)) {
            for(var o1 = [], n1 = 0; n1 < e1; n1++)o1[n1] = "a[" + n1 + "]";
            Je[e1] = Function("C,a", "return new C(" + o1.join(",") + ")");
        }
        return Je[e1](t1, i1);
    }, ei = Function.bind || function(t1) {
        var e1 = $e(this), i1 = Qe.call(arguments, 1), o2 = function() {
            var n2 = i1.concat(Qe.call(arguments));
            return this instanceof o2 ? ti(e1, n2.length, n2) : e1.apply(t1, n2);
        };
        return Ze(e1.prototype) && (o2.prototype = e1.prototype), o2;
    };
    ue({
        target: "Function",
        proto: !0
    }, {
        bind: ei
    });
    var ii = O, oi = function(t1) {
        return ii[t1 + "Prototype"];
    }, ni = oi("Function").bind, ri = Function.prototype, si = function(t1) {
        var e1 = t1.bind;
        return t1 === ri || t1 instanceof Function && e1 === ri.bind ? ni : e1;
    };
    function ai(t1, e1, i1, o2) {
        t1.beginPath(), t1.arc(e1, i1, o2, 0, 2 * Math.PI, !1), t1.closePath();
    }
    function hi(t1, e1, i1, o2, n2, r1) {
        var s1 = Math.PI / 180;
        o2 - 2 * r1 < 0 && (r1 = o2 / 2), n2 - 2 * r1 < 0 && (r1 = n2 / 2), t1.beginPath(), t1.moveTo(e1 + r1, i1), t1.lineTo(e1 + o2 - r1, i1), t1.arc(e1 + o2 - r1, i1 + r1, r1, 270 * s1, 360 * s1, !1), t1.lineTo(e1 + o2, i1 + n2 - r1), t1.arc(e1 + o2 - r1, i1 + n2 - r1, r1, 0, 90 * s1, !1), t1.lineTo(e1 + r1, i1 + n2), t1.arc(e1 + r1, i1 + n2 - r1, r1, 90 * s1, 180 * s1, !1), t1.lineTo(e1, i1 + r1), t1.arc(e1 + r1, i1 + r1, r1, 180 * s1, 270 * s1, !1), t1.closePath();
    }
    function di(t1, e1, i1, o2, n2) {
        var r1 = 0.5522848, s1 = o2 / 2 * r1, a1 = n2 / 2 * r1, h1 = e1 + o2, d1 = i1 + n2, l1 = e1 + o2 / 2, c1 = i1 + n2 / 2;
        t1.beginPath(), t1.moveTo(e1, c1), t1.bezierCurveTo(e1, c1 - a1, l1 - s1, i1, l1, i1), t1.bezierCurveTo(l1 + s1, i1, h1, c1 - a1, h1, c1), t1.bezierCurveTo(h1, c1 + a1, l1 + s1, d1, l1, d1), t1.bezierCurveTo(l1 - s1, d1, e1, c1 + a1, e1, c1), t1.closePath();
    }
    function li(t1, e1, i1, o2, n2) {
        var r1 = n2 * (1 / 3), s1 = 0.5522848, a1 = o2 / 2 * s1, h1 = r1 / 2 * s1, d1 = e1 + o2, l1 = i1 + r1, c1 = e1 + o2 / 2, u1 = i1 + r1 / 2, f1 = i1 + (n2 - r1 / 2), p1 = i1 + n2;
        t1.beginPath(), t1.moveTo(d1, u1), t1.bezierCurveTo(d1, u1 + h1, c1 + a1, l1, c1, l1), t1.bezierCurveTo(c1 - a1, l1, e1, u1 + h1, e1, u1), t1.bezierCurveTo(e1, u1 - h1, c1 - a1, i1, c1, i1), t1.bezierCurveTo(c1 + a1, i1, d1, u1 - h1, d1, u1), t1.lineTo(d1, f1), t1.bezierCurveTo(d1, f1 + h1, c1 + a1, p1, c1, p1), t1.bezierCurveTo(c1 - a1, p1, e1, f1 + h1, e1, f1), t1.lineTo(e1, u1);
    }
    function ci(t1, e1, i1, o2, n2, r1) {
        t1.beginPath(), t1.moveTo(e1, i1);
        for(var s1 = r1.length, a1 = o2 - e1, h1 = n2 - i1, d1 = h1 / a1, l1 = Math.sqrt(a1 * a1 + h1 * h1), c1 = 0, u1 = !0, f1 = 0, p1 = +r1[0]; l1 >= 0.1;)(p1 = +r1[(c1++) % s1]) > l1 && (p1 = l1), f1 = Math.sqrt(p1 * p1 / (1 + d1 * d1)), e1 += f1 = a1 < 0 ? -f1 : f1, i1 += d1 * f1, !0 === u1 ? t1.lineTo(e1, i1) : t1.moveTo(e1, i1), l1 -= p1, u1 = !u1;
    }
    var ui = {
        circle: ai,
        dashedLine: ci,
        database: li,
        diamond: function(t1, e1, i1, o2) {
            t1.beginPath(), t1.lineTo(e1, i1 + o2), t1.lineTo(e1 + o2, i1), t1.lineTo(e1, i1 - o2), t1.lineTo(e1 - o2, i1), t1.closePath();
        },
        ellipse: di,
        ellipse_vis: di,
        hexagon: function(t1, e1, i1, o2) {
            t1.beginPath();
            var n2 = 2 * Math.PI / 6;
            t1.moveTo(e1 + o2, i1);
            for(var r1 = 1; r1 < 6; r1++)t1.lineTo(e1 + o2 * Math.cos(n2 * r1), i1 + o2 * Math.sin(n2 * r1));
            t1.closePath();
        },
        roundRect: hi,
        square: function(t1, e1, i1, o2) {
            t1.beginPath(), t1.rect(e1 - o2, i1 - o2, 2 * o2, 2 * o2), t1.closePath();
        },
        star: function(t1, e1, i1, o2) {
            t1.beginPath(), i1 += 0.1 * (o2 *= 0.82);
            for(var n2 = 0; n2 < 10; n2++){
                var r1 = n2 % 2 == 0 ? 1.3 * o2 : 0.5 * o2;
                t1.lineTo(e1 + r1 * Math.sin(2 * n2 * Math.PI / 10), i1 - r1 * Math.cos(2 * n2 * Math.PI / 10));
            }
            t1.closePath();
        },
        triangle: function(t1, e1, i1, o2) {
            t1.beginPath(), i1 += 0.275 * (o2 *= 1.15);
            var n2 = 2 * o2, r2 = n2 / 2, s1 = Math.sqrt(3) / 6 * n2, a1 = Math.sqrt(n2 * n2 - r2 * r2);
            t1.moveTo(e1, i1 - (a1 - s1)), t1.lineTo(e1 + r2, i1 + s1), t1.lineTo(e1 - r2, i1 + s1), t1.lineTo(e1, i1 - (a1 - s1)), t1.closePath();
        },
        triangleDown: function(t1, e1, i1, o2) {
            t1.beginPath(), i1 -= 0.275 * (o2 *= 1.15);
            var n2 = 2 * o2, r2 = n2 / 2, s1 = Math.sqrt(3) / 6 * n2, a1 = Math.sqrt(n2 * n2 - r2 * r2);
            t1.moveTo(e1, i1 + (a1 - s1)), t1.lineTo(e1 + r2, i1 - s1), t1.lineTo(e1 - r2, i1 - s1), t1.lineTo(e1, i1 + (a1 - s1)), t1.closePath();
        }
    };
    var fi = {
        exports: {
        }
    };
    !function(t1) {
        function e1(t2) {
            if (t2) return (function(t3) {
                for(var i1 in e1.prototype)t3[i1] = e1.prototype[i1];
                return t3;
            })(t2);
        }
        t1.exports = e1, e1.prototype.on = e1.prototype.addEventListener = function(t2, e2) {
            return this._callbacks = this._callbacks || {
            }, (this._callbacks["$" + t2] = this._callbacks["$" + t2] || []).push(e2), this;
        }, e1.prototype.once = function(t2, e2) {
            function i1() {
                this.off(t2, i1), e2.apply(this, arguments);
            }
            return i1.fn = e2, this.on(t2, i1), this;
        }, e1.prototype.off = e1.prototype.removeListener = e1.prototype.removeAllListeners = e1.prototype.removeEventListener = function(t2, e2) {
            if (this._callbacks = this._callbacks || {
            }, 0 == arguments.length) return this._callbacks = {
            }, this;
            var i1, o2 = this._callbacks["$" + t2];
            if (!o2) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t2], this;
            for(var n2 = 0; n2 < o2.length; n2++)if ((i1 = o2[n2]) === e2 || i1.fn === e2) {
                o2.splice(n2, 1);
                break;
            }
            return 0 === o2.length && delete this._callbacks["$" + t2], this;
        }, e1.prototype.emit = function(t2) {
            this._callbacks = this._callbacks || {
            };
            for(var e2 = new Array(arguments.length - 1), i1 = this._callbacks["$" + t2], o2 = 1; o2 < arguments.length; o2++)e2[o2 - 1] = arguments[o2];
            if (i1) {
                o2 = 0;
                for(var n2 = (i1 = i1.slice(0)).length; o2 < n2; ++o2)i1[o2].apply(this, e2);
            }
            return this;
        }, e1.prototype.listeners = function(t2) {
            return this._callbacks = this._callbacks || {
            }, this._callbacks["$" + t2] || [];
        }, e1.prototype.hasListeners = function(t2) {
            return !!this.listeners(t2).length;
        };
    }(fi);
    var pi = fi.exports, vi = V, gi = function(t1) {
        if (vi(t1)) throw TypeError("Cannot convert a Symbol value to a string");
        return String(t1);
    }, yi = ve, mi = gi, bi = w, wi = function(t1) {
        return function(e1, i1) {
            var o2, n3, r2 = mi(bi(e1)), s1 = yi(i1), a1 = r2.length;
            return s1 < 0 || s1 >= a1 ? t1 ? "" : void 0 : (o2 = r2.charCodeAt(s1)) < 55296 || o2 > 56319 || s1 + 1 === a1 || (n3 = r2.charCodeAt(s1 + 1)) < 56320 || n3 > 57343 ? t1 ? r2.charAt(s1) : o2 : t1 ? r2.slice(s1, s1 + 2) : n3 - 56320 + (o2 - 55296 << 10) + 65536;
        };
    }, ki = {
        codeAt: wi(!1),
        charAt: wi(!0)
    }, _i = K, xi = Function.toString;
    "function" != typeof _i.inspectSource && (_i.inspectSource = function(t1) {
        return xi.call(t1);
    });
    var Ei, Oi, Ci, Si = _i.inspectSource, Ti = n.WeakMap, Mi = "function" == typeof Ti && /native code/.test(Si(Ti)), Pi = U.exports, Di = nt, Bi = Pi("keys"), Ii = function(t1) {
        return Bi[t1] || (Bi[t1] = Di(t1));
    }, zi = Mi, Fi = E, Ni = oe, Ai = et, Ri = K, ji = Ii, Li = Te, Hi = "Object already initialized", Wi = n.WeakMap;
    if (zi || Ri.state) {
        var Vi = Ri.state || (Ri.state = new Wi), qi = Vi.get, Ui = Vi.has, Yi = Vi.set;
        Ei = function(t1, e1) {
            if (Ui.call(Vi, t1)) throw new TypeError(Hi);
            return e1.facade = t1, Yi.call(Vi, t1, e1), e1;
        }, Oi = function(t1) {
            return qi.call(Vi, t1) || {
            };
        }, Ci = function(t1) {
            return Ui.call(Vi, t1);
        };
    } else {
        var Xi = ji("state");
        Li[Xi] = !0, Ei = function(t1, e1) {
            if (Ai(t1, Xi)) throw new TypeError(Hi);
            return e1.facade = t1, Ni(t1, Xi, e1), e1;
        }, Oi = function(t1) {
            return Ai(t1, Xi) ? t1[Xi] : {
            };
        }, Ci = function(t1) {
            return Ai(t1, Xi);
        };
    }
    var Gi, Ki, $i, Zi = {
        set: Ei,
        get: Oi,
        has: Ci,
        enforce: function(t1) {
            return Ci(t1) ? Oi(t1) : Ei(t1, {
            });
        },
        getterFor: function(t1) {
            return function(e1) {
                var i1;
                if (!Fi(e1) || (i1 = Oi(e1)).type !== t1) throw TypeError("Incompatible receiver, " + t1 + " required");
                return i1;
            };
        }
    }, Qi = !s(function() {
        function t1() {
        }
        return t1.prototype.constructor = null, Object.getPrototypeOf(new t1) !== t1.prototype;
    }), Ji = et, to = Q, eo = Qi, io = Ii("IE_PROTO"), oo = Object.prototype, no = eo ? Object.getPrototypeOf : function(t1) {
        return t1 = to(t1), Ji(t1, io) ? t1[io] : "function" == typeof t1.constructor && t1 instanceof t1.constructor ? t1.constructor.prototype : t1 instanceof Object ? oo : null;
    }, ro = s, so = no, ao = oe, ho = et, lo = pt("iterator"), co = !1;
    [].keys && ("next" in ($i = [].keys()) ? (Ki = so(so($i))) !== Object.prototype && (Gi = Ki) : co = !0);
    var uo = null == Gi || ro(function() {
        var t1 = {
        };
        return Gi[lo].call(t1) !== t1;
    });
    uo && (Gi = {
    }), uo && !ho(Gi, lo) && ao(Gi, lo, function() {
        return this;
    });
    var fo, po = {
        IteratorPrototype: Gi,
        BUGGY_SAFARI_ITERATORS: co
    }, vo = Xt, go = Kt, yo = Ae, mo = a15 ? Object.defineProperties : function(t1, e1) {
        go(t1);
        for(var i1, o2 = yo(e1), n3 = o2.length, r2 = 0; n3 > r2;)vo.f(t1, i1 = o2[r2++], e1[i1]);
        return t1;
    }, bo = M("document", "documentElement"), wo = Kt, ko = mo, _o = ze, xo = Te, Eo = bo, Oo = Ot, Co = Ii("IE_PROTO"), So = function() {
    }, To = function(t1) {
        return "<script>" + t1 + "</" + "script>";
    }, Mo = function(t1) {
        t1.write(To("")), t1.close();
        var e1 = t1.parentWindow.Object;
        return t1 = null, e1;
    }, Po = function() {
        try {
            fo = new ActiveXObject("htmlfile");
        } catch (t1) {
        }
        Po = document.domain && fo ? Mo(fo) : (function() {
            var t1, e1 = Oo("iframe");
            if (e1.style) return e1.style.display = "none", Eo.appendChild(e1), e1.src = String("javascript:"), (t1 = e1.contentWindow.document).open(), t1.write(To("document.F=Object")), t1.close(), t1.F;
        })() || Mo(fo);
        for(var t1 = _o.length; t1--;)delete Po.prototype[_o[t1]];
        return Po();
    };
    xo[Co] = !0;
    var Do = Object.create || function(t1, e1) {
        var i1;
        return null !== t1 ? (So.prototype = wo(t1), i1 = new So, So.prototype = null, i1[Co] = t1) : i1 = Po(), (void 0) === e1 ? i1 : ko(i1, e1);
    }, Bo = {
    };
    Bo[pt("toStringTag")] = "z";
    var Io = "[object z]" === String(Bo), zo = Io, Fo = g, No = pt("toStringTag"), Ao = "Arguments" == Fo(function() {
        return arguments;
    }()), Ro = zo ? Fo : function(t1) {
        var e1, i1, o2;
        return (void 0) === t1 ? "Undefined" : null === t1 ? "Null" : "string" == typeof (i1 = function(t2, e2) {
            try {
                return t2[e2];
            } catch (t3) {
            }
        }(e1 = Object(t1), No)) ? i1 : Ao ? Fo(e1) : "Object" == (o2 = Fo(e1)) && "function" == typeof e1.callee ? "Arguments" : o2;
    }, jo = Ro, Lo = Io ? {
    }.toString : function() {
        return "[object " + jo(this) + "]";
    }, Ho = Io, Wo = Xt.f, Vo = oe, qo = et, Uo = Lo, Yo = pt("toStringTag"), Xo = function(t1, e1, i1, o2) {
        if (t1) {
            var n3 = i1 ? t1 : t1.prototype;
            qo(n3, Yo) || Wo(n3, Yo, {
                configurable: !0,
                value: e1
            }), o2 && !Ho && Vo(n3, "toString", Uo);
        }
    }, Go = {
    }, Ko = po.IteratorPrototype, $o = Do, Zo = p, Qo = Xo, Jo = Go, tn = function() {
        return this;
    }, en = E, on = Kt, nn = function(t1) {
        if (!en(t1) && null !== t1) throw TypeError("Can't set " + String(t1) + " as a prototype");
        return t1;
    }, rn = Object.setPrototypeOf || ("__proto__" in {
    } ? function() {
        var t1, e1 = !1, i1 = {
        };
        try {
            (t1 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(i1, []), e1 = i1 instanceof Array;
        } catch (t2) {
        }
        return function(i2, o2) {
            return on(i2), nn(o2), e1 ? t1.call(i2, o2) : i2.__proto__ = o2, i2;
        };
    }() : void 0), sn = oe, an = function(t1, e1, i1, o2) {
        o2 && o2.enumerable ? t1[e1] = i1 : sn(t1, e1, i1);
    }, hn = ue, dn = function(t1, e1, i1) {
        var o2 = e1 + " Iterator";
        return t1.prototype = $o(Ko, {
            next: Zo(1, i1)
        }), Qo(t1, o2, !1, !0), Jo[o2] = tn, t1;
    }, ln = no, cn = Xo, un = oe, fn = an, pn = Go, vn = po.IteratorPrototype, gn = po.BUGGY_SAFARI_ITERATORS, yn = pt("iterator"), mn = "keys", bn = "values", wn = "entries", kn = function() {
        return this;
    }, _n = function(t1, e1, i1, o2, n4, r2, s1) {
        dn(i1, e1, o2);
        var a1, h1, d1, l1 = function(t2) {
            if (t2 === n4 && v2) return v2;
            if (!gn && t2 in f2) return f2[t2];
            switch(t2){
                case mn:
                case bn:
                case wn:
                    return function() {
                        return new i1(this, t2);
                    };
            }
            return function() {
                return new i1(this);
            };
        }, c1 = e1 + " Iterator", u1 = !1, f2 = t1.prototype, p1 = f2[yn] || f2["@@iterator"] || n4 && f2[n4], v2 = !gn && p1 || l1(n4), g1 = "Array" == e1 && f2.entries || p1;
        if (g1 && (a1 = ln(g1.call(new t1)), vn !== Object.prototype && a1.next && (cn(a1, c1, !0, !0), pn[c1] = kn)), n4 == bn && p1 && p1.name !== bn && (u1 = !0, v2 = function() {
            return p1.call(this);
        }), s1 && f2[yn] !== v2 && un(f2, yn, v2), pn[e1] = v2, n4) {
            if (h1 = {
                values: l1(bn),
                keys: r2 ? v2 : l1(mn),
                entries: l1(wn)
            }, s1) for(d1 in h1)(gn || u1 || !(d1 in f2)) && fn(f2, d1, h1[d1]);
            else hn({
                target: e1,
                proto: !0,
                forced: gn || u1
            }, h1);
        }
        return h1;
    }, xn = ki.charAt, En = gi, On = Zi, Cn = _n, Sn = "String Iterator", Tn = On.set, Mn = On.getterFor(Sn);
    Cn(String, "String", function(t1) {
        Tn(this, {
            type: Sn,
            string: En(t1),
            index: 0
        });
    }, function() {
        var t1, e1 = Mn(this), i1 = e1.string, o2 = e1.index;
        return o2 >= i1.length ? {
            value: void 0,
            done: !0
        } : (t1 = xn(i1, o2), e1.index += t1.length, {
            value: t1,
            done: !1
        });
    });
    var Pn = Kt, Dn = function(t1) {
        var e1 = t1.return;
        if ((void 0) !== e1) return Pn(e1.call(t1)).value;
    }, Bn = Kt, In = Dn, zn = Go, Fn = pt("iterator"), Nn = Array.prototype, An = function(t1) {
        return (void 0) !== t1 && (zn.Array === t1 || Nn[Fn] === t1);
    }, Rn = kt, jn = Xt, Ln = p, Hn = function(t1, e1, i1) {
        var o2 = Rn(e1);
        o2 in t1 ? jn.f(t1, o2, Ln(0, i1)) : t1[o2] = i1;
    }, Wn = Ro, Vn = Go, qn = pt("iterator"), Un = function(t1) {
        if (null != t1) return t1[qn] || t1["@@iterator"] || Vn[Wn(t1)];
    }, Yn = Yt, Xn = Q, Gn = function(t1, e1, i1, o2) {
        try {
            return o2 ? e1(Bn(i1)[0], i1[1]) : e1(i1);
        } catch (e2) {
            throw In(t1), e2;
        }
    }, Kn = An, $n = me, Zn = Hn, Qn = Un, Jn = pt("iterator"), tr = !1;
    try {
        var er = 0, ir = {
            next: function() {
                return {
                    done: !!er++
                };
            },
            return: function() {
                tr = !0;
            }
        };
        ir[Jn] = function() {
            return this;
        }, Array.from(ir, function() {
            throw 2;
        });
    } catch (t1) {
    }
    var or = function(t1) {
        var e1, i1, o2, n4, r2, s1, a1 = Xn(t1), h1 = "function" == typeof this ? this : Array, d1 = arguments.length, l1 = d1 > 1 ? arguments[1] : void 0, c1 = (void 0) !== l1, u1 = Qn(a1), f2 = 0;
        if (c1 && (l1 = Yn(l1, d1 > 2 ? arguments[2] : void 0, 2)), null == u1 || h1 == Array && Kn(u1)) for(i1 = new h1(e1 = $n(a1.length)); e1 > f2; f2++)s1 = c1 ? l1(a1[f2], f2) : a1[f2], Zn(i1, f2, s1);
        else for(r2 = (n4 = u1.call(a1)).next, i1 = new h1; !(o2 = r2.call(n4)).done; f2++)s1 = c1 ? Gn(n4, l1, [
            o2.value,
            f2
        ], !0) : o2.value, Zn(i1, f2, s1);
        return i1.length = f2, i1;
    };
    ue({
        target: "Array",
        stat: !0,
        forced: !function(t1, e1) {
            if (!e1 && !tr) return !1;
            var i1 = !1;
            try {
                var o2 = {
                };
                o2[Jn] = function() {
                    return {
                        next: function() {
                            return {
                                done: i1 = !0
                            };
                        }
                    };
                }, t1(o2);
            } catch (t2) {
            }
            return i1;
        }(function(t1) {
            Array.from(t1);
        })
    }, {
        from: or
    });
    var nr = O.Array.from, rr = nr, sr = x, ar = Go, hr = Zi, dr = _n, lr = "Array Iterator", cr = hr.set, ur = hr.getterFor(lr);
    dr(Array, "Array", function(t1, e1) {
        cr(this, {
            type: lr,
            target: sr(t1),
            index: 0,
            kind: e1
        });
    }, function() {
        var t1 = ur(this), e1 = t1.target, i1 = t1.kind, o2 = t1.index++;
        return !e1 || o2 >= e1.length ? (t1.target = void 0, {
            value: void 0,
            done: !0
        }) : "keys" == i1 ? {
            value: o2,
            done: !1
        } : "values" == i1 ? {
            value: e1[o2],
            done: !1
        } : {
            value: [
                o2,
                e1[o2]
            ],
            done: !1
        };
    }, "values"), ar.Arguments = ar.Array;
    var fr = Un, pr = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }, vr = n, gr = Ro, yr = oe, mr = Go, br = pt("toStringTag");
    for(var wr in pr){
        var kr = vr[wr], _r = kr && kr.prototype;
        _r && gr(_r) !== br && yr(_r, br, wr), mr[wr] = mr.Array;
    }
    var xr = fr, Er = g, Or = Array.isArray || function(t1) {
        return "Array" == Er(t1);
    }, Cr = {
    }, Sr = Ie, Tr = ze.concat("length", "prototype");
    Cr.f = Object.getOwnPropertyNames || function(t1) {
        return Sr(t1, Tr);
    };
    var Mr = {
    }, Pr = x, Dr = Cr.f, Br = {
    }.toString, Ir = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    Mr.f = function(t1) {
        return Ir && "[object Window]" == Br.call(t1) ? (function(t2) {
            try {
                return Dr(t2);
            } catch (t3) {
                return Ir.slice();
            }
        })(t1) : Dr(Pr(t1));
    };
    var zr = {
    }, Fr = pt;
    zr.f = Fr;
    var Nr = O, Ar = et, Rr = zr, jr = Xt.f, Lr = function(t1) {
        var e1 = Nr.Symbol || (Nr.Symbol = {
        });
        Ar(e1, t1) || jr(e1, t1, {
            value: Rr.f(t1)
        });
    }, Hr = E, Wr = Or, Vr = pt("species"), qr = function(t1) {
        var e1;
        return Wr(t1) && ("function" != typeof (e1 = t1.constructor) || e1 !== Array && !Wr(e1.prototype) ? Hr(e1) && null === (e1 = e1[Vr]) && (e1 = void 0) : e1 = void 0), (void 0) === e1 ? Array : e1;
    }, Ur = function(t1, e1) {
        return new (qr(t1))(0 === e1 ? 0 : e1);
    }, Yr = Yt, Xr = b, Gr = Q, Kr = me, $r = Ur, Zr = [].push, Qr = function(t1) {
        var e1 = 1 == t1, i1 = 2 == t1, o2 = 3 == t1, n4 = 4 == t1, r2 = 6 == t1, s1 = 7 == t1, a1 = 5 == t1 || r2;
        return function(h1, d1, l1, c1) {
            for(var u1, f2, p1 = Gr(h1), v2 = Xr(p1), g1 = Yr(d1, l1, 3), y1 = Kr(v2.length), m1 = 0, b1 = c1 || $r, w1 = e1 ? b1(h1, y1) : i1 || s1 ? b1(h1, 0) : void 0; y1 > m1; m1++)if ((a1 || m1 in v2) && (f2 = g1(u1 = v2[m1], m1, p1), t1)) {
                if (e1) w1[m1] = f2;
                else if (f2) switch(t1){
                    case 3:
                        return !0;
                    case 5:
                        return u1;
                    case 6:
                        return m1;
                    case 2:
                        Zr.call(w1, u1);
                }
                else switch(t1){
                    case 4:
                        return !1;
                    case 7:
                        Zr.call(w1, u1);
                }
            }
            return r2 ? -1 : o2 || n4 ? n4 : w1;
        };
    }, Jr = {
        forEach: Qr(0),
        map: Qr(1),
        filter: Qr(2),
        some: Qr(3),
        every: Qr(4),
        find: Qr(5),
        findIndex: Qr(6),
        filterReject: Qr(7)
    }, ts = ue, es = n, is = M, os = a15, ns = L, rs = s, ss = et, as = Or, hs = E, ds = V, ls = Kt, cs = Q, us = x, fs = kt, ps = gi, vs = p, gs = Do, ys = Ae, ms = Cr, bs = Mr, ws = Re, ks = r, _s = Xt, xs = h, Es = oe, Os = an, Cs = U.exports, Ss = Te, Ts = nt, Ms = pt, Ps = zr, Ds = Lr, Bs = Xo, Is = Zi, zs = Jr.forEach, Fs = Ii("hidden"), Ns = "Symbol", As = Ms("toPrimitive"), Rs = Is.set, js = Is.getterFor(Ns), Ls = Object.prototype, Hs = es.Symbol, Ws = is("JSON", "stringify"), Vs = ks.f, qs = _s.f, Us = bs.f, Ys = xs.f, Xs = Cs("symbols"), Gs = Cs("op-symbols"), Ks = Cs("string-to-symbol-registry"), $s = Cs("symbol-to-string-registry"), Zs = Cs("wks"), Qs = es.QObject, Js = !Qs || !Qs.prototype || !Qs.prototype.findChild, ta = os && rs(function() {
        return 7 != gs(qs({
        }, "a", {
            get: function() {
                return qs(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? function(t1, e1, i1) {
        var o2 = Vs(Ls, e1);
        o2 && delete Ls[e1], qs(t1, e1, i1), o2 && t1 !== Ls && qs(Ls, e1, o2);
    } : qs, ea = function(t1, e1) {
        var i1 = Xs[t1] = gs(Hs.prototype);
        return Rs(i1, {
            type: Ns,
            tag: t1,
            description: e1
        }), os || (i1.description = e1), i1;
    }, ia = function(t1, e1, i1) {
        t1 === Ls && ia(Gs, e1, i1), ls(t1);
        var o2 = fs(e1);
        return ls(i1), ss(Xs, o2) ? (i1.enumerable ? (ss(t1, Fs) && t1[Fs][o2] && (t1[Fs][o2] = !1), i1 = gs(i1, {
            enumerable: vs(0, !1)
        })) : (ss(t1, Fs) || qs(t1, Fs, vs(1, {
        })), t1[Fs][o2] = !0), ta(t1, o2, i1)) : qs(t1, o2, i1);
    }, oa = function(t1, e1) {
        ls(t1);
        var i1 = us(e1), o2 = ys(i1).concat(aa(i1));
        return zs(o2, function(e2) {
            os && !na.call(i1, e2) || ia(t1, e2, i1[e2]);
        }), t1;
    }, na = function(t1) {
        var e1 = fs(t1), i1 = Ys.call(this, e1);
        return !(this === Ls && ss(Xs, e1) && !ss(Gs, e1)) && (!(i1 || !ss(this, e1) || !ss(Xs, e1) || ss(this, Fs) && this[Fs][e1]) || i1);
    }, ra = function(t1, e1) {
        var i1 = us(t1), o2 = fs(e1);
        if (i1 !== Ls || !ss(Xs, o2) || ss(Gs, o2)) {
            var n4 = Vs(i1, o2);
            return !n4 || !ss(Xs, o2) || ss(i1, Fs) && i1[Fs][o2] || (n4.enumerable = !0), n4;
        }
    }, sa = function(t1) {
        var e1 = Us(us(t1)), i1 = [];
        return zs(e1, function(t2) {
            ss(Xs, t2) || ss(Ss, t2) || i1.push(t2);
        }), i1;
    }, aa = function(t1) {
        var e1 = t1 === Ls, i1 = Us(e1 ? Gs : us(t1)), o2 = [];
        return zs(i1, function(t2) {
            !ss(Xs, t2) || e1 && !ss(Ls, t2) || o2.push(Xs[t2]);
        }), o2;
    };
    (ns || (Os((Hs = function() {
        if (this instanceof Hs) throw TypeError("Symbol is not a constructor");
        var t1 = arguments.length && (void 0) !== arguments[0] ? ps(arguments[0]) : void 0, e1 = Ts(t1), i1 = function(t2) {
            this === Ls && i1.call(Gs, t2), ss(this, Fs) && ss(this[Fs], e1) && (this[Fs][e1] = !1), ta(this, e1, vs(1, t2));
        };
        return os && Js && ta(Ls, e1, {
            configurable: !0,
            set: i1
        }), ea(e1, t1);
    }).prototype, "toString", function() {
        return js(this).tag;
    }), Os(Hs, "withoutSetter", function(t1) {
        return ea(Ts(t1), t1);
    }), xs.f = na, _s.f = ia, ks.f = ra, ms.f = bs.f = sa, ws.f = aa, Ps.f = function(t1) {
        return ea(Ms(t1), t1);
    }, os && qs(Hs.prototype, "description", {
        configurable: !0,
        get: function() {
            return js(this).description;
        }
    })), ts({
        global: !0,
        wrap: !0,
        forced: !ns,
        sham: !ns
    }, {
        Symbol: Hs
    }), zs(ys(Zs), function(t1) {
        Ds(t1);
    }), ts({
        target: Ns,
        stat: !0,
        forced: !ns
    }, {
        for: function(t1) {
            var e1 = ps(t1);
            if (ss(Ks, e1)) return Ks[e1];
            var i1 = Hs(e1);
            return Ks[e1] = i1, $s[i1] = e1, i1;
        },
        keyFor: function(t1) {
            if (!ds(t1)) throw TypeError(t1 + " is not a symbol");
            if (ss($s, t1)) return $s[t1];
        },
        useSetter: function() {
            Js = !0;
        },
        useSimple: function() {
            Js = !1;
        }
    }), ts({
        target: "Object",
        stat: !0,
        forced: !ns,
        sham: !os
    }, {
        create: function(t1, e1) {
            return (void 0) === e1 ? gs(t1) : oa(gs(t1), e1);
        },
        defineProperty: ia,
        defineProperties: oa,
        getOwnPropertyDescriptor: ra
    }), ts({
        target: "Object",
        stat: !0,
        forced: !ns
    }, {
        getOwnPropertyNames: sa,
        getOwnPropertySymbols: aa
    }), ts({
        target: "Object",
        stat: !0,
        forced: rs(function() {
            ws.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t1) {
            return ws.f(cs(t1));
        }
    }), Ws) && ts({
        target: "JSON",
        stat: !0,
        forced: !ns || rs(function() {
            var t1 = Hs();
            return "[null]" != Ws([
                t1
            ]) || "{}" != Ws({
                a: t1
            }) || "{}" != Ws(Object(t1));
        })
    }, {
        stringify: function(t1, e1, i1) {
            for(var o2, n5 = [
                t1
            ], r2 = 1; arguments.length > r2;)n5.push(arguments[r2++]);
            if (o2 = e1, (hs(e1) || (void 0) !== t1) && !ds(t1)) return as(e1) || (e1 = function(t2, e2) {
                if ("function" == typeof o2 && (e2 = o2.call(this, t2, e2)), !ds(e2)) return e2;
            }), n5[1] = e1, Ws.apply(null, n5);
        }
    });
    Hs.prototype[As] || Es(Hs.prototype, As, Hs.prototype.valueOf), Bs(Hs, Ns), Ss[Fs] = !0;
    var ha = O.Object.getOwnPropertySymbols, da = {
        exports: {
        }
    }, la = ue, ca = s, ua = x, fa = r.f, pa = a15, va = ca(function() {
        fa(1);
    });
    la({
        target: "Object",
        stat: !0,
        forced: !pa || va,
        sham: !pa
    }, {
        getOwnPropertyDescriptor: function(t1, e1) {
            return fa(ua(t1), e1);
        }
    });
    var ga = O.Object, ya = da.exports = function(t1, e1) {
        return ga.getOwnPropertyDescriptor(t1, e1);
    };
    ga.getOwnPropertyDescriptor.sham && (ya.sham = !0);
    var ma = da.exports, ba = ma, wa = Cr, ka = Re, _a = Kt, xa = M("Reflect", "ownKeys") || function(t1) {
        var e1 = wa.f(_a(t1)), i1 = ka.f;
        return i1 ? e1.concat(i1(t1)) : e1;
    }, Ea = xa, Oa = x, Ca = r, Sa = Hn;
    ue({
        target: "Object",
        stat: !0,
        sham: !a15
    }, {
        getOwnPropertyDescriptors: function(t1) {
            for(var e1, i1, o2 = Oa(t1), n5 = Ca.f, r2 = Ea(o2), s1 = {
            }, a1 = 0; r2.length > a1;)(void 0) !== (i1 = n5(o2, e1 = r2[a1++])) && Sa(s1, e1, i1);
            return s1;
        }
    });
    var Ta = O.Object.getOwnPropertyDescriptors, Ma = {
        exports: {
        }
    };
    ue({
        target: "Object",
        stat: !0,
        forced: !a15,
        sham: !a15
    }, {
        defineProperties: mo
    });
    var Pa = O.Object, Da = Ma.exports = function(t1, e1) {
        return Pa.defineProperties(t1, e1);
    };
    Pa.defineProperties.sham && (Da.sham = !0);
    var Ba = Ma.exports, Ia = {
        exports: {
        }
    };
    ue({
        target: "Object",
        stat: !0,
        forced: !a15,
        sham: !a15
    }, {
        defineProperty: Xt.f
    });
    var za = O.Object, Fa = Ia.exports = function(t1, e1, i1) {
        return za.defineProperty(t1, e1, i1);
    };
    za.defineProperty.sham && (Fa.sham = !0);
    var Na = Ia.exports, Aa = Na;
    function Ra(t1, e1) {
        if (!(t1 instanceof e1)) throw new TypeError("Cannot call a class as a function");
    }
    var ja = Na;
    function La(t1, e1) {
        for(var i1 = 0; i1 < e1.length; i1++){
            var o2 = e1[i1];
            o2.enumerable = o2.enumerable || !1, o2.configurable = !0, "value" in o2 && (o2.writable = !0), ja(t1, o2.key, o2);
        }
    }
    function Ha(t1, e1, i1) {
        return e1 && La(t1.prototype, e1), i1 && La(t1, i1), t1;
    }
    function Wa(t1, e1, i1) {
        return e1 in t1 ? ja(t1, e1, {
            value: i1,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t1[e1] = i1, t1;
    }
    ue({
        target: "Array",
        stat: !0
    }, {
        isArray: Or
    });
    var Va = O.Array.isArray, qa = Va;
    var Ua = s, Ya = A, Xa = pt("species"), Ga = function(t1) {
        return Ya >= 51 || !Ua(function() {
            var e1 = [];
            return (e1.constructor = {
            })[Xa] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e1[t1](Boolean).foo;
        });
    }, Ka = ue, $a = s, Za = Or, Qa = E, Ja = Q, th = me, eh = Hn, ih = Ur, oh = Ga, nh = A, rh = pt("isConcatSpreadable"), sh = 9007199254740991, ah = "Maximum allowed index exceeded", hh = nh >= 51 || !$a(function() {
        var t1 = [];
        return t1[rh] = !1, t1.concat()[0] !== t1;
    }), dh = oh("concat"), lh = function(t1) {
        if (!Qa(t1)) return !1;
        var e1 = t1[rh];
        return (void 0) !== e1 ? !!e1 : Za(t1);
    };
    Ka({
        target: "Array",
        proto: !0,
        forced: !hh || !dh
    }, {
        concat: function(t1) {
            var e1, i1, o3, n5, r2, s1 = Ja(this), a1 = ih(s1, 0), h1 = 0;
            for(e1 = -1, o3 = arguments.length; e1 < o3; e1++)if (lh(r2 = -1 === e1 ? s1 : arguments[e1])) {
                if (h1 + (n5 = th(r2.length)) > sh) throw TypeError(ah);
                for(i1 = 0; i1 < n5; i1++, h1++)i1 in r2 && eh(a1, h1, r2[i1]);
            } else {
                if (h1 >= sh) throw TypeError(ah);
                eh(a1, h1++, r2);
            }
            return a1.length = h1, a1;
        }
    }), Lr("asyncIterator"), Lr("hasInstance"), Lr("isConcatSpreadable"), Lr("iterator"), Lr("match"), Lr("matchAll"), Lr("replace"), Lr("search"), Lr("species"), Lr("split"), Lr("toPrimitive"), Lr("toStringTag"), Lr("unscopables"), Xo(n.JSON, "JSON", !0);
    var ch = O.Symbol;
    Lr("asyncDispose"), Lr("dispose"), Lr("matcher"), Lr("metadata"), Lr("observable"), Lr("patternMatch"), Lr("replaceAll");
    var uh = ch;
    var fh = ue, ph = E, vh = Or, gh = _e, yh = me, mh = x, bh = Hn, wh = pt, kh = Ga("slice"), _h = wh("species"), xh = [].slice, Eh = Math.max;
    fh({
        target: "Array",
        proto: !0,
        forced: !kh
    }, {
        slice: function(t1, e1) {
            var i1, o3, n5, r2 = mh(this), s1 = yh(r2.length), a1 = gh(t1, s1), h1 = gh((void 0) === e1 ? s1 : e1, s1);
            if (vh(r2) && ("function" != typeof (i1 = r2.constructor) || i1 !== Array && !vh(i1.prototype) ? ph(i1) && null === (i1 = i1[_h]) && (i1 = void 0) : i1 = void 0, i1 === Array || (void 0) === i1)) return xh.call(r2, a1, h1);
            for(o3 = new ((void 0) === i1 ? Array : i1)(Eh(h1 - a1, 0)), n5 = 0; a1 < h1; a1++, n5++)a1 in r2 && bh(o3, n5, r2[a1]);
            return o3.length = n5, o3;
        }
    });
    var Oh = oi("Array").slice, Ch = Array.prototype, Sh = function(t1) {
        var e1 = t1.slice;
        return t1 === Ch || t1 instanceof Array && e1 === Ch.slice ? Oh : e1;
    }, Th = Sh, Mh = nr;
    function Ph(t1, e1) {
        (null == e1 || e1 > t1.length) && (e1 = t1.length);
        for(var i1 = 0, o3 = new Array(e1); i1 < e1; i1++)o3[i1] = t1[i1];
        return o3;
    }
    function Dh(t1, e1) {
        var i1;
        if (t1) {
            if ("string" == typeof t1) return Ph(t1, e1);
            var o3 = Th(i1 = Object.prototype.toString.call(t1)).call(i1, 8, -1);
            return "Object" === o3 && t1.constructor && (o3 = t1.constructor.name), "Map" === o3 || "Set" === o3 ? Mh(t1) : "Arguments" === o3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o3) ? Ph(t1, e1) : void 0;
        }
    }
    function Bh(t1, e1) {
        return (function(t2) {
            if (qa(t2)) return t2;
        })(t1) || (function(t2, e2) {
            var i1 = null == t2 ? null : (void 0) !== uh && xr(t2) || t2["@@iterator"];
            if (null != i1) {
                var o4, n5, r2 = [], s1 = !0, a1 = !1;
                try {
                    for(i1 = i1.call(t2); !(s1 = (o4 = i1.next()).done) && (r2.push(o4.value), !e2 || r2.length !== e2); s1 = !0);
                } catch (t3) {
                    a1 = !0, n5 = t3;
                } finally{
                    try {
                        s1 || null == i1.return || i1.return();
                    } finally{
                        if (a1) throw n5;
                    }
                }
                return r2;
            }
        })(t1, e1) || Dh(t1, e1) || (function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        })();
    }
    var Ih = zr.f("iterator");
    function zh(t1) {
        return (zh = "function" == typeof uh && "symbol" == typeof Ih ? function(t2) {
            return typeof t2;
        } : function(t2) {
            return t2 && "function" == typeof uh && t2.constructor === uh && t2 !== uh.prototype ? "symbol" : typeof t2;
        })(t1);
    }
    function Fh(t1) {
        return (function(t2) {
            if (qa(t2)) return Ph(t2);
        })(t1) || (function(t2) {
            if ((void 0) !== uh && null != xr(t2) || null != t2["@@iterator"]) return Mh(t2);
        })(t1) || Dh(t1) || (function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        })();
    }
    var Nh = ch, Ah = oi("Array").concat, Rh = Array.prototype, jh = function(t1) {
        var e1 = t1.concat;
        return t1 === Rh || t1 instanceof Array && e1 === Rh.concat ? Ah : e1;
    }, Lh = Sh;
    ue({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: xa
    }), O.Reflect.ownKeys;
    var Hh = Va, Wh = Jr.map;
    ue({
        target: "Array",
        proto: !0,
        forced: !Ga("map")
    }, {
        map: function(t1) {
            return Wh(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Vh = oi("Array").map, qh = Array.prototype, Uh = function(t1) {
        var e1 = t1.map;
        return t1 === qh || t1 instanceof Array && e1 === qh.map ? Vh : e1;
    }, Yh = Q, Xh = Ae;
    ue({
        target: "Object",
        stat: !0,
        forced: s(function() {
            Xh(1);
        })
    }, {
        keys: function(t1) {
            return Xh(Yh(t1));
        }
    });
    var Gh = O.Object.keys;
    ue({
        target: "Date",
        stat: !0
    }, {
        now: function() {
            return (new Date).getTime();
        }
    });
    var Kh = O.Date.now, $h = s, Zh = function(t1, e1) {
        var i1 = [][t1];
        return !!i1 && $h(function() {
            i1.call(null, e1 || function() {
                throw 1;
            }, 1);
        });
    }, Qh = Jr.forEach, Jh = Zh("forEach") ? [].forEach : function(t1) {
        return Qh(this, t1, arguments.length > 1 ? arguments[1] : void 0);
    };
    ue({
        target: "Array",
        proto: !0,
        forced: [].forEach != Jh
    }, {
        forEach: Jh
    });
    var td = oi("Array").forEach, ed = Ro, id = Array.prototype, od = {
        DOMTokenList: !0,
        NodeList: !0
    }, nd = function(t1) {
        var e1 = t1.forEach;
        return t1 === id || t1 instanceof Array && e1 === id.forEach || od.hasOwnProperty(ed(t1)) ? td : e1;
    }, rd = Or, sd = [].reverse, ad = [
        1,
        2
    ];
    ue({
        target: "Array",
        proto: !0,
        forced: String(ad) === String(ad.reverse())
    }, {
        reverse: function() {
            return rd(this) && (this.length = this.length), sd.call(this);
        }
    });
    var hd = oi("Array").reverse, dd = Array.prototype, ld = function(t1) {
        var e1 = t1.reverse;
        return t1 === dd || t1 instanceof Array && e1 === dd.reverse ? hd : e1;
    }, cd = ue, ud = _e, fd = ve, pd = me, vd = Q, gd = Ur, yd = Hn, md = Ga("splice"), bd = Math.max, wd = Math.min, kd = 9007199254740991, _d = "Maximum allowed length exceeded";
    cd({
        target: "Array",
        proto: !0,
        forced: !md
    }, {
        splice: function(t1, e1) {
            var i1, o5, n6, r3, s2, a2, h1 = vd(this), d1 = pd(h1.length), l1 = ud(t1, d1), c1 = arguments.length;
            if (0 === c1 ? i1 = o5 = 0 : 1 === c1 ? (i1 = 0, o5 = d1 - l1) : (i1 = c1 - 2, o5 = wd(bd(fd(e1), 0), d1 - l1)), d1 + i1 - o5 > kd) throw TypeError(_d);
            for(n6 = gd(h1, o5), r3 = 0; r3 < o5; r3++)(s2 = l1 + r3) in h1 && yd(n6, r3, h1[s2]);
            if (n6.length = o5, i1 < o5) {
                for(r3 = l1; r3 < d1 - o5; r3++)a2 = r3 + i1, (s2 = r3 + o5) in h1 ? h1[a2] = h1[s2] : delete h1[a2];
                for(r3 = d1; r3 > d1 - o5 + i1; r3--)delete h1[r3 - 1];
            } else if (i1 > o5) for(r3 = d1 - o5; r3 > l1; r3--)a2 = r3 + i1 - 1, (s2 = r3 + o5 - 1) in h1 ? h1[a2] = h1[s2] : delete h1[a2];
            for(r3 = 0; r3 < i1; r3++)h1[r3 + l1] = arguments[r3 + 2];
            return h1.length = d1 - o5 + i1, n6;
        }
    });
    var xd = oi("Array").splice, Ed = Array.prototype, Od = function(t1) {
        var e1 = t1.splice;
        return t1 === Ed || t1 instanceof Array && e1 === Ed.splice ? xd : e1;
    }, Cd = Se.includes;
    ue({
        target: "Array",
        proto: !0
    }, {
        includes: function(t1) {
            return Cd(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Sd = oi("Array").includes, Td = E, Md = g, Pd = pt("match"), Dd = function(t1) {
        var e1;
        return Td(t1) && ((void 0) !== (e1 = t1[Pd]) ? !!e1 : "RegExp" == Md(t1));
    }, Bd = pt("match"), Id = function(t1) {
        if (Dd(t1)) throw TypeError("The method doesn't accept regular expressions");
        return t1;
    }, zd = w, Fd = gi;
    ue({
        target: "String",
        proto: !0,
        forced: !function(t1) {
            var e1 = /./;
            try {
                "/./"[t1](e1);
            } catch (i1) {
                try {
                    return e1[Bd] = !1, "/./"[t1](e1);
                } catch (t2) {
                }
            }
            return !1;
        }("includes")
    }, {
        includes: function(t1) {
            return !!~Fd(zd(this)).indexOf(Fd(Id(t1)), arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Nd = oi("String").includes, Ad = Sd, Rd = Nd, jd = Array.prototype, Ld = String.prototype, Hd = function(t1) {
        var e1 = t1.includes;
        return t1 === jd || t1 instanceof Array && e1 === jd.includes ? Ad : "string" == typeof t1 || t1 === Ld || t1 instanceof String && e1 === Ld.includes ? Rd : e1;
    }, Wd = Q, Vd = no, qd = Qi;
    ue({
        target: "Object",
        stat: !0,
        forced: s(function() {
            Vd(1);
        }),
        sham: !qd
    }, {
        getPrototypeOf: function(t1) {
            return Vd(Wd(t1));
        }
    });
    var Ud = O.Object.getPrototypeOf, Yd = Ud, Xd = Jr.filter;
    ue({
        target: "Array",
        proto: !0,
        forced: !Ga("filter")
    }, {
        filter: function(t1) {
            return Xd(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Gd = oi("Array").filter, Kd = Array.prototype, $d = function(t1) {
        var e1 = t1.filter;
        return t1 === Kd || t1 instanceof Array && e1 === Kd.filter ? Gd : e1;
    }, Zd = a15, Qd = Ae, Jd = x, tl = h.f, el = function(t1) {
        return function(e1) {
            for(var i1, o5 = Jd(e1), n6 = Qd(o5), r3 = n6.length, s2 = 0, a2 = []; r3 > s2;)i1 = n6[s2++], Zd && !tl.call(o5, i1) || a2.push(t1 ? [
                i1,
                o5[i1]
            ] : o5[i1]);
            return a2;
        };
    }, il = {
        entries: el(!0),
        values: el(!1)
    }.values;
    ue({
        target: "Object",
        stat: !0
    }, {
        values: function(t1) {
            return il(t1);
        }
    }), O.Object.values;
    var ol = "\t\n\v\f\r                　\u2028\u2029\ufeff", nl = w, rl = gi, sl = "[\t\n\v\f\r                　\u2028\u2029\ufeff]", al = RegExp("^" + sl + sl + "*"), hl = RegExp(sl + sl + "*$"), dl = function(t1) {
        return function(e1) {
            var i1 = rl(nl(e1));
            return 1 & t1 && (i1 = i1.replace(al, "")), 2 & t1 && (i1 = i1.replace(hl, "")), i1;
        };
    }, ll = {
        start: dl(1),
        end: dl(2),
        trim: dl(3)
    }, cl = gi, ul = ll.trim, fl = ol, pl = n.parseInt, vl = /^[+-]?0[Xx]/, gl = 8 !== pl(fl + "08") || 22 !== pl(fl + "0x16") ? function(t1, e1) {
        var i1 = ul(cl(t1));
        return pl(i1, e1 >>> 0 || (vl.test(i1) ? 16 : 10));
    } : pl;
    ue({
        global: !0,
        forced: parseInt != gl
    }, {
        parseInt: gl
    });
    var yl = O.parseInt, ml = ue, bl = Se.indexOf, wl = Zh, kl = [].indexOf, _l = !!kl && 1 / [
        1
    ].indexOf(1, -0) < 0, xl = wl("indexOf");
    ml({
        target: "Array",
        proto: !0,
        forced: _l || !xl
    }, {
        indexOf: function(t1) {
            return _l ? kl.apply(this, arguments) || 0 : bl(this, t1, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var El = oi("Array").indexOf, Ol = Array.prototype, Cl = function(t1) {
        var e1 = t1.indexOf;
        return t1 === Ol || t1 instanceof Array && e1 === Ol.indexOf ? El : e1;
    }, Sl = s, Tl = ol, Ml = ll.trim;
    ue({
        target: "String",
        proto: !0,
        forced: function(t1) {
            return Sl(function() {
                return !!Tl[t1]() || "​᠎" != "​᠎"[t1]() || Tl[t1].name !== t1;
            });
        }("trim")
    }, {
        trim: function() {
            return Ml(this);
        }
    }), oi("String").trim, ue({
        target: "Object",
        stat: !0,
        sham: !a15
    }, {
        create: Do
    });
    var Pl = O.Object, Dl = function(t1, e1) {
        return Pl.create(t1, e1);
    }, Bl = Dl, Il = ue, zl = s, Fl = M("JSON", "stringify"), Nl = /[\uD800-\uDFFF]/g, Al = /^[\uD800-\uDBFF]$/, Rl = /^[\uDC00-\uDFFF]$/, jl = function(t1, e1, i1) {
        var o5 = i1.charAt(e1 - 1), n6 = i1.charAt(e1 + 1);
        return Al.test(t1) && !Rl.test(n6) || Rl.test(t1) && !Al.test(o5) ? "\\u" + t1.charCodeAt(0).toString(16) : t1;
    }, Ll = zl(function() {
        return '"\\udf06\\ud834"' !== Fl("\udf06\ud834") || '"\\udead"' !== Fl("\udead");
    });
    Fl && Il({
        target: "JSON",
        stat: !0,
        forced: Ll
    }, {
        stringify: function(t1, e1, i1) {
            var o5 = Fl.apply(null, arguments);
            return "string" == typeof o5 ? o5.replace(Nl, jl) : o5;
        }
    });
    var Hl = O;
    Hl.JSON || (Hl.JSON = {
        stringify: JSON.stringify
    });
    var Wl = function(t1, e1, i1) {
        return Hl.JSON.stringify.apply(null, arguments);
    }, Vl = n, ql = [].slice, Ul = function(t1) {
        return function(e1, i1) {
            var o5 = arguments.length > 2, n6 = o5 ? ql.call(arguments, 2) : void 0;
            return t1(o5 ? function() {
                ("function" == typeof e1 ? e1 : Function(e1)).apply(this, n6);
            } : e1, i1);
        };
    };
    ue({
        global: !0,
        bind: !0,
        forced: /MSIE .\./.test(P)
    }, {
        setTimeout: Ul(Vl.setTimeout),
        setInterval: Ul(Vl.setInterval)
    });
    var Yl = O.setTimeout, Xl = Q, Gl = _e, Kl = me;
    ue({
        target: "Array",
        proto: !0
    }, {
        fill: function(t1) {
            for(var e1 = Xl(this), i1 = Kl(e1.length), o5 = arguments.length, n6 = Gl(o5 > 1 ? arguments[1] : void 0, i1), r3 = o5 > 2 ? arguments[2] : void 0, s2 = (void 0) === r3 ? i1 : Gl(r3, i1); s2 > n6;)e1[n6++] = t1;
            return e1;
        }
    });
    var $l = oi("Array").fill, Zl = Array.prototype, Ql = function(t1) {
        var e1 = t1.fill;
        return t1 === Zl || t1 instanceof Array && e1 === Zl.fill ? $l : e1;
    };
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function Jl() {
        return (Jl = Object.assign || function(t1) {
            for(var e1 = 1; e1 < arguments.length; e1++){
                var i1 = arguments[e1];
                for(var o5 in i1)Object.prototype.hasOwnProperty.call(i1, o5) && (t1[o5] = i1[o5]);
            }
            return t1;
        }).apply(this, arguments);
    }
    function tc(t1, e1) {
        t1.prototype = Object.create(e1.prototype), t1.prototype.constructor = t1, t1.__proto__ = e1;
    }
    function ec(t1) {
        if ((void 0) === t1) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t1;
    }
    var ic, oc = "function" != typeof Object.assign ? function(t1) {
        if (null == t1) throw new TypeError("Cannot convert undefined or null to object");
        for(var e1 = Object(t1), i2 = 1; i2 < arguments.length; i2++){
            var o6 = arguments[i2];
            if (null != o6) for(var n6 in o6)o6.hasOwnProperty(n6) && (e1[n6] = o6[n6]);
        }
        return e1;
    } : Object.assign, nc = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], rc = "undefined" == typeof document ? {
        style: {
        }
    } : document.createElement("div"), sc = Math.round, ac = Math.abs, hc = Date.now;
    function dc(t1, e1) {
        for(var i2, o7, n7 = e1[0].toUpperCase() + e1.slice(1), r3 = 0; r3 < nc.length;){
            if ((o7 = (i2 = nc[r3]) ? i2 + n7 : e1) in t1) return o7;
            r3++;
        }
    }
    ic = "undefined" == typeof window ? {
    } : window;
    var lc = dc(rc.style, "touchAction"), cc = (void 0) !== lc;
    var uc = "compute", fc = "auto", pc = "manipulation", vc = "none", gc = "pan-x", yc = "pan-y", mc = function() {
        if (!cc) return !1;
        var t1 = {
        }, e1 = ic.CSS && ic.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(i2) {
            return t1[i2] = !e1 || ic.CSS.supports("touch-action", i2);
        }), t1;
    }(), bc = "ontouchstart" in ic, wc = (void 0) !== dc(ic, "PointerEvent"), kc = bc && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), _c = "touch", xc = "mouse", Ec = 16, Oc = 24, Cc = [
        "x",
        "y"
    ], Sc = [
        "clientX",
        "clientY"
    ];
    function Tc(t1, e1, i2) {
        var o7;
        if (t1) {
            if (t1.forEach) t1.forEach(e1, i2);
            else if ((void 0) !== t1.length) for(o7 = 0; o7 < t1.length;)e1.call(i2, t1[o7], o7, t1), o7++;
            else for(o7 in t1)t1.hasOwnProperty(o7) && e1.call(i2, t1[o7], o7, t1);
        }
    }
    function Mc(t1, e1) {
        return "function" == typeof t1 ? t1.apply(e1 && e1[0] || void 0, e1) : t1;
    }
    function Pc(t1, e1) {
        return t1.indexOf(e1) > -1;
    }
    var Dc = function() {
        function t1(t2, e1) {
            this.manager = t2, this.set(e1);
        }
        var e1 = t1.prototype;
        return e1.set = function(t2) {
            t2 === uc && (t2 = this.compute()), cc && this.manager.element.style && mc[t2] && (this.manager.element.style[lc] = t2), this.actions = t2.toLowerCase().trim();
        }, e1.update = function() {
            this.set(this.manager.options.touchAction);
        }, e1.compute = function() {
            var t2 = [];
            return Tc(this.manager.recognizers, function(e2) {
                Mc(e2.options.enable, [
                    e2
                ]) && (t2 = t2.concat(e2.getTouchAction()));
            }), (function(t3) {
                if (Pc(t3, vc)) return vc;
                var e2 = Pc(t3, gc), i2 = Pc(t3, yc);
                return e2 && i2 ? vc : e2 || i2 ? e2 ? gc : yc : Pc(t3, pc) ? pc : fc;
            })(t2.join(" "));
        }, e1.preventDefaults = function(t2) {
            var e2 = t2.srcEvent, i2 = t2.offsetDirection;
            if (this.manager.session.prevented) e2.preventDefault();
            else {
                var o7 = this.actions, n7 = Pc(o7, vc) && !mc.none, r3 = Pc(o7, yc) && !mc["pan-y"], s2 = Pc(o7, gc) && !mc["pan-x"];
                if (n7) {
                    var a2 = 1 === t2.pointers.length, h1 = t2.distance < 2, d1 = t2.deltaTime < 250;
                    if (a2 && h1 && d1) return;
                }
                if (!s2 || !r3) return n7 || r3 && 6 & i2 || s2 && i2 & Oc ? this.preventSrc(e2) : void 0;
            }
        }, e1.preventSrc = function(t2) {
            this.manager.session.prevented = !0, t2.preventDefault();
        }, t1;
    }();
    function Bc(t1, e1) {
        for(; t1;){
            if (t1 === e1) return !0;
            t1 = t1.parentNode;
        }
        return !1;
    }
    function Ic(t1) {
        var e1 = t1.length;
        if (1 === e1) return {
            x: sc(t1[0].clientX),
            y: sc(t1[0].clientY)
        };
        for(var i2 = 0, o8 = 0, n8 = 0; n8 < e1;)i2 += t1[n8].clientX, o8 += t1[n8].clientY, n8++;
        return {
            x: sc(i2 / e1),
            y: sc(o8 / e1)
        };
    }
    function zc(t1) {
        for(var e1 = [], i2 = 0; i2 < t1.pointers.length;)e1[i2] = {
            clientX: sc(t1.pointers[i2].clientX),
            clientY: sc(t1.pointers[i2].clientY)
        }, i2++;
        return {
            timeStamp: hc(),
            pointers: e1,
            center: Ic(e1),
            deltaX: t1.deltaX,
            deltaY: t1.deltaY
        };
    }
    function Fc(t1, e1, i2) {
        i2 || (i2 = Cc);
        var o8 = e1[i2[0]] - t1[i2[0]], n8 = e1[i2[1]] - t1[i2[1]];
        return Math.sqrt(o8 * o8 + n8 * n8);
    }
    function Nc(t1, e1, i2) {
        i2 || (i2 = Cc);
        var o8 = e1[i2[0]] - t1[i2[0]], n8 = e1[i2[1]] - t1[i2[1]];
        return 180 * Math.atan2(n8, o8) / Math.PI;
    }
    function Ac(t1, e1) {
        return t1 === e1 ? 1 : ac(t1) >= ac(e1) ? t1 < 0 ? 2 : 4 : e1 < 0 ? 8 : Ec;
    }
    function Rc(t1, e1, i2) {
        return {
            x: e1 / t1 || 0,
            y: i2 / t1 || 0
        };
    }
    function jc(t1, e1) {
        var i2 = t1.session, o8 = e1.pointers, n8 = o8.length;
        i2.firstInput || (i2.firstInput = zc(e1)), n8 > 1 && !i2.firstMultiple ? i2.firstMultiple = zc(e1) : 1 === n8 && (i2.firstMultiple = !1);
        var r4 = i2.firstInput, s3 = i2.firstMultiple, a3 = s3 ? s3.center : r4.center, h2 = e1.center = Ic(o8);
        e1.timeStamp = hc(), e1.deltaTime = e1.timeStamp - r4.timeStamp, e1.angle = Nc(a3, h2), e1.distance = Fc(a3, h2), (function(t2, e2) {
            var i3 = e2.center, o9 = t2.offsetDelta || {
            }, n9 = t2.prevDelta || {
            }, r5 = t2.prevInput || {
            };
            1 !== e2.eventType && 4 !== r5.eventType || (n9 = t2.prevDelta = {
                x: r5.deltaX || 0,
                y: r5.deltaY || 0
            }, o9 = t2.offsetDelta = {
                x: i3.x,
                y: i3.y
            }), e2.deltaX = n9.x + (i3.x - o9.x), e2.deltaY = n9.y + (i3.y - o9.y);
        })(i2, e1), e1.offsetDirection = Ac(e1.deltaX, e1.deltaY);
        var d2, l1, c1 = Rc(e1.deltaTime, e1.deltaX, e1.deltaY);
        e1.overallVelocityX = c1.x, e1.overallVelocityY = c1.y, e1.overallVelocity = ac(c1.x) > ac(c1.y) ? c1.x : c1.y, e1.scale = s3 ? (d2 = s3.pointers, Fc((l1 = o8)[0], l1[1], Sc) / Fc(d2[0], d2[1], Sc)) : 1, e1.rotation = s3 ? (function(t2, e2) {
            return Nc(e2[1], e2[0], Sc) + Nc(t2[1], t2[0], Sc);
        })(s3.pointers, o8) : 0, e1.maxPointers = i2.prevInput ? e1.pointers.length > i2.prevInput.maxPointers ? e1.pointers.length : i2.prevInput.maxPointers : e1.pointers.length, (function(t2, e2) {
            var i3, o9, n9, r5, s4 = t2.lastInterval || e2, a4 = e2.timeStamp - s4.timeStamp;
            if (8 !== e2.eventType && (a4 > 25 || (void 0) === s4.velocity)) {
                var h3 = e2.deltaX - s4.deltaX, d3 = e2.deltaY - s4.deltaY, l2 = Rc(a4, h3, d3);
                o9 = l2.x, n9 = l2.y, i3 = ac(l2.x) > ac(l2.y) ? l2.x : l2.y, r5 = Ac(h3, d3), t2.lastInterval = e2;
            } else i3 = s4.velocity, o9 = s4.velocityX, n9 = s4.velocityY, r5 = s4.direction;
            e2.velocity = i3, e2.velocityX = o9, e2.velocityY = n9, e2.direction = r5;
        })(i2, e1);
        var u1, f2 = t1.element, p1 = e1.srcEvent;
        Bc(u1 = p1.composedPath ? p1.composedPath()[0] : p1.path ? p1.path[0] : p1.target, f2) && (f2 = u1), e1.target = f2;
    }
    function Lc(t1, e1, i2) {
        var o8 = i2.pointers.length, n8 = i2.changedPointers.length, r4 = 1 & e1 && o8 - n8 == 0, s3 = 12 & e1 && o8 - n8 == 0;
        i2.isFirst = !!r4, i2.isFinal = !!s3, r4 && (t1.session = {
        }), i2.eventType = e1, jc(t1, i2), t1.emit("hammer.input", i2), t1.recognize(i2), t1.session.prevInput = i2;
    }
    function Hc(t1) {
        return t1.trim().split(/\s+/g);
    }
    function Wc(t1, e1, i2) {
        Tc(Hc(e1), function(e2) {
            t1.addEventListener(e2, i2, !1);
        });
    }
    function Vc(t1, e1, i2) {
        Tc(Hc(e1), function(e2) {
            t1.removeEventListener(e2, i2, !1);
        });
    }
    function qc(t1) {
        var e1 = t1.ownerDocument || t1;
        return e1.defaultView || e1.parentWindow || window;
    }
    var Uc = function() {
        function t1(t2, e1) {
            var i2 = this;
            this.manager = t2, this.callback = e1, this.element = t2.element, this.target = t2.options.inputTarget, this.domHandler = function(e2) {
                Mc(t2.options.enable, [
                    t2
                ]) && i2.handler(e2);
            }, this.init();
        }
        var e1 = t1.prototype;
        return e1.handler = function() {
        }, e1.init = function() {
            this.evEl && Wc(this.element, this.evEl, this.domHandler), this.evTarget && Wc(this.target, this.evTarget, this.domHandler), this.evWin && Wc(qc(this.element), this.evWin, this.domHandler);
        }, e1.destroy = function() {
            this.evEl && Vc(this.element, this.evEl, this.domHandler), this.evTarget && Vc(this.target, this.evTarget, this.domHandler), this.evWin && Vc(qc(this.element), this.evWin, this.domHandler);
        }, t1;
    }();
    function Yc(t1, e1, i2) {
        if (t1.indexOf && !i2) return t1.indexOf(e1);
        for(var o8 = 0; o8 < t1.length;){
            if (i2 && t1[o8][i2] == e1 || !i2 && t1[o8] === e1) return o8;
            o8++;
        }
        return -1;
    }
    var Xc = {
        pointerdown: 1,
        pointermove: 2,
        pointerup: 4,
        pointercancel: 8,
        pointerout: 8
    }, Gc = {
        2: _c,
        3: "pen",
        4: xc,
        5: "kinect"
    }, Kc = "pointerdown", $c = "pointermove pointerup pointercancel";
    ic.MSPointerEvent && !ic.PointerEvent && (Kc = "MSPointerDown", $c = "MSPointerMove MSPointerUp MSPointerCancel");
    var Zc = function(t1) {
        function e1() {
            var i2, o8 = e1.prototype;
            return o8.evEl = Kc, o8.evWin = $c, (i2 = t1.apply(this, arguments) || this).store = i2.manager.session.pointerEvents = [], i2;
        }
        return tc(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = this.store, i2 = !1, o8 = t2.type.toLowerCase().replace("ms", ""), n8 = Xc[o8], r4 = Gc[t2.pointerType] || t2.pointerType, s3 = r4 === _c, a3 = Yc(e2, t2.pointerId, "pointerId");
            1 & n8 && (0 === t2.button || s3) ? a3 < 0 && (e2.push(t2), a3 = e2.length - 1) : 12 & n8 && (i2 = !0), a3 < 0 || (e2[a3] = t2, this.callback(this.manager, n8, {
                pointers: e2,
                changedPointers: [
                    t2
                ],
                pointerType: r4,
                srcEvent: t2
            }), i2 && e2.splice(a3, 1));
        }, e1;
    }(Uc);
    function Qc(t1) {
        return Array.prototype.slice.call(t1, 0);
    }
    function Jc(t1, e1, i2) {
        for(var o8 = [], n8 = [], r4 = 0; r4 < t1.length;){
            var s3 = e1 ? t1[r4][e1] : t1[r4];
            Yc(n8, s3) < 0 && o8.push(t1[r4]), n8[r4] = s3, r4++;
        }
        return i2 && (o8 = e1 ? o8.sort(function(t2, i3) {
            return t2[e1] > i3[e1];
        }) : o8.sort()), o8;
    }
    var tu = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, eu = "touchstart touchmove touchend touchcancel", iu = function(t1) {
        function e1() {
            var i2;
            return e1.prototype.evTarget = eu, (i2 = t1.apply(this, arguments) || this).targetIds = {
            }, i2;
        }
        return tc(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = tu[t2.type], i2 = ou.call(this, t2, e2);
            i2 && this.callback(this.manager, e2, {
                pointers: i2[0],
                changedPointers: i2[1],
                pointerType: _c,
                srcEvent: t2
            });
        }, e1;
    }(Uc);
    function ou(t1, e1) {
        var i2, o8, n8 = Qc(t1.touches), r4 = this.targetIds;
        if (3 & e1 && 1 === n8.length) return r4[n8[0].identifier] = !0, [
            n8,
            n8
        ];
        var s4 = Qc(t1.changedTouches), a3 = [], h2 = this.target;
        if (o8 = n8.filter(function(t2) {
            return Bc(t2.target, h2);
        }), 1 === e1) for(i2 = 0; i2 < o8.length;)r4[o8[i2].identifier] = !0, i2++;
        for(i2 = 0; i2 < s4.length;)r4[s4[i2].identifier] && a3.push(s4[i2]), 12 & e1 && delete r4[s4[i2].identifier], i2++;
        return a3.length ? [
            Jc(o8.concat(a3), "identifier", !0),
            a3
        ] : void 0;
    }
    var nu = {
        mousedown: 1,
        mousemove: 2,
        mouseup: 4
    }, ru = "mousedown", su = "mousemove mouseup", au = function(t1) {
        function e1() {
            var i2, o8 = e1.prototype;
            return o8.evEl = ru, o8.evWin = su, (i2 = t1.apply(this, arguments) || this).pressed = !1, i2;
        }
        return tc(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = nu[t2.type];
            1 & e2 && 0 === t2.button && (this.pressed = !0), 2 & e2 && 1 !== t2.which && (e2 = 4), this.pressed && (4 & e2 && (this.pressed = !1), this.callback(this.manager, e2, {
                pointers: [
                    t2
                ],
                changedPointers: [
                    t2
                ],
                pointerType: xc,
                srcEvent: t2
            }));
        }, e1;
    }(Uc);
    function hu(t1) {
        var e1 = t1.changedPointers[0];
        if (e1.identifier === this.primaryTouch) {
            var i2 = {
                x: e1.clientX,
                y: e1.clientY
            }, o8 = this.lastTouches;
            this.lastTouches.push(i2);
            setTimeout(function() {
                var t2 = o8.indexOf(i2);
                t2 > -1 && o8.splice(t2, 1);
            }, 2500);
        }
    }
    function du(t1, e1) {
        1 & t1 ? (this.primaryTouch = e1.changedPointers[0].identifier, hu.call(this, e1)) : 12 & t1 && hu.call(this, e1);
    }
    function lu(t1) {
        for(var e1 = t1.srcEvent.clientX, i3 = t1.srcEvent.clientY, o9 = 0; o9 < this.lastTouches.length; o9++){
            var n8 = this.lastTouches[o9], r4 = Math.abs(e1 - n8.x), s4 = Math.abs(i3 - n8.y);
            if (r4 <= 25 && s4 <= 25) return !0;
        }
        return !1;
    }
    var cu = function() {
        return (function(t1) {
            function e1(e2, i3) {
                var o9;
                return (o9 = t1.call(this, e2, i3) || this).handler = function(t2, e3, i4) {
                    var n9 = i4.pointerType === _c, r5 = i4.pointerType === xc;
                    if (!(r5 && i4.sourceCapabilities && i4.sourceCapabilities.firesTouchEvents)) {
                        if (n9) du.call(ec(ec(o9)), e3, i4);
                        else if (r5 && lu.call(ec(ec(o9)), i4)) return;
                        o9.callback(t2, e3, i4);
                    }
                }, o9.touch = new iu(o9.manager, o9.handler), o9.mouse = new au(o9.manager, o9.handler), o9.primaryTouch = null, o9.lastTouches = [], o9;
            }
            return tc(e1, t1), e1.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e1;
        })(Uc);
    }();
    function uu(t1, e1, i3) {
        return !!Array.isArray(t1) && (Tc(t1, i3[e1], i3), !0);
    }
    var fu = 32, pu = 1;
    function vu(t1, e1) {
        var i3 = e1.manager;
        return i3 ? i3.get(t1) : t1;
    }
    function gu(t1) {
        return 16 & t1 ? "cancel" : 8 & t1 ? "end" : 4 & t1 ? "move" : 2 & t1 ? "start" : "";
    }
    var yu = function() {
        function t1(t2) {
            (void 0) === t2 && (t2 = {
            }), this.options = Jl({
                enable: !0
            }, t2), this.id = pu++, this.manager = null, this.state = 1, this.simultaneous = {
            }, this.requireFail = [];
        }
        var e1 = t1.prototype;
        return e1.set = function(t2) {
            return oc(this.options, t2), this.manager && this.manager.touchAction.update(), this;
        }, e1.recognizeWith = function(t2) {
            if (uu(t2, "recognizeWith", this)) return this;
            var e2 = this.simultaneous;
            return e2[(t2 = vu(t2, this)).id] || (e2[t2.id] = t2, t2.recognizeWith(this)), this;
        }, e1.dropRecognizeWith = function(t2) {
            return uu(t2, "dropRecognizeWith", this) || (t2 = vu(t2, this), delete this.simultaneous[t2.id]), this;
        }, e1.requireFailure = function(t2) {
            if (uu(t2, "requireFailure", this)) return this;
            var e2 = this.requireFail;
            return -1 === Yc(e2, t2 = vu(t2, this)) && (e2.push(t2), t2.requireFailure(this)), this;
        }, e1.dropRequireFailure = function(t2) {
            if (uu(t2, "dropRequireFailure", this)) return this;
            t2 = vu(t2, this);
            var e2 = Yc(this.requireFail, t2);
            return e2 > -1 && this.requireFail.splice(e2, 1), this;
        }, e1.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e1.canRecognizeWith = function(t2) {
            return !!this.simultaneous[t2.id];
        }, e1.emit = function(t2) {
            var e2 = this, i3 = this.state;
            function o9(i4) {
                e2.manager.emit(i4, t2);
            }
            i3 < 8 && o9(e2.options.event + gu(i3)), o9(e2.options.event), t2.additionalEvent && o9(t2.additionalEvent), i3 >= 8 && o9(e2.options.event + gu(i3));
        }, e1.tryEmit = function(t2) {
            if (this.canEmit()) return this.emit(t2);
            this.state = fu;
        }, e1.canEmit = function() {
            for(var t2 = 0; t2 < this.requireFail.length;){
                if (!(33 & this.requireFail[t2].state)) return !1;
                t2++;
            }
            return !0;
        }, e1.recognize = function(t2) {
            var e2 = oc({
            }, t2);
            if (!Mc(this.options.enable, [
                this,
                e2
            ])) return this.reset(), void (this.state = fu);
            56 & this.state && (this.state = 1), this.state = this.process(e2), 30 & this.state && this.tryEmit(e2);
        }, e1.process = function(t2) {
        }, e1.getTouchAction = function() {
        }, e1.reset = function() {
        }, t1;
    }(), mu = function(t1) {
        function e1(e2) {
            var i3;
            return (void 0) === e2 && (e2 = {
            }), (i3 = t1.call(this, Jl({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e2)) || this).pTime = !1, i3.pCenter = !1, i3._timer = null, i3._input = null, i3.count = 0, i3;
        }
        tc(e1, t1);
        var i3 = e1.prototype;
        return i3.getTouchAction = function() {
            return [
                pc
            ];
        }, i3.process = function(t2) {
            var e2 = this, i4 = this.options, o9 = t2.pointers.length === i4.pointers, n9 = t2.distance < i4.threshold, r5 = t2.deltaTime < i4.time;
            if (this.reset(), 1 & t2.eventType && 0 === this.count) return this.failTimeout();
            if (n9 && r5 && o9) {
                if (4 !== t2.eventType) return this.failTimeout();
                var s5 = !this.pTime || t2.timeStamp - this.pTime < i4.interval, a3 = !this.pCenter || Fc(this.pCenter, t2.center) < i4.posThreshold;
                if (this.pTime = t2.timeStamp, this.pCenter = t2.center, a3 && s5 ? this.count += 1 : this.count = 1, this._input = t2, 0 === this.count % i4.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e2.state = 8, e2.tryEmit();
                }, i4.interval), 2) : 8;
            }
            return fu;
        }, i3.failTimeout = function() {
            var t2 = this;
            return this._timer = setTimeout(function() {
                t2.state = fu;
            }, this.options.interval), fu;
        }, i3.reset = function() {
            clearTimeout(this._timer);
        }, i3.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e1;
    }(yu), bu = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, Jl({
                pointers: 1
            }, e2)) || this;
        }
        tc(e1, t1);
        var i3 = e1.prototype;
        return i3.attrTest = function(t2) {
            var e2 = this.options.pointers;
            return 0 === e2 || t2.pointers.length === e2;
        }, i3.process = function(t2) {
            var e2 = this.state, i4 = t2.eventType, o9 = 6 & e2, n9 = this.attrTest(t2);
            return o9 && (8 & i4 || !n9) ? 16 | e2 : o9 || n9 ? 4 & i4 ? 8 | e2 : 2 & e2 ? 4 | e2 : 2 : fu;
        }, e1;
    }(yu);
    function wu(t1) {
        return t1 === Ec ? "down" : 8 === t1 ? "up" : 2 === t1 ? "left" : 4 === t1 ? "right" : "";
    }
    var ku = function(t1) {
        function e1(e2) {
            var i3;
            return (void 0) === e2 && (e2 = {
            }), (i3 = t1.call(this, Jl({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: 30
            }, e2)) || this).pX = null, i3.pY = null, i3;
        }
        tc(e1, t1);
        var i3 = e1.prototype;
        return i3.getTouchAction = function() {
            var t2 = this.options.direction, e2 = [];
            return 6 & t2 && e2.push(yc), t2 & Oc && e2.push(gc), e2;
        }, i3.directionTest = function(t2) {
            var e2 = this.options, i4 = !0, o9 = t2.distance, n9 = t2.direction, r5 = t2.deltaX, s6 = t2.deltaY;
            return n9 & e2.direction || (6 & e2.direction ? (n9 = 0 === r5 ? 1 : r5 < 0 ? 2 : 4, i4 = r5 !== this.pX, o9 = Math.abs(t2.deltaX)) : (n9 = 0 === s6 ? 1 : s6 < 0 ? 8 : Ec, i4 = s6 !== this.pY, o9 = Math.abs(t2.deltaY))), t2.direction = n9, i4 && o9 > e2.threshold && n9 & e2.direction;
        }, i3.attrTest = function(t2) {
            return bu.prototype.attrTest.call(this, t2) && (2 & this.state || !(2 & this.state) && this.directionTest(t2));
        }, i3.emit = function(e2) {
            this.pX = e2.deltaX, this.pY = e2.deltaY;
            var i4 = wu(e2.direction);
            i4 && (e2.additionalEvent = this.options.event + i4), t1.prototype.emit.call(this, e2);
        }, e1;
    }(bu), _u = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, Jl({
                event: "swipe",
                threshold: 10,
                velocity: 0.3,
                direction: 30,
                pointers: 1
            }, e2)) || this;
        }
        tc(e1, t1);
        var i3 = e1.prototype;
        return i3.getTouchAction = function() {
            return ku.prototype.getTouchAction.call(this);
        }, i3.attrTest = function(e2) {
            var i4, o9 = this.options.direction;
            return 30 & o9 ? i4 = e2.overallVelocity : 6 & o9 ? i4 = e2.overallVelocityX : o9 & Oc && (i4 = e2.overallVelocityY), t1.prototype.attrTest.call(this, e2) && o9 & e2.offsetDirection && e2.distance > this.options.threshold && e2.maxPointers === this.options.pointers && ac(i4) > this.options.velocity && 4 & e2.eventType;
        }, i3.emit = function(t2) {
            var e2 = wu(t2.offsetDirection);
            e2 && this.manager.emit(this.options.event + e2, t2), this.manager.emit(this.options.event, t2);
        }, e1;
    }(bu), xu = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, Jl({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e2)) || this;
        }
        tc(e1, t1);
        var i3 = e1.prototype;
        return i3.getTouchAction = function() {
            return [
                vc
            ];
        }, i3.attrTest = function(e2) {
            return t1.prototype.attrTest.call(this, e2) && (Math.abs(e2.scale - 1) > this.options.threshold || 2 & this.state);
        }, i3.emit = function(e2) {
            if (1 !== e2.scale) {
                var i4 = e2.scale < 1 ? "in" : "out";
                e2.additionalEvent = this.options.event + i4;
            }
            t1.prototype.emit.call(this, e2);
        }, e1;
    }(bu), Eu = function(t1) {
        function e1(e2) {
            return (void 0) === e2 && (e2 = {
            }), t1.call(this, Jl({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e2)) || this;
        }
        tc(e1, t1);
        var i3 = e1.prototype;
        return i3.getTouchAction = function() {
            return [
                vc
            ];
        }, i3.attrTest = function(e2) {
            return t1.prototype.attrTest.call(this, e2) && (Math.abs(e2.rotation) > this.options.threshold || 2 & this.state);
        }, e1;
    }(bu), Ou = function(t1) {
        function e1(e2) {
            var i3;
            return (void 0) === e2 && (e2 = {
            }), (i3 = t1.call(this, Jl({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e2)) || this)._timer = null, i3._input = null, i3;
        }
        tc(e1, t1);
        var i3 = e1.prototype;
        return i3.getTouchAction = function() {
            return [
                fc
            ];
        }, i3.process = function(t2) {
            var e2 = this, i5 = this.options, o9 = t2.pointers.length === i5.pointers, n9 = t2.distance < i5.threshold, r5 = t2.deltaTime > i5.time;
            if (this._input = t2, !n9 || !o9 || 12 & t2.eventType && !r5) this.reset();
            else if (1 & t2.eventType) this.reset(), this._timer = setTimeout(function() {
                e2.state = 8, e2.tryEmit();
            }, i5.time);
            else if (4 & t2.eventType) return 8;
            return fu;
        }, i3.reset = function() {
            clearTimeout(this._timer);
        }, i3.emit = function(t2) {
            8 === this.state && (t2 && 4 & t2.eventType ? this.manager.emit(this.options.event + "up", t2) : (this._input.timeStamp = hc(), this.manager.emit(this.options.event, this._input)));
        }, e1;
    }(yu), Cu = {
        domEvents: !1,
        touchAction: uc,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, Su = [
        [
            Eu,
            {
                enable: !1
            }
        ],
        [
            xu,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            _u,
            {
                direction: 6
            }
        ],
        [
            ku,
            {
                direction: 6
            },
            [
                "swipe"
            ]
        ],
        [
            mu
        ],
        [
            mu,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            Ou
        ]
    ];
    function Tu(t1, e1) {
        var i3, o9 = t1.element;
        o9.style && (Tc(t1.options.cssProps, function(n9, r5) {
            i3 = dc(o9.style, r5), e1 ? (t1.oldCssProps[i3] = o9.style[i3], o9.style[i3] = n9) : o9.style[i3] = t1.oldCssProps[i3] || "";
        }), e1 || (t1.oldCssProps = {
        }));
    }
    var Mu = function() {
        function t1(t2, e1) {
            var i3, o9 = this;
            this.options = oc({
            }, Cu, e1 || {
            }), this.options.inputTarget = this.options.inputTarget || t2, this.handlers = {
            }, this.session = {
            }, this.recognizers = [], this.oldCssProps = {
            }, this.element = t2, this.input = new ((i3 = this).options.inputClass || (wc ? Zc : (kc ? iu : (bc ? cu : au))))(i3, Lc), this.touchAction = new Dc(this, this.options.touchAction), Tu(this, !0), Tc(this.options.recognizers, function(t3) {
                var e2 = o9.add(new t3[0](t3[1]));
                t3[2] && e2.recognizeWith(t3[2]), t3[3] && e2.requireFailure(t3[3]);
            }, this);
        }
        var e1 = t1.prototype;
        return e1.set = function(t2) {
            return oc(this.options, t2), t2.touchAction && this.touchAction.update(), t2.inputTarget && (this.input.destroy(), this.input.target = t2.inputTarget, this.input.init()), this;
        }, e1.stop = function(t2) {
            this.session.stopped = t2 ? 2 : 1;
        }, e1.recognize = function(t2) {
            var e2 = this.session;
            if (!e2.stopped) {
                var i3;
                this.touchAction.preventDefaults(t2);
                var o9 = this.recognizers, n9 = e2.curRecognizer;
                (!n9 || n9 && 8 & n9.state) && (e2.curRecognizer = null, n9 = null);
                for(var r5 = 0; r5 < o9.length;)i3 = o9[r5], 2 === e2.stopped || n9 && i3 !== n9 && !i3.canRecognizeWith(n9) ? i3.reset() : i3.recognize(t2), !n9 && 14 & i3.state && (e2.curRecognizer = i3, n9 = i3), r5++;
            }
        }, e1.get = function(t2) {
            if (t2 instanceof yu) return t2;
            for(var e2 = this.recognizers, i5 = 0; i5 < e2.length; i5++)if (e2[i5].options.event === t2) return e2[i5];
            return null;
        }, e1.add = function(t2) {
            if (uu(t2, "add", this)) return this;
            var e2 = this.get(t2.options.event);
            return e2 && this.remove(e2), this.recognizers.push(t2), t2.manager = this, this.touchAction.update(), t2;
        }, e1.remove = function(t2) {
            if (uu(t2, "remove", this)) return this;
            var e2 = this.get(t2);
            if (t2) {
                var i5 = this.recognizers, o10 = Yc(i5, e2);
                -1 !== o10 && (i5.splice(o10, 1), this.touchAction.update());
            }
            return this;
        }, e1.on = function(t2, e2) {
            if ((void 0) === t2 || (void 0) === e2) return this;
            var i6 = this.handlers;
            return Tc(Hc(t2), function(t3) {
                i6[t3] = i6[t3] || [], i6[t3].push(e2);
            }), this;
        }, e1.off = function(t2, e2) {
            if ((void 0) === t2) return this;
            var i6 = this.handlers;
            return Tc(Hc(t2), function(t3) {
                e2 ? i6[t3] && i6[t3].splice(Yc(i6[t3], e2), 1) : delete i6[t3];
            }), this;
        }, e1.emit = function(t2, e2) {
            this.options.domEvents && (function(t3, e3) {
                var i6 = document.createEvent("Event");
                i6.initEvent(t3, !0, !0), i6.gesture = e3, e3.target.dispatchEvent(i6);
            })(t2, e2);
            var i6 = this.handlers[t2] && this.handlers[t2].slice();
            if (i6 && i6.length) {
                e2.type = t2, e2.preventDefault = function() {
                    e2.srcEvent.preventDefault();
                };
                for(var o11 = 0; o11 < i6.length;)i6[o11](e2), o11++;
            }
        }, e1.destroy = function() {
            this.element && Tu(this, !1), this.handlers = {
            }, this.session = {
            }, this.input.destroy(), this.element = null;
        }, t1;
    }(), Pu = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, Du = "touchstart", Bu = "touchstart touchmove touchend touchcancel", Iu = function(t1) {
        function e1() {
            var i6, o12 = e1.prototype;
            return o12.evTarget = Du, o12.evWin = Bu, (i6 = t1.apply(this, arguments) || this).started = !1, i6;
        }
        return tc(e1, t1), e1.prototype.handler = function(t2) {
            var e2 = Pu[t2.type];
            if (1 === e2 && (this.started = !0), this.started) {
                var i6 = zu.call(this, t2, e2);
                12 & e2 && i6[0].length - i6[1].length == 0 && (this.started = !1), this.callback(this.manager, e2, {
                    pointers: i6[0],
                    changedPointers: i6[1],
                    pointerType: _c,
                    srcEvent: t2
                });
            }
        }, e1;
    }(Uc);
    function zu(t1, e1) {
        var i7 = Qc(t1.touches), o12 = Qc(t1.changedTouches);
        return 12 & e1 && (i7 = Jc(i7.concat(o12), "identifier", !0)), [
            i7,
            o12
        ];
    }
    function Fu(t1, e1, i7) {
        var o12 = "DEPRECATED METHOD: " + e1 + "\n" + i7 + " AT \n";
        return function() {
            var e2 = new Error("get-stack-trace"), i8 = e2 && e2.stack ? e2.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", n10 = window.console && (window.console.warn || window.console.log);
            return n10 && n10.call(window.console, o12, i8), t1.apply(this, arguments);
        };
    }
    var Nu = Fu(function(t1, e1, i7) {
        for(var o12 = Object.keys(e1), n10 = 0; n10 < o12.length;)(!i7 || i7 && (void 0) === t1[o12[n10]]) && (t1[o12[n10]] = e1[o12[n10]]), n10++;
        return t1;
    }, "extend", "Use `assign`."), Au = Fu(function(t1, e1) {
        return Nu(t1, e1, !0);
    }, "merge", "Use `assign`.");
    function Ru(t1, e1, i7) {
        var o12, n10 = e1.prototype;
        (o12 = t1.prototype = Object.create(n10)).constructor = t1, o12._super = n10, i7 && oc(o12, i7);
    }
    function ju(t1, e1) {
        return function() {
            return t1.apply(e1, arguments);
        };
    }
    var Lu = function() {
        var t1 = function(t2, e1) {
            return (void 0) === e1 && (e1 = {
            }), new Mu(t2, Jl({
                recognizers: Su.concat()
            }, e1));
        };
        return t1.VERSION = "2.0.17-rc", t1.DIRECTION_ALL = 30, t1.DIRECTION_DOWN = Ec, t1.DIRECTION_LEFT = 2, t1.DIRECTION_RIGHT = 4, t1.DIRECTION_UP = 8, t1.DIRECTION_HORIZONTAL = 6, t1.DIRECTION_VERTICAL = Oc, t1.DIRECTION_NONE = 1, t1.DIRECTION_DOWN = Ec, t1.INPUT_START = 1, t1.INPUT_MOVE = 2, t1.INPUT_END = 4, t1.INPUT_CANCEL = 8, t1.STATE_POSSIBLE = 1, t1.STATE_BEGAN = 2, t1.STATE_CHANGED = 4, t1.STATE_ENDED = 8, t1.STATE_RECOGNIZED = 8, t1.STATE_CANCELLED = 16, t1.STATE_FAILED = fu, t1.Manager = Mu, t1.Input = Uc, t1.TouchAction = Dc, t1.TouchInput = iu, t1.MouseInput = au, t1.PointerEventInput = Zc, t1.TouchMouseInput = cu, t1.SingleTouchInput = Iu, t1.Recognizer = yu, t1.AttrRecognizer = bu, t1.Tap = mu, t1.Pan = ku, t1.Swipe = _u, t1.Pinch = xu, t1.Rotate = Eu, t1.Press = Ou, t1.on = Wc, t1.off = Vc, t1.each = Tc, t1.merge = Au, t1.extend = Nu, t1.bindFn = ju, t1.assign = oc, t1.inherit = Ru, t1.bindFn = ju, t1.prefixed = dc, t1.toArray = Qc, t1.inArray = Yc, t1.uniqueArray = Jc, t1.splitStr = Hc, t1.boolOrFn = Mc, t1.hasParent = Bc, t1.addEventListeners = Wc, t1.removeEventListeners = Vc, t1.defaults = oc({
        }, Cu, {
            preset: Su
        }), t1;
    }();
    function Hu(t1, e1) {
        var i7 = (void 0) !== Nh && xr(t1) || t1["@@iterator"];
        if (!i7) {
            if (Hh(t1) || (i7 = (function(t2, e2) {
                var i8;
                if (!t2) return;
                if ("string" == typeof t2) return Wu(t2, e2);
                var o12 = Lh(i8 = Object.prototype.toString.call(t2)).call(i8, 8, -1);
                "Object" === o12 && t2.constructor && (o12 = t2.constructor.name);
                if ("Map" === o12 || "Set" === o12) return rr(t2);
                if ("Arguments" === o12 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o12)) return Wu(t2, e2);
            })(t1)) || e1 && t1 && "number" == typeof t1.length) {
                i7 && (t1 = i7);
                var o12 = 0, n10 = function() {
                };
                return {
                    s: n10,
                    n: function() {
                        return o12 >= t1.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t1[o12++]
                        };
                    },
                    e: function(t2) {
                        throw t2;
                    },
                    f: n10
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r6, s6 = !0, a4 = !1;
        return {
            s: function() {
                i7 = i7.call(t1);
            },
            n: function() {
                var t2 = i7.next();
                return s6 = t2.done, t2;
            },
            e: function(t2) {
                a4 = !0, r6 = t2;
            },
            f: function() {
                try {
                    s6 || null == i7.return || i7.return();
                } finally{
                    if (a4) throw r6;
                }
            }
        };
    }
    function Wu(t1, e1) {
        (null == e1 || e1 > t1.length) && (e1 = t1.length);
        for(var i7 = 0, o13 = new Array(e1); i7 < e1; i7++)o13[i7] = t1[i7];
        return o13;
    }
    function Vu() {
        for(var t1 = arguments.length, e1 = new Array(t1), i7 = 0; i7 < t1; i7++)e1[i7] = arguments[i7];
        return qu(e1.length ? e1 : [
            Kh()
        ]);
    }
    function qu(t1) {
        var e1 = Bh(function() {
            for(var t2 = Uu(), e2 = t2(" "), i7 = t2(" "), o13 = t2(" "), n11 = 0; n11 < arguments.length; n11++)(e2 -= t2(n11 < 0 || arguments.length <= n11 ? void 0 : arguments[n11])) < 0 && (e2 += 1), (i7 -= t2(n11 < 0 || arguments.length <= n11 ? void 0 : arguments[n11])) < 0 && (i7 += 1), (o13 -= t2(n11 < 0 || arguments.length <= n11 ? void 0 : arguments[n11])) < 0 && (o13 += 1);
            return [
                e2,
                i7,
                o13
            ];
        }(t1), 3), i7 = e1[0], o13 = e1[1], n11 = e1[2], r6 = 1, s6 = function() {
            var t2 = 2091639 * i7 + 0.00000000023283064365386963 * r6;
            return i7 = o13, o13 = n11, n11 = t2 - (r6 = 0 | t2);
        };
        return s6.uint32 = function() {
            return 4294967296 * s6();
        }, s6.fract53 = function() {
            return s6() + 0.00000000000000011102230246251565 * (2097152 * s6() | 0);
        }, s6.algorithm = "Alea", s6.seed = t1, s6.version = "0.9", s6;
    }
    function Uu() {
        var t1 = 4022871197;
        return function(e1) {
            for(var i7 = e1.toString(), o13 = 0; o13 < i7.length; o13++){
                var n11 = 0.02519603282416938 * (t1 += i7.charCodeAt(o13));
                n11 -= t1 = n11 >>> 0, t1 = (n11 *= t1) >>> 0, t1 += 4294967296 * (n11 -= t1);
            }
            return 0.00000000023283064365386963 * (t1 >>> 0);
        };
    }
    Nh("DELETE");
    var Yu = "undefined" != typeof window ? window.Hammer || Lu : function() {
        var t1;
        return {
            on: t1 = function() {
            },
            off: t1,
            destroy: t1,
            emit: t1,
            get: function() {
                return {
                    set: t1
                };
            }
        };
    };
    function Xu(t1) {
        var e1, i7 = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t1,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            i7._dom.overlay.parentNode.removeChild(i7._dom.overlay);
        });
        var o13 = Yu(this._dom.overlay);
        o13.on("tap", si(e1 = this._onTapOverlay).call(e1, this)), this._cleanupQueue.push(function() {
            o13.destroy();
        });
        var n12 = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        nd(n12).call(n12, function(t2) {
            o13.on(t2, function(t3) {
                t3.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e2) {
            (function(t2, e3) {
                for(; t2;){
                    if (t2 === e3) return !0;
                    t2 = t2.parentNode;
                }
                return !1;
            })(e2.target, t1) || i7.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", i7._onClick);
        })), this._escListener = function(t2) {
            ("key" in t2 ? "Escape" === t2.key : 27 === t2.keyCode) && i7.deactivate();
        };
    }
    pi(Xu.prototype), Xu.current = null, Xu.prototype.destroy = function() {
        var t1, e1;
        this.deactivate();
        var i7, o13 = Hu(ld(t1 = Od(e1 = this._cleanupQueue).call(e1, 0)).call(t1));
        try {
            for(o13.s(); !(i7 = o13.n()).done;)i7.value();
        } catch (t2) {
            o13.e(t2);
        } finally{
            o13.f();
        }
    }, Xu.prototype.activate = function() {
        Xu.current && Xu.current.deactivate(), Xu.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, Xu.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, Xu.prototype._onTapOverlay = function(t1) {
        this.activate(), t1.srcEvent.stopPropagation();
    };
    var Gu = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, Ku = /^#?([a-f\d])([a-f\d])([a-f\d])$/i, $u = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i, Zu = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
    function Qu(t1) {
        if (t1) for(; !0 === t1.hasChildNodes();){
            var e1 = t1.firstChild;
            e1 && (Qu(e1), t1.removeChild(e1));
        }
    }
    function Ju(t1) {
        return t1 instanceof String || "string" == typeof t1;
    }
    function tf(t1) {
        return "object" === zh(t1) && null !== t1;
    }
    function ef(t1, e2, i7, o13) {
        var n12 = !1;
        !0 === o13 && (n12 = null === e2[i7] && (void 0) !== t1[i7]), n12 ? delete t1[i7] : t1[i7] = e2[i7];
    }
    function of(t1, e2) {
        var i7 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2];
        for(var o13 in t1)if ((void 0) !== e2[o13]) {
            if (null === e2[o13] || "object" !== zh(e2[o13])) ef(t1, e2, o13, i7);
            else {
                var n12 = t1[o13], r6 = e2[o13];
                tf(n12) && tf(r6) && of(n12, r6, i7);
            }
        }
    }
    function nf(t1, e2, i7) {
        var o13 = arguments.length > 3 && (void 0) !== arguments[3] && arguments[3];
        if (Hh(i7)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n13 = 0; n13 < t1.length; n13++){
            var r7 = t1[n13];
            if (Object.prototype.hasOwnProperty.call(i7, r7)) {
                if (i7[r7] && i7[r7].constructor === Object) (void 0) === e2[r7] && (e2[r7] = {
                }), e2[r7].constructor === Object ? sf(e2[r7], i7[r7], !1, o13) : ef(e2, i7, r7, o13);
                else {
                    if (Hh(i7[r7])) throw new TypeError("Arrays are not supported by deepExtend");
                    ef(e2, i7, r7, o13);
                }
            }
        }
        return e2;
    }
    function rf(t1, e2, i7) {
        var o13 = arguments.length > 3 && (void 0) !== arguments[3] && arguments[3];
        if (Hh(i7)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n13 in i7)if (Object.prototype.hasOwnProperty.call(i7, n13) && !Hd(t1).call(t1, n13)) {
            if (i7[n13] && i7[n13].constructor === Object) (void 0) === e2[n13] && (e2[n13] = {
            }), e2[n13].constructor === Object ? sf(e2[n13], i7[n13]) : ef(e2, i7, n13, o13);
            else if (Hh(i7[n13])) {
                e2[n13] = [];
                for(var r8 = 0; r8 < i7[n13].length; r8++)e2[n13].push(i7[n13][r8]);
            } else ef(e2, i7, n13, o13);
        }
        return e2;
    }
    function sf(t1, e2) {
        var i7 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2], o13 = arguments.length > 3 && (void 0) !== arguments[3] && arguments[3];
        for(var n13 in e2)if (Object.prototype.hasOwnProperty.call(e2, n13) || !0 === i7) {
            if ("object" === zh(e2[n13]) && null !== e2[n13] && Yd(e2[n13]) === Object.prototype) (void 0) === t1[n13] ? t1[n13] = sf({
            }, e2[n13], i7) : "object" === zh(t1[n13]) && null !== t1[n13] && Yd(t1[n13]) === Object.prototype ? sf(t1[n13], e2[n13], i7) : ef(t1, e2, n13, o13);
            else if (Hh(e2[n13])) {
                var r9;
                t1[n13] = Lh(r9 = e2[n13]).call(r9);
            } else ef(t1, e2, n13, o13);
        }
        return t1;
    }
    function af(t1, e2) {
        var i7;
        return jh(i7 = []).call(i7, Fh(t1), [
            e2
        ]);
    }
    function hf(t1) {
        return Lh(t1).call(t1);
    }
    function df(t1) {
        return t1.getBoundingClientRect().top;
    }
    function lf(t1, e2) {
        if (Hh(t1)) for(var i7 = t1.length, o13 = 0; o13 < i7; o13++)e2(t1[o13], o13, t1);
        else for(var n13 in t1)Object.prototype.hasOwnProperty.call(t1, n13) && e2(t1[n13], n13, t1);
    }
    function cf(t1) {
        var e2;
        switch(t1.length){
            case 3:
            case 4:
                return (e2 = Ku.exec(t1)) ? {
                    r: yl(e2[1] + e2[1], 16),
                    g: yl(e2[2] + e2[2], 16),
                    b: yl(e2[3] + e2[3], 16)
                } : null;
            case 6:
            case 7:
                return (e2 = Gu.exec(t1)) ? {
                    r: yl(e2[1], 16),
                    g: yl(e2[2], 16),
                    b: yl(e2[3], 16)
                } : null;
            default:
                return null;
        }
    }
    function uf(t1, e2) {
        if (Hd(t1).call(t1, "rgba")) return t1;
        if (Hd(t1).call(t1, "rgb")) {
            var i7 = t1.substr(Cl(t1).call(t1, "(") + 1).replace(")", "").split(",");
            return "rgba(" + i7[0] + "," + i7[1] + "," + i7[2] + "," + e2 + ")";
        }
        var o13 = cf(t1);
        return null == o13 ? t1 : "rgba(" + o13.r + "," + o13.g + "," + o13.b + "," + e2 + ")";
    }
    function ff(t1, e2, i8) {
        var o13;
        return "#" + Lh(o13 = (16777216 + (t1 << 16) + (e2 << 8) + i8).toString(16)).call(o13, 1);
    }
    function pf(t1, e2) {
        if (Ju(t1)) {
            var i8 = t1;
            if (bf(i8)) {
                var o13, n13 = Uh(o13 = i8.substr(4).substr(0, i8.length - 5).split(",")).call(o13, function(t2) {
                    return yl(t2);
                });
                i8 = ff(n13[0], n13[1], n13[2]);
            }
            if (!0 === mf(i8)) {
                var r10 = function(t2) {
                    var e3 = cf(t2);
                    if (!e3) throw new TypeError("'".concat(t2, "' is not a valid color."));
                    return vf(e3.r, e3.g, e3.b);
                }(i8), s6 = {
                    h: r10.h,
                    s: 0.8 * r10.s,
                    v: Math.min(1, 1.02 * r10.v)
                }, a4 = {
                    h: r10.h,
                    s: Math.min(1, 1.25 * r10.s),
                    v: 0.8 * r10.v
                }, h2 = yf(a4.h, a4.s, a4.v), d2 = yf(s6.h, s6.s, s6.v);
                return {
                    background: i8,
                    border: h2,
                    highlight: {
                        background: d2,
                        border: h2
                    },
                    hover: {
                        background: d2,
                        border: h2
                    }
                };
            }
            return {
                background: i8,
                border: i8,
                highlight: {
                    background: i8,
                    border: i8
                },
                hover: {
                    background: i8,
                    border: i8
                }
            };
        }
        return e2 ? {
            background: t1.background || e2.background,
            border: t1.border || e2.border,
            highlight: Ju(t1.highlight) ? {
                border: t1.highlight,
                background: t1.highlight
            } : {
                background: t1.highlight && t1.highlight.background || e2.highlight.background,
                border: t1.highlight && t1.highlight.border || e2.highlight.border
            },
            hover: Ju(t1.hover) ? {
                border: t1.hover,
                background: t1.hover
            } : {
                border: t1.hover && t1.hover.border || e2.hover.border,
                background: t1.hover && t1.hover.background || e2.hover.background
            }
        } : {
            background: t1.background || void 0,
            border: t1.border || void 0,
            highlight: Ju(t1.highlight) ? {
                border: t1.highlight,
                background: t1.highlight
            } : {
                background: t1.highlight && t1.highlight.background || void 0,
                border: t1.highlight && t1.highlight.border || void 0
            },
            hover: Ju(t1.hover) ? {
                border: t1.hover,
                background: t1.hover
            } : {
                border: t1.hover && t1.hover.border || void 0,
                background: t1.hover && t1.hover.background || void 0
            }
        };
    }
    function vf(t1, e2, i9) {
        t1 /= 255, e2 /= 255, i9 /= 255;
        var o14 = Math.min(t1, Math.min(e2, i9)), n14 = Math.max(t1, Math.max(e2, i9));
        return o14 === n14 ? {
            h: 0,
            s: 0,
            v: o14
        } : {
            h: 60 * ((t1 === o14 ? 3 : i9 === o14 ? 1 : 5) - (t1 === o14 ? e2 - i9 : i9 === o14 ? t1 - e2 : i9 - t1) / (n14 - o14)) / 360,
            s: (n14 - o14) / n14,
            v: n14
        };
    }
    function gf(t1, e2, i9) {
        var o14, n14, r11, s7 = Math.floor(6 * t1), a5 = 6 * t1 - s7, h4 = i9 * (1 - e2), d4 = i9 * (1 - a5 * e2), l1 = i9 * (1 - (1 - a5) * e2);
        switch(s7 % 6){
            case 0:
                o14 = i9, n14 = l1, r11 = h4;
                break;
            case 1:
                o14 = d4, n14 = i9, r11 = h4;
                break;
            case 2:
                o14 = h4, n14 = i9, r11 = l1;
                break;
            case 3:
                o14 = h4, n14 = d4, r11 = i9;
                break;
            case 4:
                o14 = l1, n14 = h4, r11 = i9;
                break;
            case 5:
                o14 = i9, n14 = h4, r11 = d4;
        }
        return {
            r: Math.floor(255 * o14),
            g: Math.floor(255 * n14),
            b: Math.floor(255 * r11)
        };
    }
    function yf(t1, e2, i9) {
        var o14 = gf(t1, e2, i9);
        return ff(o14.r, o14.g, o14.b);
    }
    function mf(t1) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t1);
    }
    function bf(t1) {
        return $u.test(t1);
    }
    function wf(t1) {
        return Zu.test(t1);
    }
    function kf(t1) {
        if (null === t1 || "object" !== zh(t1)) return null;
        if (t1 instanceof Element) return t1;
        var e2 = Bl(t1);
        for(var i9 in t1)Object.prototype.hasOwnProperty.call(t1, i9) && "object" == zh(t1[i9]) && (e2[i9] = kf(t1[i9]));
        return e2;
    }
    function _f(t1, e2, i9) {
        var o14 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : {
        }, n14 = function(t2) {
            return null != t2;
        }, r11 = function(t2) {
            return null !== t2 && "object" === zh(t2);
        }, s7 = function(t2) {
            for(var e3 in t2)if (Object.prototype.hasOwnProperty.call(t2, e3)) return !1;
            return !0;
        };
        if (!r11(t1)) throw new Error("Parameter mergeTarget must be an object");
        if (!r11(e2)) throw new Error("Parameter options must be an object");
        if (!n14(i9)) throw new Error("Parameter option must have a value");
        if (!r11(o14)) throw new Error("Parameter globalOptions must be an object");
        var a5 = function(t2, e3, i10) {
            r11(t2[i10]) || (t2[i10] = {
            });
            var o15 = e3[i10], n15 = t2[i10];
            for(var s8 in o15)Object.prototype.hasOwnProperty.call(o15, s8) && (n15[s8] = o15[s8]);
        }, h4 = e2[i9], d4 = r11(o14) && !s7(o14), l1 = d4 ? o14[i9] : void 0, c1 = l1 ? l1.enabled : void 0;
        if ((void 0) !== h4) {
            if ("boolean" == typeof h4) return r11(t1[i9]) || (t1[i9] = {
            }), void (t1[i9].enabled = h4);
            if (null === h4 && !r11(t1[i9])) {
                if (!n14(l1)) return;
                t1[i9] = Bl(l1);
            }
            if (r11(h4)) {
                var u1 = !0;
                (void 0) !== h4.enabled ? u1 = h4.enabled : (void 0) !== c1 && (u1 = l1.enabled), a5(t1, e2, i9), t1[i9].enabled = u1;
            }
        }
    }
    var xf = {
        linear: function(t1) {
            return t1;
        },
        easeInQuad: function(t1) {
            return t1 * t1;
        },
        easeOutQuad: function(t1) {
            return t1 * (2 - t1);
        },
        easeInOutQuad: function(t1) {
            return t1 < 0.5 ? 2 * t1 * t1 : (4 - 2 * t1) * t1 - 1;
        },
        easeInCubic: function(t1) {
            return t1 * t1 * t1;
        },
        easeOutCubic: function(t1) {
            return (--t1) * t1 * t1 + 1;
        },
        easeInOutCubic: function(t1) {
            return t1 < 0.5 ? 4 * t1 * t1 * t1 : (t1 - 1) * (2 * t1 - 2) * (2 * t1 - 2) + 1;
        },
        easeInQuart: function(t1) {
            return t1 * t1 * t1 * t1;
        },
        easeOutQuart: function(t1) {
            return 1 - (--t1) * t1 * t1 * t1;
        },
        easeInOutQuart: function(t1) {
            return t1 < 0.5 ? 8 * t1 * t1 * t1 * t1 : 1 - 8 * --t1 * t1 * t1 * t1;
        },
        easeInQuint: function(t1) {
            return t1 * t1 * t1 * t1 * t1;
        },
        easeOutQuint: function(t1) {
            return 1 + (--t1) * t1 * t1 * t1 * t1;
        },
        easeInOutQuint: function(t1) {
            return t1 < 0.5 ? 16 * t1 * t1 * t1 * t1 * t1 : 1 + 16 * --t1 * t1 * t1 * t1 * t1;
        }
    };
    function Ef(t1, e2) {
        var i9;
        Hh(e2) || (e2 = [
            e2
        ]);
        var o14, n14 = Hu(t1);
        try {
            for(n14.s(); !(o14 = n14.n()).done;){
                var r11 = o14.value;
                if (r11) {
                    i9 = r11[e2[0]];
                    for(var s7 = 1; s7 < e2.length; s7++)i9 && (i9 = i9[e2[s7]]);
                    if ((void 0) !== i9) break;
                }
            }
        } catch (t2) {
            n14.e(t2);
        } finally{
            n14.f();
        }
        return i9;
    }
    var Of = {
        black: "#000000",
        navy: "#000080",
        darkblue: "#00008B",
        mediumblue: "#0000CD",
        blue: "#0000FF",
        darkgreen: "#006400",
        green: "#008000",
        teal: "#008080",
        darkcyan: "#008B8B",
        deepskyblue: "#00BFFF",
        darkturquoise: "#00CED1",
        mediumspringgreen: "#00FA9A",
        lime: "#00FF00",
        springgreen: "#00FF7F",
        aqua: "#00FFFF",
        cyan: "#00FFFF",
        midnightblue: "#191970",
        dodgerblue: "#1E90FF",
        lightseagreen: "#20B2AA",
        forestgreen: "#228B22",
        seagreen: "#2E8B57",
        darkslategray: "#2F4F4F",
        limegreen: "#32CD32",
        mediumseagreen: "#3CB371",
        turquoise: "#40E0D0",
        royalblue: "#4169E1",
        steelblue: "#4682B4",
        darkslateblue: "#483D8B",
        mediumturquoise: "#48D1CC",
        indigo: "#4B0082",
        darkolivegreen: "#556B2F",
        cadetblue: "#5F9EA0",
        cornflowerblue: "#6495ED",
        mediumaquamarine: "#66CDAA",
        dimgray: "#696969",
        slateblue: "#6A5ACD",
        olivedrab: "#6B8E23",
        slategray: "#708090",
        lightslategray: "#778899",
        mediumslateblue: "#7B68EE",
        lawngreen: "#7CFC00",
        chartreuse: "#7FFF00",
        aquamarine: "#7FFFD4",
        maroon: "#800000",
        purple: "#800080",
        olive: "#808000",
        gray: "#808080",
        skyblue: "#87CEEB",
        lightskyblue: "#87CEFA",
        blueviolet: "#8A2BE2",
        darkred: "#8B0000",
        darkmagenta: "#8B008B",
        saddlebrown: "#8B4513",
        darkseagreen: "#8FBC8F",
        lightgreen: "#90EE90",
        mediumpurple: "#9370D8",
        darkviolet: "#9400D3",
        palegreen: "#98FB98",
        darkorchid: "#9932CC",
        yellowgreen: "#9ACD32",
        sienna: "#A0522D",
        brown: "#A52A2A",
        darkgray: "#A9A9A9",
        lightblue: "#ADD8E6",
        greenyellow: "#ADFF2F",
        paleturquoise: "#AFEEEE",
        lightsteelblue: "#B0C4DE",
        powderblue: "#B0E0E6",
        firebrick: "#B22222",
        darkgoldenrod: "#B8860B",
        mediumorchid: "#BA55D3",
        rosybrown: "#BC8F8F",
        darkkhaki: "#BDB76B",
        silver: "#C0C0C0",
        mediumvioletred: "#C71585",
        indianred: "#CD5C5C",
        peru: "#CD853F",
        chocolate: "#D2691E",
        tan: "#D2B48C",
        lightgrey: "#D3D3D3",
        palevioletred: "#D87093",
        thistle: "#D8BFD8",
        orchid: "#DA70D6",
        goldenrod: "#DAA520",
        crimson: "#DC143C",
        gainsboro: "#DCDCDC",
        plum: "#DDA0DD",
        burlywood: "#DEB887",
        lightcyan: "#E0FFFF",
        lavender: "#E6E6FA",
        darksalmon: "#E9967A",
        violet: "#EE82EE",
        palegoldenrod: "#EEE8AA",
        lightcoral: "#F08080",
        khaki: "#F0E68C",
        aliceblue: "#F0F8FF",
        honeydew: "#F0FFF0",
        azure: "#F0FFFF",
        sandybrown: "#F4A460",
        wheat: "#F5DEB3",
        beige: "#F5F5DC",
        whitesmoke: "#F5F5F5",
        mintcream: "#F5FFFA",
        ghostwhite: "#F8F8FF",
        salmon: "#FA8072",
        antiquewhite: "#FAEBD7",
        linen: "#FAF0E6",
        lightgoldenrodyellow: "#FAFAD2",
        oldlace: "#FDF5E6",
        red: "#FF0000",
        fuchsia: "#FF00FF",
        magenta: "#FF00FF",
        deeppink: "#FF1493",
        orangered: "#FF4500",
        tomato: "#FF6347",
        hotpink: "#FF69B4",
        coral: "#FF7F50",
        darkorange: "#FF8C00",
        lightsalmon: "#FFA07A",
        orange: "#FFA500",
        lightpink: "#FFB6C1",
        pink: "#FFC0CB",
        gold: "#FFD700",
        peachpuff: "#FFDAB9",
        navajowhite: "#FFDEAD",
        moccasin: "#FFE4B5",
        bisque: "#FFE4C4",
        mistyrose: "#FFE4E1",
        blanchedalmond: "#FFEBCD",
        papayawhip: "#FFEFD5",
        lavenderblush: "#FFF0F5",
        seashell: "#FFF5EE",
        cornsilk: "#FFF8DC",
        lemonchiffon: "#FFFACD",
        floralwhite: "#FFFAF0",
        snow: "#FFFAFA",
        yellow: "#FFFF00",
        lightyellow: "#FFFFE0",
        ivory: "#FFFFF0",
        white: "#FFFFFF"
    }, Cf = function() {
        function t1() {
            var e2 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : 1;
            Ra(this, t1), this.pixelRatio = e2, this.generated = !1, this.centerCoordinates = {
                x: 144.5,
                y: 144.5
            }, this.r = 289 * 0.49, this.color = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.hueCircle = void 0, this.initialColor = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.previousColor = void 0, this.applied = !1, this.updateCallback = function() {
            }, this.closeCallback = function() {
            }, this._create();
        }
        return Ha(t1, [
            {
                key: "insertTo",
                value: function(t2) {
                    (void 0) !== this.hammer && (this.hammer.destroy(), this.hammer = void 0), this.container = t2, this.container.appendChild(this.frame), this._bindHammer(), this._setSize();
                }
            },
            {
                key: "setUpdateCallback",
                value: function(t2) {
                    if ("function" != typeof t2) throw new Error("Function attempted to set as colorPicker update callback is not a function.");
                    this.updateCallback = t2;
                }
            },
            {
                key: "setCloseCallback",
                value: function(t2) {
                    if ("function" != typeof t2) throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
                    this.closeCallback = t2;
                }
            },
            {
                key: "_isColorString",
                value: function(t2) {
                    if ("string" == typeof t2) return Of[t2];
                }
            },
            {
                key: "setColor",
                value: function(t2) {
                    var e2 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                    if ("none" !== t2) {
                        var i9, o14 = this._isColorString(t2);
                        if ((void 0) !== o14 && (t2 = o14), !0 === Ju(t2)) {
                            if (!0 === bf(t2)) {
                                var n14 = t2.substr(4).substr(0, t2.length - 5).split(",");
                                i9 = {
                                    r: n14[0],
                                    g: n14[1],
                                    b: n14[2],
                                    a: 1
                                };
                            } else if (!0 === wf(t2)) {
                                var r12 = t2.substr(5).substr(0, t2.length - 6).split(",");
                                i9 = {
                                    r: r12[0],
                                    g: r12[1],
                                    b: r12[2],
                                    a: r12[3]
                                };
                            } else if (!0 === mf(t2)) {
                                var s8 = cf(t2);
                                i9 = {
                                    r: s8.r,
                                    g: s8.g,
                                    b: s8.b,
                                    a: 1
                                };
                            }
                        } else if (t2 instanceof Object && (void 0) !== t2.r && (void 0) !== t2.g && (void 0) !== t2.b) {
                            var a5 = (void 0) !== t2.a ? t2.a : "1.0";
                            i9 = {
                                r: t2.r,
                                g: t2.g,
                                b: t2.b,
                                a: a5
                            };
                        }
                        if ((void 0) === i9) throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + Wl(t2));
                        this._setColor(i9, e2);
                    }
                }
            },
            {
                key: "show",
                value: function() {
                    (void 0) !== this.closeCallback && (this.closeCallback(), this.closeCallback = void 0), this.applied = !1, this.frame.style.display = "block", this._generateHueCircle();
                }
            },
            {
                key: "_hide",
                value: function() {
                    var t2 = this, e2 = !(arguments.length > 0 && (void 0) !== arguments[0]) || arguments[0];
                    !0 === e2 && (this.previousColor = Ke({
                    }, this.color)), !0 === this.applied && this.updateCallback(this.initialColor), this.frame.style.display = "none", Yl(function() {
                        (void 0) !== t2.closeCallback && (t2.closeCallback(), t2.closeCallback = void 0);
                    }, 0);
                }
            },
            {
                key: "_save",
                value: function() {
                    this.updateCallback(this.color), this.applied = !1, this._hide();
                }
            },
            {
                key: "_apply",
                value: function() {
                    this.applied = !0, this.updateCallback(this.color), this._updatePicker(this.color);
                }
            },
            {
                key: "_loadLast",
                value: function() {
                    (void 0) !== this.previousColor ? this.setColor(this.previousColor, !1) : alert("There is no last color to load...");
                }
            },
            {
                key: "_setColor",
                value: function(t2) {
                    var e2 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                    !0 === e2 && (this.initialColor = Ke({
                    }, t2)), this.color = t2;
                    var i10 = vf(t2.r, t2.g, t2.b), o15 = 2 * Math.PI, n15 = this.r * i10.s, r13 = this.centerCoordinates.x + n15 * Math.sin(o15 * i10.h), s9 = this.centerCoordinates.y + n15 * Math.cos(o15 * i10.h);
                    this.colorPickerSelector.style.left = r13 - 0.5 * this.colorPickerSelector.clientWidth + "px", this.colorPickerSelector.style.top = s9 - 0.5 * this.colorPickerSelector.clientHeight + "px", this._updatePicker(t2);
                }
            },
            {
                key: "_setOpacity",
                value: function(t2) {
                    this.color.a = t2 / 100, this._updatePicker(this.color);
                }
            },
            {
                key: "_setBrightness",
                value: function(t2) {
                    var e2 = vf(this.color.r, this.color.g, this.color.b);
                    e2.v = t2 / 100;
                    var i10 = gf(e2.h, e2.s, e2.v);
                    i10.a = this.color.a, this.color = i10, this._updatePicker();
                }
            },
            {
                key: "_updatePicker",
                value: function() {
                    var t2 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : this.color, e2 = vf(t2.r, t2.g, t2.b), i10 = this.colorPickerCanvas.getContext("2d");
                    (void 0) === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (i10.webkitBackingStorePixelRatio || i10.mozBackingStorePixelRatio || i10.msBackingStorePixelRatio || i10.oBackingStorePixelRatio || i10.backingStorePixelRatio || 1)), i10.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    var o15 = this.colorPickerCanvas.clientWidth, n15 = this.colorPickerCanvas.clientHeight;
                    i10.clearRect(0, 0, o15, n15), i10.putImageData(this.hueCircle, 0, 0), i10.fillStyle = "rgba(0,0,0," + (1 - e2.v) + ")", i10.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), Ql(i10).call(i10), this.brightnessRange.value = 100 * e2.v, this.opacityRange.value = 100 * t2.a, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            },
            {
                key: "_setSize",
                value: function() {
                    this.colorPickerCanvas.style.width = "100%", this.colorPickerCanvas.style.height = "100%", this.colorPickerCanvas.width = 289 * this.pixelRatio, this.colorPickerCanvas.height = 289 * this.pixelRatio;
                }
            },
            {
                key: "_create",
                value: function() {
                    var t2, e2, i10, o15;
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-color-picker", this.colorPickerDiv = document.createElement("div"), this.colorPickerSelector = document.createElement("div"), this.colorPickerSelector.className = "vis-selector", this.colorPickerDiv.appendChild(this.colorPickerSelector), this.colorPickerCanvas = document.createElement("canvas"), this.colorPickerDiv.appendChild(this.colorPickerCanvas), this.colorPickerCanvas.getContext) {
                        var n15 = this.colorPickerCanvas.getContext("2d");
                        this.pixelRatio = (window.devicePixelRatio || 1) / (n15.webkitBackingStorePixelRatio || n15.mozBackingStorePixelRatio || n15.msBackingStorePixelRatio || n15.oBackingStorePixelRatio || n15.backingStorePixelRatio || 1), this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    } else {
                        var r13 = document.createElement("DIV");
                        r13.style.color = "red", r13.style.fontWeight = "bold", r13.style.padding = "10px", r13.innerText = "Error: your browser does not support HTML canvas", this.colorPickerCanvas.appendChild(r13);
                    }
                    this.colorPickerDiv.className = "vis-color", this.opacityDiv = document.createElement("div"), this.opacityDiv.className = "vis-opacity", this.brightnessDiv = document.createElement("div"), this.brightnessDiv.className = "vis-brightness", this.arrowDiv = document.createElement("div"), this.arrowDiv.className = "vis-arrow", this.opacityRange = document.createElement("input");
                    try {
                        this.opacityRange.type = "range", this.opacityRange.min = "0", this.opacityRange.max = "100";
                    } catch (t3) {
                    }
                    this.opacityRange.value = "100", this.opacityRange.className = "vis-range", this.brightnessRange = document.createElement("input");
                    try {
                        this.brightnessRange.type = "range", this.brightnessRange.min = "0", this.brightnessRange.max = "100";
                    } catch (t3) {
                    }
                    this.brightnessRange.value = "100", this.brightnessRange.className = "vis-range", this.opacityDiv.appendChild(this.opacityRange), this.brightnessDiv.appendChild(this.brightnessRange);
                    var s9 = this;
                    this.opacityRange.onchange = function() {
                        s9._setOpacity(this.value);
                    }, this.opacityRange.oninput = function() {
                        s9._setOpacity(this.value);
                    }, this.brightnessRange.onchange = function() {
                        s9._setBrightness(this.value);
                    }, this.brightnessRange.oninput = function() {
                        s9._setBrightness(this.value);
                    }, this.brightnessLabel = document.createElement("div"), this.brightnessLabel.className = "vis-label vis-brightness", this.brightnessLabel.innerText = "brightness:", this.opacityLabel = document.createElement("div"), this.opacityLabel.className = "vis-label vis-opacity", this.opacityLabel.innerText = "opacity:", this.newColorDiv = document.createElement("div"), this.newColorDiv.className = "vis-new-color", this.newColorDiv.innerText = "new", this.initialColorDiv = document.createElement("div"), this.initialColorDiv.className = "vis-initial-color", this.initialColorDiv.innerText = "initial", this.cancelButton = document.createElement("div"), this.cancelButton.className = "vis-button vis-cancel", this.cancelButton.innerText = "cancel", this.cancelButton.onclick = si(t2 = this._hide).call(t2, this, !1), this.applyButton = document.createElement("div"), this.applyButton.className = "vis-button vis-apply", this.applyButton.innerText = "apply", this.applyButton.onclick = si(e2 = this._apply).call(e2, this), this.saveButton = document.createElement("div"), this.saveButton.className = "vis-button vis-save", this.saveButton.innerText = "save", this.saveButton.onclick = si(i10 = this._save).call(i10, this), this.loadButton = document.createElement("div"), this.loadButton.className = "vis-button vis-load", this.loadButton.innerText = "load last", this.loadButton.onclick = si(o15 = this._loadLast).call(o15, this), this.frame.appendChild(this.colorPickerDiv), this.frame.appendChild(this.arrowDiv), this.frame.appendChild(this.brightnessLabel), this.frame.appendChild(this.brightnessDiv), this.frame.appendChild(this.opacityLabel), this.frame.appendChild(this.opacityDiv), this.frame.appendChild(this.newColorDiv), this.frame.appendChild(this.initialColorDiv), this.frame.appendChild(this.cancelButton), this.frame.appendChild(this.applyButton), this.frame.appendChild(this.saveButton), this.frame.appendChild(this.loadButton);
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t2 = this;
                    this.drag = {
                    }, this.pinch = {
                    }, this.hammer = new Yu(this.colorPickerCanvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.on("hammer.input", function(e2) {
                        e2.isFirst && t2._moveSelector(e2);
                    }), this.hammer.on("tap", function(e2) {
                        t2._moveSelector(e2);
                    }), this.hammer.on("panstart", function(e2) {
                        t2._moveSelector(e2);
                    }), this.hammer.on("panmove", function(e2) {
                        t2._moveSelector(e2);
                    }), this.hammer.on("panend", function(e2) {
                        t2._moveSelector(e2);
                    });
                }
            },
            {
                key: "_generateHueCircle",
                value: function() {
                    if (!1 === this.generated) {
                        var t2 = this.colorPickerCanvas.getContext("2d");
                        (void 0) === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (t2.webkitBackingStorePixelRatio || t2.mozBackingStorePixelRatio || t2.msBackingStorePixelRatio || t2.oBackingStorePixelRatio || t2.backingStorePixelRatio || 1)), t2.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                        var e2, i10, o15, n16, r14 = this.colorPickerCanvas.clientWidth, s9 = this.colorPickerCanvas.clientHeight;
                        t2.clearRect(0, 0, r14, s9), this.centerCoordinates = {
                            x: 0.5 * r14,
                            y: 0.5 * s9
                        }, this.r = 0.49 * r14;
                        var a6, h4 = 2 * Math.PI / 360, d4 = 1 / this.r;
                        for(o15 = 0; o15 < 360; o15++)for(n16 = 0; n16 < this.r; n16++)e2 = this.centerCoordinates.x + n16 * Math.sin(h4 * o15), i10 = this.centerCoordinates.y + n16 * Math.cos(h4 * o15), a6 = gf(0.002777777777777778 * o15, n16 * d4, 1), t2.fillStyle = "rgb(" + a6.r + "," + a6.g + "," + a6.b + ")", t2.fillRect(e2 - 0.5, i10 - 0.5, 2, 2);
                        t2.strokeStyle = "rgba(0,0,0,1)", t2.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), t2.stroke(), this.hueCircle = t2.getImageData(0, 0, r14, s9);
                    }
                    this.generated = !0;
                }
            },
            {
                key: "_moveSelector",
                value: function(t3) {
                    var e3 = this.colorPickerDiv.getBoundingClientRect(), i11 = t3.center.x - e3.left, o16 = t3.center.y - e3.top, n17 = 0.5 * this.colorPickerDiv.clientHeight, r15 = 0.5 * this.colorPickerDiv.clientWidth, s10 = i11 - r15, a7 = o16 - n17, h5 = Math.atan2(s10, a7), d5 = 0.98 * Math.min(Math.sqrt(s10 * s10 + a7 * a7), r15), l1 = Math.cos(h5) * d5 + n17, c1 = Math.sin(h5) * d5 + r15;
                    this.colorPickerSelector.style.top = l1 - 0.5 * this.colorPickerSelector.clientHeight + "px", this.colorPickerSelector.style.left = c1 - 0.5 * this.colorPickerSelector.clientWidth + "px";
                    var u2 = h5 / (2 * Math.PI);
                    u2 = u2 < 0 ? u2 + 1 : u2;
                    var f2 = d5 / this.r, p1 = vf(this.color.r, this.color.g, this.color.b);
                    p1.h = u2, p1.s = f2;
                    var v2 = gf(p1.h, p1.s, p1.v);
                    v2.a = this.color.a, this.color = v2, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            }
        ]), t1;
    }();
    function Sf() {
        for(var t1 = arguments.length, e3 = new Array(t1), i11 = 0; i11 < t1; i11++)e3[i11] = arguments[i11];
        if (e3.length < 1) throw new TypeError("Invalid arguments.");
        if (1 === e3.length) return document.createTextNode(e3[0]);
        var o16 = document.createElement(e3[0]);
        return o16.appendChild(Sf.apply(void 0, Fh(Lh(e3).call(e3, 1)))), o16;
    }
    var Tf, Mf = !1, Pf = "background: #FFeeee; color: #dd0000", Df = Xu, Bf = function() {
        function t1(e3, i11, o16) {
            var n17 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : 1, r15 = arguments.length > 4 && (void 0) !== arguments[4] ? arguments[4] : function() {
                return !1;
            };
            Ra(this, t1), this.parent = e3, this.changedOptions = [], this.container = i11, this.allowCreation = !1, this.hideOption = r15, this.options = {
            }, this.initialized = !1, this.popupCounter = 0, this.defaultOptions = {
                enabled: !1,
                filter: !0,
                container: void 0,
                showButton: !0
            }, Ke(this.options, this.defaultOptions), this.configureOptions = o16, this.moduleOptions = {
            }, this.domElements = [], this.popupDiv = {
            }, this.popupLimit = 5, this.popupHistory = {
            }, this.colorPicker = new Cf(n17), this.wrapper = void 0;
        }
        return Ha(t1, [
            {
                key: "setOptions",
                value: function(t3) {
                    if ((void 0) !== t3) {
                        this.popupHistory = {
                        }, this._removePopup();
                        var e3 = !0;
                        if ("string" == typeof t3) this.options.filter = t3;
                        else if (Hh(t3)) this.options.filter = t3.join();
                        else if ("object" === zh(t3)) {
                            if (null == t3) throw new TypeError("options cannot be null");
                            (void 0) !== t3.container && (this.options.container = t3.container), (void 0) !== $d(t3) && (this.options.filter = $d(t3)), (void 0) !== t3.showButton && (this.options.showButton = t3.showButton), (void 0) !== t3.enabled && (e3 = t3.enabled);
                        } else "boolean" == typeof t3 ? (this.options.filter = !0, e3 = t3) : "function" == typeof t3 && (this.options.filter = t3, e3 = !0);
                        !1 === $d(this.options) && (e3 = !1), this.options.enabled = e3;
                    }
                    this._clean();
                }
            },
            {
                key: "setModuleOptions",
                value: function(t3) {
                    this.moduleOptions = t3, !0 === this.options.enabled && (this._clean(), (void 0) !== this.options.container && (this.container = this.options.container), this._create());
                }
            },
            {
                key: "_create",
                value: function() {
                    this._clean(), this.changedOptions = [];
                    var t3 = $d(this.options), e4 = 0, i11 = !1;
                    for(var o16 in this.configureOptions)Object.prototype.hasOwnProperty.call(this.configureOptions, o16) && (this.allowCreation = !1, i11 = !1, "function" == typeof t3 ? i11 = (i11 = t3(o16, [])) || this._handleObject(this.configureOptions[o16], [
                        o16
                    ], !0) : !0 !== t3 && -1 === Cl(t3).call(t3, o16) || (i11 = !0), !1 !== i11 && (this.allowCreation = !0, e4 > 0 && this._makeItem([]), this._makeHeader(o16), this._handleObject(this.configureOptions[o16], [
                        o16
                    ])), e4++);
                    this._makeButton(), this._push();
                }
            },
            {
                key: "_push",
                value: function() {
                    this.wrapper = document.createElement("div"), this.wrapper.className = "vis-configuration-wrapper", this.container.appendChild(this.wrapper);
                    for(var t3 = 0; t3 < this.domElements.length; t3++)this.wrapper.appendChild(this.domElements[t3]);
                    this._showPopupIfNeeded();
                }
            },
            {
                key: "_clean",
                value: function() {
                    for(var t3 = 0; t3 < this.domElements.length; t3++)this.wrapper.removeChild(this.domElements[t3]);
                    (void 0) !== this.wrapper && (this.container.removeChild(this.wrapper), this.wrapper = void 0), this.domElements = [], this._removePopup();
                }
            },
            {
                key: "_getValue",
                value: function(t3) {
                    for(var e4 = this.moduleOptions, i11 = 0; i11 < t3.length; i11++){
                        if ((void 0) === e4[t3[i11]]) {
                            e4 = void 0;
                            break;
                        }
                        e4 = e4[t3[i11]];
                    }
                    return e4;
                }
            },
            {
                key: "_makeItem",
                value: function(t3) {
                    if (!0 === this.allowCreation) {
                        var e4 = document.createElement("div");
                        e4.className = "vis-configuration vis-config-item vis-config-s" + t3.length;
                        for(var i11 = arguments.length, o16 = new Array(i11 > 1 ? i11 - 1 : 0), n17 = 1; n17 < i11; n17++)o16[n17 - 1] = arguments[n17];
                        return nd(o16).call(o16, function(t4) {
                            e4.appendChild(t4);
                        }), this.domElements.push(e4), this.domElements.length;
                    }
                    return 0;
                }
            },
            {
                key: "_makeHeader",
                value: function(t3) {
                    var e5 = document.createElement("div");
                    e5.className = "vis-configuration vis-config-header", e5.innerText = t3, this._makeItem([], e5);
                }
            },
            {
                key: "_makeLabel",
                value: function(t3, e5) {
                    var i12 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2], o17 = document.createElement("div");
                    if (o17.className = "vis-configuration vis-config-label vis-config-s" + e5.length, !0 === i12) {
                        for(; o17.firstChild;)o17.removeChild(o17.firstChild);
                        o17.appendChild(Sf("i", "b", t3));
                    } else o17.innerText = t3 + ":";
                    return o17;
                }
            },
            {
                key: "_makeDropdown",
                value: function(t3, e5, i12) {
                    var o17 = document.createElement("select");
                    o17.className = "vis-configuration vis-config-select";
                    var n18 = 0;
                    (void 0) !== e5 && -1 !== Cl(t3).call(t3, e5) && (n18 = Cl(t3).call(t3, e5));
                    for(var r15 = 0; r15 < t3.length; r15++){
                        var s10 = document.createElement("option");
                        s10.value = t3[r15], r15 === n18 && (s10.selected = "selected"), s10.innerText = t3[r15], o17.appendChild(s10);
                    }
                    var a7 = this;
                    o17.onchange = function() {
                        a7._update(this.value, i12);
                    };
                    var h5 = this._makeLabel(i12[i12.length - 1], i12);
                    this._makeItem(i12, h5, o17);
                }
            },
            {
                key: "_makeRange",
                value: function(t3, e5, i12) {
                    var o17 = t3[0], n18 = t3[1], r15 = t3[2], s11 = t3[3], a7 = document.createElement("input");
                    a7.className = "vis-configuration vis-config-range";
                    try {
                        a7.type = "range", a7.min = n18, a7.max = r15;
                    } catch (t4) {
                    }
                    a7.step = s11;
                    var h5 = "", d5 = 0;
                    if ((void 0) !== e5) {
                        var l1 = 1.2;
                        e5 < 0 && e5 * l1 < n18 ? (a7.min = Math.ceil(e5 * l1), d5 = a7.min, h5 = "range increased") : e5 / l1 < n18 && (a7.min = Math.ceil(e5 / l1), d5 = a7.min, h5 = "range increased"), e5 * l1 > r15 && 1 !== r15 && (a7.max = Math.ceil(e5 * l1), d5 = a7.max, h5 = "range increased"), a7.value = e5;
                    } else a7.value = o17;
                    var c1 = document.createElement("input");
                    c1.className = "vis-configuration vis-config-rangeinput", c1.value = a7.value;
                    var u2 = this;
                    a7.onchange = function() {
                        c1.value = this.value, u2._update(Number(this.value), i12);
                    }, a7.oninput = function() {
                        c1.value = this.value;
                    };
                    var f2 = this._makeLabel(i12[i12.length - 1], i12), p1 = this._makeItem(i12, f2, a7, c1);
                    "" !== h5 && this.popupHistory[p1] !== d5 && (this.popupHistory[p1] = d5, this._setupPopup(h5, p1));
                }
            },
            {
                key: "_makeButton",
                value: function() {
                    var t3 = this;
                    if (!0 === this.options.showButton) {
                        var e5 = document.createElement("div");
                        e5.className = "vis-configuration vis-config-button", e5.innerText = "generate options", e5.onclick = function() {
                            t3._printOptions();
                        }, e5.onmouseover = function() {
                            e5.className = "vis-configuration vis-config-button hover";
                        }, e5.onmouseout = function() {
                            e5.className = "vis-configuration vis-config-button";
                        }, this.optionsContainer = document.createElement("div"), this.optionsContainer.className = "vis-configuration vis-config-option-container", this.domElements.push(this.optionsContainer), this.domElements.push(e5);
                    }
                }
            },
            {
                key: "_setupPopup",
                value: function(t3, e6) {
                    var i12 = this;
                    if (!0 === this.initialized && !0 === this.allowCreation && this.popupCounter < this.popupLimit) {
                        var o17 = document.createElement("div");
                        o17.id = "vis-configuration-popup", o17.className = "vis-configuration-popup", o17.innerText = t3, o17.onclick = function() {
                            i12._removePopup();
                        }, this.popupCounter += 1, this.popupDiv = {
                            html: o17,
                            index: e6
                        };
                    }
                }
            },
            {
                key: "_removePopup",
                value: function() {
                    (void 0) !== this.popupDiv.html && (this.popupDiv.html.parentNode.removeChild(this.popupDiv.html), clearTimeout(this.popupDiv.hideTimeout), clearTimeout(this.popupDiv.deleteTimeout), this.popupDiv = {
                    });
                }
            },
            {
                key: "_showPopupIfNeeded",
                value: function() {
                    var t3 = this;
                    if ((void 0) !== this.popupDiv.html) {
                        var e6 = this.domElements[this.popupDiv.index].getBoundingClientRect();
                        this.popupDiv.html.style.left = e6.left + "px", this.popupDiv.html.style.top = e6.top - 30 + "px", document.body.appendChild(this.popupDiv.html), this.popupDiv.hideTimeout = Yl(function() {
                            t3.popupDiv.html.style.opacity = 0;
                        }, 1500), this.popupDiv.deleteTimeout = Yl(function() {
                            t3._removePopup();
                        }, 1800);
                    }
                }
            },
            {
                key: "_makeCheckbox",
                value: function(t3, e7, i12) {
                    var o18 = document.createElement("input");
                    o18.type = "checkbox", o18.className = "vis-configuration vis-config-checkbox", o18.checked = t3, (void 0) !== e7 && (o18.checked = e7, e7 !== t3 && ("object" === zh(t3) ? e7 !== t3.enabled && this.changedOptions.push({
                        path: i12,
                        value: e7
                    }) : this.changedOptions.push({
                        path: i12,
                        value: e7
                    })));
                    var n18 = this;
                    o18.onchange = function() {
                        n18._update(this.checked, i12);
                    };
                    var r15 = this._makeLabel(i12[i12.length - 1], i12);
                    this._makeItem(i12, r15, o18);
                }
            },
            {
                key: "_makeTextInput",
                value: function(t3, e7, i12) {
                    var o18 = document.createElement("input");
                    o18.type = "text", o18.className = "vis-configuration vis-config-text", o18.value = e7, e7 !== t3 && this.changedOptions.push({
                        path: i12,
                        value: e7
                    });
                    var n18 = this;
                    o18.onchange = function() {
                        n18._update(this.value, i12);
                    };
                    var r15 = this._makeLabel(i12[i12.length - 1], i12);
                    this._makeItem(i12, r15, o18);
                }
            },
            {
                key: "_makeColorField",
                value: function(t3, e7, i12) {
                    var o18 = this, n18 = t3[1], r15 = document.createElement("div");
                    "none" !== (e7 = (void 0) === e7 ? n18 : e7) ? (r15.className = "vis-configuration vis-config-colorBlock", r15.style.backgroundColor = e7) : r15.className = "vis-configuration vis-config-colorBlock none", e7 = (void 0) === e7 ? n18 : e7, r15.onclick = function() {
                        o18._showColorPicker(e7, r15, i12);
                    };
                    var s11 = this._makeLabel(i12[i12.length - 1], i12);
                    this._makeItem(i12, s11, r15);
                }
            },
            {
                key: "_showColorPicker",
                value: function(t3, e7, i12) {
                    var o18 = this;
                    e7.onclick = function() {
                    }, this.colorPicker.insertTo(e7), this.colorPicker.show(), this.colorPicker.setColor(t3), this.colorPicker.setUpdateCallback(function(t4) {
                        var n18 = "rgba(" + t4.r + "," + t4.g + "," + t4.b + "," + t4.a + ")";
                        e7.style.backgroundColor = n18, o18._update(n18, i12);
                    }), this.colorPicker.setCloseCallback(function() {
                        e7.onclick = function() {
                            o18._showColorPicker(t3, e7, i12);
                        };
                    });
                }
            },
            {
                key: "_handleObject",
                value: function(t3) {
                    var e7 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : [], i12 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2], o18 = !1, n18 = $d(this.options), r15 = !1;
                    for(var s11 in t3)if (Object.prototype.hasOwnProperty.call(t3, s11)) {
                        o18 = !0;
                        var a7 = t3[s11], h5 = af(e7, s11);
                        if ("function" == typeof n18 && !1 === (o18 = n18(s11, e7)) && !Hh(a7) && "string" != typeof a7 && "boolean" != typeof a7 && a7 instanceof Object && (this.allowCreation = !1, o18 = this._handleObject(a7, h5, !0), this.allowCreation = !1 === i12), !1 !== o18) {
                            r15 = !0;
                            var d5 = this._getValue(h5);
                            if (Hh(a7)) this._handleArray(a7, d5, h5);
                            else if ("string" == typeof a7) this._makeTextInput(a7, d5, h5);
                            else if ("boolean" == typeof a7) this._makeCheckbox(a7, d5, h5);
                            else if (a7 instanceof Object) {
                                if (!this.hideOption(e7, s11, this.moduleOptions)) {
                                    if ((void 0) !== a7.enabled) {
                                        var l3 = af(h5, "enabled"), c1 = this._getValue(l3);
                                        if (!0 === c1) {
                                            var u2 = this._makeLabel(s11, h5, !0);
                                            this._makeItem(h5, u2), r15 = this._handleObject(a7, h5) || r15;
                                        } else this._makeCheckbox(a7, c1, h5);
                                    } else {
                                        var f2 = this._makeLabel(s11, h5, !0);
                                        this._makeItem(h5, f2), r15 = this._handleObject(a7, h5) || r15;
                                    }
                                }
                            } else console.error("dont know how to handle", a7, s11, h5);
                        }
                    }
                    return r15;
                }
            },
            {
                key: "_handleArray",
                value: function(t3, e7, i12) {
                    "string" == typeof t3[0] && "color" === t3[0] ? (this._makeColorField(t3, e7, i12), t3[1] !== e7 && this.changedOptions.push({
                        path: i12,
                        value: e7
                    })) : "string" == typeof t3[0] ? (this._makeDropdown(t3, e7, i12), t3[0] !== e7 && this.changedOptions.push({
                        path: i12,
                        value: e7
                    })) : "number" == typeof t3[0] && (this._makeRange(t3, e7, i12), t3[0] !== e7 && this.changedOptions.push({
                        path: i12,
                        value: Number(e7)
                    }));
                }
            },
            {
                key: "_update",
                value: function(t3, e7) {
                    var i12 = this._constructOptions(t3, e7);
                    this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit && this.parent.body.emitter.emit("configChange", i12), this.initialized = !0, this.parent.setOptions(i12);
                }
            },
            {
                key: "_constructOptions",
                value: function(t3, e7) {
                    var i12 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : {
                    }, o18 = i12;
                    t3 = "false" !== (t3 = "true" === t3 || t3) && t3;
                    for(var n18 = 0; n18 < e7.length; n18++)"global" !== e7[n18] && ((void 0) === o18[e7[n18]] && (o18[e7[n18]] = {
                    }), n18 !== e7.length - 1 ? o18 = o18[e7[n18]] : o18[e7[n18]] = t3);
                    return i12;
                }
            },
            {
                key: "_printOptions",
                value: function() {
                    for(var t3 = this.getOptions(); this.optionsContainer.firstChild;)this.optionsContainer.removeChild(this.optionsContainer.firstChild);
                    this.optionsContainer.appendChild(Sf("pre", "const options = " + Wl(t3, null, 2)));
                }
            },
            {
                key: "getOptions",
                value: function() {
                    for(var t3 = {
                    }, e7 = 0; e7 < this.changedOptions.length; e7++)this._constructOptions(this.changedOptions[e7].value, this.changedOptions[e7].path, t3);
                    return t3;
                }
            }
        ]), t1;
    }(), If = Yu, zf = function() {
        function t1(e7, i12) {
            Ra(this, t1), this.container = e7, this.overflowMethod = i12 || "cap", this.x = 0, this.y = 0, this.padding = 5, this.hidden = !1, this.frame = document.createElement("div"), this.frame.className = "vis-tooltip", this.container.appendChild(this.frame);
        }
        return Ha(t1, [
            {
                key: "setPosition",
                value: function(t3, e7) {
                    this.x = yl(t3), this.y = yl(e7);
                }
            },
            {
                key: "setText",
                value: function(t3) {
                    if (t3 instanceof Element) {
                        for(; this.frame.firstChild;)this.frame.removeChild(this.frame.firstChild);
                        this.frame.appendChild(t3);
                    } else this.frame.innerText = t3;
                }
            },
            {
                key: "show",
                value: function(t3) {
                    if ((void 0) === t3 && (t3 = !0), !0 === t3) {
                        var e7 = this.frame.clientHeight, i12 = this.frame.clientWidth, o18 = this.frame.parentNode.clientHeight, n18 = this.frame.parentNode.clientWidth, r15 = 0, s11 = 0;
                        if ("flip" == this.overflowMethod) {
                            var a8 = !1, h6 = !0;
                            this.y - e7 < this.padding && (h6 = !1), this.x + i12 > n18 - this.padding && (a8 = !0), r15 = a8 ? this.x - i12 : this.x, s11 = h6 ? this.y - e7 : this.y;
                        } else (s11 = this.y - e7) + e7 + this.padding > o18 && (s11 = o18 - e7 - this.padding), s11 < this.padding && (s11 = this.padding), (r15 = this.x) + i12 + this.padding > n18 && (r15 = n18 - i12 - this.padding), r15 < this.padding && (r15 = this.padding);
                        this.frame.style.left = r15 + "px", this.frame.style.top = s11 + "px", this.frame.style.visibility = "visible", this.hidden = !1;
                    } else this.hide();
                }
            },
            {
                key: "hide",
                value: function() {
                    this.hidden = !0, this.frame.style.left = "0", this.frame.style.top = "0", this.frame.style.visibility = "hidden";
                }
            },
            {
                key: "destroy",
                value: function() {
                    this.frame.parentNode.removeChild(this.frame);
                }
            }
        ]), t1;
    }(), Ff = Pf, Nf = function() {
        function t1() {
            Ra(this, t1);
        }
        return Ha(t1, null, [
            {
                key: "validate",
                value: function(e8, i13, o19) {
                    Mf = !1, Tf = i13;
                    var n19 = i13;
                    return (void 0) !== o19 && (n19 = i13[o19]), t1.parse(e8, n19, []), Mf;
                }
            },
            {
                key: "parse",
                value: function(e8, i13, o19) {
                    for(var n19 in e8)Object.prototype.hasOwnProperty.call(e8, n19) && t1.check(n19, e8, i13, o19);
                }
            },
            {
                key: "check",
                value: function(e8, i13, o19, n19) {
                    if ((void 0) !== o19[e8] || (void 0) !== o19.__any__) {
                        var r16 = e8, s12 = !0;
                        (void 0) === o19[e8] && (void 0) !== o19.__any__ && (r16 = "__any__", s12 = "object" === t1.getType(i13[e8]));
                        var a9 = o19[r16];
                        s12 && (void 0) !== a9.__type__ && (a9 = a9.__type__), t1.checkFields(e8, i13, o19, r16, a9, n19);
                    } else t1.getSuggestion(e8, o19, n19);
                }
            },
            {
                key: "checkFields",
                value: function(e8, i13, o19, n19, r17, s13) {
                    var a10 = function(i14) {
                        console.error("%c" + i14 + t1.printLocation(s13, e8), Pf);
                    }, h7 = t1.getType(i13[e8]), d6 = r17[h7];
                    (void 0) !== d6 ? "array" === t1.getType(d6) && -1 === Cl(d6).call(d6, i13[e8]) ? (a10('Invalid option detected in "' + e8 + '". Allowed values are:' + t1.print(d6) + ' not "' + i13[e8] + '". '), Mf = !0) : "object" === h7 && "__any__" !== n19 && (s13 = af(s13, e8), t1.parse(i13[e8], o19[n19], s13)) : (void 0) === r17.any && (a10('Invalid type received for "' + e8 + '". Expected: ' + t1.print(Gh(r17)) + ". Received [" + h7 + '] "' + i13[e8] + '"'), Mf = !0);
                }
            },
            {
                key: "getType",
                value: function(t3) {
                    var e8 = zh(t3);
                    return "object" === e8 ? null === t3 ? "null" : t3 instanceof Boolean ? "boolean" : t3 instanceof Number ? "number" : t3 instanceof String ? "string" : Hh(t3) ? "array" : t3 instanceof Date ? "date" : (void 0) !== t3.nodeType ? "dom" : !0 === t3._isAMomentObject ? "moment" : "object" : "number" === e8 ? "number" : "boolean" === e8 ? "boolean" : "string" === e8 ? "string" : (void 0) === e8 ? "undefined" : e8;
                }
            },
            {
                key: "getSuggestion",
                value: function(e8, i13, o19) {
                    var n19, r17 = t1.findInOptions(e8, i13, o19, !1), s13 = t1.findInOptions(e8, Tf, [], !0);
                    n19 = (void 0) !== r17.indexMatch ? " in " + t1.printLocation(r17.path, e8, "") + 'Perhaps it was incomplete? Did you mean: "' + r17.indexMatch + '"?\n\n' : s13.distance <= 4 && r17.distance > s13.distance ? " in " + t1.printLocation(r17.path, e8, "") + "Perhaps it was misplaced? Matching option found at: " + t1.printLocation(s13.path, s13.closestMatch, "") : r17.distance <= 8 ? '. Did you mean "' + r17.closestMatch + '"?' + t1.printLocation(r17.path, e8) : ". Did you mean one of these: " + t1.print(Gh(i13)) + t1.printLocation(o19, e8), console.error('%cUnknown option detected: "' + e8 + '"' + n19, Pf), Mf = !0;
                }
            },
            {
                key: "findInOptions",
                value: function(e8, i13, o19) {
                    var n19 = arguments.length > 3 && (void 0) !== arguments[3] && arguments[3], r17 = 1000000000, s13 = "", a10 = [], h7 = e8.toLowerCase(), d6 = void 0;
                    for(var l4 in i13){
                        var c2 = void 0;
                        if ((void 0) !== i13[l4].__type__ && !0 === n19) {
                            var u3 = t1.findInOptions(e8, i13[l4], af(o19, l4));
                            r17 > u3.distance && (s13 = u3.closestMatch, a10 = u3.path, r17 = u3.distance, d6 = u3.indexMatch);
                        } else {
                            var f3;
                            -1 !== Cl(f3 = l4.toLowerCase()).call(f3, h7) && (d6 = l4), r17 > (c2 = t1.levenshteinDistance(e8, l4)) && (s13 = l4, a10 = hf(o19), r17 = c2);
                        }
                    }
                    return {
                        closestMatch: s13,
                        path: a10,
                        distance: r17,
                        indexMatch: d6
                    };
                }
            },
            {
                key: "printLocation",
                value: function(t3, e8) {
                    for(var i13 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : "Problem value found at: \n", o19 = "\n\n" + i13 + "options = {\n", n19 = 0; n19 < t3.length; n19++){
                        for(var r17 = 0; r17 < n19 + 1; r17++)o19 += "  ";
                        o19 += t3[n19] + ": {\n";
                    }
                    for(var s13 = 0; s13 < t3.length + 1; s13++)o19 += "  ";
                    o19 += e8 + "\n";
                    for(var a10 = 0; a10 < t3.length + 1; a10++){
                        for(var h7 = 0; h7 < t3.length - a10; h7++)o19 += "  ";
                        o19 += "}\n";
                    }
                    return o19 + "\n\n";
                }
            },
            {
                key: "print",
                value: function(t3) {
                    return Wl(t3).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
                }
            },
            {
                key: "levenshteinDistance",
                value: function(t3, e8) {
                    if (0 === t3.length) return e8.length;
                    if (0 === e8.length) return t3.length;
                    var i13, o19, n19 = [];
                    for(i13 = 0; i13 <= e8.length; i13++)n19[i13] = [
                        i13
                    ];
                    for(o19 = 0; o19 <= t3.length; o19++)n19[0][o19] = o19;
                    for(i13 = 1; i13 <= e8.length; i13++)for(o19 = 1; o19 <= t3.length; o19++)e8.charAt(i13 - 1) == t3.charAt(o19 - 1) ? n19[i13][o19] = n19[i13 - 1][o19 - 1] : n19[i13][o19] = Math.min(n19[i13 - 1][o19 - 1] + 1, Math.min(n19[i13][o19 - 1] + 1, n19[i13 - 1][o19] + 1));
                    return n19[e8.length][t3.length];
                }
            }
        ]), t1;
    }();
    function Af(t1) {
        return Uf = t1, (function() {
            var t3 = {
            };
            Yf = 0, Xf = Uf.charAt(0), np(), "strict" === Gf && (t3.strict = !0, np());
            "graph" !== Gf && "digraph" !== Gf || (t3.type = Gf, np());
            Kf === Wf && (t3.id = Gf, np());
            if ("{" != Gf) throw lp("Angle bracket { expected");
            if (np(), rp(t3), "}" != Gf) throw lp("Angle bracket } expected");
            if (np(), "" !== Gf) throw lp("End of file expected");
            return np(), delete t3.node, delete t3.edge, delete t3.graph, t3;
        })();
    }
    var Rf = {
        fontsize: "font.size",
        fontcolor: "font.color",
        labelfontcolor: "font.color",
        fontname: "font.face",
        color: [
            "color.border",
            "color.background"
        ],
        fillcolor: "color.background",
        tooltip: "title",
        labeltooltip: "title"
    }, jf = Bl(Rf);
    jf.color = "color.color", jf.style = "dashes";
    var Lf = 0, Hf = 1, Wf = 2, Vf = 3, qf = {
        "{": !0,
        "}": !0,
        "[": !0,
        "]": !0,
        ";": !0,
        "=": !0,
        ",": !0,
        "->": !0,
        "--": !0
    }, Uf = "", Yf = 0, Xf = "", Gf = "", Kf = Lf;
    function $f() {
        Yf++, Xf = Uf.charAt(Yf);
    }
    function Zf() {
        return Uf.charAt(Yf + 1);
    }
    function Qf(t1) {
        var e8 = t1.charCodeAt(0);
        return e8 < 47 ? 35 === e8 || 46 === e8 : e8 < 59 ? e8 > 47 : e8 < 91 ? e8 > 64 : e8 < 96 ? 95 === e8 : e8 < 123 && e8 > 96;
    }
    function Jf(t1, e8) {
        if (t1 || (t1 = {
        }), e8) for(var i13 in e8)e8.hasOwnProperty(i13) && (t1[i13] = e8[i13]);
        return t1;
    }
    function tp(t1, e8, i13) {
        for(var o19 = e8.split("."), n19 = t1; o19.length;){
            var r18 = o19.shift();
            o19.length ? (n19[r18] || (n19[r18] = {
            }), n19 = n19[r18]) : n19[r18] = i13;
        }
    }
    function ep(t1, e8) {
        for(var i13, o19, n19 = null, r19 = [
            t1
        ], s13 = t1; s13.parent;)r19.push(s13.parent), s13 = s13.parent;
        if (s13.nodes) for(i13 = 0, o19 = s13.nodes.length; i13 < o19; i13++)if (e8.id === s13.nodes[i13].id) {
            n19 = s13.nodes[i13];
            break;
        }
        for(n19 || (n19 = {
            id: e8.id
        }, t1.node && (n19.attr = Jf(n19.attr, t1.node))), i13 = r19.length - 1; i13 >= 0; i13--){
            var a10, h8 = r19[i13];
            h8.nodes || (h8.nodes = []), -1 === Cl(a10 = h8.nodes).call(a10, n19) && h8.nodes.push(n19);
        }
        e8.attr && (n19.attr = Jf(n19.attr, e8.attr));
    }
    function ip(t1, e8) {
        if (t1.edges || (t1.edges = []), t1.edges.push(e8), t1.edge) {
            var i13 = Jf({
            }, t1.edge);
            e8.attr = Jf(i13, e8.attr);
        }
    }
    function op(t1, e8, i14, o19, n19) {
        var r19 = {
            from: e8,
            to: i14,
            type: o19
        };
        return t1.edge && (r19.attr = Jf({
        }, t1.edge)), r19.attr = Jf(r19.attr || {
        }, n19), null != n19 && n19.hasOwnProperty("arrows") && null != n19.arrows && (r19.arrows = {
            to: {
                enabled: !0,
                type: n19.arrows.type
            }
        }, n19.arrows = null), r19;
    }
    function np() {
        for(Kf = Lf, Gf = ""; " " === Xf || "\t" === Xf || "\n" === Xf || "\r" === Xf;)$f();
        do {
            var t3 = !1;
            if ("#" === Xf) {
                for(var e8 = Yf - 1; " " === Uf.charAt(e8) || "\t" === Uf.charAt(e8);)e8--;
                if ("\n" === Uf.charAt(e8) || "" === Uf.charAt(e8)) {
                    for(; "" != Xf && "\n" != Xf;)$f();
                    t3 = !0;
                }
            }
            if ("/" === Xf && "/" === Zf()) {
                for(; "" != Xf && "\n" != Xf;)$f();
                t3 = !0;
            }
            if ("/" === Xf && "*" === Zf()) {
                for(; "" != Xf;){
                    if ("*" === Xf && "/" === Zf()) {
                        $f(), $f();
                        break;
                    }
                    $f();
                }
                t3 = !0;
            }
            for(; " " === Xf || "\t" === Xf || "\n" === Xf || "\r" === Xf;)$f();
        }while (t3)
        if ("" !== Xf) {
            var i14 = Xf + Zf();
            if (qf[i14]) return Kf = Hf, Gf = i14, $f(), void $f();
            if (qf[Xf]) return Kf = Hf, Gf = Xf, void $f();
            if (Qf(Xf) || "-" === Xf) {
                for(Gf += Xf, $f(); Qf(Xf);)Gf += Xf, $f();
                return "false" === Gf ? Gf = !1 : "true" === Gf ? Gf = !0 : isNaN(Number(Gf)) || (Gf = Number(Gf)), void (Kf = Wf);
            }
            if ('"' === Xf) {
                for($f(); "" != Xf && ('"' != Xf || '"' === Xf && '"' === Zf());)'"' === Xf ? (Gf += Xf, $f()) : "\\" === Xf && "n" === Zf() ? (Gf += "\n", $f()) : Gf += Xf, $f();
                if ('"' != Xf) throw lp('End of string " expected');
                return $f(), void (Kf = Wf);
            }
            for(Kf = Vf; "" != Xf;)Gf += Xf, $f();
            throw new SyntaxError('Syntax error in part "' + cp(Gf, 30) + '"');
        }
        Kf = Hf;
    }
    function rp(t4) {
        for(; "" !== Gf && "}" != Gf;)sp(t4), ";" === Gf && np();
    }
    function sp(t4) {
        var e9 = ap(t4);
        if (e9) hp(t4, e9);
        else if (!function(t5) {
            if ("node" === Gf) return np(), t5.node = dp(), "node";
            if ("edge" === Gf) return np(), t5.edge = dp(), "edge";
            if ("graph" === Gf) return np(), t5.graph = dp(), "graph";
            return null;
        }(t4)) {
            if (Kf != Wf) throw lp("Identifier expected");
            var i15 = Gf;
            if (np(), "=" === Gf) {
                if (np(), Kf != Wf) throw lp("Identifier expected");
                t4[i15] = Gf, np();
            } else !function(t5, e10) {
                var i16 = {
                    id: e10
                }, o19 = dp();
                o19 && (i16.attr = o19);
                ep(t5, i16), hp(t5, e10);
            }(t4, i15);
        }
    }
    function ap(t4) {
        var e9 = null;
        if ("subgraph" === Gf && ((e9 = {
        }).type = "subgraph", np(), Kf === Wf && (e9.id = Gf, np())), "{" === Gf) {
            if (np(), e9 || (e9 = {
            }), e9.parent = t4, e9.node = t4.node, e9.edge = t4.edge, e9.graph = t4.graph, rp(e9), "}" != Gf) throw lp("Angle bracket } expected");
            np(), delete e9.node, delete e9.edge, delete e9.graph, delete e9.parent, t4.subgraphs || (t4.subgraphs = []), t4.subgraphs.push(e9);
        }
        return e9;
    }
    function hp(t4, e9) {
        for(; "->" === Gf || "--" === Gf;){
            var i16, o19 = Gf;
            np();
            var n19 = ap(t4);
            if (n19) i16 = n19;
            else {
                if (Kf != Wf) throw lp("Identifier or subgraph expected");
                ep(t4, {
                    id: i16 = Gf
                }), np();
            }
            ip(t4, op(t4, e9, i16, o19, dp())), e9 = i16;
        }
    }
    function dp() {
        for(var t4, e9, i17 = null, o20 = {
            dashed: !0,
            solid: !1,
            dotted: [
                1,
                5
            ]
        }, n20 = {
            dot: "circle",
            box: "box",
            crow: "crow",
            curve: "curve",
            icurve: "inv_curve",
            normal: "triangle",
            inv: "inv_triangle",
            diamond: "diamond",
            tee: "bar",
            vee: "vee"
        }, r19 = new Array, s13 = new Array; "[" === Gf;){
            for(np(), i17 = {
            }; "" !== Gf && "]" != Gf;){
                if (Kf != Wf) throw lp("Attribute name expected");
                var a11 = Gf;
                if (np(), "=" != Gf) throw lp("Equal sign = expected");
                if (np(), Kf != Wf) throw lp("Attribute value expected");
                var h9 = Gf;
                "style" === a11 && (h9 = o20[h9]), "arrowhead" === a11 && (a11 = "arrows", h9 = {
                    to: {
                        enabled: !0,
                        type: n20[h9]
                    }
                }), "arrowtail" === a11 && (a11 = "arrows", h9 = {
                    from: {
                        enabled: !0,
                        type: n20[h9]
                    }
                }), r19.push({
                    attr: i17,
                    name: a11,
                    value: h9
                }), s13.push(a11), np(), "," == Gf && np();
            }
            if ("]" != Gf) throw lp("Bracket ] expected");
            np();
        }
        if (Hd(s13).call(s13, "dir")) {
            var d6 = {
                arrows: {
                }
            };
            for(t4 = 0; t4 < r19.length; t4++)if ("arrows" === r19[t4].name) {
                if (null != r19[t4].value.to) d6.arrows.to = t4;
                else {
                    if (null == r19[t4].value.from) throw lp("Invalid value of arrows");
                    d6.arrows.from = t4;
                }
            } else "dir" === r19[t4].name && (d6.dir = t4);
            var l4, c3, u4 = r19[d6.dir].value;
            if (!Hd(s13).call(s13, "arrows")) {
                if ("both" === u4) r19.push({
                    attr: r19[d6.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d6.arrows.to = r19.length - 1, r19.push({
                    attr: r19[d6.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d6.arrows.from = r19.length - 1;
                else if ("forward" === u4) r19.push({
                    attr: r19[d6.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d6.arrows.to = r19.length - 1;
                else if ("back" === u4) r19.push({
                    attr: r19[d6.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d6.arrows.from = r19.length - 1;
                else {
                    if ("none" !== u4) throw lp('Invalid dir type "' + u4 + '"');
                    r19.push({
                        attr: r19[d6.dir].attr,
                        name: "arrows",
                        value: ""
                    }), d6.arrows.to = r19.length - 1;
                }
            }
            if ("both" === u4) d6.arrows.to && d6.arrows.from ? (c3 = r19[d6.arrows.to].value.to.type, l4 = r19[d6.arrows.from].value.from.type, r19[d6.arrows.to] = {
                attr: r19[d6.arrows.to].attr,
                name: r19[d6.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c3
                    },
                    from: {
                        enabled: !0,
                        type: l4
                    }
                }
            }, Od(r19).call(r19, d6.arrows.from, 1)) : d6.arrows.to ? (c3 = r19[d6.arrows.to].value.to.type, l4 = "arrow", r19[d6.arrows.to] = {
                attr: r19[d6.arrows.to].attr,
                name: r19[d6.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c3
                    },
                    from: {
                        enabled: !0,
                        type: l4
                    }
                }
            }) : d6.arrows.from && (c3 = "arrow", l4 = r19[d6.arrows.from].value.from.type, r19[d6.arrows.from] = {
                attr: r19[d6.arrows.from].attr,
                name: r19[d6.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c3
                    },
                    from: {
                        enabled: !0,
                        type: l4
                    }
                }
            });
            else if ("back" === u4) d6.arrows.to && d6.arrows.from ? (c3 = "", l4 = r19[d6.arrows.from].value.from.type, r19[d6.arrows.from] = {
                attr: r19[d6.arrows.from].attr,
                name: r19[d6.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c3
                    },
                    from: {
                        enabled: !0,
                        type: l4
                    }
                }
            }) : d6.arrows.to ? (c3 = "", l4 = "arrow", d6.arrows.from = d6.arrows.to, r19[d6.arrows.from] = {
                attr: r19[d6.arrows.from].attr,
                name: r19[d6.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c3
                    },
                    from: {
                        enabled: !0,
                        type: l4
                    }
                }
            }) : d6.arrows.from && (c3 = "", l4 = r19[d6.arrows.from].value.from.type, r19[d6.arrows.to] = {
                attr: r19[d6.arrows.from].attr,
                name: r19[d6.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c3
                    },
                    from: {
                        enabled: !0,
                        type: l4
                    }
                }
            }), r19[d6.arrows.from] = {
                attr: r19[d6.arrows.from].attr,
                name: r19[d6.arrows.from].name,
                value: {
                    from: {
                        enabled: !0,
                        type: r19[d6.arrows.from].value.from.type
                    }
                }
            };
            else if ("none" === u4) {
                var f4;
                r19[f4 = d6.arrows.to ? d6.arrows.to : d6.arrows.from] = {
                    attr: r19[f4].attr,
                    name: r19[f4].name,
                    value: ""
                };
            } else {
                if ("forward" !== u4) throw lp('Invalid dir type "' + u4 + '"');
                d6.arrows.to && d6.arrows.from || d6.arrows.to ? (c3 = r19[d6.arrows.to].value.to.type, l4 = "", r19[d6.arrows.to] = {
                    attr: r19[d6.arrows.to].attr,
                    name: r19[d6.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c3
                        },
                        from: {
                            enabled: !0,
                            type: l4
                        }
                    }
                }) : d6.arrows.from && (c3 = "arrow", l4 = "", d6.arrows.to = d6.arrows.from, r19[d6.arrows.to] = {
                    attr: r19[d6.arrows.to].attr,
                    name: r19[d6.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c3
                        },
                        from: {
                            enabled: !0,
                            type: l4
                        }
                    }
                }), r19[d6.arrows.to] = {
                    attr: r19[d6.arrows.to].attr,
                    name: r19[d6.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: r19[d6.arrows.to].value.to.type
                        }
                    }
                };
            }
            Od(r19).call(r19, d6.dir, 1);
        }
        if (Hd(s13).call(s13, "penwidth")) {
            var p1 = [];
            for(e9 = r19.length, t4 = 0; t4 < e9; t4++)"width" !== r19[t4].name && ("penwidth" === r19[t4].name && (r19[t4].name = "width"), p1.push(r19[t4]));
            r19 = p1;
        }
        for(e9 = r19.length, t4 = 0; t4 < e9; t4++)tp(r19[t4].attr, r19[t4].name, r19[t4].value);
        return i17;
    }
    function lp(t4) {
        return new SyntaxError(t4 + ', got "' + cp(Gf, 30) + '" (char ' + Yf + ")");
    }
    function cp(t4, e9) {
        return t4.length <= e9 ? t4 : t4.substr(0, 27) + "...";
    }
    function up(t4, e9, i17) {
        for(var o20 = e9.split("."), n20 = o20.pop(), r19 = t4, s13 = 0; s13 < o20.length; s13++){
            var a12 = o20[s13];
            a12 in r19 || (r19[a12] = {
            }), r19 = r19[a12];
        }
        return r19[n20] = i17, t4;
    }
    function fp(t4, e9) {
        var i17 = {
        };
        for(var o20 in t4)if (t4.hasOwnProperty(o20)) {
            var n20 = e9[o20];
            Hh(n20) ? nd(n20).call(n20, function(e10) {
                up(i17, e10, t4[o20]);
            }) : up(i17, "string" == typeof n20 ? n20 : o20, t4[o20]);
        }
        return i17;
    }
    function pp(t4) {
        var e9, i17 = Af(t4), o20 = {
            nodes: [],
            edges: [],
            options: {
            }
        };
        i17.nodes && nd(e9 = i17.nodes).call(e9, function(t5) {
            var e10 = {
                id: t5.id,
                label: String(t5.label || t5.id)
            };
            Jf(e10, fp(t5.attr, Rf)), e10.image && (e10.shape = "image"), o20.nodes.push(e10);
        });
        if (i17.edges) {
            var n21, r19 = function(t5) {
                var e10 = {
                    from: t5.from,
                    to: t5.to
                };
                return Jf(e10, fp(t5.attr, jf)), null == e10.arrows && "->" === t5.type && (e10.arrows = "to"), e10;
            };
            nd(n21 = i17.edges).call(n21, function(t5) {
                var e10, i18, n22, s13, a13, h10, d7;
                (e10 = t5.from instanceof Object ? t5.from.nodes : {
                    id: t5.from
                }, i18 = t5.to instanceof Object ? t5.to.nodes : {
                    id: t5.to
                }, t5.from instanceof Object && t5.from.edges) && nd(n22 = t5.from.edges).call(n22, function(t6) {
                    var e11 = r19(t6);
                    o20.edges.push(e11);
                });
                (a13 = i18, h10 = function(e11, i19) {
                    var n23 = op(o20, e11.id, i19.id, t5.type, t5.attr), s14 = r19(n23);
                    o20.edges.push(s14);
                }, Hh(s13 = e10) ? nd(s13).call(s13, function(t6) {
                    Hh(a13) ? nd(a13).call(a13, function(e11) {
                        h10(t6, e11);
                    }) : h10(t6, a13);
                }) : Hh(a13) ? nd(a13).call(a13, function(t6) {
                    h10(s13, t6);
                }) : h10(s13, a13), t5.to instanceof Object && t5.to.edges) && nd(d7 = t5.to.edges).call(d7, function(t6) {
                    var e11 = r19(t6);
                    o20.edges.push(e11);
                });
            });
        }
        return i17.attr && (o20.options = i17.attr), o20;
    }
    var vp = Object.freeze({
        __proto__: null,
        parseDOT: Af,
        DOTToGraph: pp
    });
    function gp(t4, e9) {
        var i17, o20 = {
            edges: {
                inheritColor: !1
            },
            nodes: {
                fixed: !1,
                parseColor: !1
            }
        };
        null != e9 && (null != e9.fixed && (o20.nodes.fixed = e9.fixed), null != e9.parseColor && (o20.nodes.parseColor = e9.parseColor), null != e9.inheritColor && (o20.edges.inheritColor = e9.inheritColor));
        var n22 = t4.edges, r20 = Uh(n22).call(n22, function(t5) {
            var e10 = {
                from: t5.source,
                id: t5.id,
                to: t5.target
            };
            return null != t5.attributes && (e10.attributes = t5.attributes), null != t5.label && (e10.label = t5.label), null != t5.attributes && null != t5.attributes.title && (e10.title = t5.attributes.title), "Directed" === t5.type && (e10.arrows = "to"), t5.color && !1 === o20.edges.inheritColor && (e10.color = t5.color), e10;
        });
        return {
            nodes: Uh(i17 = t4.nodes).call(i17, function(t5) {
                var e10 = {
                    id: t5.id,
                    fixed: o20.nodes.fixed && null != t5.x && null != t5.y
                };
                return null != t5.attributes && (e10.attributes = t5.attributes), null != t5.label && (e10.label = t5.label), null != t5.size && (e10.size = t5.size), null != t5.attributes && null != t5.attributes.title && (e10.title = t5.attributes.title), null != t5.title && (e10.title = t5.title), null != t5.x && (e10.x = t5.x), null != t5.y && (e10.y = t5.y), null != t5.color && (!0 === o20.nodes.parseColor ? e10.color = t5.color : e10.color = {
                    background: t5.color,
                    border: t5.color,
                    highlight: {
                        background: t5.color,
                        border: t5.color
                    },
                    hover: {
                        background: t5.color,
                        border: t5.color
                    }
                }), e10;
            }),
            edges: r20
        };
    }
    var yp = Object.freeze({
        __proto__: null,
        parseGephi: gp
    }), mp = Object.freeze({
        __proto__: null,
        en: {
            addDescription: "Click in an empty space to place a new node.",
            addEdge: "Add Edge",
            addNode: "Add Node",
            back: "Back",
            close: "Close",
            createEdgeError: "Cannot link edges to a cluster.",
            del: "Delete selected",
            deleteClusterError: "Clusters cannot be deleted.",
            edgeDescription: "Click on a node and drag the edge to another node to connect them.",
            edit: "Edit",
            editClusterError: "Clusters cannot be edited.",
            editEdge: "Edit Edge",
            editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
            editNode: "Edit Node"
        },
        de: {
            addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
            addEdge: "Kante hinzufügen",
            addNode: "Knoten hinzufügen",
            back: "Zurück",
            close: "Schließen",
            createEdgeError: "Es ist nicht möglich, Kanten mit Clustern zu verbinden.",
            del: "Lösche Auswahl",
            deleteClusterError: "Cluster können nicht gelöscht werden.",
            edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
            edit: "Editieren",
            editClusterError: "Cluster können nicht editiert werden.",
            editEdge: "Kante editieren",
            editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
            editNode: "Knoten editieren"
        },
        es: {
            addDescription: "Haga clic en un lugar vacío para colocar un nuevo nodo.",
            addEdge: "Añadir arista",
            addNode: "Añadir nodo",
            back: "Atrás",
            close: "Cerrar",
            createEdgeError: "No se puede conectar una arista a un grupo.",
            del: "Eliminar selección",
            deleteClusterError: "No es posible eliminar grupos.",
            edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
            edit: "Editar",
            editClusterError: "No es posible editar grupos.",
            editEdge: "Editar arista",
            editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
            editNode: "Editar nodo"
        },
        it: {
            addDescription: "Clicca per aggiungere un nuovo nodo",
            addEdge: "Aggiungi un vertice",
            addNode: "Aggiungi un nodo",
            back: "Indietro",
            close: "Chiudere",
            createEdgeError: "Non si possono collegare vertici ad un cluster",
            del: "Cancella la selezione",
            deleteClusterError: "I cluster non possono essere cancellati",
            edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
            edit: "Modifica",
            editClusterError: "I clusters non possono essere modificati.",
            editEdge: "Modifica il vertice",
            editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
            editNode: "Modifica il nodo"
        },
        nl: {
            addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
            addEdge: "Link toevoegen",
            addNode: "Node toevoegen",
            back: "Terug",
            close: "Sluiten",
            createEdgeError: "Kan geen link maken naar een cluster.",
            del: "Selectie verwijderen",
            deleteClusterError: "Clusters kunnen niet worden verwijderd.",
            edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
            edit: "Wijzigen",
            editClusterError: "Clusters kunnen niet worden aangepast.",
            editEdge: "Link wijzigen",
            editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
            editNode: "Node wijzigen"
        },
        pt: {
            addDescription: "Clique em um espaço em branco para adicionar um novo nó",
            addEdge: "Adicionar aresta",
            addNode: "Adicionar nó",
            back: "Voltar",
            close: "Fechar",
            createEdgeError: "Não foi possível linkar arestas a um cluster.",
            del: "Remover selecionado",
            deleteClusterError: "Clusters não puderam ser removidos.",
            edgeDescription: "Clique em um nó e arraste a aresta até outro nó para conectá-los",
            edit: "Editar",
            editClusterError: "Clusters não puderam ser editados.",
            editEdge: "Editar aresta",
            editEdgeDescription: "Clique nos pontos de controle e os arraste para um nó para conectá-los",
            editNode: "Editar nó"
        },
        ru: {
            addDescription: "Кликните в свободное место, чтобы добавить новый узел.",
            addEdge: "Добавить ребро",
            addNode: "Добавить узел",
            back: "Назад",
            close: "Закрывать",
            createEdgeError: "Невозможно соединить ребра в кластер.",
            del: "Удалить выбранное",
            deleteClusterError: "Кластеры не могут быть удалены",
            edgeDescription: "Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.",
            edit: "Редактировать",
            editClusterError: "Кластеры недоступны для редактирования.",
            editEdge: "Редактировать ребро",
            editEdgeDescription: "Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.",
            editNode: "Редактировать узел"
        },
        cn: {
            addDescription: "单击空白处放置新节点。",
            addEdge: "添加连接线",
            addNode: "添加节点",
            back: "返回",
            close: "關閉",
            createEdgeError: "无法将连接线连接到群集。",
            del: "删除选定",
            deleteClusterError: "无法删除群集。",
            edgeDescription: "单击某个节点并将该连接线拖动到另一个节点以连接它们。",
            edit: "编辑",
            editClusterError: "无法编辑群集。",
            editEdge: "编辑连接线",
            editEdgeDescription: "单击控制节点并将它们拖到节点上连接。",
            editNode: "编辑节点"
        },
        uk: {
            addDescription: "Kлікніть на вільне місце, щоб додати новий вузол.",
            addEdge: "Додати край",
            addNode: "Додати вузол",
            back: "Назад",
            close: "Закрити",
            createEdgeError: "Не можливо об'єднати краї в групу.",
            del: "Видалити обране",
            deleteClusterError: "Групи не можуть бути видалені.",
            edgeDescription: "Клікніть на вузол і перетягніть край до іншого вузла, щоб їх з'єднати.",
            edit: "Редагувати",
            editClusterError: "Групи недоступні для редагування.",
            editEdge: "Редагувати край",
            editEdgeDescription: "Клікніть на контрольні точки і перетягніть їх у вузол, щоб підключитися до нього.",
            editNode: "Редагувати вузол"
        },
        fr: {
            addDescription: "Cliquez dans un endroit vide pour placer un nœud.",
            addEdge: "Ajouter un lien",
            addNode: "Ajouter un nœud",
            back: "Retour",
            close: "Fermer",
            createEdgeError: "Impossible de créer un lien vers un cluster.",
            del: "Effacer la sélection",
            deleteClusterError: "Les clusters ne peuvent pas être effacés.",
            edgeDescription: "Cliquez sur un nœud et glissez le lien vers un autre nœud pour les connecter.",
            edit: "Éditer",
            editClusterError: "Les clusters ne peuvent pas être édités.",
            editEdge: "Éditer le lien",
            editEdgeDescription: "Cliquez sur les points de contrôle et glissez-les pour connecter un nœud.",
            editNode: "Éditer le nœud"
        },
        cs: {
            addDescription: "Kluknutím do prázdného prostoru můžete přidat nový vrchol.",
            addEdge: "Přidat hranu",
            addNode: "Přidat vrchol",
            back: "Zpět",
            close: "Zavřít",
            createEdgeError: "Nelze připojit hranu ke shluku.",
            del: "Smazat výběr",
            deleteClusterError: "Nelze mazat shluky.",
            edgeDescription: "Přetažením z jednoho vrcholu do druhého můžete spojit tyto vrcholy novou hranou.",
            edit: "Upravit",
            editClusterError: "Nelze upravovat shluky.",
            editEdge: "Upravit hranu",
            editEdgeDescription: "Přetažením kontrolního vrcholu hrany ji můžete připojit k jinému vrcholu.",
            editNode: "Upravit vrchol"
        }
    });
    var bp = function() {
        function t4() {
            Ra(this, t4), this.NUM_ITERATIONS = 4, this.image = new Image, this.canvas = document.createElement("canvas");
        }
        return Ha(t4, [
            {
                key: "init",
                value: function() {
                    if (!this.initialized()) {
                        this.src = this.image.src;
                        var t5 = this.image.width, e9 = this.image.height;
                        this.width = t5, this.height = e9;
                        var i17 = Math.floor(e9 / 2), o20 = Math.floor(e9 / 4), n22 = Math.floor(e9 / 8), r20 = Math.floor(e9 / 16), s13 = Math.floor(t5 / 2), a13 = Math.floor(t5 / 4), h10 = Math.floor(t5 / 8), d7 = Math.floor(t5 / 16);
                        this.canvas.width = 3 * a13, this.canvas.height = i17, this.coordinates = [
                            [
                                0,
                                0,
                                s13,
                                i17
                            ],
                            [
                                s13,
                                0,
                                a13,
                                o20
                            ],
                            [
                                s13,
                                o20,
                                h10,
                                n22
                            ],
                            [
                                5 * h10,
                                o20,
                                d7,
                                r20
                            ]
                        ], this._fillMipMap();
                    }
                }
            },
            {
                key: "initialized",
                value: function() {
                    return (void 0) !== this.coordinates;
                }
            },
            {
                key: "_fillMipMap",
                value: function() {
                    var t6 = this.canvas.getContext("2d"), e10 = this.coordinates[0];
                    t6.drawImage(this.image, e10[0], e10[1], e10[2], e10[3]);
                    for(var i18 = 1; i18 < this.NUM_ITERATIONS; i18++){
                        var o21 = this.coordinates[i18 - 1], n23 = this.coordinates[i18];
                        t6.drawImage(this.canvas, o21[0], o21[1], o21[2], o21[3], n23[0], n23[1], n23[2], n23[3]);
                    }
                }
            },
            {
                key: "drawImageAtPosition",
                value: function(t6, e10, i18, o22, n24, r21) {
                    if (this.initialized()) {
                        if (e10 > 2) {
                            e10 *= 0.5;
                            for(var s14 = 0; e10 > 2 && s14 < this.NUM_ITERATIONS;)e10 *= 0.5, s14 += 1;
                            s14 >= this.NUM_ITERATIONS && (s14 = this.NUM_ITERATIONS - 1);
                            var a14 = this.coordinates[s14];
                            t6.drawImage(this.canvas, a14[0], a14[1], a14[2], a14[3], i18, o22, n24, r21);
                        } else t6.drawImage(this.image, i18, o22, n24, r21);
                    }
                }
            }
        ]), t4;
    }(), wp = function() {
        function t4(e10) {
            Ra(this, t4), this.images = {
            }, this.imageBroken = {
            }, this.callback = e10;
        }
        return Ha(t4, [
            {
                key: "_tryloadBrokenUrl",
                value: function(t6, e10, i18) {
                    (void 0) !== t6 && (void 0) !== i18 && ((void 0) !== e10 ? (i18.image.onerror = function() {
                        console.error("Could not load brokenImage:", e10);
                    }, i18.image.src = e10) : console.warn("No broken url image defined"));
                }
            },
            {
                key: "_redrawWithImage",
                value: function(t6) {
                    this.callback && this.callback(t6);
                }
            },
            {
                key: "load",
                value: function(t6, e10) {
                    var i18 = this, o22 = this.images[t6];
                    if (o22) return o22;
                    var n24 = new bp;
                    return this.images[t6] = n24, n24.image.onload = function() {
                        i18._fixImageCoordinates(n24.image), n24.init(), i18._redrawWithImage(n24);
                    }, n24.image.onerror = function() {
                        console.error("Could not load image:", t6), i18._tryloadBrokenUrl(t6, e10, n24);
                    }, n24.image.src = t6, n24;
                }
            },
            {
                key: "_fixImageCoordinates",
                value: function(t6) {
                    0 === t6.width && (document.body.appendChild(t6), t6.width = t6.offsetWidth, t6.height = t6.offsetHeight, document.body.removeChild(t6));
                }
            }
        ]), t4;
    }(), kp = {
        exports: {
        }
    }, _p = !s(function() {
        return Object.isExtensible(Object.preventExtensions({
        }));
    }), xp = ue, Ep = Te, Op = E, Cp = et, Sp = Xt.f, Tp = Cr, Mp = Mr, Pp = _p, Dp = !1, Bp = nt("meta"), Ip = 0, zp = Object.isExtensible || function() {
        return !0;
    }, Fp = function(t4) {
        Sp(t4, Bp, {
            value: {
                objectID: "O" + Ip++,
                weakData: {
                }
            }
        });
    }, Np = kp.exports = {
        enable: function() {
            Np.enable = function() {
            }, Dp = !0;
            var t4 = Tp.f, e10 = [].splice, i18 = {
            };
            i18[Bp] = 1, t4(i18).length && (Tp.f = function(i19) {
                for(var o22 = t4(i19), n24 = 0, r21 = o22.length; n24 < r21; n24++)if (o22[n24] === Bp) {
                    e10.call(o22, n24, 1);
                    break;
                }
                return o22;
            }, xp({
                target: "Object",
                stat: !0,
                forced: !0
            }, {
                getOwnPropertyNames: Mp.f
            }));
        },
        fastKey: function(t4, e10) {
            if (!Op(t4)) return "symbol" == typeof t4 ? t4 : ("string" == typeof t4 ? "S" : "P") + t4;
            if (!Cp(t4, Bp)) {
                if (!zp(t4)) return "F";
                if (!e10) return "E";
                Fp(t4);
            }
            return t4[Bp].objectID;
        },
        getWeakData: function(t4, e10) {
            if (!Cp(t4, Bp)) {
                if (!zp(t4)) return !0;
                if (!e10) return !1;
                Fp(t4);
            }
            return t4[Bp].weakData;
        },
        onFreeze: function(t4) {
            return Pp && Dp && zp(t4) && !Cp(t4, Bp) && Fp(t4), t4;
        }
    };
    Ep[Bp] = !0;
    var Ap = Kt, Rp = An, jp = me, Lp = Yt, Hp = Un, Wp = Dn, Vp = function(t4, e10) {
        this.stopped = t4, this.result = e10;
    }, qp = function(t4, e10, i18) {
        var o22, n24, r21, s15, a15, h11, d8, l5 = i18 && i18.that, c4 = !(!i18 || !i18.AS_ENTRIES), u5 = !(!i18 || !i18.IS_ITERATOR), f5 = !(!i18 || !i18.INTERRUPTED), p2 = Lp(e10, l5, 1 + c4 + f5), v2 = function(t6) {
            return o22 && Wp(o22), new Vp(!0, t6);
        }, g1 = function(t6) {
            return c4 ? (Ap(t6), f5 ? p2(t6[0], t6[1], v2) : p2(t6[0], t6[1])) : f5 ? p2(t6, v2) : p2(t6);
        };
        if (u5) o22 = t4;
        else {
            if ("function" != typeof (n24 = Hp(t4))) throw TypeError("Target is not iterable");
            if (Rp(n24)) {
                for(r21 = 0, s15 = jp(t4.length); s15 > r21; r21++)if ((a15 = g1(t4[r21])) && a15 instanceof Vp) return a15;
                return new Vp(!1);
            }
            o22 = n24.call(t4);
        }
        for(h11 = o22.next; !(d8 = h11.call(o22)).done;){
            try {
                a15 = g1(d8.value);
            } catch (t6) {
                throw Wp(o22), t6;
            }
            if ("object" == typeof a15 && a15 && a15 instanceof Vp) return a15;
        }
        return new Vp(!1);
    }, Up = function(t4, e10, i18) {
        if (!(t4 instanceof e10)) throw TypeError("Incorrect " + (i18 ? i18 + " " : "") + "invocation");
        return t4;
    }, Yp = ue, Xp = n, Gp = kp.exports, Kp = s, $p = oe, Zp = qp, Qp = Up, Jp = E, tv = Xo, ev = Xt.f, iv = Jr.forEach, ov = a15, nv = Zi.set, rv = Zi.getterFor, sv = function(t4, e10, i18) {
        var o22, n24 = -1 !== t4.indexOf("Map"), r21 = -1 !== t4.indexOf("Weak"), s15 = n24 ? "set" : "add", a15 = Xp[t4], h11 = a15 && a15.prototype, d8 = {
        };
        if (ov && "function" == typeof a15 && (r21 || h11.forEach && !Kp(function() {
            (new a15).entries().next();
        }))) {
            o22 = e10(function(e11, i19) {
                nv(Qp(e11, o22, t4), {
                    type: t4,
                    collection: new a15
                }), null != i19 && Zp(i19, e11[s15], {
                    that: e11,
                    AS_ENTRIES: n24
                });
            });
            var l5 = rv(t4);
            iv([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t6) {
                var e11 = "add" == t6 || "set" == t6;
                !(t6 in h11) || r21 && "clear" == t6 || $p(o22.prototype, t6, function(i19, o23) {
                    var n25 = l5(this).collection;
                    if (!e11 && r21 && !Jp(i19)) return "get" == t6 && void 0;
                    var s16 = n25[t6](0 === i19 ? 0 : i19, o23);
                    return e11 ? this : s16;
                });
            }), r21 || ev(o22.prototype, "size", {
                configurable: !0,
                get: function() {
                    return l5(this).collection.size;
                }
            });
        } else o22 = i18.getConstructor(e10, t4, n24, s15), Gp.enable();
        return tv(o22, t4, !1, !0), d8[t4] = o22, Yp({
            global: !0,
            forced: !0
        }, d8), r21 || i18.setStrong(o22, t4, n24), o22;
    }, av = an, hv = function(t4, e10, i18) {
        for(var o22 in e10)i18 && i18.unsafe && t4[o22] ? t4[o22] = e10[o22] : av(t4, o22, e10[o22], i18);
        return t4;
    }, dv = M, lv = Xt, cv = a15, uv = pt("species"), fv = Xt.f, pv = Do, vv = hv, gv = Yt, yv = Up, mv = qp, bv = _n, wv = function(t4) {
        var e10 = dv(t4), i18 = lv.f;
        cv && e10 && !e10[uv] && i18(e10, uv, {
            configurable: !0,
            get: function() {
                return this;
            }
        });
    }, kv = a15, _v = kp.exports.fastKey, xv = Zi.set, Ev = Zi.getterFor, Ov = {
        getConstructor: function(t4, e10, i18, o22) {
            var n24 = t4(function(t6, r21) {
                yv(t6, n24, e10), xv(t6, {
                    type: e10,
                    index: pv(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), kv || (t6.size = 0), null != r21 && mv(r21, t6[o22], {
                    that: t6,
                    AS_ENTRIES: i18
                });
            }), r21 = Ev(e10), s15 = function(t6, e11, i19) {
                var o23, n25, s16 = r21(t6), h11 = a16(t6, e11);
                return h11 ? h11.value = i19 : (s16.last = h11 = {
                    index: n25 = _v(e11, !0),
                    key: e11,
                    value: i19,
                    previous: o23 = s16.last,
                    next: void 0,
                    removed: !1
                }, s16.first || (s16.first = h11), o23 && (o23.next = h11), kv ? s16.size++ : t6.size++, "F" !== n25 && (s16.index[n25] = h11)), t6;
            }, a16 = function(t6, e11) {
                var i19, o23 = r21(t6), n25 = _v(e11);
                if ("F" !== n25) return o23.index[n25];
                for(i19 = o23.first; i19; i19 = i19.next)if (i19.key == e11) return i19;
            };
            return vv(n24.prototype, {
                clear: function() {
                    for(var t6 = r21(this), e11 = t6.index, i19 = t6.first; i19;)i19.removed = !0, i19.previous && (i19.previous = i19.previous.next = void 0), delete e11[i19.index], i19 = i19.next;
                    t6.first = t6.last = void 0, kv ? t6.size = 0 : this.size = 0;
                },
                delete: function(t6) {
                    var e11 = this, i19 = r21(e11), o23 = a16(e11, t6);
                    if (o23) {
                        var n25 = o23.next, s16 = o23.previous;
                        delete i19.index[o23.index], o23.removed = !0, s16 && (s16.next = n25), n25 && (n25.previous = s16), i19.first == o23 && (i19.first = n25), i19.last == o23 && (i19.last = s16), kv ? i19.size-- : e11.size--;
                    }
                    return !!o23;
                },
                forEach: function(t6) {
                    for(var e11, i19 = r21(this), o23 = gv(t6, arguments.length > 1 ? arguments[1] : void 0, 3); e11 = e11 ? e11.next : i19.first;)for(o23(e11.value, e11.key, this); e11 && e11.removed;)e11 = e11.previous;
                },
                has: function(t6) {
                    return !!a16(this, t6);
                }
            }), vv(n24.prototype, i18 ? {
                get: function(t6) {
                    var e11 = a16(this, t6);
                    return e11 && e11.value;
                },
                set: function(t6, e11) {
                    return s15(this, 0 === t6 ? 0 : t6, e11);
                }
            } : {
                add: function(t6) {
                    return s15(this, t6 = 0 === t6 ? 0 : t6, t6);
                }
            }), kv && fv(n24.prototype, "size", {
                get: function() {
                    return r21(this).size;
                }
            }), n24;
        },
        setStrong: function(t4, e10, i18) {
            var o22 = e10 + " Iterator", n24 = Ev(e10), r21 = Ev(o22);
            bv(t4, e10, function(t6, e11) {
                xv(this, {
                    type: o22,
                    target: t6,
                    state: n24(t6),
                    kind: e11,
                    last: void 0
                });
            }, function() {
                for(var t6 = r21(this), e11 = t6.kind, i19 = t6.last; i19 && i19.removed;)i19 = i19.previous;
                return t6.target && (t6.last = i19 = i19 ? i19.next : t6.state.first) ? "keys" == e11 ? {
                    value: i19.key,
                    done: !1
                } : "values" == e11 ? {
                    value: i19.value,
                    done: !1
                } : {
                    value: [
                        i19.key,
                        i19.value
                    ],
                    done: !1
                } : (t6.target = void 0, {
                    value: void 0,
                    done: !0
                });
            }, i18 ? "entries" : "values", !i18, !0), wv(e10);
        }
    };
    sv("Map", function(t4) {
        return function() {
            return t4(this, arguments.length ? arguments[0] : void 0);
        };
    }, Ov);
    var Cv = O.Map, Sv = function() {
        function t4() {
            Ra(this, t4), this.clear(), this._defaultIndex = 0, this._groupIndex = 0, this._defaultGroups = [
                {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                {
                    border: "#FFA500",
                    background: "#FFFF00",
                    highlight: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    },
                    hover: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    }
                },
                {
                    border: "#FA0A10",
                    background: "#FB7E81",
                    highlight: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    },
                    hover: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    }
                },
                {
                    border: "#41A906",
                    background: "#7BE141",
                    highlight: {
                        border: "#41A906",
                        background: "#A1EC76"
                    },
                    hover: {
                        border: "#41A906",
                        background: "#A1EC76"
                    }
                },
                {
                    border: "#E129F0",
                    background: "#EB7DF4",
                    highlight: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    },
                    hover: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    }
                },
                {
                    border: "#7C29F0",
                    background: "#AD85E4",
                    highlight: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    },
                    hover: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    }
                },
                {
                    border: "#C37F00",
                    background: "#FFA807",
                    highlight: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    },
                    hover: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    }
                },
                {
                    border: "#4220FB",
                    background: "#6E6EFD",
                    highlight: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    },
                    hover: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    }
                },
                {
                    border: "#FD5A77",
                    background: "#FFC0CB",
                    highlight: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    },
                    hover: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    }
                },
                {
                    border: "#4AD63A",
                    background: "#C2FABC",
                    highlight: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    },
                    hover: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    }
                },
                {
                    border: "#990000",
                    background: "#EE0000",
                    highlight: {
                        border: "#BB0000",
                        background: "#FF3333"
                    },
                    hover: {
                        border: "#BB0000",
                        background: "#FF3333"
                    }
                },
                {
                    border: "#FF6000",
                    background: "#FF6000",
                    highlight: {
                        border: "#FF6000",
                        background: "#FF6000"
                    },
                    hover: {
                        border: "#FF6000",
                        background: "#FF6000"
                    }
                },
                {
                    border: "#97C2FC",
                    background: "#2B7CE9",
                    highlight: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    },
                    hover: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    }
                },
                {
                    border: "#399605",
                    background: "#255C03",
                    highlight: {
                        border: "#399605",
                        background: "#255C03"
                    },
                    hover: {
                        border: "#399605",
                        background: "#255C03"
                    }
                },
                {
                    border: "#B70054",
                    background: "#FF007E",
                    highlight: {
                        border: "#B70054",
                        background: "#FF007E"
                    },
                    hover: {
                        border: "#B70054",
                        background: "#FF007E"
                    }
                },
                {
                    border: "#AD85E4",
                    background: "#7C29F0",
                    highlight: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    },
                    hover: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    }
                },
                {
                    border: "#4557FA",
                    background: "#000EA1",
                    highlight: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    },
                    hover: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    }
                },
                {
                    border: "#FFC0CB",
                    background: "#FD5A77",
                    highlight: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    },
                    hover: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    }
                },
                {
                    border: "#C2FABC",
                    background: "#74D66A",
                    highlight: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    },
                    hover: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    }
                },
                {
                    border: "#EE0000",
                    background: "#990000",
                    highlight: {
                        border: "#FF3333",
                        background: "#BB0000"
                    },
                    hover: {
                        border: "#FF3333",
                        background: "#BB0000"
                    }
                }
            ], this.options = {
            }, this.defaultOptions = {
                useDefaultGroups: !0
            }, Ke(this.options, this.defaultOptions);
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t6) {
                    var e10 = [
                        "useDefaultGroups"
                    ];
                    if ((void 0) !== t6) for(var i18 in t6)if (Object.prototype.hasOwnProperty.call(t6, i18) && -1 === Cl(e10).call(e10, i18)) {
                        var o22 = t6[i18];
                        this.add(i18, o22);
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    this._groups = new Cv, this._groupNames = [];
                }
            },
            {
                key: "get",
                value: function(t6) {
                    var e10 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1], i18 = this._groups.get(t6);
                    if ((void 0) === i18 && e10) {
                        if (!1 === this.options.useDefaultGroups && this._groupNames.length > 0) {
                            var o23 = this._groupIndex % this._groupNames.length;
                            ++this._groupIndex, (i18 = {
                            }).color = this._groups.get(this._groupNames[o23]), this._groups.set(t6, i18);
                        } else {
                            var n24 = this._defaultIndex % this._defaultGroups.length;
                            this._defaultIndex++, (i18 = {
                            }).color = this._defaultGroups[n24], this._groups.set(t6, i18);
                        }
                    }
                    return i18;
                }
            },
            {
                key: "add",
                value: function(t6, e10) {
                    return this._groups.has(t6) || this._groupNames.push(t6), this._groups.set(t6, e10), e10;
                }
            }
        ]), t4;
    }();
    ue({
        target: "Number",
        stat: !0
    }, {
        isNaN: function(t4) {
            return t4 != t4;
        }
    });
    var Tv = O.Number.isNaN, Mv = n.isFinite;
    ue({
        target: "Number",
        stat: !0
    }, {
        isFinite: Number.isFinite || function(t4) {
            return "number" == typeof t4 && Mv(t4);
        }
    });
    var Pv = O.Number.isFinite, Dv = Jr.some;
    ue({
        target: "Array",
        proto: !0,
        forced: !Zh("some")
    }, {
        some: function(t4) {
            return Dv(this, t4, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Bv = oi("Array").some, Iv = Array.prototype, zv = function(t4) {
        var e10 = t4.some;
        return t4 === Iv || t4 instanceof Array && e10 === Iv.some ? Bv : e10;
    }, Fv = gi, Nv = ll.trim, Av = n.parseFloat, Rv = 1 / Av("\t\n\v\f\r                　\u2028\u2029\ufeff-0") != -1 / 0 ? function(t4) {
        var e10 = Nv(Fv(t4)), i18 = Av(e10);
        return 0 === i18 && "-" == e10.charAt(0) ? -0 : i18;
    } : Av;
    ue({
        global: !0,
        forced: parseFloat != Rv
    }, {
        parseFloat: Rv
    });
    var jv = O.parseFloat, Lv = ue, Hv = s, Wv = Mr.f;
    Lv({
        target: "Object",
        stat: !0,
        forced: Hv(function() {
            return !Object.getOwnPropertyNames(1);
        })
    }, {
        getOwnPropertyNames: Wv
    });
    var Vv = O.Object, qv = function(t4) {
        return Vv.getOwnPropertyNames(t4);
    };
    function Uv(t4, e10) {
        var i18 = [
            "node",
            "edge",
            "label"
        ], o24 = !0, n26 = Ef(e10, "chosen");
        if ("boolean" == typeof n26) o24 = n26;
        else if ("object" === zh(n26)) {
            if (-1 === Cl(i18).call(i18, t4)) throw new Error("choosify: subOption '" + t4 + "' should be one of '" + i18.join("', '") + "'");
            var r21 = Ef(e10, [
                "chosen",
                t4
            ]);
            "boolean" != typeof r21 && "function" != typeof r21 || (o24 = r21);
        }
        return o24;
    }
    function Yv(t4, e10, i18) {
        if (t4.width <= 0 || t4.height <= 0) return !1;
        if ((void 0) !== i18) {
            var o24 = {
                x: e10.x - i18.x,
                y: e10.y - i18.y
            };
            if (0 !== i18.angle) {
                var n26 = -i18.angle;
                e10 = {
                    x: Math.cos(n26) * o24.x - Math.sin(n26) * o24.y,
                    y: Math.sin(n26) * o24.x + Math.cos(n26) * o24.y
                };
            } else e10 = o24;
        }
        var r22 = t4.x + t4.width, s15 = t4.y + t4.width;
        return t4.left < e10.x && r22 > e10.x && t4.top < e10.y && s15 > e10.y;
    }
    function Xv(t4) {
        return "string" == typeof t4 && "" !== t4;
    }
    function Gv(t4, e10, i18, o25) {
        var n27 = o25.x, r22 = o25.y;
        if ("function" == typeof o25.distanceToBorder) {
            var s15 = o25.distanceToBorder(t4, e10), a16 = Math.sin(e10) * s15, h11 = Math.cos(e10) * s15;
            h11 === s15 ? (n27 += s15, r22 = o25.y) : a16 === s15 ? (n27 = o25.x, r22 -= s15) : (n27 += h11, r22 -= a16);
        } else o25.shape.width > o25.shape.height ? (n27 = o25.x + 0.5 * o25.shape.width, r22 = o25.y - i18) : (n27 = o25.x + i18, r22 = o25.y - 0.5 * o25.shape.height);
        return {
            x: n27,
            y: r22
        };
    }
    var Kv = oi("Array").values, $v = Ro, Zv = Array.prototype, Qv = {
        DOMTokenList: !0,
        NodeList: !0
    }, Jv = function(t4) {
        var e10 = t4.values;
        return t4 === Zv || t4 instanceof Array && e10 === Zv.values || Qv.hasOwnProperty($v(t4)) ? Kv : e10;
    }, tg = function() {
        function t4(e10) {
            Ra(this, t4), this.measureText = e10, this.current = 0, this.width = 0, this.height = 0, this.lines = [];
        }
        return Ha(t4, [
            {
                key: "_add",
                value: function(t6, e10) {
                    var i18 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : "normal";
                    (void 0) === this.lines[t6] && (this.lines[t6] = {
                        width: 0,
                        height: 0,
                        blocks: []
                    });
                    var o25 = e10;
                    (void 0) !== e10 && "" !== e10 || (o25 = " ");
                    var n27 = this.measureText(o25, i18), r22 = Ke({
                    }, Jv(n27));
                    r22.text = e10, r22.width = n27.width, r22.mod = i18, (void 0) !== e10 && "" !== e10 || (r22.width = 0), this.lines[t6].blocks.push(r22), this.lines[t6].width += r22.width;
                }
            },
            {
                key: "curWidth",
                value: function() {
                    var t6 = this.lines[this.current];
                    return (void 0) === t6 ? 0 : t6.width;
                }
            },
            {
                key: "append",
                value: function(t6) {
                    var e10 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t6, e10);
                }
            },
            {
                key: "newLine",
                value: function(t6) {
                    var e10 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t6, e10), this.current++;
                }
            },
            {
                key: "determineLineHeights",
                value: function() {
                    for(var t6 = 0; t6 < this.lines.length; t6++){
                        var e10 = this.lines[t6], i18 = 0;
                        if ((void 0) !== e10.blocks) for(var o25 = 0; o25 < e10.blocks.length; o25++){
                            var n27 = e10.blocks[o25];
                            i18 < n27.height && (i18 = n27.height);
                        }
                        e10.height = i18;
                    }
                }
            },
            {
                key: "determineLabelSize",
                value: function() {
                    for(var t6 = 0, e11 = 0, i19 = 0; i19 < this.lines.length; i19++){
                        var o26 = this.lines[i19];
                        o26.width > t6 && (t6 = o26.width), e11 += o26.height;
                    }
                    this.width = t6, this.height = e11;
                }
            },
            {
                key: "removeEmptyBlocks",
                value: function() {
                    for(var t6 = [], e11 = 0; e11 < this.lines.length; e11++){
                        var i19 = this.lines[e11];
                        if (0 !== i19.blocks.length && (e11 !== this.lines.length - 1 || 0 !== i19.width)) {
                            var o27 = {
                            };
                            Ke(o27, i19), o27.blocks = [];
                            for(var n28 = void 0, r22 = [], s17 = 0; s17 < i19.blocks.length; s17++){
                                var a17 = i19.blocks[s17];
                                0 !== a17.width ? r22.push(a17) : (void 0) === n28 && (n28 = a17);
                            }
                            0 === r22.length && (void 0) !== n28 && r22.push(n28), o27.blocks = r22, t6.push(o27);
                        }
                    }
                    return t6;
                }
            },
            {
                key: "finalize",
                value: function() {
                    this.determineLineHeights(), this.determineLabelSize();
                    var t6 = this.removeEmptyBlocks();
                    return {
                        width: this.width,
                        height: this.height,
                        lines: t6
                    };
                }
            }
        ]), t4;
    }(), eg = {
        "<b>": /<b>/,
        "<i>": /<i>/,
        "<code>": /<code>/,
        "</b>": /<\/b>/,
        "</i>": /<\/i>/,
        "</code>": /<\/code>/,
        "*": /\*/,
        _: /_/,
        "`": /`/,
        afterBold: /[^*]/,
        afterItal: /[^_]/,
        afterMono: /[^`]/
    }, ig = function() {
        function t4(e11) {
            Ra(this, t4), this.text = e11, this.bold = !1, this.ital = !1, this.mono = !1, this.spacing = !1, this.position = 0, this.buffer = "", this.modStack = [], this.blocks = [];
        }
        return Ha(t4, [
            {
                key: "mod",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : this.modStack[0];
                }
            },
            {
                key: "modName",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : "mono" === this.modStack[0] ? "mono" : this.bold && this.ital ? "boldital" : this.bold ? "bold" : this.ital ? "ital" : void 0;
                }
            },
            {
                key: "emitBlock",
                value: function() {
                    this.spacing && (this.add(" "), this.spacing = !1), this.buffer.length > 0 && (this.blocks.push({
                        text: this.buffer,
                        mod: this.modName()
                    }), this.buffer = "");
                }
            },
            {
                key: "add",
                value: function(t6) {
                    " " === t6 && (this.spacing = !0), this.spacing && (this.buffer += " ", this.spacing = !1), " " != t6 && (this.buffer += t6);
                }
            },
            {
                key: "parseWS",
                value: function(t6) {
                    return !!/[ \t]/.test(t6) && (this.mono ? this.add(t6) : this.spacing = !0, !0);
                }
            },
            {
                key: "setTag",
                value: function(t6) {
                    this.emitBlock(), this[t6] = !0, this.modStack.unshift(t6);
                }
            },
            {
                key: "unsetTag",
                value: function(t6) {
                    this.emitBlock(), this[t6] = !1, this.modStack.shift();
                }
            },
            {
                key: "parseStartTag",
                value: function(t6, e11) {
                    return !(this.mono || this[t6] || !this.match(e11)) && (this.setTag(t6), !0);
                }
            },
            {
                key: "match",
                value: function(t6) {
                    var e11 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1], i20 = this.prepareRegExp(t6), o28 = Bh(i20, 2), n29 = o28[0], r23 = o28[1], s18 = n29.test(this.text.substr(this.position, r23));
                    return s18 && e11 && (this.position += r23 - 1), s18;
                }
            },
            {
                key: "parseEndTag",
                value: function(t6, e11, i20) {
                    var o28 = this.mod() === t6;
                    return !(!(o28 = "mono" === t6 ? o28 && this.mono : o28 && !this.mono) || !this.match(e11)) && ((void 0) !== i20 ? (this.position === this.text.length - 1 || this.match(i20, !1)) && this.unsetTag(t6) : this.unsetTag(t6), !0);
                }
            },
            {
                key: "replace",
                value: function(t6, e11) {
                    return !!this.match(t6) && (this.add(e11), this.position += length - 1, !0);
                }
            },
            {
                key: "prepareRegExp",
                value: function(t6) {
                    var e11, i20;
                    if (t6 instanceof RegExp) i20 = t6, e11 = 1;
                    else {
                        var o28 = eg[t6];
                        i20 = (void 0) !== o28 ? o28 : new RegExp(t6), e11 = t6.length;
                    }
                    return [
                        i20,
                        e11
                    ];
                }
            }
        ]), t4;
    }(), og = function() {
        function t4(e11, i20, o29, n29) {
            var r23 = this;
            Ra(this, t4), this.ctx = e11, this.parent = i20, this.selected = o29, this.hover = n29;
            this.lines = new tg(function(t6, i21) {
                if ((void 0) === t6) return 0;
                var s18 = r23.parent.getFormattingValues(e11, o29, n29, i21), a18 = 0;
                "" !== t6 && (a18 = r23.ctx.measureText(t6).width);
                return {
                    width: a18,
                    values: s18
                };
            });
        }
        return Ha(t4, [
            {
                key: "process",
                value: function(t6) {
                    if (!Xv(t6)) return this.lines.finalize();
                    var e11 = this.parent.fontOptions;
                    t6 = (t6 = t6.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
                    var i20 = String(t6).split("\n"), o29 = i20.length;
                    if (e11.multi) for(var n29 = 0; n29 < o29; n29++){
                        var r23 = this.splitBlocks(i20[n29], e11.multi);
                        if ((void 0) !== r23) {
                            if (0 !== r23.length) {
                                if (e11.maxWdt > 0) for(var s18 = 0; s18 < r23.length; s18++){
                                    var a18 = r23[s18].mod, h12 = r23[s18].text;
                                    this.splitStringIntoLines(h12, a18, !0);
                                }
                                else for(var d8 = 0; d8 < r23.length; d8++){
                                    var l6 = r23[d8].mod, c4 = r23[d8].text;
                                    this.lines.append(c4, l6);
                                }
                                this.lines.newLine();
                            } else this.lines.newLine("");
                        }
                    }
                    else if (e11.maxWdt > 0) for(var u5 = 0; u5 < o29; u5++)this.splitStringIntoLines(i20[u5]);
                    else for(var f5 = 0; f5 < o29; f5++)this.lines.newLine(i20[f5]);
                    return this.lines.finalize();
                }
            },
            {
                key: "decodeMarkupSystem",
                value: function(t6) {
                    var e11 = "none";
                    return "markdown" === t6 || "md" === t6 ? e11 = "markdown" : !0 !== t6 && "html" !== t6 || (e11 = "html"), e11;
                }
            },
            {
                key: "splitHtmlBlocks",
                value: function(t6) {
                    for(var e11 = new ig(t6), i20 = function(t7) {
                        return !!/&/.test(t7) && (e11.replace(e11.text, "&lt;", "<") || e11.replace(e11.text, "&amp;", "&") || e11.add("&"), !0);
                    }; e11.position < e11.text.length;){
                        var o29 = e11.text.charAt(e11.position);
                        e11.parseWS(o29) || /</.test(o29) && (e11.parseStartTag("bold", "<b>") || e11.parseStartTag("ital", "<i>") || e11.parseStartTag("mono", "<code>") || e11.parseEndTag("bold", "</b>") || e11.parseEndTag("ital", "</i>") || e11.parseEndTag("mono", "</code>")) || i20(o29) || e11.add(o29), e11.position++;
                    }
                    return e11.emitBlock(), e11.blocks;
                }
            },
            {
                key: "splitMarkdownBlocks",
                value: function(t6) {
                    for(var e11 = this, i20 = new ig(t6), o30 = !0, n29 = function(t7) {
                        return !!/\\/.test(t7) && (i20.position < e11.text.length + 1 && (i20.position++, t7 = e11.text.charAt(i20.position), / \t/.test(t7) ? i20.spacing = !0 : (i20.add(t7), o30 = !1)), !0);
                    }; i20.position < i20.text.length;){
                        var r24 = i20.text.charAt(i20.position);
                        i20.parseWS(r24) || n29(r24) || (o30 || i20.spacing) && (i20.parseStartTag("bold", "*") || i20.parseStartTag("ital", "_") || i20.parseStartTag("mono", "`")) || i20.parseEndTag("bold", "*", "afterBold") || i20.parseEndTag("ital", "_", "afterItal") || i20.parseEndTag("mono", "`", "afterMono") || (i20.add(r24), o30 = !1), i20.position++;
                    }
                    return i20.emitBlock(), i20.blocks;
                }
            },
            {
                key: "splitBlocks",
                value: function(t6, e11) {
                    var i20 = this.decodeMarkupSystem(e11);
                    return "none" === i20 ? [
                        {
                            text: t6,
                            mod: "normal"
                        }
                    ] : "markdown" === i20 ? this.splitMarkdownBlocks(t6) : "html" === i20 ? this.splitHtmlBlocks(t6) : void 0;
                }
            },
            {
                key: "overMaxWidth",
                value: function(t6) {
                    var e11 = this.ctx.measureText(t6).width;
                    return this.lines.curWidth() + e11 > this.parent.fontOptions.maxWdt;
                }
            },
            {
                key: "getLongestFit",
                value: function(t6) {
                    for(var e11 = "", i20 = 0; i20 < t6.length;){
                        var o30 = e11 + ("" === e11 ? "" : " ") + t6[i20];
                        if (this.overMaxWidth(o30)) break;
                        e11 = o30, i20++;
                    }
                    return i20;
                }
            },
            {
                key: "getLongestFitWord",
                value: function(t6) {
                    for(var e11 = 0; e11 < t6.length && !this.overMaxWidth(Lh(t6).call(t6, 0, e11));)e11++;
                    return e11;
                }
            },
            {
                key: "splitStringIntoLines",
                value: function(t6) {
                    var e11 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : "normal", i20 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2];
                    this.parent.getFormattingValues(this.ctx, this.selected, this.hover, e11);
                    for(var o31 = (t6 = (t6 = t6.replace(/^( +)/g, "$1\r")).replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r")).split("\r"); o31.length > 0;){
                        var n29 = this.getLongestFit(o31);
                        if (0 === n29) {
                            var r25 = o31[0], s19 = this.getLongestFitWord(r25);
                            this.lines.newLine(Lh(r25).call(r25, 0, s19), e11), o31[0] = Lh(r25).call(r25, s19);
                        } else {
                            var a19 = n29;
                            " " === o31[n29 - 1] ? n29-- : " " === o31[a19] && a19++;
                            var h13 = Lh(o31).call(o31, 0, n29).join("");
                            n29 == o31.length && i20 ? this.lines.append(h13, e11) : this.lines.newLine(h13, e11), o31 = Lh(o31).call(o31, a19);
                        }
                    }
                }
            }
        ]), t4;
    }(), ng = [
        "bold",
        "ital",
        "boldital",
        "mono"
    ], rg = function() {
        function t4(e11, i20) {
            var o31 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2];
            Ra(this, t4), this.body = e11, this.pointToSelf = !1, this.baseSize = void 0, this.fontOptions = {
            }, this.setOptions(i20), this.size = {
                top: 0,
                left: 0,
                width: 0,
                height: 0,
                yLine: 0
            }, this.isEdgeLabel = o31;
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t6) {
                    if (this.elementOptions = t6, this.initFontOptions(t6.font), Xv(t6.label) ? this.labelDirty = !0 : t6.label = void 0, (void 0) !== t6.font && null !== t6.font) {
                        if ("string" == typeof t6.font) this.baseSize = this.fontOptions.size;
                        else if ("object" === zh(t6.font)) {
                            var e11 = t6.font.size;
                            (void 0) !== e11 && (this.baseSize = e11);
                        }
                    }
                }
            },
            {
                key: "initFontOptions",
                value: function(e12) {
                    var i20 = this;
                    lf(ng, function(t6) {
                        i20.fontOptions[t6] = {
                        };
                    }), t4.parseFontString(this.fontOptions, e12) ? this.fontOptions.vadjust = 0 : lf(e12, function(t6, e13) {
                        null != t6 && "object" !== zh(t6) && (i20.fontOptions[e13] = t6);
                    });
                }
            },
            {
                key: "constrain",
                value: function(t6) {
                    var e12 = {
                        constrainWidth: !1,
                        maxWdt: -1,
                        minWdt: -1,
                        constrainHeight: !1,
                        minHgt: -1,
                        valign: "middle"
                    }, i20 = Ef(t6, "widthConstraint");
                    if ("number" == typeof i20) e12.maxWdt = Number(i20), e12.minWdt = Number(i20);
                    else if ("object" === zh(i20)) {
                        var o31 = Ef(t6, [
                            "widthConstraint",
                            "maximum"
                        ]);
                        "number" == typeof o31 && (e12.maxWdt = Number(o31));
                        var n30 = Ef(t6, [
                            "widthConstraint",
                            "minimum"
                        ]);
                        "number" == typeof n30 && (e12.minWdt = Number(n30));
                    }
                    var r26 = Ef(t6, "heightConstraint");
                    if ("number" == typeof r26) e12.minHgt = Number(r26);
                    else if ("object" === zh(r26)) {
                        var s20 = Ef(t6, [
                            "heightConstraint",
                            "minimum"
                        ]);
                        "number" == typeof s20 && (e12.minHgt = Number(s20));
                        var a20 = Ef(t6, [
                            "heightConstraint",
                            "valign"
                        ]);
                        "string" == typeof a20 && ("top" !== a20 && "bottom" !== a20 || (e12.valign = a20));
                    }
                    return e12;
                }
            },
            {
                key: "update",
                value: function(t6, e12) {
                    this.setOptions(t6, !0), this.propagateFonts(e12), sf(this.fontOptions, this.constrain(e12)), this.fontOptions.chooser = Uv("label", e12);
                }
            },
            {
                key: "adjustSizes",
                value: function(t6) {
                    var e12 = t6 ? t6.right + t6.left : 0;
                    this.fontOptions.constrainWidth && (this.fontOptions.maxWdt -= e12, this.fontOptions.minWdt -= e12);
                    var i20 = t6 ? t6.top + t6.bottom : 0;
                    this.fontOptions.constrainHeight && (this.fontOptions.minHgt -= i20);
                }
            },
            {
                key: "addFontOptionsToPile",
                value: function(t6, e12) {
                    for(var i20 = 0; i20 < e12.length; ++i20)this.addFontToPile(t6, e12[i20]);
                }
            },
            {
                key: "addFontToPile",
                value: function(t6, e12) {
                    if ((void 0) !== e12 && (void 0) !== e12.font && null !== e12.font) {
                        var i20 = e12.font;
                        t6.push(i20);
                    }
                }
            },
            {
                key: "getBasicOptions",
                value: function(e12) {
                    for(var i21 = {
                    }, o32 = 0; o32 < e12.length; ++o32){
                        var n31 = e12[o32], r26 = {
                        };
                        t4.parseFontString(r26, n31) && (n31 = r26), lf(n31, function(t6, e13) {
                            (void 0) !== t6 && (Object.prototype.hasOwnProperty.call(i21, e13) || (-1 !== Cl(ng).call(ng, e13) ? i21[e13] = {
                            } : i21[e13] = t6));
                        });
                    }
                    return i21;
                }
            },
            {
                key: "getFontOption",
                value: function(e12, i21, o32) {
                    for(var n32, r27 = 0; r27 < e12.length; ++r27){
                        var s21 = e12[r27];
                        if (Object.prototype.hasOwnProperty.call(s21, i21)) {
                            if (null == (n32 = s21[i21])) continue;
                            var a21 = {
                            };
                            if (t4.parseFontString(a21, n32) && (n32 = a21), Object.prototype.hasOwnProperty.call(n32, o32)) return n32[o32];
                        }
                    }
                    if (Object.prototype.hasOwnProperty.call(this.fontOptions, o32)) return this.fontOptions[o32];
                    throw new Error("Did not find value for multi-font for property: '" + o32 + "'");
                }
            },
            {
                key: "getFontOptions",
                value: function(t6, e12) {
                    for(var i21 = {
                    }, o32 = [
                        "color",
                        "size",
                        "face",
                        "mod",
                        "vadjust"
                    ], n32 = 0; n32 < o32.length; ++n32){
                        var r27 = o32[n32];
                        i21[r27] = this.getFontOption(t6, e12, r27);
                    }
                    return i21;
                }
            },
            {
                key: "propagateFonts",
                value: function(t6) {
                    var e12 = this, i21 = [];
                    this.addFontOptionsToPile(i21, t6), this.fontOptions = this.getBasicOptions(i21);
                    for(var o32 = function(t7) {
                        var o33 = ng[t7], n32 = e12.fontOptions[o33];
                        lf(e12.getFontOptions(i21, o33), function(t8, e13) {
                            n32[e13] = t8;
                        }), n32.size = Number(n32.size), n32.vadjust = Number(n32.vadjust);
                    }, n32 = 0; n32 < ng.length; ++n32)o32(n32);
                }
            },
            {
                key: "draw",
                value: function(t6, e12, i21, o32, n32) {
                    var r28 = arguments.length > 5 && (void 0) !== arguments[5] ? arguments[5] : "middle";
                    if ((void 0) !== this.elementOptions.label) {
                        var s22 = this.fontOptions.size * this.body.view.scale;
                        this.elementOptions.label && s22 < this.elementOptions.scaling.label.drawThreshold - 1 || (s22 >= this.elementOptions.scaling.label.maxVisible && (s22 = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale), this.calculateLabelSize(t6, o32, n32, e12, i21, r28), this._drawBackground(t6), this._drawText(t6, e12, this.size.yLine, r28, s22));
                    }
                }
            },
            {
                key: "_drawBackground",
                value: function(t6) {
                    if ((void 0) !== this.fontOptions.background && "none" !== this.fontOptions.background) {
                        t6.fillStyle = this.fontOptions.background;
                        var e12 = this.getSize();
                        t6.fillRect(e12.left, e12.top, e12.width, e12.height);
                    }
                }
            },
            {
                key: "_drawText",
                value: function(t6, e13, i21) {
                    var o32 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : "middle", n32 = arguments.length > 4 ? arguments[4] : void 0, r28 = this._setAlignment(t6, e13, i21, o32), s23 = Bh(r28, 2);
                    e13 = s23[0], i21 = s23[1], t6.textAlign = "left", e13 -= this.size.width / 2, this.fontOptions.valign && this.size.height > this.size.labelHeight && ("top" === this.fontOptions.valign && (i21 -= (this.size.height - this.size.labelHeight) / 2), "bottom" === this.fontOptions.valign && (i21 += (this.size.height - this.size.labelHeight) / 2));
                    for(var a22 = 0; a22 < this.lineCount; a22++){
                        var h14 = this.lines[a22];
                        if (h14 && h14.blocks) {
                            var d9 = 0;
                            this.isEdgeLabel || "center" === this.fontOptions.align ? d9 += (this.size.width - h14.width) / 2 : "right" === this.fontOptions.align && (d9 += this.size.width - h14.width);
                            for(var l7 = 0; l7 < h14.blocks.length; l7++){
                                var c5 = h14.blocks[l7];
                                t6.font = c5.font;
                                var u5 = this._getColor(c5.color, n32, c5.strokeColor), f5 = Bh(u5, 2), p2 = f5[0], v2 = f5[1];
                                c5.strokeWidth > 0 && (t6.lineWidth = c5.strokeWidth, t6.strokeStyle = v2, t6.lineJoin = "round"), t6.fillStyle = p2, c5.strokeWidth > 0 && t6.strokeText(c5.text, e13 + d9, i21 + c5.vadjust), t6.fillText(c5.text, e13 + d9, i21 + c5.vadjust), d9 += c5.width;
                            }
                            i21 += h14.height;
                        }
                    }
                }
            },
            {
                key: "_setAlignment",
                value: function(t6, e13, i21, o32) {
                    if (this.isEdgeLabel && "horizontal" !== this.fontOptions.align && !1 === this.pointToSelf) {
                        e13 = 0, i21 = 0;
                        "top" === this.fontOptions.align ? (t6.textBaseline = "alphabetic", i21 -= 4) : "bottom" === this.fontOptions.align ? (t6.textBaseline = "hanging", i21 += 4) : t6.textBaseline = "middle";
                    } else t6.textBaseline = o32;
                    return [
                        e13,
                        i21
                    ];
                }
            },
            {
                key: "_getColor",
                value: function(t6, e13, i21) {
                    var o32 = t6 || "#000000", n32 = i21 || "#ffffff";
                    if (e13 <= this.elementOptions.scaling.label.drawThreshold) {
                        var r28 = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - e13)));
                        o32 = uf(o32, r28), n32 = uf(n32, r28);
                    }
                    return [
                        o32,
                        n32
                    ];
                }
            },
            {
                key: "getTextSize",
                value: function(t6) {
                    var e13 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1], i21 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2];
                    return this._processLabel(t6, e13, i21), {
                        width: this.size.width,
                        height: this.size.height,
                        lineCount: this.lineCount
                    };
                }
            },
            {
                key: "getSize",
                value: function() {
                    var t6 = this.size.left, e13 = this.size.top - 1;
                    if (this.isEdgeLabel) {
                        var i21 = 0.5 * -this.size.width;
                        switch(this.fontOptions.align){
                            case "middle":
                                t6 = i21, e13 = 0.5 * -this.size.height;
                                break;
                            case "top":
                                t6 = i21, e13 = -(this.size.height + 2);
                                break;
                            case "bottom":
                                t6 = i21, e13 = 2;
                        }
                    }
                    return {
                        left: t6,
                        top: e13,
                        width: this.size.width,
                        height: this.size.height
                    };
                }
            },
            {
                key: "calculateLabelSize",
                value: function(t6, e13, i22) {
                    var o32 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : 0, n32 = arguments.length > 4 && (void 0) !== arguments[4] ? arguments[4] : 0, r29 = arguments.length > 5 && (void 0) !== arguments[5] ? arguments[5] : "middle";
                    this._processLabel(t6, e13, i22), this.size.left = o32 - 0.5 * this.size.width, this.size.top = n32 - 0.5 * this.size.height, this.size.yLine = n32 + 0.5 * (1 - this.lineCount) * this.fontOptions.size, "hanging" === r29 && (this.size.top += 0.5 * this.fontOptions.size, this.size.top += 4, this.size.yLine += 4);
                }
            },
            {
                key: "getFormattingValues",
                value: function(t6, e13, i22, o32) {
                    var n32 = function(t7, e14, i23) {
                        return "normal" === e14 ? "mod" === i23 ? "" : t7[i23] : (void 0) !== t7[e14][i23] ? t7[e14][i23] : t7[i23];
                    }, r29 = {
                        color: n32(this.fontOptions, o32, "color"),
                        size: n32(this.fontOptions, o32, "size"),
                        face: n32(this.fontOptions, o32, "face"),
                        mod: n32(this.fontOptions, o32, "mod"),
                        vadjust: n32(this.fontOptions, o32, "vadjust"),
                        strokeWidth: this.fontOptions.strokeWidth,
                        strokeColor: this.fontOptions.strokeColor
                    };
                    (e13 || i22) && ("normal" === o32 && !0 === this.fontOptions.chooser && this.elementOptions.labelHighlightBold ? r29.mod = "bold" : "function" == typeof this.fontOptions.chooser && this.fontOptions.chooser(r29, this.elementOptions.id, e13, i22));
                    var s23 = "";
                    return (void 0) !== r29.mod && "" !== r29.mod && (s23 += r29.mod + " "), s23 += r29.size + "px " + r29.face, t6.font = s23.replace(/"/g, ""), r29.font = t6.font, r29.height = r29.size, r29;
                }
            },
            {
                key: "differentState",
                value: function(t6, e13) {
                    return t6 !== this.selectedState || e13 !== this.hoverState;
                }
            },
            {
                key: "_processLabelText",
                value: function(t6, e13, i22, o32) {
                    return new og(t6, this, e13, i22).process(o32);
                }
            },
            {
                key: "_processLabel",
                value: function(t6, e13, i22) {
                    if (!1 !== this.labelDirty || this.differentState(e13, i22)) {
                        var o32 = this._processLabelText(t6, e13, i22, this.elementOptions.label);
                        this.fontOptions.minWdt > 0 && o32.width < this.fontOptions.minWdt && (o32.width = this.fontOptions.minWdt), this.size.labelHeight = o32.height, this.fontOptions.minHgt > 0 && o32.height < this.fontOptions.minHgt && (o32.height = this.fontOptions.minHgt), this.lines = o32.lines, this.lineCount = o32.lines.length, this.size.width = o32.width, this.size.height = o32.height, this.selectedState = e13, this.hoverState = i22, this.labelDirty = !1;
                    }
                }
            },
            {
                key: "visible",
                value: function() {
                    return 0 !== this.size.width && 0 !== this.size.height && (void 0) !== this.elementOptions.label && !(this.fontOptions.size * this.body.view.scale < this.elementOptions.scaling.label.drawThreshold - 1);
                }
            }
        ], [
            {
                key: "parseFontString",
                value: function(t6, e13) {
                    if (!e13 || "string" != typeof e13) return !1;
                    var i22 = e13.split(" ");
                    return t6.size = +i22[0].replace("px", ""), t6.face = i22[1], t6.color = i22[2], !0;
                }
            }
        ]), t4;
    }(), sg = ue, ag = qt, hg = Kt, dg = E, lg = Do, cg = ei, ug = s, fg = M("Reflect", "construct"), pg = ug(function() {
        function t4() {
        }
        return !(fg(function() {
        }, [], t4) instanceof t4);
    }), vg = !ug(function() {
        fg(function() {
        });
    }), gg = pg || vg;
    sg({
        target: "Reflect",
        stat: !0,
        forced: gg,
        sham: gg
    }, {
        construct: function(t4, e13) {
            ag(t4), hg(e13);
            var i22 = arguments.length < 3 ? t4 : ag(arguments[2]);
            if (vg && !pg) return fg(t4, e13, i22);
            if (t4 == i22) {
                switch(e13.length){
                    case 0:
                        return new t4;
                    case 1:
                        return new t4(e13[0]);
                    case 2:
                        return new t4(e13[0], e13[1]);
                    case 3:
                        return new t4(e13[0], e13[1], e13[2]);
                    case 4:
                        return new t4(e13[0], e13[1], e13[2], e13[3]);
                }
                var o33 = [
                    null
                ];
                return o33.push.apply(o33, e13), new (cg.apply(t4, o33));
            }
            var n32 = i22.prototype, r29 = lg(dg(n32) ? n32 : Object.prototype), s23 = Function.apply.call(t4, r29, e13);
            return dg(s23) ? s23 : r29;
        }
    });
    var yg = O.Reflect.construct, mg = Dl;
    ue({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: rn
    });
    var bg = O.Object.setPrototypeOf;
    function wg(t4, e13) {
        return (wg = bg || function(t6, e14) {
            return t6.__proto__ = e14, t6;
        })(t4, e13);
    }
    function kg(t4, e13) {
        if ("function" != typeof e13 && null !== e13) throw new TypeError("Super expression must either be null or a function");
        t4.prototype = mg(e13 && e13.prototype, {
            constructor: {
                value: t4,
                writable: !0,
                configurable: !0
            }
        }), e13 && wg(t4, e13);
    }
    function _g(t4, e13) {
        if (e13 && ("object" === zh(e13) || "function" == typeof e13)) return e13;
        if ((void 0) !== e13) throw new TypeError("Derived constructors may only return object or undefined");
        return (function(t6) {
            if ((void 0) === t6) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t6;
        })(t4);
    }
    var xg = Ud;
    function Eg(t4) {
        return (Eg = bg ? xg : function(t6) {
            return t6.__proto__ || xg(t6);
        })(t4);
    }
    var Og = function() {
        function t4(e13, i22, o34) {
            Ra(this, t4), this.body = i22, this.labelModule = o34, this.setOptions(e13), this.top = void 0, this.left = void 0, this.height = void 0, this.width = void 0, this.radius = void 0, this.margin = void 0, this.refreshNeeded = !0, this.boundingBox = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t6) {
                    this.options = t6;
                }
            },
            {
                key: "_setMargins",
                value: function(t6) {
                    this.margin = {
                    }, this.options.margin && ("object" == zh(this.options.margin) ? (this.margin.top = this.options.margin.top, this.margin.right = this.options.margin.right, this.margin.bottom = this.options.margin.bottom, this.margin.left = this.options.margin.left) : (this.margin.top = this.options.margin, this.margin.right = this.options.margin, this.margin.bottom = this.options.margin, this.margin.left = this.options.margin)), t6.adjustSizes(this.margin);
                }
            },
            {
                key: "_distanceToBorder",
                value: function(t6, e13) {
                    var i22 = this.options.borderWidth;
                    return t6 && this.resize(t6), Math.min(Math.abs(this.width / 2 / Math.cos(e13)), Math.abs(this.height / 2 / Math.sin(e13))) + i22;
                }
            },
            {
                key: "enableShadow",
                value: function(t6, e13) {
                    e13.shadow && (t6.shadowColor = e13.shadowColor, t6.shadowBlur = e13.shadowSize, t6.shadowOffsetX = e13.shadowX, t6.shadowOffsetY = e13.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t6, e13) {
                    e13.shadow && (t6.shadowColor = "rgba(0,0,0,0)", t6.shadowBlur = 0, t6.shadowOffsetX = 0, t6.shadowOffsetY = 0);
                }
            },
            {
                key: "enableBorderDashes",
                value: function(t6, e13) {
                    if (!1 !== e13.borderDashes) {
                        if ((void 0) !== t6.setLineDash) {
                            var i22 = e13.borderDashes;
                            !0 === i22 && (i22 = [
                                5,
                                15
                            ]), t6.setLineDash(i22);
                        } else console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e13.borderDashes = !1;
                    }
                }
            },
            {
                key: "disableBorderDashes",
                value: function(t6, e13) {
                    !1 !== e13.borderDashes && ((void 0) !== t6.setLineDash ? t6.setLineDash([
                        0
                    ]) : (console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e13.borderDashes = !1));
                }
            },
            {
                key: "needsRefresh",
                value: function(t6, e13) {
                    return !0 === this.refreshNeeded ? (this.refreshNeeded = !1, !0) : (void 0) === this.width || this.labelModule.differentState(t6, e13);
                }
            },
            {
                key: "initContextForDraw",
                value: function(t6, e13) {
                    var i23 = e13.borderWidth / this.body.view.scale;
                    t6.lineWidth = Math.min(this.width, i23), t6.strokeStyle = e13.borderColor, t6.fillStyle = e13.color;
                }
            },
            {
                key: "performStroke",
                value: function(t6, e13) {
                    var i23 = e13.borderWidth / this.body.view.scale;
                    t6.save(), i23 > 0 && (this.enableBorderDashes(t6, e13), t6.stroke(), this.disableBorderDashes(t6, e13)), t6.restore();
                }
            },
            {
                key: "performFill",
                value: function(t6, e13) {
                    t6.save(), t6.fillStyle = e13.color, this.enableShadow(t6, e13), Ql(t6).call(t6), this.disableShadow(t6, e13), t6.restore(), this.performStroke(t6, e13);
                }
            },
            {
                key: "_addBoundingBoxMargin",
                value: function(t6) {
                    this.boundingBox.left -= t6, this.boundingBox.top -= t6, this.boundingBox.bottom += t6, this.boundingBox.right += t6;
                }
            },
            {
                key: "_updateBoundingBox",
                value: function(t6, e13, i23, o34, n32) {
                    (void 0) !== i23 && this.resize(i23, o34, n32), this.left = t6 - this.width / 2, this.top = e13 - this.height / 2, this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width;
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6, e13, i23, o34, n32) {
                    this._updateBoundingBox(t6, e13, i23, o34, n32);
                }
            },
            {
                key: "getDimensionsFromLabel",
                value: function(t6, e13, i23) {
                    this.textSize = this.labelModule.getTextSize(t6, e13, i23);
                    var o34 = this.textSize.width, n32 = this.textSize.height;
                    return 0 === o34 && (o34 = 14, n32 = 14), {
                        width: o34,
                        height: n32
                    };
                }
            }
        ]), t4;
    }();
    function Cg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i23, o34 = Eg(t4);
            if (e13) {
                var n32 = Eg(this).constructor;
                i23 = yg(o34, arguments, n32);
            } else i23 = o34.apply(this, arguments);
            return _g(this, i23);
        };
    }
    var Sg = function(t4) {
        kg(i24, t4);
        var e13 = Cg(i24);
        function i24(t6, o34, n33) {
            var r29;
            return Ra(this, i24), (r29 = e13.call(this, t6, o34, n33))._setMargins(n33), r29;
        }
        return Ha(i24, [
            {
                key: "resize",
                value: function(t6) {
                    var e14 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.selected, i25 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e14, i25)) {
                        var o34 = this.getDimensionsFromLabel(t6, e14, i25);
                        this.width = o34.width + this.margin.right + this.margin.left, this.height = o34.height + this.margin.top + this.margin.bottom, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t6, e14, i25, o35, n33, r29) {
                    this.resize(t6, o35, n33), this.left = e14 - this.width / 2, this.top = i25 - this.height / 2, this.initContextForDraw(t6, r29), hi(t6, this.left, this.top, this.width, this.height, r29.borderRadius), this.performFill(t6, r29), this.updateBoundingBox(e14, i25, t6, o35, n33), this.labelModule.draw(t6, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o35, n33);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6, e14, i25, o35, n33) {
                    this._updateBoundingBox(t6, e14, i25, o35, n33);
                    var r29 = this.options.shapeProperties.borderRadius;
                    this._addBoundingBoxMargin(r29);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e14) {
                    t6 && this.resize(t6);
                    var i25 = this.options.borderWidth;
                    return Math.min(Math.abs(this.width / 2 / Math.cos(e14)), Math.abs(this.height / 2 / Math.sin(e14))) + i25;
                }
            }
        ]), i24;
    }(Og);
    function Tg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i24, o35 = Eg(t4);
            if (e13) {
                var n33 = Eg(this).constructor;
                i24 = yg(o35, arguments, n33);
            } else i24 = o35.apply(this, arguments);
            return _g(this, i24);
        };
    }
    var Mg = function(t4) {
        kg(i24, t4);
        var e13 = Tg(i24);
        function i24(t6, o35, n34) {
            var r29;
            return Ra(this, i24), (r29 = e13.call(this, t6, o35, n34)).labelOffset = 0, r29.selected = !1, r29;
        }
        return Ha(i24, [
            {
                key: "setOptions",
                value: function(t6, e14, i25) {
                    this.options = t6, (void 0) === e14 && (void 0) === i25 || this.setImages(e14, i25);
                }
            },
            {
                key: "setImages",
                value: function(t6, e14) {
                    e14 && this.selected ? (this.imageObj = e14, this.imageObjAlt = t6) : (this.imageObj = t6, this.imageObjAlt = e14);
                }
            },
            {
                key: "switchImages",
                value: function(t6) {
                    var e14 = t6 && !this.selected || !t6 && this.selected;
                    if (this.selected = t6, (void 0) !== this.imageObjAlt && e14) {
                        var i25 = this.imageObj;
                        this.imageObj = this.imageObjAlt, this.imageObjAlt = i25;
                    }
                }
            },
            {
                key: "_getImagePadding",
                value: function() {
                    var t6 = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    };
                    if (this.options.imagePadding) {
                        var e14 = this.options.imagePadding;
                        "object" == zh(e14) ? (t6.top = e14.top, t6.right = e14.right, t6.bottom = e14.bottom, t6.left = e14.left) : (t6.top = e14, t6.right = e14, t6.bottom = e14, t6.left = e14);
                    }
                    return t6;
                }
            },
            {
                key: "_resizeImage",
                value: function() {
                    var t6, e15;
                    if (!1 === this.options.shapeProperties.useImageSize) {
                        var i26 = 1, o35 = 1;
                        this.imageObj.width && this.imageObj.height && (this.imageObj.width > this.imageObj.height ? i26 = this.imageObj.width / this.imageObj.height : o35 = this.imageObj.height / this.imageObj.width), t6 = 2 * this.options.size * i26, e15 = 2 * this.options.size * o35;
                    } else {
                        var n34 = this._getImagePadding();
                        t6 = this.imageObj.width + n34.left + n34.right, e15 = this.imageObj.height + n34.top + n34.bottom;
                    }
                    this.width = t6, this.height = e15, this.radius = 0.5 * this.width;
                }
            },
            {
                key: "_drawRawCircle",
                value: function(t6, e15, i27, o36) {
                    this.initContextForDraw(t6, o36), ai(t6, e15, i27, o36.size), this.performFill(t6, o36);
                }
            },
            {
                key: "_drawImageAtPosition",
                value: function(t6, e15) {
                    if (0 != this.imageObj.width) {
                        t6.globalAlpha = (void 0) !== e15.opacity ? e15.opacity : 1, this.enableShadow(t6, e15);
                        var i27 = 1;
                        !0 === this.options.shapeProperties.interpolation && (i27 = this.imageObj.width / this.width / this.body.view.scale);
                        var o36 = this._getImagePadding(), n35 = this.left + o36.left, r29 = this.top + o36.top, s23 = this.width - o36.left - o36.right, a22 = this.height - o36.top - o36.bottom;
                        this.imageObj.drawImageAtPosition(t6, i27, n35, r29, s23, a22), this.disableShadow(t6, e15);
                    }
                }
            },
            {
                key: "_drawImageLabel",
                value: function(t6, e15, i28, o37, n36) {
                    var r30 = 0;
                    if ((void 0) !== this.height) {
                        r30 = 0.5 * this.height;
                        var s24 = this.labelModule.getTextSize(t6, o37, n36);
                        s24.lineCount >= 1 && (r30 += s24.height / 2);
                    }
                    var a23 = i28 + r30;
                    this.options.label && (this.labelOffset = r30), this.labelModule.draw(t6, e15, a23, o37, n36, "hanging");
                }
            }
        ]), i24;
    }(Og);
    function Pg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i24, o37 = Eg(t4);
            if (e13) {
                var n36 = Eg(this).constructor;
                i24 = yg(o37, arguments, n36);
            } else i24 = o37.apply(this, arguments);
            return _g(this, i24);
        };
    }
    var Dg = function(t4) {
        kg(i24, t4);
        var e13 = Pg(i24);
        function i24(t6, o37, n37) {
            var r30;
            return Ra(this, i24), (r30 = e13.call(this, t6, o37, n37))._setMargins(n37), r30;
        }
        return Ha(i24, [
            {
                key: "resize",
                value: function(t6) {
                    var e15 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.selected, i28 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e15, i28)) {
                        var o37 = this.getDimensionsFromLabel(t6, e15, i28), n37 = Math.max(o37.width + this.margin.right + this.margin.left, o37.height + this.margin.top + this.margin.bottom);
                        this.options.size = n37 / 2, this.width = n37, this.height = n37, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t6, e15, i28, o38, n38, r30) {
                    this.resize(t6, o38, n38), this.left = e15 - this.width / 2, this.top = i28 - this.height / 2, this._drawRawCircle(t6, e15, i28, r30), this.updateBoundingBox(e15, i28), this.labelModule.draw(t6, this.left + this.textSize.width / 2 + this.margin.left, i28, o38, n38);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6, e15) {
                    this.boundingBox.top = e15 - this.options.size, this.boundingBox.left = t6 - this.options.size, this.boundingBox.right = t6 + this.options.size, this.boundingBox.bottom = e15 + this.options.size;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6) {
                    return t6 && this.resize(t6), 0.5 * this.width;
                }
            }
        ]), i24;
    }(Mg);
    function Bg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i24, o38 = Eg(t4);
            if (e13) {
                var n38 = Eg(this).constructor;
                i24 = yg(o38, arguments, n38);
            } else i24 = o38.apply(this, arguments);
            return _g(this, i24);
        };
    }
    var Ig = function(t4) {
        kg(i24, t4);
        var e13 = Bg(i24);
        function i24(t6, o38, n39, r30, s25) {
            var a23;
            return Ra(this, i24), (a23 = e13.call(this, t6, o38, n39)).setImages(r30, s25), a23;
        }
        return Ha(i24, [
            {
                key: "resize",
                value: function(t6) {
                    var e15 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.selected, i28 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : this.hover, o38 = (void 0) === this.imageObj.src || (void 0) === this.imageObj.width || (void 0) === this.imageObj.height;
                    if (o38) {
                        var n39 = 2 * this.options.size;
                        return this.width = n39, this.height = n39, void (this.radius = 0.5 * this.width);
                    }
                    this.needsRefresh(e15, i28) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t6, e15, i28, o38, n40, r30) {
                    this.switchImages(o38), this.resize();
                    var s25 = e15, a23 = i28;
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e15, this.top = i28, s25 += this.width / 2, a23 += this.height / 2) : (this.left = e15 - this.width / 2, this.top = i28 - this.height / 2), this._drawRawCircle(t6, s25, a23, r30), t6.save(), t6.clip(), this._drawImageAtPosition(t6, r30), t6.restore(), this._drawImageLabel(t6, s25, a23, o38, n40), this.updateBoundingBox(e15, i28);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6, e15) {
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.boundingBox.top = e15, this.boundingBox.left = t6, this.boundingBox.right = t6 + 2 * this.options.size, this.boundingBox.bottom = e15 + 2 * this.options.size) : (this.boundingBox.top = e15 - this.options.size, this.boundingBox.left = t6 - this.options.size, this.boundingBox.right = t6 + this.options.size, this.boundingBox.bottom = e15 + this.options.size), this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6) {
                    return t6 && this.resize(t6), 0.5 * this.width;
                }
            }
        ]), i24;
    }(Mg);
    function zg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i24, o38 = Eg(t4);
            if (e13) {
                var n40 = Eg(this).constructor;
                i24 = yg(o38, arguments, n40);
            } else i24 = o38.apply(this, arguments);
            return _g(this, i24);
        };
    }
    var Fg = function(t4) {
        kg(i24, t4);
        var e13 = zg(i24);
        function i24(t6, o38, n41) {
            return Ra(this, i24), e13.call(this, t6, o38, n41);
        }
        return Ha(i24, [
            {
                key: "resize",
                value: function(t6) {
                    var e15 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.selected, i28 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : this.hover, o38 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : {
                        size: this.options.size
                    };
                    if (this.needsRefresh(e15, i28)) {
                        var n41, r30;
                        this.labelModule.getTextSize(t6, e15, i28);
                        var s25 = 2 * o38.size;
                        this.width = null !== (n41 = this.customSizeWidth) && (void 0) !== n41 ? n41 : s25, this.height = null !== (r30 = this.customSizeHeight) && (void 0) !== r30 ? r30 : s25, this.radius = 0.5 * this.width;
                    }
                }
            },
            {
                key: "_drawShape",
                value: function(t6, e15, i28, o38, n42, r31, s26, a23) {
                    var h15, d10 = this;
                    return this.resize(t6, r31, s26, a23), this.left = o38 - this.width / 2, this.top = n42 - this.height / 2, this.initContextForDraw(t6, a23), (h15 = e15, Object.prototype.hasOwnProperty.call(ui, h15) ? ui[h15] : function(t7) {
                        for(var e16 = arguments.length, i29 = new Array(e16 > 1 ? e16 - 1 : 0), o39 = 1; o39 < e16; o39++)i29[o39 - 1] = arguments[o39];
                        CanvasRenderingContext2D.prototype[h15].call(t7, i29);
                    })(t6, o38, n42, a23.size), this.performFill(t6, a23), (void 0) !== this.options.icon && (void 0) !== this.options.icon.code && (t6.font = (r31 ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome"), t6.fillStyle = this.options.icon.color || "black", t6.textAlign = "center", t6.textBaseline = "middle", t6.fillText(this.options.icon.code, o38, n42)), {
                        drawExternalLabel: function() {
                            if ((void 0) !== d10.options.label) {
                                d10.labelModule.calculateLabelSize(t6, r31, s26, o38, n42, "hanging");
                                var e16 = n42 + 0.5 * d10.height + 0.5 * d10.labelModule.size.height;
                                d10.labelModule.draw(t6, o38, e16, r31, s26, "hanging");
                            }
                            d10.updateBoundingBox(o38, n42);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6, e15) {
                    this.boundingBox.top = e15 - this.options.size, this.boundingBox.left = t6 - this.options.size, this.boundingBox.right = t6 + this.options.size, this.boundingBox.bottom = e15 + this.options.size, (void 0) !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height));
                }
            }
        ]), i24;
    }(Og);
    function Ng(t4, e13) {
        var i24 = Gh(t4);
        if (ha) {
            var o38 = ha(t4);
            e13 && (o38 = $d(o38).call(o38, function(e15) {
                return ba(t4, e15).enumerable;
            })), i24.push.apply(i24, o38);
        }
        return i24;
    }
    function Ag(t4) {
        for(var e13 = 1; e13 < arguments.length; e13++){
            var i24, o39 = null != arguments[e13] ? arguments[e13] : {
            };
            if (e13 % 2) nd(i24 = Ng(Object(o39), !0)).call(i24, function(e15) {
                Wa(t4, e15, o39[e15]);
            });
            else if (Ta) Ba(t4, Ta(o39));
            else {
                var n42;
                nd(n42 = Ng(Object(o39))).call(n42, function(e15) {
                    Aa(t4, e15, ba(o39, e15));
                });
            }
        }
        return t4;
    }
    function Rg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o40 = Eg(t4);
            if (e13) {
                var n43 = Eg(this).constructor;
                i28 = yg(o40, arguments, n43);
            } else i28 = o40.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var jg = function(t4) {
        kg(i28, t4);
        var e13 = Rg(i28);
        function i28(t6, o40, n44, r31) {
            var s26;
            return Ra(this, i28), (s26 = e13.call(this, t6, o40, n44, r31)).ctxRenderer = r31, s26;
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o40, n44, r31) {
                    this.resize(t6, o40, n44, r31), this.left = e15 - this.width / 2, this.top = i29 - this.height / 2, t6.save();
                    var s26 = this.ctxRenderer({
                        ctx: t6,
                        id: this.options.id,
                        x: e15,
                        y: i29,
                        state: {
                            selected: o40,
                            hover: n44
                        },
                        style: Ag({
                        }, r31),
                        label: this.options.label
                    });
                    if (null != s26.drawNode && s26.drawNode(), t6.restore(), s26.drawExternalLabel) {
                        var a23 = s26.drawExternalLabel;
                        s26.drawExternalLabel = function() {
                            t6.save(), a23(), t6.restore();
                        };
                    }
                    return s26.nodeDimensions && (this.customSizeWidth = s26.nodeDimensions.width, this.customSizeHeight = s26.nodeDimensions.height), s26;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Fg);
    function Lg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o40 = Eg(t4);
            if (e13) {
                var n44 = Eg(this).constructor;
                i28 = yg(o40, arguments, n44);
            } else i28 = o40.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var Hg = function(t4) {
        kg(i28, t4);
        var e13 = Lg(i28);
        function i28(t6, o40, n45) {
            var r31;
            return Ra(this, i28), (r31 = e13.call(this, t6, o40, n45))._setMargins(n45), r31;
        }
        return Ha(i28, [
            {
                key: "resize",
                value: function(t6, e15, i29) {
                    if (this.needsRefresh(e15, i29)) {
                        var o40 = this.getDimensionsFromLabel(t6, e15, i29).width + this.margin.right + this.margin.left;
                        this.width = o40, this.height = o40, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t6, e15, i29, o41, n45, r31) {
                    this.resize(t6, o41, n45), this.left = e15 - this.width / 2, this.top = i29 - this.height / 2, this.initContextForDraw(t6, r31), li(t6, e15 - this.width / 2, i29 - this.height / 2, this.width, this.height), this.performFill(t6, r31), this.updateBoundingBox(e15, i29, t6, o41, n45), this.labelModule.draw(t6, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o41, n45);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Og);
    function Wg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o41 = Eg(t4);
            if (e13) {
                var n45 = Eg(this).constructor;
                i28 = yg(o41, arguments, n45);
            } else i28 = o41.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var Vg = function(t4) {
        kg(i28, t4);
        var e13 = Wg(i28);
        function i28(t6, o41, n46) {
            return Ra(this, i28), e13.call(this, t6, o41, n46);
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o41, n46, r31) {
                    return this._drawShape(t6, "diamond", 4, e15, i29, o41, n46, r31);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Fg);
    function qg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o41 = Eg(t4);
            if (e13) {
                var n46 = Eg(this).constructor;
                i28 = yg(o41, arguments, n46);
            } else i28 = o41.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var Ug = function(t4) {
        kg(i28, t4);
        var e13 = qg(i28);
        function i28(t6, o41, n47) {
            return Ra(this, i28), e13.call(this, t6, o41, n47);
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o41, n47, r31) {
                    return this._drawShape(t6, "circle", 2, e15, i29, o41, n47, r31);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6) {
                    return t6 && this.resize(t6), this.options.size;
                }
            }
        ]), i28;
    }(Fg);
    function Yg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o41 = Eg(t4);
            if (e13) {
                var n47 = Eg(this).constructor;
                i28 = yg(o41, arguments, n47);
            } else i28 = o41.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var Xg = function(t4) {
        kg(i28, t4);
        var e13 = Yg(i28);
        function i28(t6, o41, n48) {
            return Ra(this, i28), e13.call(this, t6, o41, n48);
        }
        return Ha(i28, [
            {
                key: "resize",
                value: function(t6) {
                    var e15 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.selected, i29 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e15, i29)) {
                        var o41 = this.getDimensionsFromLabel(t6, e15, i29);
                        this.height = 2 * o41.height, this.width = o41.width + o41.height, this.radius = 0.5 * this.width;
                    }
                }
            },
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n48, r31) {
                    this.resize(t6, o42, n48), this.left = e15 - 0.5 * this.width, this.top = i29 - 0.5 * this.height, this.initContextForDraw(t6, r31), di(t6, this.left, this.top, this.width, this.height), this.performFill(t6, r31), this.updateBoundingBox(e15, i29, t6, o42, n48), this.labelModule.draw(t6, e15, i29, o42, n48);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    t6 && this.resize(t6);
                    var i29 = 0.5 * this.width, o42 = 0.5 * this.height, n48 = Math.sin(e15) * i29, r31 = Math.cos(e15) * o42;
                    return i29 * o42 / Math.sqrt(n48 * n48 + r31 * r31);
                }
            }
        ]), i28;
    }(Og);
    function Gg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n48 = Eg(this).constructor;
                i28 = yg(o42, arguments, n48);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var Kg = function(t4) {
        kg(i28, t4);
        var e13 = Gg(i28);
        function i28(t6, o42, n49) {
            var r31;
            return Ra(this, i28), (r31 = e13.call(this, t6, o42, n49))._setMargins(n49), r31;
        }
        return Ha(i28, [
            {
                key: "resize",
                value: function(t6, e15, i29) {
                    this.needsRefresh(e15, i29) && (this.iconSize = {
                        width: Number(this.options.icon.size),
                        height: Number(this.options.icon.size)
                    }, this.width = this.iconSize.width + this.margin.right + this.margin.left, this.height = this.iconSize.height + this.margin.top + this.margin.bottom, this.radius = 0.5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n49, r31) {
                    var s26 = this;
                    return this.resize(t6, o42, n49), this.options.icon.size = this.options.icon.size || 50, this.left = e15 - this.width / 2, this.top = i29 - this.height / 2, this._icon(t6, e15, i29, o42, n49, r31), {
                        drawExternalLabel: function() {
                            if ((void 0) !== s26.options.label) s26.labelModule.draw(t6, s26.left + s26.iconSize.width / 2 + s26.margin.left, i29 + s26.height / 2 + 5, o42);
                            s26.updateBoundingBox(e15, i29);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6, e15) {
                    if (this.boundingBox.top = e15 - 0.5 * this.options.icon.size, this.boundingBox.left = t6 - 0.5 * this.options.icon.size, this.boundingBox.right = t6 + 0.5 * this.options.icon.size, this.boundingBox.bottom = e15 + 0.5 * this.options.icon.size, (void 0) !== this.options.label && this.labelModule.size.width > 0) this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + 5);
                }
            },
            {
                key: "_icon",
                value: function(t6, e15, i29, o42, n49, r31) {
                    var s26 = Number(this.options.icon.size);
                    (void 0) !== this.options.icon.code ? (t6.font = [
                        null != this.options.icon.weight ? this.options.icon.weight : o42 ? "bold" : "",
                        (null != this.options.icon.weight && o42 ? 5 : 0) + s26 + "px",
                        this.options.icon.face
                    ].join(" "), t6.fillStyle = this.options.icon.color || "black", t6.textAlign = "center", t6.textBaseline = "middle", this.enableShadow(t6, r31), t6.fillText(this.options.icon.code, e15, i29), this.disableShadow(t6, r31)) : console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Og);
    function $g(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n49 = Eg(this).constructor;
                i28 = yg(o42, arguments, n49);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var Zg = function(t4) {
        kg(i28, t4);
        var e13 = $g(i28);
        function i28(t6, o42, n50, r31, s26) {
            var a24;
            return Ra(this, i28), (a24 = e13.call(this, t6, o42, n50)).setImages(r31, s26), a24;
        }
        return Ha(i28, [
            {
                key: "resize",
                value: function(t6) {
                    var e15 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.selected, i29 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : this.hover, o42 = (void 0) === this.imageObj.src || (void 0) === this.imageObj.width || (void 0) === this.imageObj.height;
                    if (o42) {
                        var n50 = 2 * this.options.size;
                        return this.width = n50, void (this.height = n50);
                    }
                    this.needsRefresh(e15, i29) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n51, r31) {
                    t6.save(), this.switchImages(o42), this.resize();
                    var s26 = e15, a24 = i29;
                    if ("top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e15, this.top = i29, s26 += this.width / 2, a24 += this.height / 2) : (this.left = e15 - this.width / 2, this.top = i29 - this.height / 2), !0 === this.options.shapeProperties.useBorderWithImage) {
                        var h15 = this.options.borderWidth, d10 = this.options.borderWidthSelected || 2 * this.options.borderWidth, l8 = (o42 ? d10 : h15) / this.body.view.scale;
                        t6.lineWidth = Math.min(this.width, l8), t6.beginPath();
                        var c6 = o42 ? this.options.color.highlight.border : n51 ? this.options.color.hover.border : this.options.color.border, u6 = o42 ? this.options.color.highlight.background : n51 ? this.options.color.hover.background : this.options.color.background;
                        (void 0) !== r31.opacity && (c6 = uf(c6, r31.opacity), u6 = uf(u6, r31.opacity)), t6.strokeStyle = c6, t6.fillStyle = u6, t6.rect(this.left - 0.5 * t6.lineWidth, this.top - 0.5 * t6.lineWidth, this.width + t6.lineWidth, this.height + t6.lineWidth), Ql(t6).call(t6), this.performStroke(t6, r31), t6.closePath();
                    }
                    this._drawImageAtPosition(t6, r31), this._drawImageLabel(t6, s26, a24, o42, n51), this.updateBoundingBox(e15, i29), t6.restore();
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6, e15) {
                    this.resize(), "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = t6, this.top = e15) : (this.left = t6 - this.width / 2, this.top = e15 - this.height / 2), this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width, (void 0) !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset));
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Mg);
    function Qg(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n51 = Eg(this).constructor;
                i28 = yg(o42, arguments, n51);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var Jg = function(t4) {
        kg(i28, t4);
        var e13 = Qg(i28);
        function i28(t6, o42, n52) {
            return Ra(this, i28), e13.call(this, t6, o42, n52);
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n52, r31) {
                    return this._drawShape(t6, "square", 2, e15, i29, o42, n52, r31);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Fg);
    function ty(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n52 = Eg(this).constructor;
                i28 = yg(o42, arguments, n52);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var ey = function(t4) {
        kg(i28, t4);
        var e13 = ty(i28);
        function i28(t6, o42, n53) {
            return Ra(this, i28), e13.call(this, t6, o42, n53);
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n53, r31) {
                    return this._drawShape(t6, "hexagon", 4, e15, i29, o42, n53, r31);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Fg);
    function iy(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n53 = Eg(this).constructor;
                i28 = yg(o42, arguments, n53);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var oy = function(t4) {
        kg(i28, t4);
        var e13 = iy(i28);
        function i28(t6, o42, n54) {
            return Ra(this, i28), e13.call(this, t6, o42, n54);
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n54, r31) {
                    return this._drawShape(t6, "star", 4, e15, i29, o42, n54, r31);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Fg);
    function ny(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n54 = Eg(this).constructor;
                i28 = yg(o42, arguments, n54);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var ry = function(t4) {
        kg(i28, t4);
        var e13 = ny(i28);
        function i28(t6, o42, n55) {
            var r31;
            return Ra(this, i28), (r31 = e13.call(this, t6, o42, n55))._setMargins(n55), r31;
        }
        return Ha(i28, [
            {
                key: "resize",
                value: function(t6, e15, i29) {
                    this.needsRefresh(e15, i29) && (this.textSize = this.labelModule.getTextSize(t6, e15, i29), this.width = this.textSize.width + this.margin.right + this.margin.left, this.height = this.textSize.height + this.margin.top + this.margin.bottom, this.radius = 0.5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n55, r31) {
                    this.resize(t6, o42, n55), this.left = e15 - this.width / 2, this.top = i29 - this.height / 2, this.enableShadow(t6, r31), this.labelModule.draw(t6, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o42, n55), this.disableShadow(t6, r31), this.updateBoundingBox(e15, i29, t6, o42, n55);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Og);
    function sy(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n55 = Eg(this).constructor;
                i28 = yg(o42, arguments, n55);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var ay = function(t4) {
        kg(i28, t4);
        var e13 = sy(i28);
        function i28(t6, o42, n56) {
            return Ra(this, i28), e13.call(this, t6, o42, n56);
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n56, r31) {
                    return this._drawShape(t6, "triangle", 3, e15, i29, o42, n56, r31);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Fg);
    function hy(t4) {
        var e13 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i28, o42 = Eg(t4);
            if (e13) {
                var n56 = Eg(this).constructor;
                i28 = yg(o42, arguments, n56);
            } else i28 = o42.apply(this, arguments);
            return _g(this, i28);
        };
    }
    var dy = function(t4) {
        kg(i28, t4);
        var e13 = hy(i28);
        function i28(t6, o42, n57) {
            return Ra(this, i28), e13.call(this, t6, o42, n57);
        }
        return Ha(i28, [
            {
                key: "draw",
                value: function(t6, e15, i29, o42, n57, r31) {
                    return this._drawShape(t6, "triangleDown", 3, e15, i29, o42, n57, r31);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this._distanceToBorder(t6, e15);
                }
            }
        ]), i28;
    }(Fg);
    function ly(t4, e13) {
        var i28 = Gh(t4);
        if (ha) {
            var o42 = ha(t4);
            e13 && (o42 = $d(o42).call(o42, function(e15) {
                return ba(t4, e15).enumerable;
            })), i28.push.apply(i28, o42);
        }
        return i28;
    }
    function cy(t4) {
        for(var e13 = 1; e13 < arguments.length; e13++){
            var i28, o43 = null != arguments[e13] ? arguments[e13] : {
            };
            if (e13 % 2) nd(i28 = ly(Object(o43), !0)).call(i28, function(e15) {
                Wa(t4, e15, o43[e15]);
            });
            else if (Ta) Ba(t4, Ta(o43));
            else {
                var n57;
                nd(n57 = ly(Object(o43))).call(n57, function(e15) {
                    Aa(t4, e15, ba(o43, e15));
                });
            }
        }
        return t4;
    }
    var uy = function() {
        function t4(e13, i29, o44, n58, r31, s26) {
            Ra(this, t4), this.options = kf(r31), this.globalOptions = r31, this.defaultOptions = s26, this.body = i29, this.edges = [], this.id = void 0, this.imagelist = o44, this.grouplist = n58, this.x = void 0, this.y = void 0, this.baseSize = this.options.size, this.baseFontSize = this.options.font.size, this.predefinedPosition = !1, this.selected = !1, this.hover = !1, this.labelModule = new rg(this.body, this.options, !1), this.setOptions(e13);
        }
        return Ha(t4, [
            {
                key: "attachEdge",
                value: function(t6) {
                    var e13;
                    -1 === Cl(e13 = this.edges).call(e13, t6) && this.edges.push(t6);
                }
            },
            {
                key: "detachEdge",
                value: function(t6) {
                    var e13, i29, o44 = Cl(e13 = this.edges).call(e13, t6);
                    -1 != o44 && Od(i29 = this.edges).call(i29, o44, 1);
                }
            },
            {
                key: "setOptions",
                value: function(e13) {
                    var i29 = this.options.shape;
                    if (e13) {
                        if ((void 0) !== e13.color && (this._localColor = e13.color), (void 0) !== e13.id && (this.id = e13.id), (void 0) === this.id) throw new Error("Node must have an id");
                        t4.checkMass(e13, this.id), (void 0) !== e13.x && (null === e13.x ? (this.x = void 0, this.predefinedPosition = !1) : (this.x = yl(e13.x), this.predefinedPosition = !0)), (void 0) !== e13.y && (null === e13.y ? (this.y = void 0, this.predefinedPosition = !1) : (this.y = yl(e13.y), this.predefinedPosition = !0)), (void 0) !== e13.size && (this.baseSize = e13.size), (void 0) !== e13.value && (e13.value = jv(e13.value)), t4.parseOptions(this.options, e13, !0, this.globalOptions, this.grouplist);
                        var o44 = [
                            e13,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = Uv("node", o44), this._load_images(), this.updateLabelModule(e13), (void 0) !== e13.opacity && t4.checkOpacity(e13.opacity) && (this.options.opacity = e13.opacity), this.updateShape(i29), (void 0) !== e13.hidden || (void 0) !== e13.physics;
                    }
                }
            },
            {
                key: "_load_images",
                value: function() {
                    if (("circularImage" === this.options.shape || "image" === this.options.shape) && (void 0) === this.options.image) throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
                    if ((void 0) !== this.options.image) {
                        if ((void 0) === this.imagelist) throw new Error("Internal Error: No images provided");
                        if ("string" == typeof this.options.image) this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
                        else {
                            if ((void 0) === this.options.image.unselected) throw new Error("No unselected image provided");
                            this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id), (void 0) !== this.options.image.selected ? this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id) : this.imageObjAlt = void 0;
                        }
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t6 = {
                        color: this.options.color.background,
                        opacity: this.options.opacity,
                        borderWidth: this.options.borderWidth,
                        borderColor: this.options.color.border,
                        size: this.options.size,
                        borderDashes: this.options.shapeProperties.borderDashes,
                        borderRadius: this.options.shapeProperties.borderRadius,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y
                    };
                    if (this.selected || this.hover ? !0 === this.chooser ? this.selected ? (null != this.options.borderWidthSelected ? t6.borderWidth = this.options.borderWidthSelected : t6.borderWidth *= 2, t6.color = this.options.color.highlight.background, t6.borderColor = this.options.color.highlight.border, t6.shadow = this.options.shadow.enabled) : this.hover && (t6.color = this.options.color.hover.background, t6.borderColor = this.options.color.hover.border, t6.shadow = this.options.shadow.enabled) : "function" == typeof this.chooser && (this.chooser(t6, this.options.id, this.selected, this.hover), !1 === t6.shadow && (t6.shadowColor === this.options.shadow.color && t6.shadowSize === this.options.shadow.size && t6.shadowX === this.options.shadow.x && t6.shadowY === this.options.shadow.y || (t6.shadow = !0))) : t6.shadow = this.options.shadow.enabled, (void 0) !== this.options.opacity) {
                        var e13 = this.options.opacity;
                        t6.borderColor = uf(t6.borderColor, e13), t6.color = uf(t6.color, e13), t6.shadowColor = uf(t6.shadowColor, e13);
                    }
                    return t6;
                }
            },
            {
                key: "updateLabelModule",
                value: function(e15) {
                    (void 0) !== this.options.label && null !== this.options.label || (this.options.label = ""), t4.updateGroupOptions(this.options, cy(cy({
                    }, e15), {
                    }, {
                        color: e15 && e15.color || this._localColor || void 0
                    }), this.grouplist);
                    var i29 = this.grouplist.get(this.options.group, !1), o45 = [
                        e15,
                        this.options,
                        i29,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, o45), (void 0) !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateShape",
                value: function(t6) {
                    if (t6 === this.options.shape && this.shape) this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
                    else switch(this.options.shape){
                        case "box":
                            this.shape = new Sg(this.options, this.body, this.labelModule);
                            break;
                        case "circle":
                            this.shape = new Dg(this.options, this.body, this.labelModule);
                            break;
                        case "circularImage":
                            this.shape = new Ig(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "custom":
                            this.shape = new jg(this.options, this.body, this.labelModule, this.options.ctxRenderer);
                            break;
                        case "database":
                            this.shape = new Hg(this.options, this.body, this.labelModule);
                            break;
                        case "diamond":
                            this.shape = new Vg(this.options, this.body, this.labelModule);
                            break;
                        case "dot":
                            this.shape = new Ug(this.options, this.body, this.labelModule);
                            break;
                        case "ellipse":
                            this.shape = new Xg(this.options, this.body, this.labelModule);
                            break;
                        case "icon":
                            this.shape = new Kg(this.options, this.body, this.labelModule);
                            break;
                        case "image":
                            this.shape = new Zg(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "square":
                            this.shape = new Jg(this.options, this.body, this.labelModule);
                            break;
                        case "hexagon":
                            this.shape = new ey(this.options, this.body, this.labelModule);
                            break;
                        case "star":
                            this.shape = new oy(this.options, this.body, this.labelModule);
                            break;
                        case "text":
                            this.shape = new ry(this.options, this.body, this.labelModule);
                            break;
                        case "triangle":
                            this.shape = new ay(this.options, this.body, this.labelModule);
                            break;
                        case "triangleDown":
                            this.shape = new dy(this.options, this.body, this.labelModule);
                            break;
                        default:
                            this.shape = new Xg(this.options, this.body, this.labelModule);
                    }
                    this.needsRefresh();
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0, this.needsRefresh();
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1, this.needsRefresh();
                }
            },
            {
                key: "needsRefresh",
                value: function() {
                    this.shape.refreshNeeded = !0;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.options.title;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t6, e15) {
                    return this.shape.distanceToBorder(t6, e15);
                }
            },
            {
                key: "isFixed",
                value: function() {
                    return this.options.fixed.x && this.options.fixed.y;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "getLabelSize",
                value: function() {
                    return this.labelModule.size();
                }
            },
            {
                key: "setValueRange",
                value: function(t6, e15, i29) {
                    if ((void 0) !== this.options.value) {
                        var o45 = this.options.scaling.customScalingFunction(t6, e15, i29, this.options.value), n58 = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r31 = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o45 * r31;
                        }
                        this.options.size = this.options.scaling.min + o45 * n58;
                    } else this.options.size = this.baseSize, this.options.font.size = this.baseFontSize;
                    this.updateLabelModule();
                }
            },
            {
                key: "draw",
                value: function(t6) {
                    var e15 = this.getFormattingValues();
                    return this.shape.draw(t6, this.x, this.y, this.selected, this.hover, e15) || {
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t6) {
                    this.shape.updateBoundingBox(this.x, this.y, t6);
                }
            },
            {
                key: "resize",
                value: function(t6) {
                    var e15 = this.getFormattingValues();
                    this.shape.resize(t6, this.selected, this.hover, e15);
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t6) {
                    var e15 = [];
                    return this.labelModule.visible() && Yv(this.labelModule.getSize(), t6) && e15.push({
                        nodeId: this.id,
                        labelId: 0
                    }), Yv(this.shape.boundingBox, t6) && e15.push({
                        nodeId: this.id
                    }), e15;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t6) {
                    return this.shape.left < t6.right && this.shape.left + this.shape.width > t6.left && this.shape.top < t6.bottom && this.shape.top + this.shape.height > t6.top;
                }
            },
            {
                key: "isBoundingBoxOverlappingWith",
                value: function(t6) {
                    return this.shape.boundingBox.left < t6.right && this.shape.boundingBox.right > t6.left && this.shape.boundingBox.top < t6.bottom && this.shape.boundingBox.bottom > t6.top;
                }
            }
        ], [
            {
                key: "checkOpacity",
                value: function(t6) {
                    return 0 <= t6 && t6 <= 1;
                }
            },
            {
                key: "checkCoordinateOrigin",
                value: function(t6) {
                    return (void 0) === t6 || "center" === t6 || "top-left" === t6;
                }
            },
            {
                key: "updateGroupOptions",
                value: function(e15, i29, o46) {
                    var n59;
                    if ((void 0) !== o46) {
                        var r32 = e15.group;
                        if ((void 0) !== i29 && (void 0) !== i29.group && r32 !== i29.group) throw new Error("updateGroupOptions: group values in options don't match.");
                        if ("number" == typeof r32 || "string" == typeof r32 && "" != r32) {
                            var s26 = o46.get(r32);
                            (void 0) !== s26.opacity && (void 0) === i29.opacity && (t4.checkOpacity(s26.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + s26.opacity), s26.opacity = void 0));
                            var a24 = $d(n59 = qv(i29)).call(n59, function(t6) {
                                return null != i29[t6];
                            });
                            a24.push("font"), rf(a24, e15, s26), e15.color = pf(e15.color);
                        }
                    }
                }
            },
            {
                key: "parseOptions",
                value: function(e15, i29) {
                    var o46 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2], n59 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : {
                    }, r33 = arguments.length > 4 ? arguments[4] : void 0, s27 = [
                        "color",
                        "fixed",
                        "shadow"
                    ];
                    if (rf(s27, e15, i29, o46), t4.checkMass(i29), (void 0) !== e15.opacity && (t4.checkOpacity(e15.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + e15.opacity), e15.opacity = void 0)), (void 0) !== i29.opacity && (t4.checkOpacity(i29.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + i29.opacity), i29.opacity = void 0)), i29.shapeProperties && !t4.checkCoordinateOrigin(i29.shapeProperties.coordinateOrigin) && console.error("Invalid option for node coordinateOrigin, found: " + i29.shapeProperties.coordinateOrigin), _f(e15, i29, "shadow", n59), (void 0) !== i29.color && null !== i29.color) {
                        var a25 = pf(i29.color);
                        of(e15.color, a25);
                    } else !0 === o46 && null === i29.color && (e15.color = kf(n59.color));
                    (void 0) !== i29.fixed && null !== i29.fixed && ("boolean" == typeof i29.fixed ? (e15.fixed.x = i29.fixed, e15.fixed.y = i29.fixed) : ((void 0) !== i29.fixed.x && "boolean" == typeof i29.fixed.x && (e15.fixed.x = i29.fixed.x), (void 0) !== i29.fixed.y && "boolean" == typeof i29.fixed.y && (e15.fixed.y = i29.fixed.y))), !0 === o46 && null === i29.font && (e15.font = kf(n59.font)), t4.updateGroupOptions(e15, i29, r33), (void 0) !== i29.scaling && _f(e15.scaling, i29.scaling, "label", n59.scaling);
                }
            },
            {
                key: "checkMass",
                value: function(t6, e15) {
                    if ((void 0) !== t6.mass && t6.mass <= 0) {
                        var i29 = "";
                        (void 0) !== e15 && (i29 = " in node id: " + e15), console.error("%cNegative or zero mass disallowed" + i29 + ", setting mass to 1.", Ff), t6.mass = 1;
                    }
                }
            }
        ]), t4;
    }();
    function fy(t4, e15) {
        var i30 = (void 0) !== Nh && xr(t4) || t4["@@iterator"];
        if (!i30) {
            if (Hh(t4) || (i30 = (function(t6, e17) {
                var i31;
                if (!t6) return;
                if ("string" == typeof t6) return py(t6, e17);
                var o46 = Lh(i31 = Object.prototype.toString.call(t6)).call(i31, 8, -1);
                "Object" === o46 && t6.constructor && (o46 = t6.constructor.name);
                if ("Map" === o46 || "Set" === o46) return rr(t6);
                if ("Arguments" === o46 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o46)) return py(t6, e17);
            })(t4)) || e15 && t4 && "number" == typeof t4.length) {
                i30 && (t4 = i30);
                var o46 = 0, n59 = function() {
                };
                return {
                    s: n59,
                    n: function() {
                        return o46 >= t4.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t4[o46++]
                        };
                    },
                    e: function(t6) {
                        throw t6;
                    },
                    f: n59
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r33, s27 = !0, a26 = !1;
        return {
            s: function() {
                i30 = i30.call(t4);
            },
            n: function() {
                var t6 = i30.next();
                return s27 = t6.done, t6;
            },
            e: function(t6) {
                a26 = !0, r33 = t6;
            },
            f: function() {
                try {
                    s27 || null == i30.return || i30.return();
                } finally{
                    if (a26) throw r33;
                }
            }
        };
    }
    function py(t4, e15) {
        (null == e15 || e15 > t4.length) && (e15 = t4.length);
        for(var i30 = 0, o47 = new Array(e15); i30 < e15; i30++)o47[i30] = t4[i30];
        return o47;
    }
    var vy = function() {
        function t4(e15, i30, o47, n60) {
            var r33, s27 = this;
            if (Ra(this, t4), this.body = e15, this.images = i30, this.groups = o47, this.layoutEngine = n60, this.body.functions.createNode = si(r33 = this.create).call(r33, this), this.nodesListeners = {
                add: function(t6, e17) {
                    s27.add(e17.items);
                },
                update: function(t6, e17) {
                    s27.update(e17.items, e17.data, e17.oldData);
                },
                remove: function(t6, e17) {
                    s27.remove(e17.items);
                }
            }, this.defaultOptions = {
                borderWidth: 1,
                borderWidthSelected: void 0,
                brokenImage: void 0,
                color: {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                opacity: void 0,
                fixed: {
                    x: !1,
                    y: !1
                },
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 0,
                    strokeColor: "#ffffff",
                    align: "center",
                    vadjust: 0,
                    multi: !1,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "monospace",
                        vadjust: 2
                    }
                },
                group: void 0,
                hidden: !1,
                icon: {
                    face: "FontAwesome",
                    code: void 0,
                    size: 50,
                    color: "#2B7CE9"
                },
                image: void 0,
                imagePadding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                },
                label: void 0,
                labelHighlightBold: !0,
                level: void 0,
                margin: {
                    top: 5,
                    right: 5,
                    bottom: 5,
                    left: 5
                },
                mass: 1,
                physics: !0,
                scaling: {
                    min: 10,
                    max: 30,
                    label: {
                        enabled: !1,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t6, e17, i31, o48) {
                        if (e17 === t6) return 0.5;
                        var n61 = 1 / (e17 - t6);
                        return Math.max(0, (o48 - t6) * n61);
                    }
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                shape: "ellipse",
                shapeProperties: {
                    borderDashes: !1,
                    borderRadius: 6,
                    interpolation: !0,
                    useImageSize: !1,
                    useBorderWithImage: !1,
                    coordinateOrigin: "center"
                },
                size: 25,
                title: void 0,
                value: void 0,
                x: void 0,
                y: void 0
            }, this.defaultOptions.mass <= 0) throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
            this.options = kf(this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t4, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t6, e15, i30 = this;
                    this.body.emitter.on("refreshNodes", si(t6 = this.refresh).call(t6, this)), this.body.emitter.on("refresh", si(e15 = this.refresh).call(e15, this)), this.body.emitter.on("destroy", function() {
                        lf(i30.nodesListeners, function(t7, e17) {
                            i30.body.data.nodes && i30.body.data.nodes.off(e17, t7);
                        }), delete i30.body.functions.createNode, delete i30.nodesListeners.add, delete i30.nodesListeners.update, delete i30.nodesListeners.remove, delete i30.nodesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t6) {
                    if ((void 0) !== t6) {
                        if (uy.parseOptions(this.options, t6), (void 0) !== t6.opacity && (Tv(t6.opacity) || !Pv(t6.opacity) || t6.opacity < 0 || t6.opacity > 1 ? console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + t6.opacity) : this.options.opacity = t6.opacity), (void 0) !== t6.shape) for(var e15 in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e15) && this.body.nodes[e15].updateShape();
                        if ((void 0) !== t6.font || (void 0) !== t6.widthConstraint || (void 0) !== t6.heightConstraint) for(var i30 = 0, o47 = Gh(this.body.nodes); i30 < o47.length; i30++){
                            var n60 = o47[i30];
                            this.body.nodes[n60].updateLabelModule(), this.body.nodes[n60].needsRefresh();
                        }
                        if ((void 0) !== t6.size) for(var r33 in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r33) && this.body.nodes[r33].needsRefresh();
                        (void 0) === t6.hidden && (void 0) === t6.physics || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t6) {
                    var i31 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1], o48 = this.body.data.nodes;
                    if (e.isDataViewLike("id", t6)) this.body.data.nodes = t6;
                    else if (Hh(t6)) this.body.data.nodes = new e.DataSet, this.body.data.nodes.add(t6);
                    else {
                        if (t6) throw new TypeError("Array or DataSet expected");
                        this.body.data.nodes = new e.DataSet;
                    }
                    if (o48 && lf(this.nodesListeners, function(t7, e17) {
                        o48.off(e17, t7);
                    }), this.body.nodes = {
                    }, this.body.data.nodes) {
                        var n61 = this;
                        lf(this.nodesListeners, function(t7, e17) {
                            n61.body.data.nodes.on(e17, t7);
                        });
                        var r34 = this.body.data.nodes.getIds();
                        this.add(r34, !0);
                    }
                    !1 === i31 && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t6) {
                    for(var e17, i31 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1], o48 = [], n62 = 0; n62 < t6.length; n62++){
                        e17 = t6[n62];
                        var r35 = this.body.data.nodes.get(e17), s27 = this.create(r35);
                        o48.push(s27), this.body.nodes[e17] = s27;
                    }
                    this.layoutEngine.positionInitially(o48), !1 === i31 && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t6, e17, i31) {
                    for(var o48 = this.body.nodes, n62 = !1, r36 = 0; r36 < t6.length; r36++){
                        var s28 = t6[r36], a26 = o48[s28], h16 = e17[r36];
                        (void 0) !== a26 ? a26.setOptions(h16) && (n62 = !0) : (n62 = !0, a26 = this.create(h16), o48[s28] = a26);
                    }
                    n62 || (void 0) === i31 || (n62 = zv(e17).call(e17, function(t7, e18) {
                        var o49 = i31[e18];
                        return o49 && o49.level !== t7.level;
                    })), !0 === n62 ? this.body.emitter.emit("_dataChanged") : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t6) {
                    for(var e17 = this.body.nodes, i31 = 0; i31 < t6.length; i31++)delete e17[t6[i31]];
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "create",
                value: function(t6) {
                    var e17 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : uy;
                    return new e17(t6, this.body, this.images, this.groups, this.options, this.defaultOptions);
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t6 = this, e17 = arguments.length > 0 && (void 0) !== arguments[0] && arguments[0];
                    lf(this.body.nodes, function(i31, o48) {
                        var n62 = t6.body.data.nodes.get(o48);
                        (void 0) !== n62 && (!0 === e17 && i31.setOptions({
                            x: null,
                            y: null
                        }), i31.setOptions({
                            fixed: !1
                        }), i31.setOptions(n62));
                    });
                }
            },
            {
                key: "getPositions",
                value: function(t6) {
                    var e17 = {
                    };
                    if ((void 0) !== t6) {
                        if (!0 === Hh(t6)) {
                            for(var i31 = 0; i31 < t6.length; i31++)if ((void 0) !== this.body.nodes[t6[i31]]) {
                                var o48 = this.body.nodes[t6[i31]];
                                e17[t6[i31]] = {
                                    x: Math.round(o48.x),
                                    y: Math.round(o48.y)
                                };
                            }
                        } else if ((void 0) !== this.body.nodes[t6]) {
                            var n62 = this.body.nodes[t6];
                            e17[t6] = {
                                x: Math.round(n62.x),
                                y: Math.round(n62.y)
                            };
                        }
                    } else for(var r36 = 0; r36 < this.body.nodeIndices.length; r36++){
                        var s29 = this.body.nodes[this.body.nodeIndices[r36]];
                        e17[this.body.nodeIndices[r36]] = {
                            x: Math.round(s29.x),
                            y: Math.round(s29.y)
                        };
                    }
                    return e17;
                }
            },
            {
                key: "getPosition",
                value: function(t6) {
                    if (null == t6) throw new TypeError("No id was specified for getPosition method.");
                    if (null == this.body.nodes[t6]) throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(t6));
                    return {
                        x: Math.round(this.body.nodes[t6].x),
                        y: Math.round(this.body.nodes[t6].y)
                    };
                }
            },
            {
                key: "storePositions",
                value: function() {
                    var t6, e17 = [], i32 = this.body.data.nodes.getDataSet(), o49 = fy(i32.get());
                    try {
                        for(o49.s(); !(t6 = o49.n()).done;){
                            var n63 = t6.value, r36 = n63.id, s30 = this.body.nodes[r36], a27 = Math.round(s30.x), h17 = Math.round(s30.y);
                            n63.x === a27 && n63.y === h17 || e17.push({
                                id: r36,
                                x: a27,
                                y: h17
                            });
                        }
                    } catch (t7) {
                        o49.e(t7);
                    } finally{
                        o49.f();
                    }
                    i32.update(e17);
                }
            },
            {
                key: "getBoundingBox",
                value: function(t6) {
                    if ((void 0) !== this.body.nodes[t6]) return this.body.nodes[t6].shape.boundingBox;
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t6, e17) {
                    var i32 = [];
                    if ((void 0) !== this.body.nodes[t6]) for(var o49 = this.body.nodes[t6], n64 = {
                    }, r37 = 0; r37 < o49.edges.length; r37++){
                        var s31 = o49.edges[r37];
                        "to" !== e17 && s31.toId == o49.id ? (void 0) === n64[s31.fromId] && (i32.push(s31.fromId), n64[s31.fromId] = !0) : "from" !== e17 && s31.fromId == o49.id && (void 0) === n64[s31.toId] && (i32.push(s31.toId), n64[s31.toId] = !0);
                    }
                    return i32;
                }
            },
            {
                key: "getConnectedEdges",
                value: function(t6) {
                    var e17 = [];
                    if ((void 0) !== this.body.nodes[t6]) for(var i32 = this.body.nodes[t6], o49 = 0; o49 < i32.edges.length; o49++)e17.push(i32.edges[o49].id);
                    else console.error("NodeId provided for getConnectedEdges does not exist. Provided: ", t6);
                    return e17;
                }
            },
            {
                key: "moveNode",
                value: function(t6, e17, i32) {
                    var o49 = this;
                    (void 0) !== this.body.nodes[t6] ? (this.body.nodes[t6].x = Number(e17), this.body.nodes[t6].y = Number(i32), Yl(function() {
                        o49.body.emitter.emit("startSimulation");
                    }, 0)) : console.error("Node id supplied to moveNode does not exist. Provided: ", t6);
                }
            }
        ]), t4;
    }(), gy = E, yy = Kt, my = et, by = r, wy = no;
    ue({
        target: "Reflect",
        stat: !0
    }, {
        get: function t4(e17, i32) {
            var o49, n64, r37 = arguments.length < 3 ? e17 : arguments[2];
            return yy(e17) === r37 ? e17[i32] : (o49 = by.f(e17, i32)) ? my(o49, "value") ? o49.value : (void 0) === o49.get ? void 0 : o49.get.call(r37) : gy(n64 = wy(e17)) ? t4(n64, i32, r37) : void 0;
        }
    });
    var ky = O.Reflect.get, _y = ma;
    function xy(t4, e17, i32) {
        return (xy = "undefined" != typeof Reflect && ky ? ky : function(t6, e18, i33) {
            var o49 = function(t7, e19) {
                for(; !Object.prototype.hasOwnProperty.call(t7, e19) && null !== (t7 = Eg(t7)););
                return t7;
            }(t6, e18);
            if (o49) {
                var n64 = _y(o49, e18);
                return n64.get ? n64.get.call(i33) : n64.value;
            }
        })(t4, e17, i32 || t4);
    }
    var Ey = ue, Oy = Math.hypot, Cy = Math.abs, Sy = Math.sqrt;
    Ey({
        target: "Math",
        stat: !0,
        forced: !!Oy && Oy(1 / 0, NaN) !== 1 / 0
    }, {
        hypot: function(t4, e17) {
            for(var i32, o49, n65 = 0, r37 = 0, s32 = arguments.length, a28 = 0; r37 < s32;)a28 < (i32 = Cy(arguments[r37++])) ? (n65 = n65 * (o49 = a28 / i32) * o49 + 1, a28 = i32) : n65 += i32 > 0 ? (o49 = i32 / a28) * o49 : i32;
            return a28 === 1 / 0 ? 1 / 0 : a28 * Sy(n65);
        }
    });
    var Ty = O.Math.hypot;
    function My(t4) {
        var e17 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i32, o49 = Eg(t4);
            if (e17) {
                var n65 = Eg(this).constructor;
                i32 = yg(o49, arguments, n65);
            } else i32 = o49.apply(this, arguments);
            return _g(this, i32);
        };
    }
    var Py = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "transform",
                value: function(t6, e17) {
                    Hh(t6) || (t6 = [
                        t6
                    ]);
                    for(var i32 = e17.point.x, o49 = e17.point.y, n66 = e17.angle, r37 = e17.length, s32 = 0; s32 < t6.length; ++s32){
                        var a28 = t6[s32], h18 = a28.x * Math.cos(n66) - a28.y * Math.sin(n66), d11 = a28.x * Math.sin(n66) + a28.y * Math.cos(n66);
                        a28.x = i32 + r37 * h18, a28.y = o49 + r37 * d11;
                    }
                }
            },
            {
                key: "drawPath",
                value: function(t6, e17) {
                    t6.beginPath(), t6.moveTo(e17[0].x, e17[0].y);
                    for(var i32 = 1; i32 < e17.length; ++i32)t6.lineTo(e17[i32].x, e17[i32].y);
                    t6.closePath();
                }
            }
        ]), t4;
    }(), Dy = function(t4) {
        kg(i32, t4);
        var e17 = My(i32);
        function i32() {
            return Ra(this, i32), e17.apply(this, arguments);
        }
        return Ha(i32, null, [
            {
                key: "draw",
                value: function(t6, e18) {
                    if (e18.image) {
                        t6.save(), t6.translate(e18.point.x, e18.point.y), t6.rotate(Math.PI / 2 + e18.angle);
                        var i33 = null != e18.imageWidth ? e18.imageWidth : e18.image.width, o49 = null != e18.imageHeight ? e18.imageHeight : e18.image.height;
                        e18.image.drawImageAtPosition(t6, 1, -i33 / 2, 0, i33, o49), t6.restore();
                    }
                    return !1;
                }
            }
        ]), i32;
    }(Py), By = function(t4) {
        kg(i32, t4);
        var e17 = My(i32);
        function i32() {
            return Ra(this, i32), e17.apply(this, arguments);
        }
        return Ha(i32, null, [
            {
                key: "draw",
                value: function(t6, e18) {
                    var i34 = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -1,
                            y: 0.3
                        },
                        {
                            x: -0.9,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return Py.transform(i34, e18), Py.drawPath(t6, i34), !0;
                }
            }
        ]), i32;
    }(Py), Iy = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = [
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: 0,
                            y: 0.3
                        },
                        {
                            x: -0.4,
                            y: 0
                        },
                        {
                            x: 0,
                            y: -0.3
                        }
                    ];
                    return Py.transform(i32, e17), Py.drawPath(t6, i32), !0;
                }
            }
        ]), t4;
    }(), zy = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = {
                        x: -0.4,
                        y: 0
                    };
                    Py.transform(i32, e17), t6.strokeStyle = t6.fillStyle, t6.fillStyle = "rgba(0, 0, 0, 0)";
                    var o50 = Math.PI, n66 = e17.angle - o50 / 2, r37 = e17.angle + o50 / 2;
                    return t6.beginPath(), t6.arc(i32.x, i32.y, 0.4 * e17.length, n66, r37, !1), t6.stroke(), !0;
                }
            }
        ]), t4;
    }(), Fy = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = {
                        x: -0.3,
                        y: 0
                    };
                    Py.transform(i32, e17), t6.strokeStyle = t6.fillStyle, t6.fillStyle = "rgba(0, 0, 0, 0)";
                    var o50 = Math.PI, n66 = e17.angle + o50 / 2, r37 = e17.angle + 3 * o50 / 2;
                    return t6.beginPath(), t6.arc(i32.x, i32.y, 0.4 * e17.length, n66, r37, !1), t6.stroke(), !0;
                }
            }
        ]), t4;
    }(), Ny = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = [
                        {
                            x: 0.02,
                            y: 0
                        },
                        {
                            x: -1,
                            y: 0.3
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return Py.transform(i32, e17), Py.drawPath(t6, i32), !0;
                }
            }
        ]), t4;
    }(), Ay = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = [
                        {
                            x: 0,
                            y: 0.3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        }
                    ];
                    return Py.transform(i32, e17), Py.drawPath(t6, i32), !0;
                }
            }
        ]), t4;
    }(), Ry = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = {
                        x: -0.4,
                        y: 0
                    };
                    return Py.transform(i32, e17), ai(t6, i32.x, i32.y, 0.4 * e17.length), !0;
                }
            }
        ]), t4;
    }(), jy = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = [
                        {
                            x: 0,
                            y: 0.5
                        },
                        {
                            x: 0,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: 0.5
                        }
                    ];
                    return Py.transform(i32, e17), Py.drawPath(t6, i32), !0;
                }
            }
        ]), t4;
    }(), Ly = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = [
                        {
                            x: 0,
                            y: 0.3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: 0.3
                        }
                    ];
                    return Py.transform(i32, e17), Py.drawPath(t6, i32), !0;
                }
            }
        ]), t4;
    }(), Hy = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: 0.3
                        }
                    ];
                    return Py.transform(i32, e17), Py.drawPath(t6, i32), !0;
                }
            }
        ]), t4;
    }(), Wy = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32 = [
                        {
                            x: -1,
                            y: 0.3
                        },
                        {
                            x: -0.5,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        },
                        {
                            x: 0,
                            y: 0
                        }
                    ];
                    return Py.transform(i32, e17), Py.drawPath(t6, i32), !0;
                }
            }
        ]), t4;
    }(), Vy = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "draw",
                value: function(t6, e17) {
                    var i32;
                    switch(e17.type && (i32 = e17.type.toLowerCase()), i32){
                        case "image":
                            return Dy.draw(t6, e17);
                        case "circle":
                            return Ry.draw(t6, e17);
                        case "box":
                            return Ly.draw(t6, e17);
                        case "crow":
                            return Iy.draw(t6, e17);
                        case "curve":
                            return zy.draw(t6, e17);
                        case "diamond":
                            return Hy.draw(t6, e17);
                        case "inv_curve":
                            return Fy.draw(t6, e17);
                        case "triangle":
                            return Ny.draw(t6, e17);
                        case "inv_triangle":
                            return Ay.draw(t6, e17);
                        case "bar":
                            return jy.draw(t6, e17);
                        case "vee":
                            return Wy.draw(t6, e17);
                        case "arrow":
                        default:
                            return By.draw(t6, e17);
                    }
                }
            }
        ]), t4;
    }();
    function qy(t4, e17) {
        var i32 = Gh(t4);
        if (ha) {
            var o50 = ha(t4);
            e17 && (o50 = $d(o50).call(o50, function(e18) {
                return ba(t4, e18).enumerable;
            })), i32.push.apply(i32, o50);
        }
        return i32;
    }
    function Uy(t4) {
        for(var e17 = 1; e17 < arguments.length; e17++){
            var i32, o51 = null != arguments[e17] ? arguments[e17] : {
            };
            if (e17 % 2) nd(i32 = qy(Object(o51), !0)).call(i32, function(e18) {
                Wa(t4, e18, o51[e18]);
            });
            else if (Ta) Ba(t4, Ta(o51));
            else {
                var n66;
                nd(n66 = qy(Object(o51))).call(n66, function(e18) {
                    Aa(t4, e18, ba(o51, e18));
                });
            }
        }
        return t4;
    }
    var Yy = function() {
        function t4(e17, i34, o52) {
            Ra(this, t4), this._body = i34, this._labelModule = o52, this.color = {
            }, this.colorDirty = !0, this.hoverWidth = 1.5, this.selectionWidth = 2, this.setOptions(e17), this.fromPoint = this.from, this.toPoint = this.to;
        }
        return Ha(t4, [
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to];
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return !1;
                }
            },
            {
                key: "setOptions",
                value: function(t6) {
                    this.options = t6, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.id = this.options.id;
                }
            },
            {
                key: "drawLine",
                value: function(t6, e17, i34, o52) {
                    var n67 = arguments.length > 4 && (void 0) !== arguments[4] ? arguments[4] : this.getViaNode();
                    t6.strokeStyle = this.getColor(t6, e17), t6.lineWidth = e17.width, !1 !== e17.dashes ? this._drawDashedLine(t6, e17, n67) : this._drawLine(t6, e17, n67);
                }
            },
            {
                key: "_drawLine",
                value: function(t6, e17, i34, o52, n67) {
                    if (this.from != this.to) this._line(t6, e17, i34, o52, n67);
                    else {
                        var r37 = Bh(this._getCircleData(t6), 3), s32 = r37[0], a29 = r37[1], h19 = r37[2];
                        this._circle(t6, e17, s32, a29, h19);
                    }
                }
            },
            {
                key: "_drawDashedLine",
                value: function(t6, e17, i34, o52, n67) {
                    t6.lineCap = "round";
                    var r38 = Hh(e17.dashes) ? e17.dashes : [
                        5,
                        5
                    ];
                    if ((void 0) !== t6.setLineDash) {
                        if (t6.save(), t6.setLineDash(r38), t6.lineDashOffset = 0, this.from != this.to) this._line(t6, e17, i34);
                        else {
                            var s33 = Bh(this._getCircleData(t6), 3), a30 = s33[0], h20 = s33[1], d12 = s33[2];
                            this._circle(t6, e17, a30, h20, d12);
                        }
                        t6.setLineDash([
                            0
                        ]), t6.lineDashOffset = 0, t6.restore();
                    } else {
                        if (this.from != this.to) ci(t6, this.from.x, this.from.y, this.to.x, this.to.y, r38);
                        else {
                            var l9 = Bh(this._getCircleData(t6), 3), c7 = l9[0], u7 = l9[1], f6 = l9[2];
                            this._circle(t6, e17, c7, u7, f6);
                        }
                        this.enableShadow(t6, e17), t6.stroke(), this.disableShadow(t6, e17);
                    }
                }
            },
            {
                key: "findBorderPosition",
                value: function(t6, e17, i34) {
                    return this.from != this.to ? this._findBorderPosition(t6, e17, i34) : this._findBorderPositionCircle(t6, e17, i34);
                }
            },
            {
                key: "findBorderPositions",
                value: function(t6) {
                    if (this.from != this.to) return {
                        from: this._findBorderPosition(this.from, t6),
                        to: this._findBorderPosition(this.to, t6)
                    };
                    var e17, i34 = Bh(Lh(e17 = this._getCircleData(t6)).call(e17, 0, 2), 2), o52 = i34[0], n67 = i34[1];
                    return {
                        from: this._findBorderPositionCircle(this.from, t6, {
                            x: o52,
                            y: n67,
                            low: 0.25,
                            high: 0.6,
                            direction: -1
                        }),
                        to: this._findBorderPositionCircle(this.from, t6, {
                            x: o52,
                            y: n67,
                            low: 0.6,
                            high: 0.8,
                            direction: 1
                        })
                    };
                }
            },
            {
                key: "_getCircleData",
                value: function(t6) {
                    var e17 = this.options.selfReference.size;
                    (void 0) !== t6 && (void 0) === this.from.shape.width && this.from.shape.resize(t6);
                    var i34 = Gv(t6, this.options.selfReference.angle, e17, this.from);
                    return [
                        i34.x,
                        i34.y,
                        e17
                    ];
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t6, e17, i34, o52) {
                    var n67 = 2 * o52 * Math.PI;
                    return {
                        x: t6 + i34 * Math.cos(n67),
                        y: e17 - i34 * Math.sin(n67)
                    };
                }
            },
            {
                key: "_findBorderPositionCircle",
                value: function(t6, e17, i34) {
                    var o52, n67 = i34.x, r38 = i34.y, s34 = i34.low, a31 = i34.high, h21 = i34.direction, d13 = this.options.selfReference.size, l10 = 0.5 * (s34 + a31), c8 = 0;
                    !0 === this.options.arrowStrikethrough && (-1 === h21 ? c8 = this.options.endPointOffset.from : 1 === h21 && (c8 = this.options.endPointOffset.to));
                    var u8 = 0;
                    do {
                        l10 = 0.5 * (s34 + a31), o52 = this._pointOnCircle(n67, r38, d13, l10);
                        var f7 = Math.atan2(t6.y - o52.y, t6.x - o52.x), p3 = t6.distanceToBorder(e17, f7) + c8 - Math.sqrt(Math.pow(o52.x - t6.x, 2) + Math.pow(o52.y - t6.y, 2));
                        if (Math.abs(p3) < 0.05) break;
                        p3 > 0 ? h21 > 0 ? s34 = l10 : a31 = l10 : h21 > 0 ? a31 = l10 : s34 = l10, ++u8;
                    }while (s34 <= a31 && u8 < 10)
                    return Uy(Uy({
                    }, o52), {
                    }, {
                        t: l10
                    });
                }
            },
            {
                key: "getLineWidth",
                value: function(t6, e17) {
                    return !0 === t6 ? Math.max(this.selectionWidth, 0.3 / this._body.view.scale) : !0 === e17 ? Math.max(this.hoverWidth, 0.3 / this._body.view.scale) : Math.max(this.options.width, 0.3 / this._body.view.scale);
                }
            },
            {
                key: "getColor",
                value: function(t6, e17) {
                    if (!1 !== e17.inheritsColor) {
                        if ("both" === e17.inheritsColor && this.from.id !== this.to.id) {
                            var i34 = t6.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y), o52 = this.from.options.color.highlight.border, n67 = this.to.options.color.highlight.border;
                            return !1 === this.from.selected && !1 === this.to.selected ? (o52 = uf(this.from.options.color.border, e17.opacity), n67 = uf(this.to.options.color.border, e17.opacity)) : !0 === this.from.selected && !1 === this.to.selected ? n67 = this.to.options.color.border : !1 === this.from.selected && !0 === this.to.selected && (o52 = this.from.options.color.border), i34.addColorStop(0, o52), i34.addColorStop(1, n67), i34;
                        }
                        return "to" === e17.inheritsColor ? uf(this.to.options.color.border, e17.opacity) : uf(this.from.options.color.border, e17.opacity);
                    }
                    return uf(e17.color, e17.opacity);
                }
            },
            {
                key: "_circle",
                value: function(t6, e17, i35, o53, n68) {
                    this.enableShadow(t6, e17);
                    var r38 = 0, s34 = 2 * Math.PI;
                    if (!this.options.selfReference.renderBehindTheNode) {
                        var a31 = this.options.selfReference.angle, h21 = this.options.selfReference.angle + Math.PI, d13 = this._findBorderPositionCircle(this.from, t6, {
                            x: i35,
                            y: o53,
                            low: a31,
                            high: h21,
                            direction: -1
                        }), l10 = this._findBorderPositionCircle(this.from, t6, {
                            x: i35,
                            y: o53,
                            low: a31,
                            high: h21,
                            direction: 1
                        });
                        r38 = Math.atan2(d13.y - o53, d13.x - i35), s34 = Math.atan2(l10.y - o53, l10.x - i35);
                    }
                    t6.beginPath(), t6.arc(i35, o53, n68, r38, s34, !1), t6.stroke(), this.disableShadow(t6, e17);
                }
            },
            {
                key: "getDistanceToEdge",
                value: function(t6, e17, i35, o53, n68, r38) {
                    if (this.from != this.to) return this._getDistanceToEdge(t6, e17, i35, o53, n68, r38);
                    var s34 = Bh(this._getCircleData(void 0), 3), a32 = s34[0], h22 = s34[1], d14 = s34[2], l11 = a32 - n68, c8 = h22 - r38;
                    return Math.abs(Math.sqrt(l11 * l11 + c8 * c8) - d14);
                }
            },
            {
                key: "_getDistanceToLine",
                value: function(t6, e17, i35, o53, n68, r38) {
                    var s34 = i35 - t6, a32 = o53 - e17, h22 = ((n68 - t6) * s34 + (r38 - e17) * a32) / (s34 * s34 + a32 * a32);
                    h22 > 1 ? h22 = 1 : h22 < 0 && (h22 = 0);
                    var d14 = t6 + h22 * s34 - n68, l11 = e17 + h22 * a32 - r38;
                    return Math.sqrt(d14 * d14 + l11 * l11);
                }
            },
            {
                key: "getArrowData",
                value: function(t6, e17, i35, o53, n68, r38) {
                    var s34, a32, h22, d14, l11, c8, u8, f8 = r38.width;
                    "from" === e17 ? (h22 = this.from, d14 = this.to, l11 = r38.fromArrowScale < 0, c8 = Math.abs(r38.fromArrowScale), u8 = r38.fromArrowType) : "to" === e17 ? (h22 = this.to, d14 = this.from, l11 = r38.toArrowScale < 0, c8 = Math.abs(r38.toArrowScale), u8 = r38.toArrowType) : (h22 = this.to, d14 = this.from, l11 = r38.middleArrowScale < 0, c8 = Math.abs(r38.middleArrowScale), u8 = r38.middleArrowType);
                    var p4 = 15 * c8 + 3 * f8;
                    if (h22 != d14) {
                        var v3 = p4 / Ty(h22.x - d14.x, h22.y - d14.y);
                        if ("middle" !== e17) {
                            if (!0 === this.options.smooth.enabled) {
                                var g1 = this._findBorderPosition(h22, t6, {
                                    via: i35
                                }), y1 = this.getPoint(g1.t + v3 * ("from" === e17 ? 1 : -1), i35);
                                s34 = Math.atan2(g1.y - y1.y, g1.x - y1.x), a32 = g1;
                            } else s34 = Math.atan2(h22.y - d14.y, h22.x - d14.x), a32 = this._findBorderPosition(h22, t6);
                        } else {
                            var m1 = (l11 ? -v3 : v3) / 2, b1 = this.getPoint(0.5 + m1, i35), w1 = this.getPoint(0.5 - m1, i35);
                            s34 = Math.atan2(b1.y - w1.y, b1.x - w1.x), a32 = this.getPoint(0.5, i35);
                        }
                    } else {
                        var k1 = Bh(this._getCircleData(t6), 3), _1 = k1[0], x1 = k1[1], E1 = k1[2];
                        if ("from" === e17) {
                            var O1 = this.options.selfReference.angle, C1 = this.options.selfReference.angle + Math.PI, S1 = this._findBorderPositionCircle(this.from, t6, {
                                x: _1,
                                y: x1,
                                low: O1,
                                high: C1,
                                direction: -1
                            });
                            s34 = -2 * S1.t * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI, a32 = S1;
                        } else if ("to" === e17) {
                            var T1 = this.options.selfReference.angle, M1 = this.options.selfReference.angle + Math.PI, P1 = this._findBorderPositionCircle(this.from, t6, {
                                x: _1,
                                y: x1,
                                low: T1,
                                high: M1,
                                direction: 1
                            });
                            s34 = -2 * P1.t * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI, a32 = P1;
                        } else {
                            var D1 = this.options.selfReference.angle / (2 * Math.PI);
                            a32 = this._pointOnCircle(_1, x1, E1, D1), s34 = -2 * D1 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
                        }
                    }
                    return {
                        point: a32,
                        core: {
                            x: a32.x - 0.9 * p4 * Math.cos(s34),
                            y: a32.y - 0.9 * p4 * Math.sin(s34)
                        },
                        angle: s34,
                        length: p4,
                        type: u8
                    };
                }
            },
            {
                key: "drawArrowHead",
                value: function(t6, e17, i35, o53, n68) {
                    t6.strokeStyle = this.getColor(t6, e17), t6.fillStyle = t6.strokeStyle, t6.lineWidth = e17.width, Vy.draw(t6, n68) && (this.enableShadow(t6, e17), Ql(t6).call(t6), this.disableShadow(t6, e17));
                }
            },
            {
                key: "enableShadow",
                value: function(t6, e17) {
                    !0 === e17.shadow && (t6.shadowColor = e17.shadowColor, t6.shadowBlur = e17.shadowSize, t6.shadowOffsetX = e17.shadowX, t6.shadowOffsetY = e17.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t6, e17) {
                    !0 === e17.shadow && (t6.shadowColor = "rgba(0,0,0,0)", t6.shadowBlur = 0, t6.shadowOffsetX = 0, t6.shadowOffsetY = 0);
                }
            },
            {
                key: "drawBackground",
                value: function(t6, e17) {
                    if (!1 !== e17.background) {
                        var i35 = {
                            strokeStyle: t6.strokeStyle,
                            lineWidth: t6.lineWidth,
                            dashes: t6.dashes
                        };
                        t6.strokeStyle = e17.backgroundColor, t6.lineWidth = e17.backgroundSize, this.setStrokeDashed(t6, e17.backgroundDashes), t6.stroke(), t6.strokeStyle = i35.strokeStyle, t6.lineWidth = i35.lineWidth, t6.dashes = i35.dashes, this.setStrokeDashed(t6, e17.dashes);
                    }
                }
            },
            {
                key: "setStrokeDashed",
                value: function(t6, e17) {
                    if (!1 !== e17) {
                        if ((void 0) !== t6.setLineDash) {
                            var i36 = Hh(e17) ? e17 : [
                                5,
                                5
                            ];
                            t6.setLineDash(i36);
                        } else console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                    } else (void 0) !== t6.setLineDash ? t6.setLineDash([]) : console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                }
            }
        ]), t4;
    }();
    function Xy(t4, e17) {
        var i37 = Gh(t4);
        if (ha) {
            var o53 = ha(t4);
            e17 && (o53 = $d(o53).call(o53, function(e18) {
                return ba(t4, e18).enumerable;
            })), i37.push.apply(i37, o53);
        }
        return i37;
    }
    function Gy(t4) {
        for(var e17 = 1; e17 < arguments.length; e17++){
            var i37, o54 = null != arguments[e17] ? arguments[e17] : {
            };
            if (e17 % 2) nd(i37 = Xy(Object(o54), !0)).call(i37, function(e18) {
                Wa(t4, e18, o54[e18]);
            });
            else if (Ta) Ba(t4, Ta(o54));
            else {
                var n68;
                nd(n68 = Xy(Object(o54))).call(n68, function(e18) {
                    Aa(t4, e18, ba(o54, e18));
                });
            }
        }
        return t4;
    }
    function Ky(t4) {
        var e17 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i38, o55 = Eg(t4);
            if (e17) {
                var n69 = Eg(this).constructor;
                i38 = yg(o55, arguments, n69);
            } else i38 = o55.apply(this, arguments);
            return _g(this, i38);
        };
    }
    var $y = function(t4) {
        kg(i38, t4);
        var e17 = Ky(i38);
        function i38(t6, o55, n70) {
            return Ra(this, i38), e17.call(this, t6, o55, n70);
        }
        return Ha(i38, [
            {
                key: "_findBorderPositionBezier",
                value: function(t6, e18) {
                    var i39, o55, n70 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : this._getViaCoordinates(), r38 = 10, s34 = 0.2, a32 = !1, h22 = 1, d14 = 0, l11 = this.to, c8 = this.options.endPointOffset ? this.options.endPointOffset.to : 0;
                    t6.id === this.from.id && (l11 = this.from, a32 = !0, c8 = this.options.endPointOffset ? this.options.endPointOffset.from : 0), !1 === this.options.arrowStrikethrough && (c8 = 0);
                    var u8 = 0;
                    do {
                        o55 = 0.5 * (d14 + h22), i39 = this.getPoint(o55, n70);
                        var f8 = Math.atan2(l11.y - i39.y, l11.x - i39.x), p4 = l11.distanceToBorder(e18, f8) + c8, v4 = Math.sqrt(Math.pow(i39.x - l11.x, 2) + Math.pow(i39.y - l11.y, 2)), g2 = p4 - v4;
                        if (Math.abs(g2) < s34) break;
                        g2 < 0 ? !1 === a32 ? d14 = o55 : h22 = o55 : !1 === a32 ? h22 = o55 : d14 = o55, ++u8;
                    }while (d14 <= h22 && u8 < r38)
                    return Gy(Gy({
                    }, i39), {
                    }, {
                        t: o55
                    });
                }
            },
            {
                key: "_getDistanceToBezierEdge",
                value: function(t6, e18, i39, o55, n70, r38, s34) {
                    var a32, h22, d14, l11, c8, u8 = 1000000000, f9 = t6, p5 = e18;
                    for(h22 = 1; h22 < 10; h22++)d14 = 0.1 * h22, l11 = Math.pow(1 - d14, 2) * t6 + 2 * d14 * (1 - d14) * s34.x + Math.pow(d14, 2) * i39, c8 = Math.pow(1 - d14, 2) * e18 + 2 * d14 * (1 - d14) * s34.y + Math.pow(d14, 2) * o55, h22 > 0 && (u8 = (a32 = this._getDistanceToLine(f9, p5, l11, c8, n70, r38)) < u8 ? a32 : u8), f9 = l11, p5 = c8;
                    return u8;
                }
            },
            {
                key: "_bezierCurve",
                value: function(t6, e18, i39, o55) {
                    t6.beginPath(), t6.moveTo(this.fromPoint.x, this.fromPoint.y), null != i39 && null != i39.x ? null != o55 && null != o55.x ? t6.bezierCurveTo(i39.x, i39.y, o55.x, o55.y, this.toPoint.x, this.toPoint.y) : t6.quadraticCurveTo(i39.x, i39.y, this.toPoint.x, this.toPoint.y) : t6.lineTo(this.toPoint.x, this.toPoint.y), this.drawBackground(t6, e18), this.enableShadow(t6, e18), t6.stroke(), this.disableShadow(t6, e18);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            }
        ]), i38;
    }(Yy);
    function Zy(t4) {
        var e17 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t6) {
                return !1;
            }
        }();
        return function() {
            var i38, o55 = Eg(t4);
            if (e17) {
                var n70 = Eg(this).constructor;
                i38 = yg(o55, arguments, n70);
            } else i38 = o55.apply(this, arguments);
            return _g(this, i38);
        };
    }
    var Qy = function(t4) {
        kg(i38, t4);
        var e17 = Zy(i38);
        function i38(t6, o55, n71) {
            var r38;
            return Ra(this, i38), (r38 = e17.call(this, t6, o55, n71)).via = r38.via, r38._boundFunction = function() {
                r38.positionBezierNode();
            }, r38._body.emitter.on("_repositionBezierNodes", r38._boundFunction), r38;
        }
        return Ha(i38, [
            {
                key: "setOptions",
                value: function(t6) {
                    xy(Eg(i38.prototype), "setOptions", this).call(this, t6);
                    var e18 = !1;
                    this.options.physics !== t6.physics && (e18 = !0), this.options = t6, this.id = this.options.id, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.setupSupportNode(), this.connect(), !0 === e18 && (this.via.setOptions({
                        physics: this.options.physics
                    }), this.positionBezierNode());
                }
            },
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], (void 0) === this.from || (void 0) === this.to || !1 === this.options.physics || this.from.id === this.to.id ? this.via.setOptions({
                        physics: !1
                    }) : this.via.setOptions({
                        physics: !0
                    });
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this._body.emitter.off("_repositionBezierNodes", this._boundFunction), (void 0) !== this.via && (delete this._body.nodes[this.via.id], this.via = void 0, !0);
                }
            },
            {
                key: "setupSupportNode",
                value: function() {
                    if ((void 0) === this.via) {
                        var t6 = "edgeId:" + this.id, e18 = this._body.functions.createNode({
                            id: t6,
                            shape: "circle",
                            physics: !0,
                            hidden: !0
                        });
                        this._body.nodes[t6] = e18, this.via = e18, this.via.parentEdgeId = this.id, this.positionBezierNode();
                    }
                }
            },
            {
                key: "positionBezierNode",
                value: function() {
                    (void 0) !== this.via && (void 0) !== this.from && (void 0) !== this.to ? (this.via.x = 0.5 * (this.from.x + this.to.x), this.via.y = 0.5 * (this.from.y + this.to.y)) : (void 0) !== this.via && (this.via.x = 0, this.via.y = 0);
                }
            },
            {
                key: "_line",
                value: function(t7, e19, i39) {
                    this._bezierCurve(t7, e19, i39);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getPoint",
                value: function(t7) {
                    var e19 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.via;
                    if (this.from === this.to) {
                        var i39 = this._getCircleData(), o55 = Bh(i39, 3), n71 = o55[0], r38 = o55[1], s34 = o55[2], a32 = 2 * Math.PI * (1 - t7);
                        return {
                            x: n71 + s34 * Math.sin(a32),
                            y: r38 + s34 - s34 * (1 - Math.cos(a32))
                        };
                    }
                    return {
                        x: Math.pow(1 - t7, 2) * this.fromPoint.x + 2 * t7 * (1 - t7) * e19.x + Math.pow(t7, 2) * this.toPoint.x,
                        y: Math.pow(1 - t7, 2) * this.fromPoint.y + 2 * t7 * (1 - t7) * e19.y + Math.pow(t7, 2) * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t7, e19) {
                    return this._findBorderPositionBezier(t7, e19, this.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t7, e19, i40, o56, n72, r39) {
                    return this._getDistanceToBezierEdge(t7, e19, i40, o56, n72, r39, this.via);
                }
            }
        ]), i38;
    }($y);
    function Jy(t4) {
        var e17 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t7) {
                return !1;
            }
        }();
        return function() {
            var i38, o56 = Eg(t4);
            if (e17) {
                var n72 = Eg(this).constructor;
                i38 = yg(o56, arguments, n72);
            } else i38 = o56.apply(this, arguments);
            return _g(this, i38);
        };
    }
    var tm = function(t4) {
        kg(i38, t4);
        var e17 = Jy(i38);
        function i38(t7, o56, n73) {
            return Ra(this, i38), e17.call(this, t7, o56, n73);
        }
        return Ha(i38, [
            {
                key: "_line",
                value: function(t7, e19, i40) {
                    this._bezierCurve(t7, e19, i40);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t7, e19, i40 = this.options.smooth.roundness, o56 = this.options.smooth.type, n73 = Math.abs(this.from.x - this.to.x), r39 = Math.abs(this.from.y - this.to.y);
                    if ("discrete" === o56 || "diagonalCross" === o56) {
                        var s35, a33;
                        s35 = a33 = n73 <= r39 ? i40 * r39 : i40 * n73, this.from.x > this.to.x && (s35 = -s35), this.from.y >= this.to.y && (a33 = -a33);
                        var h22 = this.from.x + s35, d14 = this.from.y + a33;
                        return "discrete" === o56 && (n73 <= r39 ? h22 = n73 < i40 * r39 ? this.from.x : h22 : d14 = r39 < i40 * n73 ? this.from.y : d14), {
                            x: h22,
                            y: d14
                        };
                    }
                    if ("straightCross" === o56) {
                        var l11 = (1 - i40) * n73, c8 = (1 - i40) * r39;
                        return n73 <= r39 ? (l11 = 0, this.from.y < this.to.y && (c8 = -c8)) : (this.from.x < this.to.x && (l11 = -l11), c8 = 0), {
                            x: this.to.x + l11,
                            y: this.to.y + c8
                        };
                    }
                    if ("horizontal" === o56) {
                        var u8 = (1 - i40) * n73;
                        return this.from.x < this.to.x && (u8 = -u8), {
                            x: this.to.x + u8,
                            y: this.from.y
                        };
                    }
                    if ("vertical" === o56) {
                        var f9 = (1 - i40) * r39;
                        return this.from.y < this.to.y && (f9 = -f9), {
                            x: this.from.x,
                            y: this.to.y + f9
                        };
                    }
                    if ("curvedCW" === o56) {
                        n73 = this.to.x - this.from.x, r39 = this.from.y - this.to.y;
                        var p5 = Math.sqrt(n73 * n73 + r39 * r39), v5 = Math.PI, g3 = (Math.atan2(r39, n73) + (0.5 * i40 + 0.5) * v5) % (2 * v5);
                        return {
                            x: this.from.x + (0.5 * i40 + 0.5) * p5 * Math.sin(g3),
                            y: this.from.y + (0.5 * i40 + 0.5) * p5 * Math.cos(g3)
                        };
                    }
                    if ("curvedCCW" === o56) {
                        n73 = this.to.x - this.from.x, r39 = this.from.y - this.to.y;
                        var y2 = Math.sqrt(n73 * n73 + r39 * r39), m2 = Math.PI, b2 = (Math.atan2(r39, n73) + (0.5 * -i40 + 0.5) * m2) % (2 * m2);
                        return {
                            x: this.from.x + (0.5 * i40 + 0.5) * y2 * Math.sin(b2),
                            y: this.from.y + (0.5 * i40 + 0.5) * y2 * Math.cos(b2)
                        };
                    }
                    t7 = e19 = n73 <= r39 ? i40 * r39 : i40 * n73, this.from.x > this.to.x && (t7 = -t7), this.from.y >= this.to.y && (e19 = -e19);
                    var w2 = this.from.x + t7, k2 = this.from.y + e19;
                    return n73 <= r39 ? w2 = this.from.x <= this.to.x ? this.to.x < w2 ? this.to.x : w2 : this.to.x > w2 ? this.to.x : w2 : k2 = this.from.y >= this.to.y ? this.to.y > k2 ? this.to.y : k2 : this.to.y < k2 ? this.to.y : k2, {
                        x: w2,
                        y: k2
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t7, e19) {
                    var i40 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : {
                    };
                    return this._findBorderPositionBezier(t7, e19, i40.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t7, e19, i40, o56, n73, r39) {
                    var s36 = arguments.length > 6 && (void 0) !== arguments[6] ? arguments[6] : this._getViaCoordinates();
                    return this._getDistanceToBezierEdge(t7, e19, i40, o56, n73, r39, s36);
                }
            },
            {
                key: "getPoint",
                value: function(t7) {
                    var e19 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this._getViaCoordinates(), i40 = t7, o56 = Math.pow(1 - i40, 2) * this.fromPoint.x + 2 * i40 * (1 - i40) * e19.x + Math.pow(i40, 2) * this.toPoint.x, n73 = Math.pow(1 - i40, 2) * this.fromPoint.y + 2 * i40 * (1 - i40) * e19.y + Math.pow(i40, 2) * this.toPoint.y;
                    return {
                        x: o56,
                        y: n73
                    };
                }
            }
        ]), i38;
    }($y);
    function em(t4) {
        var e17 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t7) {
                return !1;
            }
        }();
        return function() {
            var i38, o56 = Eg(t4);
            if (e17) {
                var n73 = Eg(this).constructor;
                i38 = yg(o56, arguments, n73);
            } else i38 = o56.apply(this, arguments);
            return _g(this, i38);
        };
    }
    function im(t4) {
        var e17 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t7) {
                return !1;
            }
        }();
        return function() {
            var i38, o56 = Eg(t4);
            if (e17) {
                var n74 = Eg(this).constructor;
                i38 = yg(o56, arguments, n74);
            } else i38 = o56.apply(this, arguments);
            return _g(this, i38);
        };
    }
    var om = function(t4) {
        kg(i38, t4);
        var e17 = im(i38);
        function i38(t7, o56, n75) {
            return Ra(this, i38), e17.call(this, t7, o56, n75);
        }
        return Ha(i38, [
            {
                key: "_line",
                value: function(t7, e19, i40) {
                    var o56 = i40[0], n75 = i40[1];
                    this._bezierCurve(t7, e19, o56, n75);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t7, e19, i40, o56, n75 = this.from.x - this.to.x, r39 = this.from.y - this.to.y, s36 = this.options.smooth.roundness;
                    return (Math.abs(n75) > Math.abs(r39) || !0 === this.options.smooth.forceDirection || "horizontal" === this.options.smooth.forceDirection) && "vertical" !== this.options.smooth.forceDirection ? (e19 = this.from.y, o56 = this.to.y, t7 = this.from.x - s36 * n75, i40 = this.to.x + s36 * n75) : (e19 = this.from.y - s36 * r39, o56 = this.to.y + s36 * r39, t7 = this.from.x, i40 = this.to.x), [
                        {
                            x: t7,
                            y: e19
                        },
                        {
                            x: i40,
                            y: o56
                        }
                    ];
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t7, e19) {
                    return this._findBorderPositionBezier(t7, e19);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t7, e19, i40, o56, n75, r39) {
                    var s36 = arguments.length > 6 && (void 0) !== arguments[6] ? arguments[6] : this._getViaCoordinates(), a34 = Bh(s36, 2), h23 = a34[0], d15 = a34[1];
                    return this._getDistanceToBezierEdge2(t7, e19, i40, o56, n75, r39, h23, d15);
                }
            },
            {
                key: "getPoint",
                value: function(t7) {
                    var e19 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this._getViaCoordinates(), i40 = Bh(e19, 2), o56 = i40[0], n75 = i40[1], r39 = t7, s36 = [
                        Math.pow(1 - r39, 3),
                        3 * r39 * Math.pow(1 - r39, 2),
                        3 * Math.pow(r39, 2) * (1 - r39),
                        Math.pow(r39, 3)
                    ], a34 = s36[0] * this.fromPoint.x + s36[1] * o56.x + s36[2] * n75.x + s36[3] * this.toPoint.x, h23 = s36[0] * this.fromPoint.y + s36[1] * o56.y + s36[2] * n75.y + s36[3] * this.toPoint.y;
                    return {
                        x: a34,
                        y: h23
                    };
                }
            }
        ]), i38;
    }(function(t4) {
        kg(i38, t4);
        var e17 = em(i38);
        function i38(t7, o56, n75) {
            return Ra(this, i38), e17.call(this, t7, o56, n75);
        }
        return Ha(i38, [
            {
                key: "_getDistanceToBezierEdge2",
                value: function(t7, e19, i40, o56, n75, r39, s36, a34) {
                    for(var h23 = 1000000000, d15 = t7, l12 = e19, c9 = [
                        0,
                        0,
                        0,
                        0
                    ], u9 = 1; u9 < 10; u9++){
                        var f10 = 0.1 * u9;
                        c9[0] = Math.pow(1 - f10, 3), c9[1] = 3 * f10 * Math.pow(1 - f10, 2), c9[2] = 3 * Math.pow(f10, 2) * (1 - f10), c9[3] = Math.pow(f10, 3);
                        var p6 = c9[0] * t7 + c9[1] * s36.x + c9[2] * a34.x + c9[3] * i40, v6 = c9[0] * e19 + c9[1] * s36.y + c9[2] * a34.y + c9[3] * o56;
                        if (u9 > 0) {
                            var g4 = this._getDistanceToLine(d15, l12, p6, v6, n75, r39);
                            h23 = g4 < h23 ? g4 : h23;
                        }
                        d15 = p6, l12 = v6;
                    }
                    return h23;
                }
            }
        ]), i38;
    }($y));
    function nm(t4) {
        var e17 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t7) {
                return !1;
            }
        }();
        return function() {
            var i38, o56 = Eg(t4);
            if (e17) {
                var n75 = Eg(this).constructor;
                i38 = yg(o56, arguments, n75);
            } else i38 = o56.apply(this, arguments);
            return _g(this, i38);
        };
    }
    var rm = function(t4) {
        kg(i38, t4);
        var e17 = nm(i38);
        function i38(t7, o56, n76) {
            return Ra(this, i38), e17.call(this, t7, o56, n76);
        }
        return Ha(i38, [
            {
                key: "_line",
                value: function(t7, e19) {
                    t7.beginPath(), t7.moveTo(this.fromPoint.x, this.fromPoint.y), t7.lineTo(this.toPoint.x, this.toPoint.y), this.enableShadow(t7, e19), t7.stroke(), this.disableShadow(t7, e19);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                }
            },
            {
                key: "getPoint",
                value: function(t7) {
                    return {
                        x: (1 - t7) * this.fromPoint.x + t7 * this.toPoint.x,
                        y: (1 - t7) * this.fromPoint.y + t7 * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t7, e19) {
                    var i40 = this.to, o56 = this.from;
                    t7.id === this.from.id && (i40 = this.from, o56 = this.to);
                    var n76 = Math.atan2(i40.y - o56.y, i40.x - o56.x), r39 = i40.x - o56.x, s36 = i40.y - o56.y, a34 = Math.sqrt(r39 * r39 + s36 * s36), h23 = (a34 - t7.distanceToBorder(e19, n76)) / a34;
                    return {
                        x: (1 - h23) * o56.x + h23 * i40.x,
                        y: (1 - h23) * o56.y + h23 * i40.y,
                        t: 0
                    };
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t7, e19, i40, o56, n76, r39) {
                    return this._getDistanceToLine(t7, e19, i40, o56, n76, r39);
                }
            }
        ]), i38;
    }(Yy), sm = function() {
        function t4(e17, i38, o56, n76, r39) {
            if (Ra(this, t4), (void 0) === i38) throw new Error("No body provided");
            this.options = kf(n76), this.globalOptions = n76, this.defaultOptions = r39, this.body = i38, this.imagelist = o56, this.id = void 0, this.fromId = void 0, this.toId = void 0, this.selected = !1, this.hover = !1, this.labelDirty = !0, this.baseWidth = this.options.width, this.baseFontSize = this.options.font.size, this.from = void 0, this.to = void 0, this.edgeType = void 0, this.connected = !1, this.labelModule = new rg(this.body, this.options, !0), this.setOptions(e17);
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(e17) {
                    if (e17) {
                        var i38 = (void 0) !== e17.physics && this.options.physics !== e17.physics || (void 0) !== e17.hidden && (this.options.hidden || !1) !== (e17.hidden || !1) || (void 0) !== e17.from && this.options.from !== e17.from || (void 0) !== e17.to && this.options.to !== e17.to;
                        t4.parseOptions(this.options, e17, !0, this.globalOptions), (void 0) !== e17.id && (this.id = e17.id), (void 0) !== e17.from && (this.fromId = e17.from), (void 0) !== e17.to && (this.toId = e17.to), (void 0) !== e17.title && (this.title = e17.title), (void 0) !== e17.value && (e17.value = jv(e17.value));
                        var o56 = [
                            e17,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = Uv("edge", o56), this.updateLabelModule(e17), i38 = this.updateEdgeType() || i38, this._setInteractionWidths(), this.connect(), i38;
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t7 = !0 === this.options.arrows.to || !0 === this.options.arrows.to.enabled, e17 = !0 === this.options.arrows.from || !0 === this.options.arrows.from.enabled, i40 = !0 === this.options.arrows.middle || !0 === this.options.arrows.middle.enabled, o57 = this.options.color.inherit, n76 = {
                        toArrow: t7,
                        toArrowScale: this.options.arrows.to.scaleFactor,
                        toArrowType: this.options.arrows.to.type,
                        toArrowSrc: this.options.arrows.to.src,
                        toArrowImageWidth: this.options.arrows.to.imageWidth,
                        toArrowImageHeight: this.options.arrows.to.imageHeight,
                        middleArrow: i40,
                        middleArrowScale: this.options.arrows.middle.scaleFactor,
                        middleArrowType: this.options.arrows.middle.type,
                        middleArrowSrc: this.options.arrows.middle.src,
                        middleArrowImageWidth: this.options.arrows.middle.imageWidth,
                        middleArrowImageHeight: this.options.arrows.middle.imageHeight,
                        fromArrow: e17,
                        fromArrowScale: this.options.arrows.from.scaleFactor,
                        fromArrowType: this.options.arrows.from.type,
                        fromArrowSrc: this.options.arrows.from.src,
                        fromArrowImageWidth: this.options.arrows.from.imageWidth,
                        fromArrowImageHeight: this.options.arrows.from.imageHeight,
                        arrowStrikethrough: this.options.arrowStrikethrough,
                        color: o57 ? void 0 : this.options.color.color,
                        inheritsColor: o57,
                        opacity: this.options.color.opacity,
                        hidden: this.options.hidden,
                        length: this.options.length,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y,
                        dashes: this.options.dashes,
                        width: this.options.width,
                        background: this.options.background.enabled,
                        backgroundColor: this.options.background.color,
                        backgroundSize: this.options.background.size,
                        backgroundDashes: this.options.background.dashes
                    };
                    if (this.selected || this.hover) {
                        if (!0 === this.chooser) {
                            if (this.selected) {
                                var r39 = this.options.selectionWidth;
                                "function" == typeof r39 ? n76.width = r39(n76.width) : "number" == typeof r39 && (n76.width += r39), n76.width = Math.max(n76.width, 0.3 / this.body.view.scale), n76.color = this.options.color.highlight, n76.shadow = this.options.shadow.enabled;
                            } else if (this.hover) {
                                var s36 = this.options.hoverWidth;
                                "function" == typeof s36 ? n76.width = s36(n76.width) : "number" == typeof s36 && (n76.width += s36), n76.width = Math.max(n76.width, 0.3 / this.body.view.scale), n76.color = this.options.color.hover, n76.shadow = this.options.shadow.enabled;
                            }
                        } else "function" == typeof this.chooser && (this.chooser(n76, this.options.id, this.selected, this.hover), (void 0) !== n76.color && (n76.inheritsColor = !1), !1 === n76.shadow && (n76.shadowColor === this.options.shadow.color && n76.shadowSize === this.options.shadow.size && n76.shadowX === this.options.shadow.x && n76.shadowY === this.options.shadow.y || (n76.shadow = !0)));
                    } else n76.shadow = this.options.shadow.enabled, n76.width = Math.max(n76.width, 0.3 / this.body.view.scale);
                    return n76;
                }
            },
            {
                key: "updateLabelModule",
                value: function(t7) {
                    var e17 = [
                        t7,
                        this.options,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, e17), (void 0) !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateEdgeType",
                value: function() {
                    var t7 = this.options.smooth, e17 = !1, i40 = !0;
                    return (void 0) !== this.edgeType && ((this.edgeType instanceof Qy && !0 === t7.enabled && "dynamic" === t7.type || this.edgeType instanceof om && !0 === t7.enabled && "cubicBezier" === t7.type || this.edgeType instanceof tm && !0 === t7.enabled && "dynamic" !== t7.type && "cubicBezier" !== t7.type || this.edgeType instanceof rm && !1 === t7.type.enabled) && (i40 = !1), !0 === i40 && (e17 = this.cleanup())), !0 === i40 ? !0 === t7.enabled ? "dynamic" === t7.type ? (e17 = !0, this.edgeType = new Qy(this.options, this.body, this.labelModule)) : "cubicBezier" === t7.type ? this.edgeType = new om(this.options, this.body, this.labelModule) : this.edgeType = new tm(this.options, this.body, this.labelModule) : this.edgeType = new rm(this.options, this.body, this.labelModule) : this.edgeType.setOptions(this.options), e17;
                }
            },
            {
                key: "connect",
                value: function() {
                    this.disconnect(), this.from = this.body.nodes[this.fromId] || void 0, this.to = this.body.nodes[this.toId] || void 0, this.connected = (void 0) !== this.from && (void 0) !== this.to, !0 === this.connected ? (this.from.attachEdge(this), this.to.attachEdge(this)) : (this.from && this.from.detachEdge(this), this.to && this.to.detachEdge(this)), this.edgeType.connect();
                }
            },
            {
                key: "disconnect",
                value: function() {
                    this.from && (this.from.detachEdge(this), this.from = void 0), this.to && (this.to.detachEdge(this), this.to = void 0), this.connected = !1;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.title;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "setValueRange",
                value: function(t7, e17, i40) {
                    if ((void 0) !== this.options.value) {
                        var o57 = this.options.scaling.customScalingFunction(t7, e17, i40, this.options.value), n76 = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r40 = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o57 * r40;
                        }
                        this.options.width = this.options.scaling.min + o57 * n76;
                    } else this.options.width = this.baseWidth, this.options.font.size = this.baseFontSize;
                    this._setInteractionWidths(), this.updateLabelModule();
                }
            },
            {
                key: "_setInteractionWidths",
                value: function() {
                    "function" == typeof this.options.hoverWidth ? this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width) : this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width, "function" == typeof this.options.selectionWidth ? this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width) : this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
                }
            },
            {
                key: "draw",
                value: function(t7) {
                    var e17 = this.getFormattingValues();
                    if (!e17.hidden) {
                        var i40 = this.edgeType.getViaNode();
                        this.edgeType.drawLine(t7, e17, this.selected, this.hover, i40), this.drawLabel(t7, i40);
                    }
                }
            },
            {
                key: "drawArrows",
                value: function(t7) {
                    var e17 = this.getFormattingValues();
                    if (!e17.hidden) {
                        var i41 = this.edgeType.getViaNode(), o58 = {
                        };
                        this.edgeType.fromPoint = this.edgeType.from, this.edgeType.toPoint = this.edgeType.to, e17.fromArrow && (o58.from = this.edgeType.getArrowData(t7, "from", i41, this.selected, this.hover, e17), !1 === e17.arrowStrikethrough && (this.edgeType.fromPoint = o58.from.core), e17.fromArrowSrc && (o58.from.image = this.imagelist.load(e17.fromArrowSrc)), e17.fromArrowImageWidth && (o58.from.imageWidth = e17.fromArrowImageWidth), e17.fromArrowImageHeight && (o58.from.imageHeight = e17.fromArrowImageHeight)), e17.toArrow && (o58.to = this.edgeType.getArrowData(t7, "to", i41, this.selected, this.hover, e17), !1 === e17.arrowStrikethrough && (this.edgeType.toPoint = o58.to.core), e17.toArrowSrc && (o58.to.image = this.imagelist.load(e17.toArrowSrc)), e17.toArrowImageWidth && (o58.to.imageWidth = e17.toArrowImageWidth), e17.toArrowImageHeight && (o58.to.imageHeight = e17.toArrowImageHeight)), e17.middleArrow && (o58.middle = this.edgeType.getArrowData(t7, "middle", i41, this.selected, this.hover, e17), e17.middleArrowSrc && (o58.middle.image = this.imagelist.load(e17.middleArrowSrc)), e17.middleArrowImageWidth && (o58.middle.imageWidth = e17.middleArrowImageWidth), e17.middleArrowImageHeight && (o58.middle.imageHeight = e17.middleArrowImageHeight)), e17.fromArrow && this.edgeType.drawArrowHead(t7, e17, this.selected, this.hover, o58.from), e17.middleArrow && this.edgeType.drawArrowHead(t7, e17, this.selected, this.hover, o58.middle), e17.toArrow && this.edgeType.drawArrowHead(t7, e17, this.selected, this.hover, o58.to);
                    }
                }
            },
            {
                key: "drawLabel",
                value: function(t7, e17) {
                    if ((void 0) !== this.options.label) {
                        var i42, o59 = this.from, n77 = this.to;
                        if (this.labelModule.differentState(this.selected, this.hover) && this.labelModule.getTextSize(t7, this.selected, this.hover), o59.id != n77.id) {
                            this.labelModule.pointToSelf = !1, i42 = this.edgeType.getPoint(0.5, e17), t7.save();
                            var r41 = this._getRotation(t7);
                            0 != r41.angle && (t7.translate(r41.x, r41.y), t7.rotate(r41.angle)), this.labelModule.draw(t7, i42.x, i42.y, this.selected, this.hover), t7.restore();
                        } else {
                            this.labelModule.pointToSelf = !0;
                            var s37 = Gv(t7, this.options.selfReference.angle, this.options.selfReference.size, o59);
                            i42 = this._pointOnCircle(s37.x, s37.y, this.options.selfReference.size, this.options.selfReference.angle), this.labelModule.draw(t7, i42.x, i42.y, this.selected, this.hover);
                        }
                    }
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t7) {
                    var e17 = [];
                    if (this.labelModule.visible()) {
                        var i43 = this._getRotation();
                        Yv(this.labelModule.getSize(), t7, i43) && e17.push({
                            edgeId: this.id,
                            labelId: 0
                        });
                    }
                    var o60 = {
                        left: t7.x,
                        top: t7.y
                    };
                    return this.isOverlappingWith(o60) && e17.push({
                        edgeId: this.id
                    }), e17;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t7) {
                    if (this.connected) {
                        var e17 = this.from.x, i44 = this.from.y, o60 = this.to.x, n78 = this.to.y, r42 = t7.left, s38 = t7.top;
                        return this.edgeType.getDistanceToEdge(e17, i44, o60, n78, r42, s38) < 10;
                    }
                    return !1;
                }
            },
            {
                key: "_getRotation",
                value: function(t7) {
                    var e19 = this.edgeType.getViaNode(), i45 = this.edgeType.getPoint(0.5, e19);
                    (void 0) !== t7 && this.labelModule.calculateLabelSize(t7, this.selected, this.hover, i45.x, i45.y);
                    var o61 = {
                        x: i45.x,
                        y: this.labelModule.size.yLine,
                        angle: 0
                    };
                    if (!this.labelModule.visible()) return o61;
                    if ("horizontal" === this.options.font.align) return o61;
                    var n79 = this.from.y - this.to.y, r43 = this.from.x - this.to.x, s39 = Math.atan2(n79, r43);
                    return (s39 < -1 && r43 < 0 || s39 > 0 && r43 < 0) && (s39 += Math.PI), o61.angle = s39, o61;
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t7, e19, i45, o61) {
                    return {
                        x: t7 + i45 * Math.cos(o61),
                        y: e19 - i45 * Math.sin(o61)
                    };
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0;
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1;
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this.edgeType.cleanup();
                }
            },
            {
                key: "remove",
                value: function() {
                    this.cleanup(), this.disconnect(), delete this.body.edges[this.id];
                }
            },
            {
                key: "endPointsValid",
                value: function() {
                    return (void 0) !== this.body.nodes[this.fromId] && (void 0) !== this.body.nodes[this.toId];
                }
            }
        ], [
            {
                key: "parseOptions",
                value: function(t7, e19) {
                    var i45 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2], o61 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : {
                    }, n79 = arguments.length > 4 && (void 0) !== arguments[4] && arguments[4], r43 = [
                        "endPointOffset",
                        "arrowStrikethrough",
                        "id",
                        "from",
                        "hidden",
                        "hoverWidth",
                        "labelHighlightBold",
                        "length",
                        "line",
                        "opacity",
                        "physics",
                        "scaling",
                        "selectionWidth",
                        "selfReferenceSize",
                        "selfReference",
                        "to",
                        "title",
                        "value",
                        "width",
                        "font",
                        "chosen",
                        "widthConstraint"
                    ];
                    if (nf(r43, t7, e19, i45), (void 0) !== e19.endPointOffset && (void 0) !== e19.endPointOffset.from && (Pv(e19.endPointOffset.from) ? t7.endPointOffset.from = e19.endPointOffset.from : (t7.endPointOffset.from = (void 0) !== o61.endPointOffset.from ? o61.endPointOffset.from : 0, console.error("endPointOffset.from is not a valid number"))), (void 0) !== e19.endPointOffset && (void 0) !== e19.endPointOffset.to && (Pv(e19.endPointOffset.to) ? t7.endPointOffset.to = e19.endPointOffset.to : (t7.endPointOffset.to = (void 0) !== o61.endPointOffset.to ? o61.endPointOffset.to : 0, console.error("endPointOffset.to is not a valid number"))), Xv(e19.label) ? t7.label = e19.label : Xv(t7.label) || (t7.label = void 0), _f(t7, e19, "smooth", o61), _f(t7, e19, "shadow", o61), _f(t7, e19, "background", o61), (void 0) !== e19.dashes && null !== e19.dashes ? t7.dashes = e19.dashes : !0 === i45 && null === e19.dashes && (t7.dashes = Bl(o61.dashes)), (void 0) !== e19.scaling && null !== e19.scaling ? ((void 0) !== e19.scaling.min && (t7.scaling.min = e19.scaling.min), (void 0) !== e19.scaling.max && (t7.scaling.max = e19.scaling.max), _f(t7.scaling, e19.scaling, "label", o61.scaling)) : !0 === i45 && null === e19.scaling && (t7.scaling = Bl(o61.scaling)), (void 0) !== e19.arrows && null !== e19.arrows) {
                        if ("string" == typeof e19.arrows) {
                            var s39 = e19.arrows.toLowerCase();
                            t7.arrows.to.enabled = -1 != Cl(s39).call(s39, "to"), t7.arrows.middle.enabled = -1 != Cl(s39).call(s39, "middle"), t7.arrows.from.enabled = -1 != Cl(s39).call(s39, "from");
                        } else {
                            if ("object" !== zh(e19.arrows)) throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + Wl(e19.arrows));
                            _f(t7.arrows, e19.arrows, "to", o61.arrows), _f(t7.arrows, e19.arrows, "middle", o61.arrows), _f(t7.arrows, e19.arrows, "from", o61.arrows);
                        }
                    } else !0 === i45 && null === e19.arrows && (t7.arrows = Bl(o61.arrows));
                    if ((void 0) !== e19.color && null !== e19.color) {
                        var a34 = Ju(e19.color) ? {
                            color: e19.color,
                            highlight: e19.color,
                            hover: e19.color,
                            inherit: !1,
                            opacity: 1
                        } : e19.color, h23 = t7.color;
                        if (n79) sf(h23, o61.color, !1, i45);
                        else for(var d15 in h23)Object.prototype.hasOwnProperty.call(h23, d15) && delete h23[d15];
                        if (Ju(h23)) h23.color = h23, h23.highlight = h23, h23.hover = h23, h23.inherit = !1, (void 0) === a34.opacity && (h23.opacity = 1);
                        else {
                            var l12 = !1;
                            (void 0) !== a34.color && (h23.color = a34.color, l12 = !0), (void 0) !== a34.highlight && (h23.highlight = a34.highlight, l12 = !0), (void 0) !== a34.hover && (h23.hover = a34.hover, l12 = !0), (void 0) !== a34.inherit && (h23.inherit = a34.inherit), (void 0) !== a34.opacity && (h23.opacity = Math.min(1, Math.max(0, a34.opacity))), !0 === l12 ? h23.inherit = !1 : (void 0) === h23.inherit && (h23.inherit = "from");
                        }
                    } else !0 === i45 && null === e19.color && (t7.color = kf(o61.color));
                    !0 === i45 && null === e19.font && (t7.font = kf(o61.font)), Object.prototype.hasOwnProperty.call(e19, "selfReferenceSize") && (console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}"), t7.selfReference.size = e19.selfReferenceSize);
                }
            }
        ]), t4;
    }(), am = function() {
        function t4(e19, i45, o61) {
            var n79, r43 = this;
            Ra(this, t4), this.body = e19, this.images = i45, this.groups = o61, this.body.functions.createEdge = si(n79 = this.create).call(n79, this), this.edgesListeners = {
                add: function(t7, e20) {
                    r43.add(e20.items);
                },
                update: function(t7, e20) {
                    r43.update(e20.items);
                },
                remove: function(t7, e20) {
                    r43.remove(e20.items);
                }
            }, this.options = {
            }, this.defaultOptions = {
                arrows: {
                    to: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    middle: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    from: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    }
                },
                endPointOffset: {
                    from: 0,
                    to: 0
                },
                arrowStrikethrough: !0,
                color: {
                    color: "#848484",
                    highlight: "#848484",
                    hover: "#848484",
                    inherit: "from",
                    opacity: 1
                },
                dashes: !1,
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 2,
                    strokeColor: "#ffffff",
                    align: "horizontal",
                    multi: !1,
                    vadjust: 0,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "courier new",
                        vadjust: 2
                    }
                },
                hidden: !1,
                hoverWidth: 1.5,
                label: void 0,
                labelHighlightBold: !0,
                length: void 0,
                physics: !0,
                scaling: {
                    min: 1,
                    max: 15,
                    label: {
                        enabled: !0,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t7, e20, i46, o62) {
                        if (e20 === t7) return 0.5;
                        var n80 = 1 / (e20 - t7);
                        return Math.max(0, (o62 - t7) * n80);
                    }
                },
                selectionWidth: 1.5,
                selfReference: {
                    size: 20,
                    angle: Math.PI / 4,
                    renderBehindTheNode: !0
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                background: {
                    enabled: !1,
                    color: "rgba(111,111,111,1)",
                    size: 10,
                    dashes: !1
                },
                smooth: {
                    enabled: !0,
                    type: "dynamic",
                    forceDirection: "none",
                    roundness: 0.5
                },
                title: void 0,
                width: 1,
                value: void 0
            }, sf(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t4, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t7, e19, i45 = this;
                    this.body.emitter.on("_forceDisableDynamicCurves", function(t8) {
                        var e20 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                        "dynamic" === t8 && (t8 = "continuous");
                        var o61 = !1;
                        for(var n79 in i45.body.edges)if (Object.prototype.hasOwnProperty.call(i45.body.edges, n79)) {
                            var r43 = i45.body.edges[n79], s40 = i45.body.data.edges.get(n79);
                            if (null != s40) {
                                var a35 = s40.smooth;
                                (void 0) !== a35 && !0 === a35.enabled && "dynamic" === a35.type && ((void 0) === t8 ? r43.setOptions({
                                    smooth: !1
                                }) : r43.setOptions({
                                    smooth: {
                                        type: t8
                                    }
                                }), o61 = !0);
                            }
                        }
                        !0 === e20 && !0 === o61 && i45.body.emitter.emit("_dataChanged");
                    }), this.body.emitter.on("_dataUpdated", function() {
                        i45.reconnectEdges();
                    }), this.body.emitter.on("refreshEdges", si(t7 = this.refresh).call(t7, this)), this.body.emitter.on("refresh", si(e19 = this.refresh).call(e19, this)), this.body.emitter.on("destroy", function() {
                        lf(i45.edgesListeners, function(t8, e20) {
                            i45.body.data.edges && i45.body.data.edges.off(e20, t8);
                        }), delete i45.body.functions.createEdge, delete i45.edgesListeners.add, delete i45.edgesListeners.update, delete i45.edgesListeners.remove, delete i45.edgesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t7) {
                    if ((void 0) !== t7) {
                        sm.parseOptions(this.options, t7, !0, this.defaultOptions, !0);
                        var e19 = !1;
                        if ((void 0) !== t7.smooth) for(var i45 in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, i45) && (e19 = this.body.edges[i45].updateEdgeType() || e19);
                        if ((void 0) !== t7.font) for(var o61 in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, o61) && this.body.edges[o61].updateLabelModule();
                        (void 0) === t7.hidden && (void 0) === t7.physics && !0 !== e19 || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t7) {
                    var i46 = this, o62 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1], n79 = this.body.data.edges;
                    if (e.isDataViewLike("id", t7)) this.body.data.edges = t7;
                    else if (Hh(t7)) this.body.data.edges = new e.DataSet, this.body.data.edges.add(t7);
                    else {
                        if (t7) throw new TypeError("Array or DataSet expected");
                        this.body.data.edges = new e.DataSet;
                    }
                    if (n79 && lf(this.edgesListeners, function(t8, e20) {
                        n79.off(e20, t8);
                    }), this.body.edges = {
                    }, this.body.data.edges) {
                        lf(this.edgesListeners, function(t8, e20) {
                            i46.body.data.edges.on(e20, t8);
                        });
                        var r44 = this.body.data.edges.getIds();
                        this.add(r44, !0);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === o62 && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t7) {
                    for(var e20 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1], i46 = this.body.edges, o62 = this.body.data.edges, n79 = 0; n79 < t7.length; n79++){
                        var r45 = t7[n79], s41 = i46[r45];
                        s41 && s41.disconnect();
                        var a36 = o62.get(r45, {
                            showInternalIds: !0
                        });
                        i46[r45] = this.create(a36);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === e20 && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t7) {
                    for(var e20 = this.body.edges, i46 = this.body.data.edges, o62 = !1, n79 = 0; n79 < t7.length; n79++){
                        var r46 = t7[n79], s42 = i46.get(r46), a37 = e20[r46];
                        (void 0) !== a37 ? (a37.disconnect(), o62 = a37.setOptions(s42) || o62, a37.connect()) : (this.body.edges[r46] = this.create(s42), o62 = !0);
                    }
                    !0 === o62 ? (this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), this.body.emitter.emit("_dataChanged")) : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t7) {
                    var e20 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                    if (0 !== t7.length) {
                        var i46 = this.body.edges;
                        lf(t7, function(t8) {
                            var e21 = i46[t8];
                            (void 0) !== e21 && e21.remove();
                        }), e20 && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t7 = this;
                    lf(this.body.edges, function(e20, i47) {
                        var o62 = t7.body.data.edges.get(i47);
                        (void 0) !== o62 && e20.setOptions(o62);
                    });
                }
            },
            {
                key: "create",
                value: function(t7) {
                    return new sm(t7, this.body, this.images, this.options, this.defaultOptions);
                }
            },
            {
                key: "reconnectEdges",
                value: function() {
                    var t7, e20 = this.body.nodes, i47 = this.body.edges;
                    for(t7 in e20)Object.prototype.hasOwnProperty.call(e20, t7) && (e20[t7].edges = []);
                    for(t7 in i47)if (Object.prototype.hasOwnProperty.call(i47, t7)) {
                        var o62 = i47[t7];
                        o62.from = null, o62.to = null, o62.connect();
                    }
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t7) {
                    var e20 = [];
                    if ((void 0) !== this.body.edges[t7]) {
                        var i47 = this.body.edges[t7];
                        (void 0) !== i47.fromId && e20.push(i47.fromId), (void 0) !== i47.toId && e20.push(i47.toId);
                    }
                    return e20;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    this._addMissingEdges(), this._removeInvalidEdges();
                }
            },
            {
                key: "_removeInvalidEdges",
                value: function() {
                    var t7 = this, e20 = [];
                    lf(this.body.edges, function(i48, o63) {
                        var n79 = t7.body.nodes[i48.toId], r47 = t7.body.nodes[i48.fromId];
                        (void 0) !== n79 && !0 === n79.isCluster || (void 0) !== r47 && !0 === r47.isCluster || (void 0) !== n79 && (void 0) !== r47 || e20.push(o63);
                    }), this.remove(e20, !1);
                }
            },
            {
                key: "_addMissingEdges",
                value: function() {
                    var t7 = this.body.data.edges;
                    if (null != t7) {
                        var e20 = this.body.edges, i48 = [];
                        nd(t7).call(t7, function(t8, o63) {
                            (void 0) === e20[o63] && i48.push(o63);
                        }), this.add(i48, !0);
                    }
                }
            }
        ]), t4;
    }(), hm = function() {
        function t4(e21, i49, o63) {
            Ra(this, t4), this.body = e21, this.physicsBody = i49, this.barnesHutTree, this.setOptions(o63), this._rng = Vu("BARNES HUT SOLVER");
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t7) {
                    this.options = t7, this.thetaInversed = 1 / this.options.theta, this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
                }
            },
            {
                key: "solve",
                value: function() {
                    if (0 !== this.options.gravitationalConstant && this.physicsBody.physicsNodeIndices.length > 0) {
                        var t7, e21 = this.body.nodes, i49 = this.physicsBody.physicsNodeIndices, o63 = i49.length, n79 = this._formBarnesHutTree(e21, i49);
                        this.barnesHutTree = n79;
                        for(var r47 = 0; r47 < o63; r47++)(t7 = e21[i49[r47]]).options.mass > 0 && this._getForceContributions(n79.root, t7);
                    }
                }
            },
            {
                key: "_getForceContributions",
                value: function(t8, e22) {
                    this._getForceContribution(t8.children.NW, e22), this._getForceContribution(t8.children.NE, e22), this._getForceContribution(t8.children.SW, e22), this._getForceContribution(t8.children.SE, e22);
                }
            },
            {
                key: "_getForceContribution",
                value: function(t8, e22) {
                    if (t8.childrenCount > 0) {
                        var i50 = t8.centerOfMass.x - e22.x, o64 = t8.centerOfMass.y - e22.y, n80 = Math.sqrt(i50 * i50 + o64 * o64);
                        n80 * t8.calcSize > this.thetaInversed ? this._calculateForces(n80, i50, o64, e22, t8) : 4 === t8.childrenCount ? this._getForceContributions(t8, e22) : t8.children.data.id != e22.id && this._calculateForces(n80, i50, o64, e22, t8);
                    }
                }
            },
            {
                key: "_calculateForces",
                value: function(t8, e22, i51, o65, n81) {
                    0 === t8 && (e22 = t8 = 0.1), this.overlapAvoidanceFactor < 1 && o65.shape.radius && (t8 = Math.max(0.1 + this.overlapAvoidanceFactor * o65.shape.radius, t8 - o65.shape.radius));
                    var r48 = this.options.gravitationalConstant * n81.mass * o65.options.mass / Math.pow(t8, 3), s43 = e22 * r48, a38 = i51 * r48;
                    this.physicsBody.forces[o65.id].x += s43, this.physicsBody.forces[o65.id].y += a38;
                }
            },
            {
                key: "_formBarnesHutTree",
                value: function(t8, e22) {
                    for(var i51, o65 = e22.length, n81 = t8[e22[0]].x, r48 = t8[e22[0]].y, s43 = t8[e22[0]].x, a38 = t8[e22[0]].y, h24 = 1; h24 < o65; h24++){
                        var d16 = t8[e22[h24]], l13 = d16.x, c9 = d16.y;
                        d16.options.mass > 0 && (l13 < n81 && (n81 = l13), l13 > s43 && (s43 = l13), c9 < r48 && (r48 = c9), c9 > a38 && (a38 = c9));
                    }
                    var u9 = Math.abs(s43 - n81) - Math.abs(a38 - r48);
                    u9 > 0 ? (r48 -= 0.5 * u9, a38 += 0.5 * u9) : (n81 += 0.5 * u9, s43 -= 0.5 * u9);
                    var f11 = Math.max(0.00001, Math.abs(s43 - n81)), p7 = 0.5 * f11, v7 = 0.5 * (n81 + s43), g5 = 0.5 * (r48 + a38), y3 = {
                        root: {
                            centerOfMass: {
                                x: 0,
                                y: 0
                            },
                            mass: 0,
                            range: {
                                minX: v7 - p7,
                                maxX: v7 + p7,
                                minY: g5 - p7,
                                maxY: g5 + p7
                            },
                            size: f11,
                            calcSize: 1 / f11,
                            children: {
                                data: null
                            },
                            maxWidth: 0,
                            level: 0,
                            childrenCount: 4
                        }
                    };
                    this._splitBranch(y3.root);
                    for(var m3 = 0; m3 < o65; m3++)(i51 = t8[e22[m3]]).options.mass > 0 && this._placeInTree(y3.root, i51);
                    return y3;
                }
            },
            {
                key: "_updateBranchMass",
                value: function(t8, e22) {
                    var i51 = t8.centerOfMass, o65 = t8.mass + e22.options.mass, n81 = 1 / o65;
                    i51.x = i51.x * t8.mass + e22.x * e22.options.mass, i51.x *= n81, i51.y = i51.y * t8.mass + e22.y * e22.options.mass, i51.y *= n81, t8.mass = o65;
                    var r48 = Math.max(Math.max(e22.height, e22.radius), e22.width);
                    t8.maxWidth = t8.maxWidth < r48 ? r48 : t8.maxWidth;
                }
            },
            {
                key: "_placeInTree",
                value: function(t8, e22, i51) {
                    1 == i51 && (void 0) !== i51 || this._updateBranchMass(t8, e22);
                    var o65, n81 = t8.children.NW.range;
                    o65 = n81.maxX > e22.x ? n81.maxY > e22.y ? "NW" : "SW" : n81.maxY > e22.y ? "NE" : "SE", this._placeInRegion(t8, e22, o65);
                }
            },
            {
                key: "_placeInRegion",
                value: function(t8, e22, i51) {
                    var o65 = t8.children[i51];
                    switch(o65.childrenCount){
                        case 0:
                            o65.children.data = e22, o65.childrenCount = 1, this._updateBranchMass(o65, e22);
                            break;
                        case 1:
                            o65.children.data.x === e22.x && o65.children.data.y === e22.y ? (e22.x += this._rng(), e22.y += this._rng()) : (this._splitBranch(o65), this._placeInTree(o65, e22));
                            break;
                        case 4:
                            this._placeInTree(o65, e22);
                    }
                }
            },
            {
                key: "_splitBranch",
                value: function(t8) {
                    var e22 = null;
                    1 === t8.childrenCount && (e22 = t8.children.data, t8.mass = 0, t8.centerOfMass.x = 0, t8.centerOfMass.y = 0), t8.childrenCount = 4, t8.children.data = null, this._insertRegion(t8, "NW"), this._insertRegion(t8, "NE"), this._insertRegion(t8, "SW"), this._insertRegion(t8, "SE"), null != e22 && this._placeInTree(t8, e22);
                }
            },
            {
                key: "_insertRegion",
                value: function(t8, e22) {
                    var i51, o65, n81, r48, s43 = 0.5 * t8.size;
                    switch(e22){
                        case "NW":
                            i51 = t8.range.minX, o65 = t8.range.minX + s43, n81 = t8.range.minY, r48 = t8.range.minY + s43;
                            break;
                        case "NE":
                            i51 = t8.range.minX + s43, o65 = t8.range.maxX, n81 = t8.range.minY, r48 = t8.range.minY + s43;
                            break;
                        case "SW":
                            i51 = t8.range.minX, o65 = t8.range.minX + s43, n81 = t8.range.minY + s43, r48 = t8.range.maxY;
                            break;
                        case "SE":
                            i51 = t8.range.minX + s43, o65 = t8.range.maxX, n81 = t8.range.minY + s43, r48 = t8.range.maxY;
                    }
                    t8.children[e22] = {
                        centerOfMass: {
                            x: 0,
                            y: 0
                        },
                        mass: 0,
                        range: {
                            minX: i51,
                            maxX: o65,
                            minY: n81,
                            maxY: r48
                        },
                        size: 0.5 * t8.size,
                        calcSize: 2 * t8.calcSize,
                        children: {
                            data: null
                        },
                        maxWidth: 0,
                        level: t8.level + 1,
                        childrenCount: 0
                    };
                }
            },
            {
                key: "_debug",
                value: function(t8, e22) {
                    (void 0) !== this.barnesHutTree && (t8.lineWidth = 1, this._drawBranch(this.barnesHutTree.root, t8, e22));
                }
            },
            {
                key: "_drawBranch",
                value: function(t8, e22, i51) {
                    (void 0) === i51 && (i51 = "#FF0000"), 4 === t8.childrenCount && (this._drawBranch(t8.children.NW, e22), this._drawBranch(t8.children.NE, e22), this._drawBranch(t8.children.SE, e22), this._drawBranch(t8.children.SW, e22)), e22.strokeStyle = i51, e22.beginPath(), e22.moveTo(t8.range.minX, t8.range.minY), e22.lineTo(t8.range.maxX, t8.range.minY), e22.stroke(), e22.beginPath(), e22.moveTo(t8.range.maxX, t8.range.minY), e22.lineTo(t8.range.maxX, t8.range.maxY), e22.stroke(), e22.beginPath(), e22.moveTo(t8.range.maxX, t8.range.maxY), e22.lineTo(t8.range.minX, t8.range.maxY), e22.stroke(), e22.beginPath(), e22.moveTo(t8.range.minX, t8.range.maxY), e22.lineTo(t8.range.minX, t8.range.minY), e22.stroke();
                }
            }
        ]), t4;
    }(), dm = function() {
        function t4(e22, i51, o65) {
            Ra(this, t4), this._rng = Vu("REPULSION SOLVER"), this.body = e22, this.physicsBody = i51, this.setOptions(o65);
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t8) {
                    this.options = t8;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t8, e22, i51, o65, n81, r48, s43, a38, h24 = this.body.nodes, d17 = this.physicsBody.physicsNodeIndices, l14 = this.physicsBody.forces, c10 = this.options.nodeDistance, u9 = -2 / 3 / c10, f11 = 0; f11 < d17.length - 1; f11++){
                        s43 = h24[d17[f11]];
                        for(var p7 = f11 + 1; p7 < d17.length; p7++)t8 = (a38 = h24[d17[p7]]).x - s43.x, e22 = a38.y - s43.y, 0 === (i51 = Math.sqrt(t8 * t8 + e22 * e22)) && (t8 = i51 = 0.1 * this._rng()), i51 < 2 * c10 && (r48 = i51 < 0.5 * c10 ? 1 : u9 * i51 + 1.3333333333333333, o65 = t8 * (r48 /= i51), n81 = e22 * r48, l14[s43.id].x -= o65, l14[s43.id].y -= n81, l14[a38.id].x += o65, l14[a38.id].y += n81);
                    }
                }
            }
        ]), t4;
    }(), lm = function() {
        function t4(e22, i51, o65) {
            Ra(this, t4), this.body = e22, this.physicsBody = i51, this.setOptions(o65);
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t8) {
                    this.options = t8, this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t8 = this.body.nodes, e22 = this.physicsBody.physicsNodeIndices, i51 = this.physicsBody.forces, o65 = this.options.nodeDistance, n81 = 0; n81 < e22.length - 1; n81++)for(var r48 = t8[e22[n81]], s43 = n81 + 1; s43 < e22.length; s43++){
                        var a38 = t8[e22[s43]];
                        if (r48.level === a38.level) {
                            var h24 = o65 + this.overlapAvoidanceFactor * ((r48.shape.radius || 0) / 2 + (a38.shape.radius || 0) / 2), d17 = a38.x - r48.x, l14 = a38.y - r48.y, c10 = Math.sqrt(d17 * d17 + l14 * l14), u9 = void 0;
                            u9 = c10 < h24 ? -Math.pow(0.05 * c10, 2) + Math.pow(0.05 * h24, 2) : 0, 0 !== c10 && (u9 /= c10);
                            var f11 = d17 * u9, p8 = l14 * u9;
                            i51[r48.id].x -= f11, i51[r48.id].y -= p8, i51[a38.id].x += f11, i51[a38.id].y += p8;
                        }
                    }
                }
            }
        ]), t4;
    }(), cm = function() {
        function t4(e22, i51, o65) {
            Ra(this, t4), this.body = e22, this.physicsBody = i51, this.setOptions(o65);
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t8) {
                    this.options = t8;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t8, e22, i51, o65, n81, r48 = this.physicsBody.physicsEdgeIndices, s43 = this.body.edges, a39 = 0; a39 < r48.length; a39++)!0 === (e22 = s43[r48[a39]]).connected && e22.toId !== e22.fromId && (void 0) !== this.body.nodes[e22.toId] && (void 0) !== this.body.nodes[e22.fromId] && ((void 0) !== e22.edgeType.via ? (t8 = (void 0) === e22.options.length ? this.options.springLength : e22.options.length, i51 = e22.to, o65 = e22.edgeType.via, n81 = e22.from, this._calculateSpringForce(i51, o65, 0.5 * t8), this._calculateSpringForce(o65, n81, 0.5 * t8)) : (t8 = (void 0) === e22.options.length ? 1.5 * this.options.springLength : e22.options.length, this._calculateSpringForce(e22.from, e22.to, t8)));
                }
            },
            {
                key: "_calculateSpringForce",
                value: function(t8, e22, i51) {
                    var o65 = t8.x - e22.x, n81 = t8.y - e22.y, r48 = Math.max(Math.sqrt(o65 * o65 + n81 * n81), 0.01), s43 = this.options.springConstant * (i51 - r48) / r48, a39 = o65 * s43, h25 = n81 * s43;
                    (void 0) !== this.physicsBody.forces[t8.id] && (this.physicsBody.forces[t8.id].x += a39, this.physicsBody.forces[t8.id].y += h25), (void 0) !== this.physicsBody.forces[e22.id] && (this.physicsBody.forces[e22.id].x -= a39, this.physicsBody.forces[e22.id].y -= h25);
                }
            }
        ]), t4;
    }(), um = function() {
        function t4(e22, i51, o65) {
            Ra(this, t4), this.body = e22, this.physicsBody = i51, this.setOptions(o65);
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t8) {
                    this.options = t8;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t8, e22, i51, o65, n81, r48, s43, a39, h25, d18, l15 = this.body.edges, c11 = 0.5, u10 = this.physicsBody.physicsEdgeIndices, f12 = this.physicsBody.physicsNodeIndices, p9 = this.physicsBody.forces, v7 = 0; v7 < f12.length; v7++){
                        var g5 = f12[v7];
                        p9[g5].springFx = 0, p9[g5].springFy = 0;
                    }
                    for(var y3 = 0; y3 < u10.length; y3++)!0 === (e22 = l15[u10[y3]]).connected && (t8 = (void 0) === e22.options.length ? this.options.springLength : e22.options.length, i51 = e22.from.x - e22.to.x, o65 = e22.from.y - e22.to.y, a39 = 0 === (a39 = Math.sqrt(i51 * i51 + o65 * o65)) ? 0.01 : a39, n81 = i51 * (s43 = this.options.springConstant * (t8 - a39) / a39), r48 = o65 * s43, e22.to.level != e22.from.level ? ((void 0) !== p9[e22.toId] && (p9[e22.toId].springFx -= n81, p9[e22.toId].springFy -= r48), (void 0) !== p9[e22.fromId] && (p9[e22.fromId].springFx += n81, p9[e22.fromId].springFy += r48)) : ((void 0) !== p9[e22.toId] && (p9[e22.toId].x -= c11 * n81, p9[e22.toId].y -= c11 * r48), (void 0) !== p9[e22.fromId] && (p9[e22.fromId].x += c11 * n81, p9[e22.fromId].y += c11 * r48)));
                    s43 = 1;
                    for(var m3 = 0; m3 < f12.length; m3++){
                        var b3 = f12[m3];
                        h25 = Math.min(s43, Math.max(-s43, p9[b3].springFx)), d18 = Math.min(s43, Math.max(-s43, p9[b3].springFy)), p9[b3].x += h25, p9[b3].y += d18;
                    }
                    for(var w2 = 0, k2 = 0, _2 = 0; _2 < f12.length; _2++){
                        var x2 = f12[_2];
                        w2 += p9[x2].x, k2 += p9[x2].y;
                    }
                    for(var E2 = w2 / f12.length, O2 = k2 / f12.length, C2 = 0; C2 < f12.length; C2++){
                        var S2 = f12[C2];
                        p9[S2].x -= E2, p9[S2].y -= O2;
                    }
                }
            }
        ]), t4;
    }(), fm = function() {
        function t4(e22, i51, o65) {
            Ra(this, t4), this.body = e22, this.physicsBody = i51, this.setOptions(o65);
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t8) {
                    this.options = t8;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t8, e22, i51, o65, n81 = this.body.nodes, r48 = this.physicsBody.physicsNodeIndices, s43 = this.physicsBody.forces, a39 = 0; a39 < r48.length; a39++)t8 = -(o65 = n81[r48[a39]]).x, e22 = -o65.y, i51 = Math.sqrt(t8 * t8 + e22 * e22), this._calculateForces(i51, t8, e22, s43, o65);
                }
            },
            {
                key: "_calculateForces",
                value: function(t8, e22, i51, o65, n81) {
                    var r48 = 0 === t8 ? 0 : this.options.centralGravity / t8;
                    o65[n81.id].x = e22 * r48, o65[n81.id].y = i51 * r48;
                }
            }
        ]), t4;
    }();
    function pm(t4) {
        var e22 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t8) {
                return !1;
            }
        }();
        return function() {
            var i51, o65 = Eg(t4);
            if (e22) {
                var n81 = Eg(this).constructor;
                i51 = yg(o65, arguments, n81);
            } else i51 = o65.apply(this, arguments);
            return _g(this, i51);
        };
    }
    var vm = function(t4) {
        kg(i51, t4);
        var e22 = pm(i51);
        function i51(t8, o65, n82) {
            var r48;
            return Ra(this, i51), (r48 = e22.call(this, t8, o65, n82))._rng = Vu("FORCE ATLAS 2 BASED REPULSION SOLVER"), r48;
        }
        return Ha(i51, [
            {
                key: "_calculateForces",
                value: function(t8, e23, i52, o65, n82) {
                    0 === t8 && (e23 = t8 = 0.1 * this._rng()), this.overlapAvoidanceFactor < 1 && o65.shape.radius && (t8 = Math.max(0.1 + this.overlapAvoidanceFactor * o65.shape.radius, t8 - o65.shape.radius));
                    var r48 = o65.edges.length + 1, s43 = this.options.gravitationalConstant * n82.mass * o65.options.mass * r48 / Math.pow(t8, 2), a39 = e23 * s43, h25 = i52 * s43;
                    this.physicsBody.forces[o65.id].x += a39, this.physicsBody.forces[o65.id].y += h25;
                }
            }
        ]), i51;
    }(hm);
    function gm(t4) {
        var e22 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t8) {
                return !1;
            }
        }();
        return function() {
            var i51, o65 = Eg(t4);
            if (e22) {
                var n82 = Eg(this).constructor;
                i51 = yg(o65, arguments, n82);
            } else i51 = o65.apply(this, arguments);
            return _g(this, i51);
        };
    }
    var ym, mm = function(t4) {
        kg(i51, t4);
        var e22 = gm(i51);
        function i51(t8, o65, n83) {
            return Ra(this, i51), e22.call(this, t8, o65, n83);
        }
        return Ha(i51, [
            {
                key: "_calculateForces",
                value: function(t8, e23, i52, o65, n83) {
                    if (t8 > 0) {
                        var r48 = n83.edges.length + 1, s43 = this.options.centralGravity * r48 * n83.options.mass;
                        o65[n83.id].x = e23 * s43, o65[n83.id].y = i52 * s43;
                    }
                }
            }
        ]), i51;
    }(fm), bm = function() {
        function t4(e22) {
            Ra(this, t4), this.body = e22, this.physicsBody = {
                physicsNodeIndices: [],
                physicsEdgeIndices: [],
                forces: {
                },
                velocities: {
                }
            }, this.physicsEnabled = !0, this.simulationInterval = 1000 / 60, this.requiresTimeout = !0, this.previousStates = {
            }, this.referenceState = {
            }, this.freezeCache = {
            }, this.renderTimer = void 0, this.adaptiveTimestep = !1, this.adaptiveTimestepEnabled = !1, this.adaptiveCounter = 0, this.adaptiveInterval = 3, this.stabilized = !1, this.startedStabilization = !1, this.stabilizationIterations = 0, this.ready = !1, this.options = {
            }, this.defaultOptions = {
                enabled: !0,
                barnesHut: {
                    theta: 0.5,
                    gravitationalConstant: -2000,
                    centralGravity: 0.3,
                    springLength: 95,
                    springConstant: 0.04,
                    damping: 0.09,
                    avoidOverlap: 0
                },
                forceAtlas2Based: {
                    theta: 0.5,
                    gravitationalConstant: -50,
                    centralGravity: 0.01,
                    springConstant: 0.08,
                    springLength: 100,
                    damping: 0.4,
                    avoidOverlap: 0
                },
                repulsion: {
                    centralGravity: 0.2,
                    springLength: 200,
                    springConstant: 0.05,
                    nodeDistance: 100,
                    damping: 0.09,
                    avoidOverlap: 0
                },
                hierarchicalRepulsion: {
                    centralGravity: 0,
                    springLength: 100,
                    springConstant: 0.01,
                    nodeDistance: 120,
                    damping: 0.09
                },
                maxVelocity: 50,
                minVelocity: 0.75,
                solver: "barnesHut",
                stabilization: {
                    enabled: !0,
                    iterations: 1000,
                    updateInterval: 50,
                    onlyDynamicEdges: !1,
                    fit: !0
                },
                timestep: 0.5,
                adaptiveTimestep: !0,
                wind: {
                    x: 0,
                    y: 0
                }
            }, Ke(this.options, this.defaultOptions), this.timestep = 0.5, this.layoutFailed = !1, this.bindEventListeners();
        }
        return Ha(t4, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t8 = this;
                    this.body.emitter.on("initPhysics", function() {
                        t8.initPhysics();
                    }), this.body.emitter.on("_layoutFailed", function() {
                        t8.layoutFailed = !0;
                    }), this.body.emitter.on("resetPhysics", function() {
                        t8.stopSimulation(), t8.ready = !1;
                    }), this.body.emitter.on("disablePhysics", function() {
                        t8.physicsEnabled = !1, t8.stopSimulation();
                    }), this.body.emitter.on("restorePhysics", function() {
                        t8.setOptions(t8.options), !0 === t8.ready && t8.startSimulation();
                    }), this.body.emitter.on("startSimulation", function() {
                        !0 === t8.ready && t8.startSimulation();
                    }), this.body.emitter.on("stopSimulation", function() {
                        t8.stopSimulation();
                    }), this.body.emitter.on("destroy", function() {
                        t8.stopSimulation(!1), t8.body.emitter.off();
                    }), this.body.emitter.on("_dataChanged", function() {
                        t8.updatePhysicsData();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t8) {
                    if ((void 0) !== t8) {
                        if (!1 === t8) this.options.enabled = !1, this.physicsEnabled = !1, this.stopSimulation();
                        else if (!0 === t8) this.options.enabled = !0, this.physicsEnabled = !0, this.startSimulation();
                        else {
                            this.physicsEnabled = !0, rf([
                                "stabilization"
                            ], this.options, t8), _f(this.options, t8, "stabilization"), (void 0) === t8.enabled && (this.options.enabled = !0), !1 === this.options.enabled && (this.physicsEnabled = !1, this.stopSimulation());
                            var e22 = this.options.wind;
                            e22 && (("number" != typeof e22.x || Tv(e22.x)) && (e22.x = 0), ("number" != typeof e22.y || Tv(e22.y)) && (e22.y = 0)), this.timestep = this.options.timestep;
                        }
                    }
                    this.init();
                }
            },
            {
                key: "init",
                value: function() {
                    var t8;
                    "forceAtlas2Based" === this.options.solver ? (t8 = this.options.forceAtlas2Based, this.nodesSolver = new vm(this.body, this.physicsBody, t8), this.edgesSolver = new cm(this.body, this.physicsBody, t8), this.gravitySolver = new mm(this.body, this.physicsBody, t8)) : "repulsion" === this.options.solver ? (t8 = this.options.repulsion, this.nodesSolver = new dm(this.body, this.physicsBody, t8), this.edgesSolver = new cm(this.body, this.physicsBody, t8), this.gravitySolver = new fm(this.body, this.physicsBody, t8)) : "hierarchicalRepulsion" === this.options.solver ? (t8 = this.options.hierarchicalRepulsion, this.nodesSolver = new lm(this.body, this.physicsBody, t8), this.edgesSolver = new um(this.body, this.physicsBody, t8), this.gravitySolver = new fm(this.body, this.physicsBody, t8)) : (t8 = this.options.barnesHut, this.nodesSolver = new hm(this.body, this.physicsBody, t8), this.edgesSolver = new cm(this.body, this.physicsBody, t8), this.gravitySolver = new fm(this.body, this.physicsBody, t8)), this.modelOptions = t8;
                }
            },
            {
                key: "initPhysics",
                value: function() {
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? !0 === this.options.stabilization.enabled ? this.stabilize() : (this.stabilized = !1, this.ready = !0, this.body.emitter.emit("fit", {
                    }, this.layoutFailed), this.startSimulation()) : (this.ready = !0, this.body.emitter.emit("fit"));
                }
            },
            {
                key: "startSimulation",
                value: function() {
                    var t8;
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? (this.stabilized = !1, this.adaptiveTimestep = !1, this.body.emitter.emit("_resizeNodes"), (void 0) === this.viewFunction && (this.viewFunction = si(t8 = this.simulationStep).call(t8, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering"))) : this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "stopSimulation",
                value: function() {
                    var t8 = !(arguments.length > 0 && (void 0) !== arguments[0]) || arguments[0];
                    this.stabilized = !0, !0 === t8 && this._emitStabilized(), (void 0) !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.viewFunction = void 0, !0 === t8 && this.body.emitter.emit("_stopRendering"));
                }
            },
            {
                key: "simulationStep",
                value: function() {
                    var t8 = Kh();
                    this.physicsTick(), (Kh() - t8 < 0.4 * this.simulationInterval || !0 === this.runDoubleSpeed) && !1 === this.stabilized && (this.physicsTick(), this.runDoubleSpeed = !0), !0 === this.stabilized && this.stopSimulation();
                }
            },
            {
                key: "_emitStabilized",
                value: function() {
                    var t8 = this, e23 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : this.stabilizationIterations;
                    (this.stabilizationIterations > 1 || !0 === this.startedStabilization) && Yl(function() {
                        t8.body.emitter.emit("stabilized", {
                            iterations: e23
                        }), t8.startedStabilization = !1, t8.stabilizationIterations = 0;
                    }, 0);
                }
            },
            {
                key: "physicsStep",
                value: function() {
                    this.gravitySolver.solve(), this.nodesSolver.solve(), this.edgesSolver.solve(), this.moveNodes();
                }
            },
            {
                key: "adjustTimeStep",
                value: function() {
                    !0 === this._evaluateStepQuality() ? this.timestep = 1.2 * this.timestep : this.timestep / 1.2 < this.options.timestep ? this.timestep = this.options.timestep : (this.adaptiveCounter = -1, this.timestep = Math.max(this.options.timestep, this.timestep / 1.2));
                }
            },
            {
                key: "physicsTick",
                value: function() {
                    if (this._startStabilizing(), !0 !== this.stabilized) {
                        if (!0 === this.adaptiveTimestep && !0 === this.adaptiveTimestepEnabled) this.adaptiveCounter % this.adaptiveInterval == 0 ? (this.timestep = 2 * this.timestep, this.physicsStep(), this.revert(), this.timestep = 0.5 * this.timestep, this.physicsStep(), this.physicsStep(), this.adjustTimeStep()) : this.physicsStep(), this.adaptiveCounter += 1;
                        else this.timestep = this.options.timestep, this.physicsStep();
                        !0 === this.stabilized && this.revert(), this.stabilizationIterations++;
                    }
                }
            },
            {
                key: "updatePhysicsData",
                value: function() {
                    this.physicsBody.forces = {
                    }, this.physicsBody.physicsNodeIndices = [], this.physicsBody.physicsEdgeIndices = [];
                    var t8 = this.body.nodes, e23 = this.body.edges;
                    for(var i51 in t8)Object.prototype.hasOwnProperty.call(t8, i51) && !0 === t8[i51].options.physics && this.physicsBody.physicsNodeIndices.push(t8[i51].id);
                    for(var o65 in e23)Object.prototype.hasOwnProperty.call(e23, o65) && !0 === e23[o65].options.physics && this.physicsBody.physicsEdgeIndices.push(e23[o65].id);
                    for(var n83 = 0; n83 < this.physicsBody.physicsNodeIndices.length; n83++){
                        var r49 = this.physicsBody.physicsNodeIndices[n83];
                        this.physicsBody.forces[r49] = {
                            x: 0,
                            y: 0
                        }, (void 0) === this.physicsBody.velocities[r49] && (this.physicsBody.velocities[r49] = {
                            x: 0,
                            y: 0
                        });
                    }
                    for(var s44 in this.physicsBody.velocities)(void 0) === t8[s44] && delete this.physicsBody.velocities[s44];
                }
            },
            {
                key: "revert",
                value: function() {
                    var t8 = Gh(this.previousStates), e23 = this.body.nodes, i51 = this.physicsBody.velocities;
                    this.referenceState = {
                    };
                    for(var o65 = 0; o65 < t8.length; o65++){
                        var n83 = t8[o65];
                        (void 0) !== e23[n83] ? !0 === e23[n83].options.physics && (this.referenceState[n83] = {
                            positions: {
                                x: e23[n83].x,
                                y: e23[n83].y
                            }
                        }, i51[n83].x = this.previousStates[n83].vx, i51[n83].y = this.previousStates[n83].vy, e23[n83].x = this.previousStates[n83].x, e23[n83].y = this.previousStates[n83].y) : delete this.previousStates[n83];
                    }
                }
            },
            {
                key: "_evaluateStepQuality",
                value: function() {
                    var t8, e23, i51 = this.body.nodes, o65 = this.referenceState;
                    for(var n84 in this.referenceState)if (Object.prototype.hasOwnProperty.call(this.referenceState, n84) && (void 0) !== i51[n84] && (t8 = i51[n84].x - o65[n84].positions.x, e23 = i51[n84].y - o65[n84].positions.y, Math.sqrt(Math.pow(t8, 2) + Math.pow(e23, 2)) > 0.3)) return !1;
                    return !0;
                }
            },
            {
                key: "moveNodes",
                value: function() {
                    for(var t8 = this.physicsBody.physicsNodeIndices, e23 = 0, i51 = 0, o65 = 0; o65 < t8.length; o65++){
                        var n84 = t8[o65], r50 = this._performStep(n84);
                        e23 = Math.max(e23, r50), i51 += r50;
                    }
                    this.adaptiveTimestepEnabled = i51 / t8.length < 5, this.stabilized = e23 < this.options.minVelocity;
                }
            },
            {
                key: "calculateComponentVelocity",
                value: function(t8, e23, i51) {
                    t8 += (e23 - this.modelOptions.damping * t8) / i51 * this.timestep;
                    var o65 = this.options.maxVelocity || 1000000000;
                    return Math.abs(t8) > o65 && (t8 = t8 > 0 ? o65 : -o65), t8;
                }
            },
            {
                key: "_performStep",
                value: function(t8) {
                    var e23 = this.body.nodes[t8], i51 = this.physicsBody.forces[t8];
                    this.options.wind && (i51.x += this.options.wind.x, i51.y += this.options.wind.y);
                    var o65 = this.physicsBody.velocities[t8];
                    return this.previousStates[t8] = {
                        x: e23.x,
                        y: e23.y,
                        vx: o65.x,
                        vy: o65.y
                    }, !1 === e23.options.fixed.x ? (o65.x = this.calculateComponentVelocity(o65.x, i51.x, e23.options.mass), e23.x += o65.x * this.timestep) : (i51.x = 0, o65.x = 0), !1 === e23.options.fixed.y ? (o65.y = this.calculateComponentVelocity(o65.y, i51.y, e23.options.mass), e23.y += o65.y * this.timestep) : (i51.y = 0, o65.y = 0), Math.sqrt(Math.pow(o65.x, 2) + Math.pow(o65.y, 2));
                }
            },
            {
                key: "_freezeNodes",
                value: function() {
                    var t8 = this.body.nodes;
                    for(var e23 in t8)if (Object.prototype.hasOwnProperty.call(t8, e23) && t8[e23].x && t8[e23].y) {
                        var i51 = t8[e23].options.fixed;
                        this.freezeCache[e23] = {
                            x: i51.x,
                            y: i51.y
                        }, i51.x = !0, i51.y = !0;
                    }
                }
            },
            {
                key: "_restoreFrozenNodes",
                value: function() {
                    var t8 = this.body.nodes;
                    for(var e23 in t8)Object.prototype.hasOwnProperty.call(t8, e23) && (void 0) !== this.freezeCache[e23] && (t8[e23].options.fixed.x = this.freezeCache[e23].x, t8[e23].options.fixed.y = this.freezeCache[e23].y);
                    this.freezeCache = {
                    };
                }
            },
            {
                key: "stabilize",
                value: function() {
                    var t8 = this, e23 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : this.options.stabilization.iterations;
                    "number" != typeof e23 && (e23 = this.options.stabilization.iterations, console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ", e23)), 0 !== this.physicsBody.physicsNodeIndices.length ? (this.adaptiveTimestep = this.options.adaptiveTimestep, this.body.emitter.emit("_resizeNodes"), this.stopSimulation(), this.stabilized = !1, this.body.emitter.emit("_blockRedraw"), this.targetIterations = e23, !0 === this.options.stabilization.onlyDynamicEdges && this._freezeNodes(), this.stabilizationIterations = 0, Yl(function() {
                        return t8._stabilizationBatch();
                    }, 0)) : this.ready = !0;
                }
            },
            {
                key: "_startStabilizing",
                value: function() {
                    return !0 !== this.startedStabilization && (this.body.emitter.emit("startStabilizing"), this.startedStabilization = !0, !0);
                }
            },
            {
                key: "_stabilizationBatch",
                value: function() {
                    var t8 = this, e23 = function() {
                        return !1 === t8.stabilized && t8.stabilizationIterations < t8.targetIterations;
                    }, i52 = function() {
                        t8.body.emitter.emit("stabilizationProgress", {
                            iterations: t8.stabilizationIterations,
                            total: t8.targetIterations
                        });
                    };
                    this._startStabilizing() && i52();
                    for(var o65, n85 = 0; e23() && n85 < this.options.stabilization.updateInterval;)this.physicsTick(), n85++;
                    (i52(), e23()) ? Yl(si(o65 = this._stabilizationBatch).call(o65, this), 0) : this._finalizeStabilization();
                }
            },
            {
                key: "_finalizeStabilization",
                value: function() {
                    this.body.emitter.emit("_allowRedraw"), !0 === this.options.stabilization.fit && this.body.emitter.emit("fit"), !0 === this.options.stabilization.onlyDynamicEdges && this._restoreFrozenNodes(), this.body.emitter.emit("stabilizationIterationsDone"), this.body.emitter.emit("_requestRedraw"), !0 === this.stabilized ? this._emitStabilized() : this.startSimulation(), this.ready = !0;
                }
            },
            {
                key: "_drawForces",
                value: function(t8) {
                    for(var e23 = 0; e23 < this.physicsBody.physicsNodeIndices.length; e23++){
                        var i52 = this.physicsBody.physicsNodeIndices[e23], o65 = this.body.nodes[i52], n85 = this.physicsBody.forces[i52], r51 = Math.sqrt(Math.pow(n85.x, 2) + Math.pow(n85.x, 2)), s44 = Math.min(Math.max(5, r51), 15), a39 = 3 * s44, h25 = yf((180 - 180 * Math.min(1, Math.max(0, 0.03 * r51))) / 360, 1, 1), d18 = {
                            x: o65.x + 20 * n85.x,
                            y: o65.y + 20 * n85.y
                        };
                        t8.lineWidth = s44, t8.strokeStyle = h25, t8.beginPath(), t8.moveTo(o65.x, o65.y), t8.lineTo(d18.x, d18.y), t8.stroke();
                        var l15 = Math.atan2(n85.y, n85.x);
                        t8.fillStyle = h25, Vy.draw(t8, {
                            type: "arrow",
                            point: d18,
                            angle: l15,
                            length: a39
                        }), Ql(t8).call(t8);
                    }
                }
            }
        ]), t4;
    }(), wm = new Uint8Array(16);
    function km() {
        if (!ym && !(ym = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return ym(wm);
    }
    var _m = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function xm(t4) {
        return "string" == typeof t4 && _m.test(t4);
    }
    for(var Em = [], Om = 0; Om < 256; ++Om)Em.push((Om + 256).toString(16).substr(1));
    function Cm(t4, e23, i53) {
        var o66 = (t4 = t4 || {
        }).random || (t4.rng || km)();
        if (o66[6] = 15 & o66[6] | 64, o66[8] = 63 & o66[8] | 128, e23) {
            i53 = i53 || 0;
            for(var n86 = 0; n86 < 16; ++n86)e23[i53 + n86] = o66[n86];
            return e23;
        }
        return (function(t8) {
            var e24 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : 0, i54 = (Em[t8[e24 + 0]] + Em[t8[e24 + 1]] + Em[t8[e24 + 2]] + Em[t8[e24 + 3]] + "-" + Em[t8[e24 + 4]] + Em[t8[e24 + 5]] + "-" + Em[t8[e24 + 6]] + Em[t8[e24 + 7]] + "-" + Em[t8[e24 + 8]] + Em[t8[e24 + 9]] + "-" + Em[t8[e24 + 10]] + Em[t8[e24 + 11]] + Em[t8[e24 + 12]] + Em[t8[e24 + 13]] + Em[t8[e24 + 14]] + Em[t8[e24 + 15]]).toLowerCase();
            if (!xm(i54)) throw TypeError("Stringified UUID is invalid");
            return i54;
        })(o66);
    }
    var Sm = function() {
        function t4() {
            Ra(this, t4);
        }
        return Ha(t4, null, [
            {
                key: "getRange",
                value: function(t8) {
                    var e23, i53 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : [], o66 = 1000000000, n87 = -1000000000, r52 = 1000000000, s45 = -1000000000;
                    if (i53.length > 0) for(var a40 = 0; a40 < i53.length; a40++)r52 > (e23 = t8[i53[a40]]).shape.boundingBox.left && (r52 = e23.shape.boundingBox.left), s45 < e23.shape.boundingBox.right && (s45 = e23.shape.boundingBox.right), o66 > e23.shape.boundingBox.top && (o66 = e23.shape.boundingBox.top), n87 < e23.shape.boundingBox.bottom && (n87 = e23.shape.boundingBox.bottom);
                    return 1000000000 === r52 && -1000000000 === s45 && 1000000000 === o66 && -1000000000 === n87 && (o66 = 0, n87 = 0, r52 = 0, s45 = 0), {
                        minX: r52,
                        maxX: s45,
                        minY: o66,
                        maxY: n87
                    };
                }
            },
            {
                key: "getRangeCore",
                value: function(t8) {
                    var e23, i53 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : [], o66 = 1000000000, n87 = -1000000000, r52 = 1000000000, s45 = -1000000000;
                    if (i53.length > 0) for(var a40 = 0; a40 < i53.length; a40++)r52 > (e23 = t8[i53[a40]]).x && (r52 = e23.x), s45 < e23.x && (s45 = e23.x), o66 > e23.y && (o66 = e23.y), n87 < e23.y && (n87 = e23.y);
                    return 1000000000 === r52 && -1000000000 === s45 && 1000000000 === o66 && -1000000000 === n87 && (o66 = 0, n87 = 0, r52 = 0, s45 = 0), {
                        minX: r52,
                        maxX: s45,
                        minY: o66,
                        maxY: n87
                    };
                }
            },
            {
                key: "findCenter",
                value: function(t8) {
                    return {
                        x: 0.5 * (t8.maxX + t8.minX),
                        y: 0.5 * (t8.maxY + t8.minY)
                    };
                }
            },
            {
                key: "cloneOptions",
                value: function(t8, e23) {
                    var i53 = {
                    };
                    return (void 0) === e23 || "node" === e23 ? (sf(i53, t8.options, !0), i53.x = t8.x, i53.y = t8.y, i53.amountOfConnections = t8.edges.length) : sf(i53, t8.options, !0), i53;
                }
            }
        ]), t4;
    }();
    function Tm(t4) {
        var e23 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t8) {
                return !1;
            }
        }();
        return function() {
            var i53, o66 = Eg(t4);
            if (e23) {
                var n87 = Eg(this).constructor;
                i53 = yg(o66, arguments, n87);
            } else i53 = o66.apply(this, arguments);
            return _g(this, i53);
        };
    }
    var Mm = function(t4) {
        kg(i53, t4);
        var e23 = Tm(i53);
        function i53(t8, o66, n88, r52, s45, a40) {
            var h26;
            return Ra(this, i53), (h26 = e23.call(this, t8, o66, n88, r52, s45, a40)).isCluster = !0, h26.containedNodes = {
            }, h26.containedEdges = {
            }, h26;
        }
        return Ha(i53, [
            {
                key: "_openChildCluster",
                value: function(t8) {
                    var e24 = this, i54 = this.body.nodes[t8];
                    if ((void 0) === this.containedNodes[t8]) throw new Error("node with id: " + t8 + " not in current cluster");
                    if (!i54.isCluster) throw new Error("node with id: " + t8 + " is not a cluster");
                    delete this.containedNodes[t8], lf(i54.edges, function(t9) {
                        delete e24.containedEdges[t9.id];
                    }), lf(i54.containedNodes, function(t9, i55) {
                        e24.containedNodes[i55] = t9;
                    }), i54.containedNodes = {
                    }, lf(i54.containedEdges, function(t9, i55) {
                        e24.containedEdges[i55] = t9;
                    }), i54.containedEdges = {
                    }, lf(i54.edges, function(t9) {
                        lf(e24.edges, function(i55) {
                            var o66, n88, r52 = Cl(o66 = i55.clusteringEdgeReplacingIds).call(o66, t9.id);
                            -1 !== r52 && (lf(t9.clusteringEdgeReplacingIds, function(t10) {
                                i55.clusteringEdgeReplacingIds.push(t10), e24.body.edges[t10].edgeReplacedById = i55.id;
                            }), Od(n88 = i55.clusteringEdgeReplacingIds).call(n88, r52, 1));
                        });
                    }), i54.edges = [];
                }
            }
        ]), i53;
    }(uy), Pm = function() {
        function t4(e23) {
            var i53 = this;
            Ra(this, t4), this.body = e23, this.clusteredNodes = {
            }, this.clusteredEdges = {
            }, this.options = {
            }, this.defaultOptions = {
            }, Ke(this.options, this.defaultOptions), this.body.emitter.on("_resetData", function() {
                i53.clusteredNodes = {
                }, i53.clusteredEdges = {
                };
            });
        }
        return Ha(t4, [
            {
                key: "clusterByHubsize",
                value: function(t8, e23) {
                    (void 0) === t8 ? t8 = this._getHubSize() : "object" === zh(t8) && (e23 = this._checkOptions(t8), t8 = this._getHubSize());
                    for(var i53 = [], o66 = 0; o66 < this.body.nodeIndices.length; o66++){
                        var n88 = this.body.nodes[this.body.nodeIndices[o66]];
                        n88.edges.length >= t8 && i53.push(n88.id);
                    }
                    for(var r52 = 0; r52 < i53.length; r52++)this.clusterByConnection(i53[r52], e23, !0);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "cluster",
                value: function() {
                    var t8 = this, e23 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : {
                    }, i53 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                    if ((void 0) === e23.joinCondition) throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
                    e23 = this._checkOptions(e23);
                    var o66 = {
                    }, n89 = {
                    };
                    lf(this.body.nodes, function(i54, r52) {
                        i54.options && !0 === e23.joinCondition(i54.options) && (o66[r52] = i54, lf(i54.edges, function(e24) {
                            (void 0) === t8.clusteredEdges[e24.id] && (n89[e24.id] = e24);
                        }));
                    }), this._cluster(o66, n89, e23, i53);
                }
            },
            {
                key: "clusterByEdgeCount",
                value: function(t8, e23) {
                    var i53 = this, o66 = !(arguments.length > 2 && (void 0) !== arguments[2]) || arguments[2];
                    e23 = this._checkOptions(e23);
                    for(var n89, r52, s45, a40 = [], h26 = {
                    }, d19 = function(o67) {
                        var d20 = {
                        }, l16 = {
                        }, c11 = i53.body.nodeIndices[o67], u10 = i53.body.nodes[c11];
                        if ((void 0) === h26[c11]) {
                            s45 = 0, r52 = [];
                            for(var f12 = 0; f12 < u10.edges.length; f12++)n89 = u10.edges[f12], (void 0) === i53.clusteredEdges[n89.id] && (n89.toId !== n89.fromId && s45++, r52.push(n89));
                            if (s45 === t8) {
                                for(var p9 = function(t9) {
                                    if ((void 0) === e23.joinCondition || null === e23.joinCondition) return !0;
                                    var i54 = Sm.cloneOptions(t9);
                                    return e23.joinCondition(i54);
                                }, v7 = !0, g6 = 0; g6 < r52.length; g6++){
                                    n89 = r52[g6];
                                    var y3 = i53._getConnectedId(n89, c11);
                                    if (!p9(u10)) {
                                        v7 = !1;
                                        break;
                                    }
                                    l16[n89.id] = n89, d20[c11] = u10, d20[y3] = i53.body.nodes[y3], h26[c11] = !0;
                                }
                                if (Gh(d20).length > 0 && Gh(l16).length > 0 && !0 === v7) {
                                    var m3 = function() {
                                        for(var t9 = 0; t9 < a40.length; ++t9)for(var e24 in d20)if ((void 0) !== a40[t9].nodes[e24]) return a40[t9];
                                    }();
                                    if ((void 0) !== m3) {
                                        for(var b4 in d20)(void 0) === m3.nodes[b4] && (m3.nodes[b4] = d20[b4]);
                                        for(var w2 in l16)(void 0) === m3.edges[w2] && (m3.edges[w2] = l16[w2]);
                                    } else a40.push({
                                        nodes: d20,
                                        edges: l16
                                    });
                                }
                            }
                        }
                    }, l16 = 0; l16 < this.body.nodeIndices.length; l16++)d19(l16);
                    for(var c11 = 0; c11 < a40.length; c11++)this._cluster(a40[c11].nodes, a40[c11].edges, e23, !1);
                    !0 === o66 && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "clusterOutliers",
                value: function(t8) {
                    var e23 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(1, t8, e23);
                }
            },
            {
                key: "clusterBridges",
                value: function(t8) {
                    var e23 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(2, t8, e23);
                }
            },
            {
                key: "clusterByConnection",
                value: function(t8, e23) {
                    var i53, o66 = !(arguments.length > 2 && (void 0) !== arguments[2]) || arguments[2];
                    if ((void 0) === t8) throw new Error("No nodeId supplied to clusterByConnection!");
                    if ((void 0) === this.body.nodes[t8]) throw new Error("The nodeId given to clusterByConnection does not exist!");
                    var n89 = this.body.nodes[t8];
                    (void 0) === (e23 = this._checkOptions(e23, n89)).clusterNodeProperties.x && (e23.clusterNodeProperties.x = n89.x), (void 0) === e23.clusterNodeProperties.y && (e23.clusterNodeProperties.y = n89.y), (void 0) === e23.clusterNodeProperties.fixed && (e23.clusterNodeProperties.fixed = {
                    }, e23.clusterNodeProperties.fixed.x = n89.options.fixed.x, e23.clusterNodeProperties.fixed.y = n89.options.fixed.y);
                    var r52 = {
                    }, s45 = {
                    }, a40 = n89.id, h26 = Sm.cloneOptions(n89);
                    r52[a40] = n89;
                    for(var d19 = 0; d19 < n89.edges.length; d19++){
                        var l16 = n89.edges[d19];
                        if ((void 0) === this.clusteredEdges[l16.id]) {
                            var c11 = this._getConnectedId(l16, a40);
                            if ((void 0) === this.clusteredNodes[c11]) {
                                if (c11 !== a40) {
                                    if ((void 0) === e23.joinCondition) s45[l16.id] = l16, r52[c11] = this.body.nodes[c11];
                                    else {
                                        var u10 = Sm.cloneOptions(this.body.nodes[c11]);
                                        !0 === e23.joinCondition(h26, u10) && (s45[l16.id] = l16, r52[c11] = this.body.nodes[c11]);
                                    }
                                } else s45[l16.id] = l16;
                            }
                        }
                    }
                    var f13 = Uh(i53 = Gh(r52)).call(i53, function(t9) {
                        return r52[t9].id;
                    });
                    for(var p10 in r52)if (Object.prototype.hasOwnProperty.call(r52, p10)) for(var v8 = r52[p10], g7 = 0; g7 < v8.edges.length; g7++){
                        var y4 = v8.edges[g7];
                        Cl(f13).call(f13, this._getConnectedId(y4, v8.id)) > -1 && (s45[y4.id] = y4);
                    }
                    this._cluster(r52, s45, e23, o66);
                }
            },
            {
                key: "_createClusterEdges",
                value: function(t8, e23, i53, o66) {
                    for(var n89, r52, s45, a40, h26, d19, l17 = Gh(t8), c12 = [], u11 = 0; u11 < l17.length; u11++){
                        s45 = t8[r52 = l17[u11]];
                        for(var f13 = 0; f13 < s45.edges.length; f13++)n89 = s45.edges[f13], (void 0) === this.clusteredEdges[n89.id] && (n89.toId == n89.fromId ? e23[n89.id] = n89 : n89.toId == r52 ? (a40 = i53.id, d19 = h26 = n89.fromId) : (a40 = n89.toId, h26 = i53.id, d19 = a40), (void 0) === t8[d19] && c12.push({
                            edge: n89,
                            fromId: h26,
                            toId: a40
                        }));
                    }
                    for(var p10 = [], v8 = function(t9) {
                        for(var e24 = 0; e24 < p10.length; e24++){
                            var i54 = p10[e24], o67 = t9.fromId === i54.fromId && t9.toId === i54.toId, n90 = t9.fromId === i54.toId && t9.toId === i54.fromId;
                            if (o67 || n90) return i54;
                        }
                        return null;
                    }, g7 = 0; g7 < c12.length; g7++){
                        var y5 = c12[g7], m4 = y5.edge, b5 = v8(y5);
                        null === b5 ? (b5 = this._createClusteredEdge(y5.fromId, y5.toId, m4, o66), p10.push(b5)) : b5.clusteringEdgeReplacingIds.push(m4.id), this.body.edges[m4.id].edgeReplacedById = b5.id, this._backupEdgeOptions(m4), m4.setOptions({
                            physics: !1
                        });
                    }
                }
            },
            {
                key: "_checkOptions",
                value: function() {
                    var t8 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : {
                    };
                    return (void 0) === t8.clusterEdgeProperties && (t8.clusterEdgeProperties = {
                    }), (void 0) === t8.clusterNodeProperties && (t8.clusterNodeProperties = {
                    }), t8;
                }
            },
            {
                key: "_cluster",
                value: function(t8, e23, i53) {
                    var o66 = !(arguments.length > 3 && (void 0) !== arguments[3]) || arguments[3], n89 = [];
                    for(var r52 in t8)Object.prototype.hasOwnProperty.call(t8, r52) && (void 0) !== this.clusteredNodes[r52] && n89.push(r52);
                    for(var s45 = 0; s45 < n89.length; ++s45)delete t8[n89[s45]];
                    if (0 != Gh(t8).length && (1 != Gh(t8).length || 1 == i53.clusterNodeProperties.allowSingleNodeCluster)) {
                        var a40 = sf({
                        }, i53.clusterNodeProperties);
                        if ((void 0) !== i53.processProperties) {
                            var h26 = [];
                            for(var d19 in t8)if (Object.prototype.hasOwnProperty.call(t8, d19)) {
                                var l17 = Sm.cloneOptions(t8[d19]);
                                h26.push(l17);
                            }
                            var c12 = [];
                            for(var u11 in e23)if (Object.prototype.hasOwnProperty.call(e23, u11) && "clusterEdge:" !== u11.substr(0, 12)) {
                                var f14 = Sm.cloneOptions(e23[u11], "edge");
                                c12.push(f14);
                            }
                            if (!(a40 = i53.processProperties(a40, h26, c12))) throw new Error("The processProperties function does not return properties!");
                        }
                        (void 0) === a40.id && (a40.id = "cluster:" + Cm());
                        var p10 = a40.id;
                        (void 0) === a40.label && (a40.label = "cluster");
                        var v8 = void 0;
                        (void 0) === a40.x && (v8 = this._getClusterPosition(t8), a40.x = v8.x), (void 0) === a40.y && ((void 0) === v8 && (v8 = this._getClusterPosition(t8)), a40.y = v8.y), a40.id = p10;
                        var g7 = this.body.functions.createNode(a40, Mm);
                        g7.containedNodes = t8, g7.containedEdges = e23, g7.clusterEdgeProperties = i53.clusterEdgeProperties, this.body.nodes[a40.id] = g7, this._clusterEdges(t8, e23, a40, i53.clusterEdgeProperties), a40.id = void 0, !0 === o66 && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "_backupEdgeOptions",
                value: function(t8) {
                    (void 0) === this.clusteredEdges[t8.id] && (this.clusteredEdges[t8.id] = {
                        physics: t8.options.physics
                    });
                }
            },
            {
                key: "_restoreEdge",
                value: function(t8) {
                    var e23 = this.clusteredEdges[t8.id];
                    (void 0) !== e23 && (t8.setOptions({
                        physics: e23.physics
                    }), delete this.clusteredEdges[t8.id]);
                }
            },
            {
                key: "isCluster",
                value: function(t8) {
                    return (void 0) !== this.body.nodes[t8] ? !0 === this.body.nodes[t8].isCluster : (console.error("Node does not exist."), !1);
                }
            },
            {
                key: "_getClusterPosition",
                value: function(t8) {
                    for(var e23, i53 = Gh(t8), o66 = t8[i53[0]].x, n89 = t8[i53[0]].x, r52 = t8[i53[0]].y, s45 = t8[i53[0]].y, a41 = 1; a41 < i53.length; a41++)o66 = (e23 = t8[i53[a41]]).x < o66 ? e23.x : o66, n89 = e23.x > n89 ? e23.x : n89, r52 = e23.y < r52 ? e23.y : r52, s45 = e23.y > s45 ? e23.y : s45;
                    return {
                        x: 0.5 * (o66 + n89),
                        y: 0.5 * (r52 + s45)
                    };
                }
            },
            {
                key: "openCluster",
                value: function(t8, e23) {
                    var i53 = !(arguments.length > 2 && (void 0) !== arguments[2]) || arguments[2];
                    if ((void 0) === t8) throw new Error("No clusterNodeId supplied to openCluster.");
                    var o66 = this.body.nodes[t8];
                    if ((void 0) === o66) throw new Error("The clusterNodeId supplied to openCluster does not exist.");
                    if (!0 !== o66.isCluster || (void 0) === o66.containedNodes || (void 0) === o66.containedEdges) throw new Error("The node:" + t8 + " is not a valid cluster.");
                    var n89 = this.findNode(t8), r52 = Cl(n89).call(n89, t8) - 1;
                    if (r52 >= 0) {
                        var s45 = n89[r52], a41 = this.body.nodes[s45];
                        return a41._openChildCluster(t8), delete this.body.nodes[t8], void (!0 === i53 && this.body.emitter.emit("_dataChanged"));
                    }
                    var h27 = o66.containedNodes, d20 = o66.containedEdges;
                    if ((void 0) !== e23 && (void 0) !== e23.releaseFunction && "function" == typeof e23.releaseFunction) {
                        var l18 = {
                        }, c13 = {
                            x: o66.x,
                            y: o66.y
                        };
                        for(var u12 in h27)if (Object.prototype.hasOwnProperty.call(h27, u12)) {
                            var f15 = this.body.nodes[u12];
                            l18[u12] = {
                                x: f15.x,
                                y: f15.y
                            };
                        }
                        var p11 = e23.releaseFunction(c13, l18);
                        for(var v9 in h27)if (Object.prototype.hasOwnProperty.call(h27, v9)) {
                            var g8 = this.body.nodes[v9];
                            (void 0) !== p11[v9] && (g8.x = (void 0) === p11[v9].x ? o66.x : p11[v9].x, g8.y = (void 0) === p11[v9].y ? o66.y : p11[v9].y);
                        }
                    } else lf(h27, function(t9) {
                        !1 === t9.options.fixed.x && (t9.x = o66.x), !1 === t9.options.fixed.y && (t9.y = o66.y);
                    });
                    for(var y6 in h27)if (Object.prototype.hasOwnProperty.call(h27, y6)) {
                        var m5 = this.body.nodes[y6];
                        m5.vx = o66.vx, m5.vy = o66.vy, m5.setOptions({
                            physics: !0
                        }), delete this.clusteredNodes[y6];
                    }
                    for(var b6 = [], w3 = 0; w3 < o66.edges.length; w3++)b6.push(o66.edges[w3]);
                    for(var k2 = 0; k2 < b6.length; k2++){
                        for(var _2 = b6[k2], x3 = this._getConnectedId(_2, t8), E2 = this.clusteredNodes[x3], O2 = 0; O2 < _2.clusteringEdgeReplacingIds.length; O2++){
                            var C2 = _2.clusteringEdgeReplacingIds[O2], S3 = this.body.edges[C2];
                            if ((void 0) !== S3) {
                                if ((void 0) !== E2) {
                                    var T2 = this.body.nodes[E2.clusterId];
                                    T2.containedEdges[S3.id] = S3, delete d20[S3.id];
                                    var M2 = S3.fromId, P2 = S3.toId;
                                    S3.toId == x3 ? P2 = E2.clusterId : M2 = E2.clusterId, this._createClusteredEdge(M2, P2, S3, T2.clusterEdgeProperties, {
                                        hidden: !1,
                                        physics: !0
                                    });
                                } else this._restoreEdge(S3);
                            }
                        }
                        _2.remove();
                    }
                    for(var D2 in d20)Object.prototype.hasOwnProperty.call(d20, D2) && this._restoreEdge(d20[D2]);
                    delete this.body.nodes[t8], !0 === i53 && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getNodesInCluster",
                value: function(t8) {
                    var e23 = [];
                    if (!0 === this.isCluster(t8)) {
                        var i53 = this.body.nodes[t8].containedNodes;
                        for(var o66 in i53)Object.prototype.hasOwnProperty.call(i53, o66) && e23.push(this.body.nodes[o66].id);
                    }
                    return e23;
                }
            },
            {
                key: "findNode",
                value: function(t8) {
                    for(var e23, i55 = [], o68 = 0; (void 0) !== this.clusteredNodes[t8] && o68 < 100;){
                        if ((void 0) === (e23 = this.body.nodes[t8])) return [];
                        i55.push(e23.id), t8 = this.clusteredNodes[t8].clusterId, o68++;
                    }
                    return (void 0) === (e23 = this.body.nodes[t8]) ? [] : (i55.push(e23.id), ld(i55).call(i55), i55);
                }
            },
            {
                key: "updateClusteredNode",
                value: function(t8, e23) {
                    if ((void 0) === t8) throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
                    if ((void 0) === e23) throw new Error("No newOptions supplied to updateClusteredNode.");
                    if ((void 0) === this.body.nodes[t8]) throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
                    this.body.nodes[t8].setOptions(e23), this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "updateEdge",
                value: function(t8, e23) {
                    if ((void 0) === t8) throw new Error("No startEdgeId supplied to updateEdge.");
                    if ((void 0) === e23) throw new Error("No newOptions supplied to updateEdge.");
                    if ((void 0) === this.body.edges[t8]) throw new Error("The startEdgeId supplied to updateEdge does not exist.");
                    for(var i55 = this.getClusteredEdges(t8), o68 = 0; o68 < i55.length; o68++)this.body.edges[i55[o68]].setOptions(e23);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getClusteredEdges",
                value: function(t8) {
                    for(var e23 = [], i55 = 0; (void 0) !== t8 && (void 0) !== this.body.edges[t8] && i55 < 100;)e23.push(this.body.edges[t8].id), t8 = this.body.edges[t8].edgeReplacedById, i55++;
                    return ld(e23).call(e23), e23;
                }
            },
            {
                key: "getBaseEdge",
                value: function(t8) {
                    return this.getBaseEdges(t8)[0];
                }
            },
            {
                key: "getBaseEdges",
                value: function(t8) {
                    for(var e23 = [
                        t8
                    ], i55 = [], o68 = [], n89 = 0; e23.length > 0 && n89 < 100;){
                        var r52 = e23.pop();
                        if ((void 0) !== r52) {
                            var s46 = this.body.edges[r52];
                            if ((void 0) !== s46) {
                                n89++;
                                var a42 = s46.clusteringEdgeReplacingIds;
                                if ((void 0) === a42) o68.push(r52);
                                else for(var h27 = 0; h27 < a42.length; ++h27){
                                    var d20 = a42[h27];
                                    -1 === Cl(e23).call(e23, a42) && -1 === Cl(i55).call(i55, a42) && e23.push(d20);
                                }
                                i55.push(r52);
                            }
                        }
                    }
                    return o68;
                }
            },
            {
                key: "_getConnectedId",
                value: function(t8, e23) {
                    return t8.toId != e23 ? t8.toId : (t8.fromId, t8.fromId);
                }
            },
            {
                key: "_getHubSize",
                value: function() {
                    for(var t8 = 0, e23 = 0, i55 = 0, o68 = 0, n89 = 0; n89 < this.body.nodeIndices.length; n89++){
                        var r53 = this.body.nodes[this.body.nodeIndices[n89]];
                        r53.edges.length > o68 && (o68 = r53.edges.length), t8 += r53.edges.length, e23 += Math.pow(r53.edges.length, 2), i55 += 1;
                    }
                    t8 /= i55;
                    var s47 = (e23 /= i55) - Math.pow(t8, 2), a43 = Math.sqrt(s47), h28 = Math.floor(t8 + 2 * a43);
                    return h28 > o68 && (h28 = o68), h28;
                }
            },
            {
                key: "_createClusteredEdge",
                value: function(t8, e23, i55, o68, n89) {
                    var r54 = Sm.cloneOptions(i55, "edge");
                    sf(r54, o68), r54.from = t8, r54.to = e23, r54.id = "clusterEdge:" + Cm(), (void 0) !== n89 && sf(r54, n89);
                    var s47 = this.body.functions.createEdge(r54);
                    return s47.clusteringEdgeReplacingIds = [
                        i55.id
                    ], s47.connect(), this.body.edges[s47.id] = s47, s47;
                }
            },
            {
                key: "_clusterEdges",
                value: function(t8, e23, i55, o68) {
                    if (e23 instanceof sm) {
                        var n89 = e23, r54 = {
                        };
                        r54[n89.id] = n89, e23 = r54;
                    }
                    if (t8 instanceof uy) {
                        var s47 = t8, a43 = {
                        };
                        a43[s47.id] = s47, t8 = a43;
                    }
                    if (null == i55) throw new Error("_clusterEdges: parameter clusterNode required");
                    for(var h28 in (void 0) === o68 && (o68 = i55.clusterEdgeProperties), this._createClusterEdges(t8, e23, i55, o68), e23)if (Object.prototype.hasOwnProperty.call(e23, h28) && (void 0) !== this.body.edges[h28]) {
                        var d21 = this.body.edges[h28];
                        this._backupEdgeOptions(d21), d21.setOptions({
                            physics: !1
                        });
                    }
                    for(var l19 in t8)Object.prototype.hasOwnProperty.call(t8, l19) && (this.clusteredNodes[l19] = {
                        clusterId: i55.id,
                        node: this.body.nodes[l19]
                    }, this.body.nodes[l19].setOptions({
                        physics: !1
                    }));
                }
            },
            {
                key: "_getClusterNodeForNode",
                value: function(t8) {
                    if ((void 0) !== t8) {
                        var e23 = this.clusteredNodes[t8];
                        if ((void 0) !== e23) {
                            var i55 = e23.clusterId;
                            if ((void 0) !== i55) return this.body.nodes[i55];
                        }
                    }
                }
            },
            {
                key: "_filter",
                value: function(t8, e24) {
                    var i56 = [];
                    return lf(t8, function(t9) {
                        e24(t9) && i56.push(t9);
                    }), i56;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    var t8, e24 = this, i56 = [], o68 = {
                    }, n91 = function(t9) {
                        lf(e24.body.nodes, function(e25) {
                            !0 === e25.isCluster && t9(e25);
                        });
                    };
                    for(t8 in this.clusteredNodes)if (Object.prototype.hasOwnProperty.call(this.clusteredNodes, t8)) (void 0) === this.body.nodes[t8] && i56.push(t8);
                    n91(function(t9) {
                        for(var e25 = 0; e25 < i56.length; e25++)delete t9.containedNodes[i56[e25]];
                    });
                    for(var r55 = 0; r55 < i56.length; r55++)delete this.clusteredNodes[i56[r55]];
                    lf(this.clusteredEdges, function(t9) {
                        var i57 = e24.body.edges[t9];
                        (void 0) !== i57 && i57.endPointsValid() || (o68[t9] = t9);
                    }), n91(function(t9) {
                        lf(t9.containedEdges, function(t10, e25) {
                            t10.endPointsValid() || o68[e25] || (o68[e25] = e25);
                        });
                    }), lf(this.body.edges, function(t9, i57) {
                        var n92 = !0, r56 = t9.clusteringEdgeReplacingIds;
                        if ((void 0) !== r56) {
                            var s48 = 0;
                            lf(r56, function(t10) {
                                var i58 = e24.body.edges[t10];
                                (void 0) !== i58 && i58.endPointsValid() && (s48 += 1);
                            }), n92 = s48 > 0;
                        }
                        t9.endPointsValid() && n92 || (o68[i57] = i57);
                    }), n91(function(t9) {
                        lf(o68, function(i57) {
                            delete t9.containedEdges[i57], lf(t9.edges, function(n92, r56) {
                                n92.id !== i57 ? n92.clusteringEdgeReplacingIds = e24._filter(n92.clusteringEdgeReplacingIds, function(t10) {
                                    return !o68[t10];
                                }) : t9.edges[r56] = null;
                            }), t9.edges = e24._filter(t9.edges, function(t10) {
                                return null !== t10;
                            });
                        });
                    }), lf(o68, function(t9) {
                        delete e24.clusteredEdges[t9];
                    }), lf(o68, function(t9) {
                        delete e24.body.edges[t9];
                    }), lf(Gh(this.body.edges), function(t9) {
                        var i57 = e24.body.edges[t9], o69 = e24._isClusteredNode(i57.fromId) || e24._isClusteredNode(i57.toId);
                        if (o69 !== e24._isClusteredEdge(i57.id)) {
                            if (o69) {
                                var n92 = e24._getClusterNodeForNode(i57.fromId);
                                (void 0) !== n92 && e24._clusterEdges(e24.body.nodes[i57.fromId], i57, n92);
                                var r56 = e24._getClusterNodeForNode(i57.toId);
                                (void 0) !== r56 && e24._clusterEdges(e24.body.nodes[i57.toId], i57, r56);
                            } else delete e24._clusterEdges[t9], e24._restoreEdge(i57);
                        }
                    });
                    for(var s49 = !1, a44 = !0, h28 = function() {
                        var t9 = [];
                        n91(function(e25) {
                            var i57 = Gh(e25.containedNodes).length, o69 = !0 === e25.options.allowSingleNodeCluster;
                            (o69 && i57 < 1 || !o69 && i57 < 2) && t9.push(e25.id);
                        });
                        for(var i57 = 0; i57 < t9.length; ++i57)e24.openCluster(t9[i57], {
                        }, !1);
                        a44 = t9.length > 0, s49 = s49 || a44;
                    }; a44;)h28();
                    s49 && this._updateState();
                }
            },
            {
                key: "_isClusteredNode",
                value: function(t8) {
                    return (void 0) !== this.clusteredNodes[t8];
                }
            },
            {
                key: "_isClusteredEdge",
                value: function(t8) {
                    return (void 0) !== this.clusteredEdges[t8];
                }
            }
        ]), t4;
    }();
    function Dm(t4, e24) {
        var i56 = (void 0) !== Nh && xr(t4) || t4["@@iterator"];
        if (!i56) {
            if (Hh(t4) || (i56 = (function(t8, e25) {
                var i57;
                if (!t8) return;
                if ("string" == typeof t8) return Bm(t8, e25);
                var o68 = Lh(i57 = Object.prototype.toString.call(t8)).call(i57, 8, -1);
                "Object" === o68 && t8.constructor && (o68 = t8.constructor.name);
                if ("Map" === o68 || "Set" === o68) return rr(t8);
                if ("Arguments" === o68 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o68)) return Bm(t8, e25);
            })(t4)) || e24 && t4 && "number" == typeof t4.length) {
                i56 && (t4 = i56);
                var o68 = 0, n91 = function() {
                };
                return {
                    s: n91,
                    n: function() {
                        return o68 >= t4.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t4[o68++]
                        };
                    },
                    e: function(t8) {
                        throw t8;
                    },
                    f: n91
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r55, s49 = !0, a44 = !1;
        return {
            s: function() {
                i56 = i56.call(t4);
            },
            n: function() {
                var t8 = i56.next();
                return s49 = t8.done, t8;
            },
            e: function(t8) {
                a44 = !0, r55 = t8;
            },
            f: function() {
                try {
                    s49 || null == i56.return || i56.return();
                } finally{
                    if (a44) throw r55;
                }
            }
        };
    }
    function Bm(t4, e24) {
        (null == e24 || e24 > t4.length) && (e24 = t4.length);
        for(var i56 = 0, o69 = new Array(e24); i56 < e24; i56++)o69[i56] = t4[i56];
        return o69;
    }
    var Im = function() {
        function t4(e24, i56) {
            var o69;
            Ra(this, t4), (void 0) !== window && (o69 = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame), window.requestAnimationFrame = (void 0) === o69 ? function(t8) {
                t8();
            } : o69, this.body = e24, this.canvas = i56, this.redrawRequested = !1, this.renderTimer = void 0, this.requiresTimeout = !0, this.renderingActive = !1, this.renderRequests = 0, this.allowRedraw = !0, this.dragging = !1, this.zooming = !1, this.options = {
            }, this.defaultOptions = {
                hideEdgesOnDrag: !1,
                hideEdgesOnZoom: !1,
                hideNodesOnDrag: !1
            }, Ke(this.options, this.defaultOptions), this._determineBrowserMethod(), this.bindEventListeners();
        }
        return Ha(t4, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t8, e24 = this;
                    this.body.emitter.on("dragStart", function() {
                        e24.dragging = !0;
                    }), this.body.emitter.on("dragEnd", function() {
                        e24.dragging = !1;
                    }), this.body.emitter.on("zoom", function() {
                        e24.zooming = !0, window.clearTimeout(e24.zoomTimeoutId), e24.zoomTimeoutId = Yl(function() {
                            var t9;
                            e24.zooming = !1, si(t9 = e24._requestRedraw).call(t9, e24)();
                        }, 250);
                    }), this.body.emitter.on("_resizeNodes", function() {
                        e24._resizeNodes();
                    }), this.body.emitter.on("_redraw", function() {
                        !1 === e24.renderingActive && e24._redraw();
                    }), this.body.emitter.on("_blockRedraw", function() {
                        e24.allowRedraw = !1;
                    }), this.body.emitter.on("_allowRedraw", function() {
                        e24.allowRedraw = !0, e24.redrawRequested = !1;
                    }), this.body.emitter.on("_requestRedraw", si(t8 = this._requestRedraw).call(t8, this)), this.body.emitter.on("_startRendering", function() {
                        e24.renderRequests += 1, e24.renderingActive = !0, e24._startRendering();
                    }), this.body.emitter.on("_stopRendering", function() {
                        e24.renderRequests -= 1, e24.renderingActive = e24.renderRequests > 0, e24.renderTimer = void 0;
                    }), this.body.emitter.on("destroy", function() {
                        e24.renderRequests = 0, e24.allowRedraw = !1, e24.renderingActive = !1, !0 === e24.requiresTimeout ? clearTimeout(e24.renderTimer) : window.cancelAnimationFrame(e24.renderTimer), e24.body.emitter.off();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t8) {
                    if ((void 0) !== t8) nf([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag"
                    ], this.options, t8);
                }
            },
            {
                key: "_requestNextFrame",
                value: function(t8, e24) {
                    if ("undefined" != typeof window) {
                        var i56, o69 = window;
                        return !0 === this.requiresTimeout ? i56 = Yl(t8, e24) : o69.requestAnimationFrame && (i56 = o69.requestAnimationFrame(t8)), i56;
                    }
                }
            },
            {
                key: "_startRendering",
                value: function() {
                    var t8;
                    !0 === this.renderingActive && (void 0) === this.renderTimer && (this.renderTimer = this._requestNextFrame(si(t8 = this._renderStep).call(t8, this), this.simulationInterval));
                }
            },
            {
                key: "_renderStep",
                value: function() {
                    !0 === this.renderingActive && (this.renderTimer = void 0, !0 === this.requiresTimeout && this._startRendering(), this._redraw(), !1 === this.requiresTimeout && this._startRendering());
                }
            },
            {
                key: "redraw",
                value: function() {
                    this.body.emitter.emit("setSize"), this._redraw();
                }
            },
            {
                key: "_requestRedraw",
                value: function() {
                    var t8 = this;
                    !0 !== this.redrawRequested && !1 === this.renderingActive && !0 === this.allowRedraw && (this.redrawRequested = !0, this._requestNextFrame(function() {
                        t8._redraw(!1);
                    }, 0));
                }
            },
            {
                key: "_redraw",
                value: function() {
                    var t8 = arguments.length > 0 && (void 0) !== arguments[0] && arguments[0];
                    if (!0 === this.allowRedraw) {
                        this.body.emitter.emit("initRedraw"), this.redrawRequested = !1;
                        var e24 = {
                            drawExternalLabels: null
                        };
                        0 !== this.canvas.frame.canvas.width && 0 !== this.canvas.frame.canvas.height || this.canvas.setSize(), this.canvas.setTransform();
                        var i57 = this.canvas.getContext(), o70 = this.canvas.frame.canvas.clientWidth, n93 = this.canvas.frame.canvas.clientHeight;
                        if (i57.clearRect(0, 0, o70, n93), 0 === this.canvas.frame.clientWidth) return;
                        if (i57.save(), i57.translate(this.body.view.translation.x, this.body.view.translation.y), i57.scale(this.body.view.scale, this.body.view.scale), i57.beginPath(), this.body.emitter.emit("beforeDrawing", i57), i57.closePath(), !1 === t8 && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawEdges(i57), !1 === this.dragging || !0 === this.dragging && !1 === this.options.hideNodesOnDrag) {
                            var r55 = this._drawNodes(i57, t8), s49 = r55.drawExternalLabels;
                            e24.drawExternalLabels = s49;
                        }
                        !1 === t8 && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawArrows(i57), null != e24.drawExternalLabels && e24.drawExternalLabels(), !1 === t8 && this._drawSelectionBox(i57), i57.beginPath(), this.body.emitter.emit("afterDrawing", i57), i57.closePath(), i57.restore(), !0 === t8 && i57.clearRect(0, 0, o70, n93);
                    }
                }
            },
            {
                key: "_resizeNodes",
                value: function() {
                    this.canvas.setTransform();
                    var t8 = this.canvas.getContext();
                    t8.save(), t8.translate(this.body.view.translation.x, this.body.view.translation.y), t8.scale(this.body.view.scale, this.body.view.scale);
                    var e25, i58 = this.body.nodes;
                    for(var o71 in i58)Object.prototype.hasOwnProperty.call(i58, o71) && ((e25 = i58[o71]).resize(t8), e25.updateBoundingBox(t8, e25.selected));
                    t8.restore();
                }
            },
            {
                key: "_drawNodes",
                value: function(t8) {
                    for(var e25, i58, o71 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1], n94 = this.body.nodes, r57 = this.body.nodeIndices, s50 = [], a44 = [], h28 = 20, d22 = this.canvas.DOMtoCanvas({
                        x: -h28,
                        y: -h28
                    }), l19 = this.canvas.DOMtoCanvas({
                        x: this.canvas.frame.canvas.clientWidth + h28,
                        y: this.canvas.frame.canvas.clientHeight + h28
                    }), c14 = {
                        top: d22.y,
                        left: d22.x,
                        bottom: l19.y,
                        right: l19.x
                    }, u13 = [], f16 = 0; f16 < r57.length; f16++)if ((e25 = n94[r57[f16]]).hover) a44.push(r57[f16]);
                    else if (e25.isSelected()) s50.push(r57[f16]);
                    else if (!0 === o71) {
                        var p12 = e25.draw(t8);
                        null != p12.drawExternalLabel && u13.push(p12.drawExternalLabel);
                    } else if (!0 === e25.isBoundingBoxOverlappingWith(c14)) {
                        var v10 = e25.draw(t8);
                        null != v10.drawExternalLabel && u13.push(v10.drawExternalLabel);
                    } else e25.updateBoundingBox(t8, e25.selected);
                    var g9 = s50.length, y6 = a44.length;
                    for(i58 = 0; i58 < g9; i58++){
                        var m6 = (e25 = n94[s50[i58]]).draw(t8);
                        null != m6.drawExternalLabel && u13.push(m6.drawExternalLabel);
                    }
                    for(i58 = 0; i58 < y6; i58++){
                        var b6 = (e25 = n94[a44[i58]]).draw(t8);
                        null != b6.drawExternalLabel && u13.push(b6.drawExternalLabel);
                    }
                    return {
                        drawExternalLabels: function() {
                            var t9, e26 = Dm(u13);
                            try {
                                for(e26.s(); !(t9 = e26.n()).done;)t9.value();
                            } catch (t10) {
                                e26.e(t10);
                            } finally{
                                e26.f();
                            }
                        }
                    };
                }
            },
            {
                key: "_drawEdges",
                value: function(t8) {
                    for(var e25 = this.body.edges, i58 = this.body.edgeIndices, o71 = 0; o71 < i58.length; o71++){
                        var n94 = e25[i58[o71]];
                        !0 === n94.connected && n94.draw(t8);
                    }
                }
            },
            {
                key: "_drawArrows",
                value: function(t8) {
                    for(var e25 = this.body.edges, i58 = this.body.edgeIndices, o71 = 0; o71 < i58.length; o71++){
                        var n95 = e25[i58[o71]];
                        !0 === n95.connected && n95.drawArrows(t8);
                    }
                }
            },
            {
                key: "_determineBrowserMethod",
                value: function() {
                    if ("undefined" != typeof window) {
                        var t8 = navigator.userAgent.toLowerCase();
                        this.requiresTimeout = !1, (-1 != Cl(t8).call(t8, "msie 9.0") || -1 != Cl(t8).call(t8, "safari") && Cl(t8).call(t8, "chrome") <= -1) && (this.requiresTimeout = !0);
                    } else this.requiresTimeout = !0;
                }
            },
            {
                key: "_drawSelectionBox",
                value: function(t9) {
                    if (this.body.selectionBox.show) {
                        t9.beginPath();
                        var e25 = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x, i58 = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;
                        t9.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e25, i58), t9.fillStyle = "rgba(151, 194, 252, 0.2)", t9.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e25, i58), t9.strokeStyle = "rgba(151, 194, 252, 1)", t9.stroke();
                    } else t9.closePath();
                }
            }
        ]), t4;
    }(), zm = O.setInterval;
    function Fm(t4, e26) {
        e26.inputHandler = function(t9) {
            t9.isFirst && e26(t9);
        }, t4.on("hammer.input", e26.inputHandler);
    }
    function Nm(t4, e26) {
        return e26.inputHandler = function(t9) {
            t9.isFinal && e26(t9);
        }, t4.on("hammer.input", e26.inputHandler);
    }
    var Am = function() {
        function t4(e26) {
            Ra(this, t4), this.body = e26, this.pixelRatio = 1, this.cameraState = {
            }, this.initialized = !1, this.canvasViewCenter = {
            }, this._cleanupCallbacks = [], this.options = {
            }, this.defaultOptions = {
                autoResize: !0,
                height: "100%",
                width: "100%"
            }, Ke(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t4, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t9, e26 = this;
                    this.body.emitter.once("resize", function(t10) {
                        0 !== t10.width && (e26.body.view.translation.x = 0.5 * t10.width), 0 !== t10.height && (e26.body.view.translation.y = 0.5 * t10.height);
                    }), this.body.emitter.on("setSize", si(t9 = this.setSize).call(t9, this)), this.body.emitter.on("destroy", function() {
                        e26.hammerFrame.destroy(), e26.hammer.destroy(), e26._cleanUp();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t9) {
                    var e26, i59, o71, n96, r57, s50 = this;
                    if ((void 0) !== t9) nf([
                        "width",
                        "height",
                        "autoResize"
                    ], this.options, t9);
                    if (this._cleanUp(), !0 === this.options.autoResize) {
                        var a44;
                        if (window.ResizeObserver) {
                            var h28 = new ResizeObserver(function() {
                                !0 === s50.setSize() && s50.body.emitter.emit("_requestRedraw");
                            }), d22 = this.frame;
                            h28.observe(d22), this._cleanupCallbacks.push(function() {
                                h28.unobserve(d22);
                            });
                        } else {
                            var l19 = zm(function() {
                                !0 === s50.setSize() && s50.body.emitter.emit("_requestRedraw");
                            }, 1000);
                            this._cleanupCallbacks.push(function() {
                                clearInterval(l19);
                            });
                        }
                        var c14 = si(a44 = this._onResize).call(a44, this);
                        e26 = window, i59 = "resize", o71 = c14, e26.addEventListener ? ((void 0) === n96 && (n96 = !1), "mousewheel" === i59 && Hd(r57 = navigator.userAgent).call(r57, "Firefox") && (i59 = "DOMMouseScroll"), e26.addEventListener(i59, o71, n96)) : e26.attachEvent("on" + i59, o71), this._cleanupCallbacks.push(function() {
                            !function(t10, e27, i60, o72) {
                                var n97;
                                t10.removeEventListener ? ((void 0) === o72 && (o72 = !1), "mousewheel" === e27 && Hd(n97 = navigator.userAgent).call(n97, "Firefox") && (e27 = "DOMMouseScroll"), t10.removeEventListener(e27, i60, o72)) : t10.detachEvent("on" + e27, i60);
                            }(window, "resize", c14);
                        });
                    }
                }
            },
            {
                key: "_cleanUp",
                value: function() {
                    var t9, e26, i59;
                    nd(t9 = ld(e26 = Od(i59 = this._cleanupCallbacks).call(i59, 0)).call(e26)).call(t9, function(t10) {
                        try {
                            t10();
                        } catch (t11) {
                            console.error(t11);
                        }
                    });
                }
            },
            {
                key: "_onResize",
                value: function() {
                    this.setSize(), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_getCameraState",
                value: function() {
                    var t9 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : this.pixelRatio;
                    !0 === this.initialized && (this.cameraState.previousWidth = this.frame.canvas.width / t9, this.cameraState.previousHeight = this.frame.canvas.height / t9, this.cameraState.scale = this.body.view.scale, this.cameraState.position = this.DOMtoCanvas({
                        x: 0.5 * this.frame.canvas.width / t9,
                        y: 0.5 * this.frame.canvas.height / t9
                    }));
                }
            },
            {
                key: "_setCameraState",
                value: function() {
                    if ((void 0) !== this.cameraState.scale && 0 !== this.frame.canvas.clientWidth && 0 !== this.frame.canvas.clientHeight && 0 !== this.pixelRatio && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {
                        var t9 = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth, e26 = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight, i59 = this.cameraState.scale;
                        1 != t9 && 1 != e26 ? i59 = 0.5 * this.cameraState.scale * (t9 + e26) : 1 != t9 ? i59 = this.cameraState.scale * t9 : 1 != e26 && (i59 = this.cameraState.scale * e26), this.body.view.scale = i59;
                        var o71 = this.DOMtoCanvas({
                            x: 0.5 * this.frame.canvas.clientWidth,
                            y: 0.5 * this.frame.canvas.clientHeight
                        }), n96 = {
                            x: o71.x - this.cameraState.position.x,
                            y: o71.y - this.cameraState.position.y
                        };
                        this.body.view.translation.x += n96.x * this.body.view.scale, this.body.view.translation.y += n96.y * this.body.view.scale;
                    }
                }
            },
            {
                key: "_prepareValue",
                value: function(t10) {
                    if ("number" == typeof t10) return t10 + "px";
                    if ("string" == typeof t10) {
                        if (-1 !== Cl(t10).call(t10, "%") || -1 !== Cl(t10).call(t10, "px")) return t10;
                        if (-1 === Cl(t10).call(t10, "%")) return t10 + "px";
                    }
                    throw new Error("Could not use the value supplied for width or height:" + t10);
                }
            },
            {
                key: "_create",
                value: function() {
                    for(; this.body.container.hasChildNodes();)this.body.container.removeChild(this.body.container.firstChild);
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-network", this.frame.style.position = "relative", this.frame.style.overflow = "hidden", this.frame.tabIndex = 0, this.frame.canvas = document.createElement("canvas"), this.frame.canvas.style.position = "relative", this.frame.appendChild(this.frame.canvas), this.frame.canvas.getContext) this._setPixelRatio(), this.setTransform();
                    else {
                        var t10 = document.createElement("DIV");
                        t10.style.color = "red", t10.style.fontWeight = "bold", t10.style.padding = "10px", t10.innerText = "Error: your browser does not support HTML canvas", this.frame.canvas.appendChild(t10);
                    }
                    this.body.container.appendChild(this.frame), this.body.view.scale = 1, this.body.view.translation = {
                        x: 0.5 * this.frame.canvas.clientWidth,
                        y: 0.5 * this.frame.canvas.clientHeight
                    }, this._bindHammer();
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t11 = this;
                    (void 0) !== this.hammer && this.hammer.destroy(), this.drag = {
                    }, this.pinch = {
                    }, this.hammer = new If(this.frame.canvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.get("pan").set({
                        threshold: 5,
                        direction: If.DIRECTION_ALL
                    }), Fm(this.hammer, function(e27) {
                        t11.body.eventListeners.onTouch(e27);
                    }), this.hammer.on("tap", function(e27) {
                        t11.body.eventListeners.onTap(e27);
                    }), this.hammer.on("doubletap", function(e27) {
                        t11.body.eventListeners.onDoubleTap(e27);
                    }), this.hammer.on("press", function(e27) {
                        t11.body.eventListeners.onHold(e27);
                    }), this.hammer.on("panstart", function(e27) {
                        t11.body.eventListeners.onDragStart(e27);
                    }), this.hammer.on("panmove", function(e27) {
                        t11.body.eventListeners.onDrag(e27);
                    }), this.hammer.on("panend", function(e27) {
                        t11.body.eventListeners.onDragEnd(e27);
                    }), this.hammer.on("pinch", function(e27) {
                        t11.body.eventListeners.onPinch(e27);
                    }), this.frame.canvas.addEventListener("wheel", function(e27) {
                        t11.body.eventListeners.onMouseWheel(e27);
                    }), this.frame.canvas.addEventListener("mousemove", function(e27) {
                        t11.body.eventListeners.onMouseMove(e27);
                    }), this.frame.canvas.addEventListener("contextmenu", function(e27) {
                        t11.body.eventListeners.onContext(e27);
                    }), this.hammerFrame = new If(this.frame), Nm(this.hammerFrame, function(e27) {
                        t11.body.eventListeners.onRelease(e27);
                    });
                }
            },
            {
                key: "setSize",
                value: function() {
                    var t11 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : this.options.width, e27 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.options.height;
                    t11 = this._prepareValue(t11), e27 = this._prepareValue(e27);
                    var i60 = !1, o72 = this.frame.canvas.width, n97 = this.frame.canvas.height, r57 = this.pixelRatio;
                    if (this._setPixelRatio(), t11 != this.options.width || e27 != this.options.height || this.frame.style.width != t11 || this.frame.style.height != e27) this._getCameraState(r57), this.frame.style.width = t11, this.frame.style.height = e27, this.frame.canvas.style.width = "100%", this.frame.canvas.style.height = "100%", this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio), this.options.width = t11, this.options.height = e27, this.canvasViewCenter = {
                        x: 0.5 * this.frame.clientWidth,
                        y: 0.5 * this.frame.clientHeight
                    }, i60 = !0;
                    else {
                        var s50 = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), a45 = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
                        this.frame.canvas.width === s50 && this.frame.canvas.height === a45 || this._getCameraState(r57), this.frame.canvas.width !== s50 && (this.frame.canvas.width = s50, i60 = !0), this.frame.canvas.height !== a45 && (this.frame.canvas.height = a45, i60 = !0);
                    }
                    return !0 === i60 && (this.body.emitter.emit("resize", {
                        width: Math.round(this.frame.canvas.width / this.pixelRatio),
                        height: Math.round(this.frame.canvas.height / this.pixelRatio),
                        oldWidth: Math.round(o72 / this.pixelRatio),
                        oldHeight: Math.round(n97 / this.pixelRatio)
                    }), this._setCameraState()), this.initialized = !0, i60;
                }
            },
            {
                key: "getContext",
                value: function() {
                    return this.frame.canvas.getContext("2d");
                }
            },
            {
                key: "_determinePixelRatio",
                value: function() {
                    var t11 = this.getContext();
                    if ((void 0) === t11) throw new Error("Could not get canvax context");
                    var e27 = 1;
                    return "undefined" != typeof window && (e27 = window.devicePixelRatio || 1), e27 / (t11.webkitBackingStorePixelRatio || t11.mozBackingStorePixelRatio || t11.msBackingStorePixelRatio || t11.oBackingStorePixelRatio || t11.backingStorePixelRatio || 1);
                }
            },
            {
                key: "_setPixelRatio",
                value: function() {
                    this.pixelRatio = this._determinePixelRatio();
                }
            },
            {
                key: "setTransform",
                value: function() {
                    var t11 = this.getContext();
                    if ((void 0) === t11) throw new Error("Could not get canvax context");
                    t11.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                }
            },
            {
                key: "_XconvertDOMtoCanvas",
                value: function(t11) {
                    return (t11 - this.body.view.translation.x) / this.body.view.scale;
                }
            },
            {
                key: "_XconvertCanvasToDOM",
                value: function(t11) {
                    return t11 * this.body.view.scale + this.body.view.translation.x;
                }
            },
            {
                key: "_YconvertDOMtoCanvas",
                value: function(t11) {
                    return (t11 - this.body.view.translation.y) / this.body.view.scale;
                }
            },
            {
                key: "_YconvertCanvasToDOM",
                value: function(t11) {
                    return t11 * this.body.view.scale + this.body.view.translation.y;
                }
            },
            {
                key: "canvasToDOM",
                value: function(t11) {
                    return {
                        x: this._XconvertCanvasToDOM(t11.x),
                        y: this._YconvertCanvasToDOM(t11.y)
                    };
                }
            },
            {
                key: "DOMtoCanvas",
                value: function(t11) {
                    return {
                        x: this._XconvertDOMtoCanvas(t11.x),
                        y: this._YconvertDOMtoCanvas(t11.y)
                    };
                }
            }
        ]), t4;
    }();
    function Rm(t4, e27) {
        var i60 = Ke({
            nodes: e27,
            minZoomLevel: Number.MIN_VALUE,
            maxZoomLevel: 1
        }, null != t4 ? t4 : {
        });
        if (!Hh(i60.nodes)) throw new TypeError("Nodes has to be an array of ids.");
        if (0 === i60.nodes.length && (i60.nodes = e27), !("number" == typeof i60.minZoomLevel && i60.minZoomLevel > 0)) throw new TypeError("Min zoom level has to be a number higher than zero.");
        if (!("number" == typeof i60.maxZoomLevel && i60.minZoomLevel <= i60.maxZoomLevel)) throw new TypeError("Max zoom level has to be a number higher than min zoom level.");
        return i60;
    }
    var jm = function() {
        function t4(e27, i60) {
            var o72, n97, r57 = this;
            Ra(this, t4), this.body = e27, this.canvas = i60, this.animationSpeed = 1 / this.renderRefreshRate, this.animationEasingFunction = "easeInOutQuint", this.easingTime = 0, this.sourceScale = 0, this.targetScale = 0, this.sourceTranslation = 0, this.targetTranslation = 0, this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0, this.touchTime = 0, this.viewFunction = void 0, this.body.emitter.on("fit", si(o72 = this.fit).call(o72, this)), this.body.emitter.on("animationFinished", function() {
                r57.body.emitter.emit("_stopRendering");
            }), this.body.emitter.on("unlockNode", si(n97 = this.releaseNode).call(n97, this));
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function() {
                    var t11 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : {
                    };
                    this.options = t11;
                }
            },
            {
                key: "fit",
                value: function(t11) {
                    var e27 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1];
                    t11 = Rm(t11, this.body.nodeIndices);
                    var i60, o72, n97 = this.canvas.frame.canvas.clientWidth, r57 = this.canvas.frame.canvas.clientHeight;
                    if (0 === n97 || 0 === r57) o72 = 1, i60 = Sm.getRange(this.body.nodes, t11.nodes);
                    else if (!0 === e27) {
                        var s51 = 0;
                        for(var a46 in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, a46)) {
                            var h29 = this.body.nodes[a46];
                            !0 === h29.predefinedPosition && (s51 += 1);
                        }
                        if (s51 > 0.5 * this.body.nodeIndices.length) return void this.fit(t11, !1);
                        i60 = Sm.getRange(this.body.nodes, t11.nodes);
                        var d23 = this.body.nodeIndices.length;
                        o72 = 12.662 / (d23 + 7.4147) + 0.0964822;
                        var l20 = Math.min(n97 / 600, r57 / 600);
                        o72 *= l20;
                    } else {
                        this.body.emitter.emit("_resizeNodes"), i60 = Sm.getRange(this.body.nodes, t11.nodes);
                        var c15 = 1.1 * Math.abs(i60.maxX - i60.minX), u13 = 1.1 * Math.abs(i60.maxY - i60.minY), f16 = n97 / c15, p13 = r57 / u13;
                        o72 = f16 <= p13 ? f16 : p13;
                    }
                    o72 > t11.maxZoomLevel ? o72 = t11.maxZoomLevel : o72 < t11.minZoomLevel && (o72 = t11.minZoomLevel);
                    var v11 = Sm.findCenter(i60), g9 = {
                        position: v11,
                        scale: o72,
                        animation: t11.animation
                    };
                    this.moveTo(g9);
                }
            },
            {
                key: "focus",
                value: function(t11) {
                    var e27 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : {
                    };
                    if ((void 0) !== this.body.nodes[t11]) {
                        var i60 = {
                            x: this.body.nodes[t11].x,
                            y: this.body.nodes[t11].y
                        };
                        e27.position = i60, e27.lockedOnNode = t11, this.moveTo(e27);
                    } else console.error("Node: " + t11 + " cannot be found.");
                }
            },
            {
                key: "moveTo",
                value: function(t11) {
                    if ((void 0) !== t11) {
                        if (null != t11.offset) {
                            if (null != t11.offset.x) {
                                if (t11.offset.x = +t11.offset.x, !Pv(t11.offset.x)) throw new TypeError('The option "offset.x" has to be a finite number.');
                            } else t11.offset.x = 0;
                            if (null != t11.offset.y) {
                                if (t11.offset.y = +t11.offset.y, !Pv(t11.offset.y)) throw new TypeError('The option "offset.y" has to be a finite number.');
                            } else t11.offset.x = 0;
                        } else t11.offset = {
                            x: 0,
                            y: 0
                        };
                        if (null != t11.position) {
                            if (null != t11.position.x) {
                                if (t11.position.x = +t11.position.x, !Pv(t11.position.x)) throw new TypeError('The option "position.x" has to be a finite number.');
                            } else t11.position.x = 0;
                            if (null != t11.position.y) {
                                if (t11.position.y = +t11.position.y, !Pv(t11.position.y)) throw new TypeError('The option "position.y" has to be a finite number.');
                            } else t11.position.x = 0;
                        } else t11.position = this.getViewPosition();
                        if (null != t11.scale) {
                            if (t11.scale = +t11.scale, !(t11.scale > 0)) throw new TypeError('The option "scale" has to be a number greater than zero.');
                        } else t11.scale = this.body.view.scale;
                        (void 0) === t11.animation && (t11.animation = {
                            duration: 0
                        }), !1 === t11.animation && (t11.animation = {
                            duration: 0
                        }), !0 === t11.animation && (t11.animation = {
                        }), (void 0) === t11.animation.duration && (t11.animation.duration = 1000), (void 0) === t11.animation.easingFunction && (t11.animation.easingFunction = "easeInOutQuad"), this.animateView(t11);
                    } else t11 = {
                    };
                }
            },
            {
                key: "animateView",
                value: function(t11) {
                    if ((void 0) !== t11) {
                        this.animationEasingFunction = t11.animation.easingFunction, this.releaseNode(), !0 === t11.locked && (this.lockedOnNodeId = t11.lockedOnNode, this.lockedOnNodeOffset = t11.offset), 0 != this.easingTime && this._transitionRedraw(!0), this.sourceScale = this.body.view.scale, this.sourceTranslation = this.body.view.translation, this.targetScale = t11.scale, this.body.view.scale = this.targetScale;
                        var e27, i61, o72 = this.canvas.DOMtoCanvas({
                            x: 0.5 * this.canvas.frame.canvas.clientWidth,
                            y: 0.5 * this.canvas.frame.canvas.clientHeight
                        }), n97 = o72.x - t11.position.x, r57 = o72.y - t11.position.y;
                        if (this.targetTranslation = {
                            x: this.sourceTranslation.x + n97 * this.targetScale + t11.offset.x,
                            y: this.sourceTranslation.y + r57 * this.targetScale + t11.offset.y
                        }, 0 === t11.animation.duration) {
                            if (null != this.lockedOnNodeId) this.viewFunction = si(e27 = this._lockedRedraw).call(e27, this), this.body.emitter.on("initRedraw", this.viewFunction);
                            else this.body.view.scale = this.targetScale, this.body.view.translation = this.targetTranslation, this.body.emitter.emit("_requestRedraw");
                        } else this.animationSpeed = 1 / (60 * t11.animation.duration * 0.001) || 1 / 60, this.animationEasingFunction = t11.animation.easingFunction, this.viewFunction = si(i61 = this._transitionRedraw).call(i61, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering");
                    }
                }
            },
            {
                key: "_lockedRedraw",
                value: function() {
                    var t11 = this.body.nodes[this.lockedOnNodeId].x, e28 = this.body.nodes[this.lockedOnNodeId].y, i62 = this.canvas.DOMtoCanvas({
                        x: 0.5 * this.canvas.frame.canvas.clientWidth,
                        y: 0.5 * this.canvas.frame.canvas.clientHeight
                    }), o73 = i62.x - t11, n98 = i62.y - e28, r58 = this.body.view.translation, s52 = {
                        x: r58.x + o73 * this.body.view.scale + this.lockedOnNodeOffset.x,
                        y: r58.y + n98 * this.body.view.scale + this.lockedOnNodeOffset.y
                    };
                    this.body.view.translation = s52;
                }
            },
            {
                key: "releaseNode",
                value: function() {
                    (void 0) !== this.lockedOnNodeId && (void 0) !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0);
                }
            },
            {
                key: "_transitionRedraw",
                value: function() {
                    var t11 = arguments.length > 0 && (void 0) !== arguments[0] && arguments[0];
                    this.easingTime += this.animationSpeed, this.easingTime = !0 === t11 ? 1 : this.easingTime;
                    var e28 = xf[this.animationEasingFunction](this.easingTime);
                    if (this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * e28, this.body.view.translation = {
                        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * e28,
                        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * e28
                    }, this.easingTime >= 1) {
                        var i62;
                        if (this.body.emitter.off("initRedraw", this.viewFunction), this.easingTime = 0, null != this.lockedOnNodeId) this.viewFunction = si(i62 = this._lockedRedraw).call(i62, this), this.body.emitter.on("initRedraw", this.viewFunction);
                        this.body.emitter.emit("animationFinished");
                    }
                }
            },
            {
                key: "getScale",
                value: function() {
                    return this.body.view.scale;
                }
            },
            {
                key: "getViewPosition",
                value: function() {
                    return this.canvas.DOMtoCanvas({
                        x: 0.5 * this.canvas.frame.canvas.clientWidth,
                        y: 0.5 * this.canvas.frame.canvas.clientHeight
                    });
                }
            }
        ]), t4;
    }();
    function Lm(t4) {
        var e28, i63 = t4 && t4.preventDefault || !1, o73 = t4 && t4.container || window, n98 = {
        }, r58 = {
            keydown: {
            },
            keyup: {
            }
        }, s52 = {
        };
        for(e28 = 97; e28 <= 122; e28++)s52[String.fromCharCode(e28)] = {
            code: e28 - 97 + 65,
            shift: !1
        };
        for(e28 = 65; e28 <= 90; e28++)s52[String.fromCharCode(e28)] = {
            code: e28,
            shift: !0
        };
        for(e28 = 0; e28 <= 9; e28++)s52["" + e28] = {
            code: 48 + e28,
            shift: !1
        };
        for(e28 = 1; e28 <= 12; e28++)s52["F" + e28] = {
            code: 111 + e28,
            shift: !1
        };
        for(e28 = 0; e28 <= 9; e28++)s52["num" + e28] = {
            code: 96 + e28,
            shift: !1
        };
        s52["num*"] = {
            code: 106,
            shift: !1
        }, s52["num+"] = {
            code: 107,
            shift: !1
        }, s52["num-"] = {
            code: 109,
            shift: !1
        }, s52["num/"] = {
            code: 111,
            shift: !1
        }, s52["num."] = {
            code: 110,
            shift: !1
        }, s52.left = {
            code: 37,
            shift: !1
        }, s52.up = {
            code: 38,
            shift: !1
        }, s52.right = {
            code: 39,
            shift: !1
        }, s52.down = {
            code: 40,
            shift: !1
        }, s52.space = {
            code: 32,
            shift: !1
        }, s52.enter = {
            code: 13,
            shift: !1
        }, s52.shift = {
            code: 16,
            shift: void 0
        }, s52.esc = {
            code: 27,
            shift: !1
        }, s52.backspace = {
            code: 8,
            shift: !1
        }, s52.tab = {
            code: 9,
            shift: !1
        }, s52.ctrl = {
            code: 17,
            shift: !1
        }, s52.alt = {
            code: 18,
            shift: !1
        }, s52.delete = {
            code: 46,
            shift: !1
        }, s52.pageup = {
            code: 33,
            shift: !1
        }, s52.pagedown = {
            code: 34,
            shift: !1
        }, s52["="] = {
            code: 187,
            shift: !1
        }, s52["-"] = {
            code: 189,
            shift: !1
        }, s52["]"] = {
            code: 221,
            shift: !1
        }, s52["["] = {
            code: 219,
            shift: !1
        };
        var a47 = function(t11) {
            d25(t11, "keydown");
        }, h30 = function(t11) {
            d25(t11, "keyup");
        }, d25 = function(t11, e29) {
            if ((void 0) !== r58[e29][t11.keyCode]) {
                for(var o74 = r58[e29][t11.keyCode], n99 = 0; n99 < o74.length; n99++)((void 0) === o74[n99].shift || 1 == o74[n99].shift && 1 == t11.shiftKey || 0 == o74[n99].shift && 0 == t11.shiftKey) && o74[n99].fn(t11);
                1 == i63 && t11.preventDefault();
            }
        };
        return n98.bind = function(t11, e29, i64) {
            if ((void 0) === i64 && (i64 = "keydown"), (void 0) === s52[t11]) throw new Error("unsupported key: " + t11);
            (void 0) === r58[i64][s52[t11].code] && (r58[i64][s52[t11].code] = []), r58[i64][s52[t11].code].push({
                fn: e29,
                shift: s52[t11].shift
            });
        }, n98.bindAll = function(t11, e29) {
            for(var i64 in (void 0) === e29 && (e29 = "keydown"), s52)s52.hasOwnProperty(i64) && n98.bind(i64, t11, e29);
        }, n98.getKey = function(t11) {
            for(var e29 in s52)if (s52.hasOwnProperty(e29)) {
                if (1 == t11.shiftKey && 1 == s52[e29].shift && t11.keyCode == s52[e29].code) return e29;
                if (0 == t11.shiftKey && 0 == s52[e29].shift && t11.keyCode == s52[e29].code) return e29;
                if (t11.keyCode == s52[e29].code && "shift" == e29) return e29;
            }
            return "unknown key, currently not supported";
        }, n98.unbind = function(t11, e29, i64) {
            if ((void 0) === i64 && (i64 = "keydown"), (void 0) === s52[t11]) throw new Error("unsupported key: " + t11);
            if ((void 0) !== e29) {
                var o75 = [], n100 = r58[i64][s52[t11].code];
                if ((void 0) !== n100) for(var a48 = 0; a48 < n100.length; a48++)n100[a48].fn == e29 && n100[a48].shift == s52[t11].shift || o75.push(r58[i64][s52[t11].code][a48]);
                r58[i64][s52[t11].code] = o75;
            } else r58[i64][s52[t11].code] = [];
        }, n98.reset = function() {
            r58 = {
                keydown: {
                },
                keyup: {
                }
            };
        }, n98.destroy = function() {
            r58 = {
                keydown: {
                },
                keyup: {
                }
            }, o73.removeEventListener("keydown", a47, !0), o73.removeEventListener("keyup", h30, !0);
        }, o73.addEventListener("keydown", a47, !0), o73.addEventListener("keyup", h30, !0), n98;
    }
    var Hm = function() {
        function t4(e28, i63) {
            var o73 = this;
            Ra(this, t4), this.body = e28, this.canvas = i63, this.iconsCreated = !1, this.navigationHammers = [], this.boundFunctions = {
            }, this.touchTime = 0, this.activated = !1, this.body.emitter.on("activate", function() {
                o73.activated = !0, o73.configureKeyboardBindings();
            }), this.body.emitter.on("deactivate", function() {
                o73.activated = !1, o73.configureKeyboardBindings();
            }), this.body.emitter.on("destroy", function() {
                (void 0) !== o73.keycharm && o73.keycharm.destroy();
            }), this.options = {
            };
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t11) {
                    (void 0) !== t11 && (this.options = t11, this.create());
                }
            },
            {
                key: "create",
                value: function() {
                    !0 === this.options.navigationButtons ? !1 === this.iconsCreated && this.loadNavigationElements() : !0 === this.iconsCreated && this.cleanNavigation(), this.configureKeyboardBindings();
                }
            },
            {
                key: "cleanNavigation",
                value: function() {
                    if (0 != this.navigationHammers.length) {
                        for(var t11 = 0; t11 < this.navigationHammers.length; t11++)this.navigationHammers[t11].destroy();
                        this.navigationHammers = [];
                    }
                    this.navigationDOM && this.navigationDOM.wrapper && this.navigationDOM.wrapper.parentNode && this.navigationDOM.wrapper.parentNode.removeChild(this.navigationDOM.wrapper), this.iconsCreated = !1;
                }
            },
            {
                key: "loadNavigationElements",
                value: function() {
                    var t12 = this;
                    this.cleanNavigation(), this.navigationDOM = {
                    };
                    var e28 = [
                        "up",
                        "down",
                        "left",
                        "right",
                        "zoomIn",
                        "zoomOut",
                        "zoomExtends"
                    ], i63 = [
                        "_moveUp",
                        "_moveDown",
                        "_moveLeft",
                        "_moveRight",
                        "_zoomIn",
                        "_zoomOut",
                        "_fit"
                    ];
                    this.navigationDOM.wrapper = document.createElement("div"), this.navigationDOM.wrapper.className = "vis-navigation", this.canvas.frame.appendChild(this.navigationDOM.wrapper);
                    for(var o73 = 0; o73 < e28.length; o73++){
                        this.navigationDOM[e28[o73]] = document.createElement("div"), this.navigationDOM[e28[o73]].className = "vis-button vis-" + e28[o73], this.navigationDOM.wrapper.appendChild(this.navigationDOM[e28[o73]]);
                        var n98, r58, s52 = new If(this.navigationDOM[e28[o73]]);
                        if ("_fit" === i63[o73]) Fm(s52, si(n98 = this._fit).call(n98, this));
                        else Fm(s52, si(r58 = this.bindToRedraw).call(r58, this, i63[o73]));
                        this.navigationHammers.push(s52);
                    }
                    var a47 = new If(this.canvas.frame);
                    Nm(a47, function() {
                        t12._stopMovement();
                    }), this.navigationHammers.push(a47), this.iconsCreated = !0;
                }
            },
            {
                key: "bindToRedraw",
                value: function(t12) {
                    var e28;
                    (void 0) === this.boundFunctions[t12] && (this.boundFunctions[t12] = si(e28 = this[t12]).call(e28, this), this.body.emitter.on("initRedraw", this.boundFunctions[t12]), this.body.emitter.emit("_startRendering"));
                }
            },
            {
                key: "unbindFromRedraw",
                value: function(t12) {
                    (void 0) !== this.boundFunctions[t12] && (this.body.emitter.off("initRedraw", this.boundFunctions[t12]), this.body.emitter.emit("_stopRendering"), delete this.boundFunctions[t12]);
                }
            },
            {
                key: "_fit",
                value: function() {
                    (new Date).valueOf() - this.touchTime > 700 && (this.body.emitter.emit("fit", {
                        duration: 700
                    }), this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "_stopMovement",
                value: function() {
                    for(var t12 in this.boundFunctions)Object.prototype.hasOwnProperty.call(this.boundFunctions, t12) && (this.body.emitter.off("initRedraw", this.boundFunctions[t12]), this.body.emitter.emit("_stopRendering"));
                    this.boundFunctions = {
                    };
                }
            },
            {
                key: "_moveUp",
                value: function() {
                    this.body.view.translation.y += this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveDown",
                value: function() {
                    this.body.view.translation.y -= this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveLeft",
                value: function() {
                    this.body.view.translation.x += this.options.keyboard.speed.x;
                }
            },
            {
                key: "_moveRight",
                value: function() {
                    this.body.view.translation.x -= this.options.keyboard.speed.x;
                }
            },
            {
                key: "_zoomIn",
                value: function() {
                    var t12 = this.body.view.scale, e28 = this.body.view.scale * (1 + this.options.keyboard.speed.zoom), i63 = this.body.view.translation, o73 = e28 / t12, n101 = (1 - o73) * this.canvas.canvasViewCenter.x + i63.x * o73, r59 = (1 - o73) * this.canvas.canvasViewCenter.y + i63.y * o73;
                    this.body.view.scale = e28, this.body.view.translation = {
                        x: n101,
                        y: r59
                    }, this.body.emitter.emit("zoom", {
                        direction: "+",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "_zoomOut",
                value: function() {
                    var t12 = this.body.view.scale, e28 = this.body.view.scale / (1 + this.options.keyboard.speed.zoom), i63 = this.body.view.translation, o73 = e28 / t12, n101 = (1 - o73) * this.canvas.canvasViewCenter.x + i63.x * o73, r59 = (1 - o73) * this.canvas.canvasViewCenter.y + i63.y * o73;
                    this.body.view.scale = e28, this.body.view.translation = {
                        x: n101,
                        y: r59
                    }, this.body.emitter.emit("zoom", {
                        direction: "-",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "configureKeyboardBindings",
                value: function() {
                    var t12, e28, i63, o73, n101, r59, s53, a47, h30, d25, l21, c16, u14, f17, p14, v11, g9, y6, m7, b7, w3, k2, _3, x4, E3 = this;
                    ((void 0) !== this.keycharm && this.keycharm.destroy(), !0 === this.options.keyboard.enabled) && (!0 === this.options.keyboard.bindToWindow ? this.keycharm = Lm({
                        container: window,
                        preventDefault: !0
                    }) : this.keycharm = Lm({
                        container: this.canvas.frame,
                        preventDefault: !0
                    }), this.keycharm.reset(), !0 === this.activated && (si(t12 = this.keycharm).call(t12, "up", function() {
                        E3.bindToRedraw("_moveUp");
                    }, "keydown"), si(e28 = this.keycharm).call(e28, "down", function() {
                        E3.bindToRedraw("_moveDown");
                    }, "keydown"), si(i63 = this.keycharm).call(i63, "left", function() {
                        E3.bindToRedraw("_moveLeft");
                    }, "keydown"), si(o73 = this.keycharm).call(o73, "right", function() {
                        E3.bindToRedraw("_moveRight");
                    }, "keydown"), si(n101 = this.keycharm).call(n101, "=", function() {
                        E3.bindToRedraw("_zoomIn");
                    }, "keydown"), si(r59 = this.keycharm).call(r59, "num+", function() {
                        E3.bindToRedraw("_zoomIn");
                    }, "keydown"), si(s53 = this.keycharm).call(s53, "num-", function() {
                        E3.bindToRedraw("_zoomOut");
                    }, "keydown"), si(a47 = this.keycharm).call(a47, "-", function() {
                        E3.bindToRedraw("_zoomOut");
                    }, "keydown"), si(h30 = this.keycharm).call(h30, "[", function() {
                        E3.bindToRedraw("_zoomOut");
                    }, "keydown"), si(d25 = this.keycharm).call(d25, "]", function() {
                        E3.bindToRedraw("_zoomIn");
                    }, "keydown"), si(l21 = this.keycharm).call(l21, "pageup", function() {
                        E3.bindToRedraw("_zoomIn");
                    }, "keydown"), si(c16 = this.keycharm).call(c16, "pagedown", function() {
                        E3.bindToRedraw("_zoomOut");
                    }, "keydown"), si(u14 = this.keycharm).call(u14, "up", function() {
                        E3.unbindFromRedraw("_moveUp");
                    }, "keyup"), si(f17 = this.keycharm).call(f17, "down", function() {
                        E3.unbindFromRedraw("_moveDown");
                    }, "keyup"), si(p14 = this.keycharm).call(p14, "left", function() {
                        E3.unbindFromRedraw("_moveLeft");
                    }, "keyup"), si(v11 = this.keycharm).call(v11, "right", function() {
                        E3.unbindFromRedraw("_moveRight");
                    }, "keyup"), si(g9 = this.keycharm).call(g9, "=", function() {
                        E3.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(y6 = this.keycharm).call(y6, "num+", function() {
                        E3.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(m7 = this.keycharm).call(m7, "num-", function() {
                        E3.unbindFromRedraw("_zoomOut");
                    }, "keyup"), si(b7 = this.keycharm).call(b7, "-", function() {
                        E3.unbindFromRedraw("_zoomOut");
                    }, "keyup"), si(w3 = this.keycharm).call(w3, "[", function() {
                        E3.unbindFromRedraw("_zoomOut");
                    }, "keyup"), si(k2 = this.keycharm).call(k2, "]", function() {
                        E3.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(_3 = this.keycharm).call(_3, "pageup", function() {
                        E3.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(x4 = this.keycharm).call(x4, "pagedown", function() {
                        E3.unbindFromRedraw("_zoomOut");
                    }, "keyup")));
                }
            }
        ]), t4;
    }();
    function Wm(t4, e28) {
        var i63 = (void 0) !== Nh && xr(t4) || t4["@@iterator"];
        if (!i63) {
            if (Hh(t4) || (i63 = (function(t12, e29) {
                var i64;
                if (!t12) return;
                if ("string" == typeof t12) return Vm(t12, e29);
                var o73 = Lh(i64 = Object.prototype.toString.call(t12)).call(i64, 8, -1);
                "Object" === o73 && t12.constructor && (o73 = t12.constructor.name);
                if ("Map" === o73 || "Set" === o73) return rr(t12);
                if ("Arguments" === o73 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o73)) return Vm(t12, e29);
            })(t4)) || e28 && t4 && "number" == typeof t4.length) {
                i63 && (t4 = i63);
                var o73 = 0, n101 = function() {
                };
                return {
                    s: n101,
                    n: function() {
                        return o73 >= t4.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t4[o73++]
                        };
                    },
                    e: function(t12) {
                        throw t12;
                    },
                    f: n101
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r59, s53 = !0, a47 = !1;
        return {
            s: function() {
                i63 = i63.call(t4);
            },
            n: function() {
                var t12 = i63.next();
                return s53 = t12.done, t12;
            },
            e: function(t12) {
                a47 = !0, r59 = t12;
            },
            f: function() {
                try {
                    s53 || null == i63.return || i63.return();
                } finally{
                    if (a47) throw r59;
                }
            }
        };
    }
    function Vm(t4, e28) {
        (null == e28 || e28 > t4.length) && (e28 = t4.length);
        for(var i63 = 0, o76 = new Array(e28); i63 < e28; i63++)o76[i63] = t4[i63];
        return o76;
    }
    var qm = function() {
        function t4(e28, i63, o76) {
            var n102, r59, s53, a47, h30, d25, l21, c16, u14, f17, p14, v11, g9;
            Ra(this, t4), this.body = e28, this.canvas = i63, this.selectionHandler = o76, this.navigationHandler = new Hm(e28, i63), this.body.eventListeners.onTap = si(n102 = this.onTap).call(n102, this), this.body.eventListeners.onTouch = si(r59 = this.onTouch).call(r59, this), this.body.eventListeners.onDoubleTap = si(s53 = this.onDoubleTap).call(s53, this), this.body.eventListeners.onHold = si(a47 = this.onHold).call(a47, this), this.body.eventListeners.onDragStart = si(h30 = this.onDragStart).call(h30, this), this.body.eventListeners.onDrag = si(d25 = this.onDrag).call(d25, this), this.body.eventListeners.onDragEnd = si(l21 = this.onDragEnd).call(l21, this), this.body.eventListeners.onMouseWheel = si(c16 = this.onMouseWheel).call(c16, this), this.body.eventListeners.onPinch = si(u14 = this.onPinch).call(u14, this), this.body.eventListeners.onMouseMove = si(f17 = this.onMouseMove).call(f17, this), this.body.eventListeners.onRelease = si(p14 = this.onRelease).call(p14, this), this.body.eventListeners.onContext = si(v11 = this.onContext).call(v11, this), this.touchTime = 0, this.drag = {
            }, this.pinch = {
            }, this.popup = void 0, this.popupObj = void 0, this.popupTimer = void 0, this.body.functions.getPointer = si(g9 = this.getPointer).call(g9, this), this.options = {
            }, this.defaultOptions = {
                dragNodes: !0,
                dragView: !0,
                hover: !1,
                keyboard: {
                    enabled: !1,
                    speed: {
                        x: 10,
                        y: 10,
                        zoom: 0.02
                    },
                    bindToWindow: !0,
                    autoFocus: !0
                },
                navigationButtons: !1,
                tooltipDelay: 300,
                zoomView: !0,
                zoomSpeed: 1
            }, Ke(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t4, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t12 = this;
                    this.body.emitter.on("destroy", function() {
                        clearTimeout(t12.popupTimer), delete t12.body.functions.getPointer;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t12) {
                    if ((void 0) !== t12) rf([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag",
                        "keyboard",
                        "multiselect",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t12), _f(this.options, t12, "keyboard"), t12.tooltip && (Ke(this.options.tooltip, t12.tooltip), t12.tooltip.color && (this.options.tooltip.color = pf(t12.tooltip.color)));
                    this.navigationHandler.setOptions(this.options);
                }
            },
            {
                key: "getPointer",
                value: function(t12) {
                    var e28;
                    return {
                        x: t12.x - (e28 = this.canvas.frame.canvas, e28.getBoundingClientRect().left),
                        y: t12.y - df(this.canvas.frame.canvas)
                    };
                }
            },
            {
                key: "onTouch",
                value: function(t12) {
                    (new Date).valueOf() - this.touchTime > 50 && (this.drag.pointer = this.getPointer(t12.center), this.drag.pinched = !1, this.pinch.scale = this.body.view.scale, this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "onTap",
                value: function(t12) {
                    var e28 = this.getPointer(t12.center), i63 = this.selectionHandler.options.multiselect && (t12.changedPointers[0].ctrlKey || t12.changedPointers[0].metaKey);
                    this.checkSelectionChanges(e28, i63), this.selectionHandler.commitAndEmit(e28, t12), this.selectionHandler.generateClickEvent("click", t12, e28);
                }
            },
            {
                key: "onDoubleTap",
                value: function(t12) {
                    var e28 = this.getPointer(t12.center);
                    this.selectionHandler.generateClickEvent("doubleClick", t12, e28);
                }
            },
            {
                key: "onHold",
                value: function(t12) {
                    var e28 = this.getPointer(t12.center), i63 = this.selectionHandler.options.multiselect;
                    this.checkSelectionChanges(e28, i63), this.selectionHandler.commitAndEmit(e28, t12), this.selectionHandler.generateClickEvent("click", t12, e28), this.selectionHandler.generateClickEvent("hold", t12, e28);
                }
            },
            {
                key: "onRelease",
                value: function(t12) {
                    if ((new Date).valueOf() - this.touchTime > 10) {
                        var e28 = this.getPointer(t12.center);
                        this.selectionHandler.generateClickEvent("release", t12, e28), this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "onContext",
                value: function(t12) {
                    var e29 = this.getPointer({
                        x: t12.clientX,
                        y: t12.clientY
                    });
                    this.selectionHandler.generateClickEvent("oncontext", t12, e29);
                }
            },
            {
                key: "checkSelectionChanges",
                value: function(t12) {
                    var e29 = arguments.length > 1 && (void 0) !== arguments[1] && arguments[1];
                    !0 === e29 ? this.selectionHandler.selectAdditionalOnPoint(t12) : this.selectionHandler.selectOnPoint(t12);
                }
            },
            {
                key: "_determineDifference",
                value: function(t12, e29) {
                    var i63 = function(t13, e30) {
                        for(var i64 = [], o76 = 0; o76 < t13.length; o76++){
                            var n102 = t13[o76];
                            -1 === Cl(e30).call(e30, n102) && i64.push(n102);
                        }
                        return i64;
                    };
                    return {
                        nodes: i63(t12.nodes, e29.nodes),
                        edges: i63(t12.edges, e29.edges)
                    };
                }
            },
            {
                key: "onDragStart",
                value: function(t12) {
                    if (!this.drag.dragging) {
                        (void 0) === this.drag.pointer && this.onTouch(t12);
                        var e29 = this.selectionHandler.getNodeAt(this.drag.pointer);
                        if (this.drag.dragging = !0, this.drag.selection = [], this.drag.translation = Ke({
                        }, this.body.view.translation), this.drag.nodeId = void 0, t12.srcEvent.shiftKey) {
                            this.body.selectionBox.show = !0;
                            var i63 = this.getPointer(t12.center);
                            this.body.selectionBox.position.start = {
                                x: this.canvas._XconvertDOMtoCanvas(i63.x),
                                y: this.canvas._YconvertDOMtoCanvas(i63.y)
                            }, this.body.selectionBox.position.end = {
                                x: this.canvas._XconvertDOMtoCanvas(i63.x),
                                y: this.canvas._YconvertDOMtoCanvas(i63.y)
                            };
                        }
                        if ((void 0) !== e29 && !0 === this.options.dragNodes) {
                            this.drag.nodeId = e29.id, !1 === e29.isSelected() && (this.selectionHandler.unselectAll(), this.selectionHandler.selectObject(e29)), this.selectionHandler.generateClickEvent("dragStart", t12, this.drag.pointer);
                            var o76, n103 = Wm(this.selectionHandler.getSelectedNodes());
                            try {
                                for(n103.s(); !(o76 = n103.n()).done;){
                                    var r59 = o76.value, s53 = {
                                        id: r59.id,
                                        node: r59,
                                        x: r59.x,
                                        y: r59.y,
                                        xFixed: r59.options.fixed.x,
                                        yFixed: r59.options.fixed.y
                                    };
                                    r59.options.fixed.x = !0, r59.options.fixed.y = !0, this.drag.selection.push(s53);
                                }
                            } catch (t13) {
                                n103.e(t13);
                            } finally{
                                n103.f();
                            }
                        } else this.selectionHandler.generateClickEvent("dragStart", t12, this.drag.pointer, void 0, !0);
                    }
                }
            },
            {
                key: "onDrag",
                value: function(t12) {
                    var e30 = this;
                    if (!0 !== this.drag.pinched) {
                        this.body.emitter.emit("unlockNode");
                        var i64 = this.getPointer(t12.center), o77 = this.drag.selection;
                        if (o77 && o77.length && !0 === this.options.dragNodes) {
                            this.selectionHandler.generateClickEvent("dragging", t12, i64);
                            var n104 = i64.x - this.drag.pointer.x, r60 = i64.y - this.drag.pointer.y;
                            nd(o77).call(o77, function(t13) {
                                var i65 = t13.node;
                                !1 === t13.xFixed && (i65.x = e30.canvas._XconvertDOMtoCanvas(e30.canvas._XconvertCanvasToDOM(t13.x) + n104)), !1 === t13.yFixed && (i65.y = e30.canvas._YconvertDOMtoCanvas(e30.canvas._YconvertCanvasToDOM(t13.y) + r60));
                            }), this.body.emitter.emit("startSimulation");
                        } else {
                            if (t12.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t12, i64, void 0, !0), (void 0) === this.drag.pointer) return void this.onDragStart(t12);
                                this.body.selectionBox.position.end = {
                                    x: this.canvas._XconvertDOMtoCanvas(i64.x),
                                    y: this.canvas._YconvertDOMtoCanvas(i64.y)
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                            if (!0 === this.options.dragView && !t12.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t12, i64, void 0, !0), (void 0) === this.drag.pointer) return void this.onDragStart(t12);
                                var s54 = i64.x - this.drag.pointer.x, a47 = i64.y - this.drag.pointer.y;
                                this.body.view.translation = {
                                    x: this.drag.translation.x + s54,
                                    y: this.drag.translation.y + a47
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                        }
                    }
                }
            },
            {
                key: "onDragEnd",
                value: function(t12) {
                    var e30 = this;
                    if (this.drag.dragging = !1, this.body.selectionBox.show) {
                        var i65;
                        this.body.selectionBox.show = !1;
                        var o78 = this.body.selectionBox.position, n105 = {
                            minX: Math.min(o78.start.x, o78.end.x),
                            minY: Math.min(o78.start.y, o78.end.y),
                            maxX: Math.max(o78.start.x, o78.end.x),
                            maxY: Math.max(o78.start.y, o78.end.y)
                        }, r61 = $d(i65 = this.body.nodeIndices).call(i65, function(t13) {
                            var i66 = e30.body.nodes[t13];
                            return i66.x >= n105.minX && i66.x <= n105.maxX && i66.y >= n105.minY && i66.y <= n105.maxY;
                        });
                        nd(r61).call(r61, function(t13) {
                            return e30.selectionHandler.selectObject(e30.body.nodes[t13]);
                        });
                        var s55 = this.getPointer(t12.center);
                        this.selectionHandler.commitAndEmit(s55, t12), this.selectionHandler.generateClickEvent("dragEnd", t12, this.getPointer(t12.center), void 0, !0), this.body.emitter.emit("_requestRedraw");
                    } else {
                        var a49 = this.drag.selection;
                        a49 && a49.length ? (nd(a49).call(a49, function(t13) {
                            t13.node.options.fixed.x = t13.xFixed, t13.node.options.fixed.y = t13.yFixed;
                        }), this.selectionHandler.generateClickEvent("dragEnd", t12, this.getPointer(t12.center)), this.body.emitter.emit("startSimulation")) : (this.selectionHandler.generateClickEvent("dragEnd", t12, this.getPointer(t12.center), void 0, !0), this.body.emitter.emit("_requestRedraw"));
                    }
                }
            },
            {
                key: "onPinch",
                value: function(t12) {
                    var e30 = this.getPointer(t12.center);
                    this.drag.pinched = !0, (void 0) === this.pinch.scale && (this.pinch.scale = 1);
                    var i66 = this.pinch.scale * t12.scale;
                    this.zoom(i66, e30);
                }
            },
            {
                key: "zoom",
                value: function(t12, e30) {
                    if (!0 === this.options.zoomView) {
                        var i66 = this.body.view.scale;
                        t12 < 0.00001 && (t12 = 0.00001), t12 > 10 && (t12 = 10);
                        var o79 = void 0;
                        (void 0) !== this.drag && !0 === this.drag.dragging && (o79 = this.canvas.DOMtoCanvas(this.drag.pointer));
                        var n106 = this.body.view.translation, r62 = t12 / i66, s56 = (1 - r62) * e30.x + n106.x * r62, a50 = (1 - r62) * e30.y + n106.y * r62;
                        if (this.body.view.scale = t12, this.body.view.translation = {
                            x: s56,
                            y: a50
                        }, null != o79) {
                            var h30 = this.canvas.canvasToDOM(o79);
                            this.drag.pointer.x = h30.x, this.drag.pointer.y = h30.y;
                        }
                        this.body.emitter.emit("_requestRedraw"), i66 < t12 ? this.body.emitter.emit("zoom", {
                            direction: "+",
                            scale: this.body.view.scale,
                            pointer: e30
                        }) : this.body.emitter.emit("zoom", {
                            direction: "-",
                            scale: this.body.view.scale,
                            pointer: e30
                        });
                    }
                }
            },
            {
                key: "onMouseWheel",
                value: function(t12) {
                    if (!0 === this.options.zoomView) {
                        if (0 !== t12.deltaY) {
                            var e30 = this.body.view.scale;
                            e30 *= 1 + (t12.deltaY < 0 ? 1 : -1) * (0.1 * this.options.zoomSpeed);
                            var i67 = this.getPointer({
                                x: t12.clientX,
                                y: t12.clientY
                            });
                            this.zoom(e30, i67);
                        }
                        t12.preventDefault();
                    }
                }
            },
            {
                key: "onMouseMove",
                value: function(t12) {
                    var e31 = this, i68 = this.getPointer({
                        x: t12.clientX,
                        y: t12.clientY
                    }), o80 = !1;
                    (void 0) !== this.popup && (!1 === this.popup.hidden && this._checkHidePopup(i68), !1 === this.popup.hidden && (o80 = !0, this.popup.setPosition(i68.x + 3, i68.y - 5), this.popup.show())), this.options.keyboard.autoFocus && !1 === this.options.keyboard.bindToWindow && !0 === this.options.keyboard.enabled && this.canvas.frame.focus(), !1 === o80 && ((void 0) !== this.popupTimer && (clearInterval(this.popupTimer), this.popupTimer = void 0), this.drag.dragging || (this.popupTimer = Yl(function() {
                        return e31._checkShowPopup(i68);
                    }, this.options.tooltipDelay))), !0 === this.options.hover && this.selectionHandler.hoverObject(t12, i68);
                }
            },
            {
                key: "_checkShowPopup",
                value: function(t12) {
                    var e31 = this.canvas._XconvertDOMtoCanvas(t12.x), i68 = this.canvas._YconvertDOMtoCanvas(t12.y), o80 = {
                        left: e31,
                        top: i68,
                        right: e31,
                        bottom: i68
                    }, n107 = (void 0) === this.popupObj ? void 0 : this.popupObj.id, r63 = !1, s57 = "node";
                    if ((void 0) === this.popupObj) {
                        for(var a51, h31 = this.body.nodeIndices, d25 = this.body.nodes, l21 = [], c16 = 0; c16 < h31.length; c16++)!0 === (a51 = d25[h31[c16]]).isOverlappingWith(o80) && (r63 = !0, (void 0) !== a51.getTitle() && l21.push(h31[c16]));
                        l21.length > 0 && (this.popupObj = d25[l21[l21.length - 1]], r63 = !0);
                    }
                    if ((void 0) === this.popupObj && !1 === r63) {
                        for(var u14, f17 = this.body.edgeIndices, p14 = this.body.edges, v11 = [], g9 = 0; g9 < f17.length; g9++)!0 === (u14 = p14[f17[g9]]).isOverlappingWith(o80) && !0 === u14.connected && (void 0) !== u14.getTitle() && v11.push(f17[g9]);
                        v11.length > 0 && (this.popupObj = p14[v11[v11.length - 1]], s57 = "edge");
                    }
                    (void 0) !== this.popupObj ? this.popupObj.id !== n107 && ((void 0) === this.popup && (this.popup = new zf(this.canvas.frame)), this.popup.popupTargetType = s57, this.popup.popupTargetId = this.popupObj.id, this.popup.setPosition(t12.x + 3, t12.y - 5), this.popup.setText(this.popupObj.getTitle()), this.popup.show(), this.body.emitter.emit("showPopup", this.popupObj.id)) : (void 0) !== this.popup && (this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            },
            {
                key: "_checkHidePopup",
                value: function(t12) {
                    var e31 = this.selectionHandler._pointerToPositionObject(t12), i68 = !1;
                    if ("node" === this.popup.popupTargetType) {
                        if ((void 0) !== this.body.nodes[this.popup.popupTargetId] && !0 === (i68 = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(e31))) {
                            var o80 = this.selectionHandler.getNodeAt(t12);
                            i68 = (void 0) !== o80 && o80.id === this.popup.popupTargetId;
                        }
                    } else (void 0) === this.selectionHandler.getNodeAt(t12) && (void 0) !== this.body.edges[this.popup.popupTargetId] && (i68 = this.body.edges[this.popup.popupTargetId].isOverlappingWith(e31));
                    !1 === i68 && (this.popupObj = void 0, this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            }
        ]), t4;
    }();
    sv("Set", function(t4) {
        return function() {
            return t4(this, arguments.length ? arguments[0] : void 0);
        };
    }, Ov);
    var Um = O.Set, Ym = hv, Xm = kp.exports.getWeakData, Gm = Kt, Km = E, $m = Up, Zm = qp, Qm = et, Jm = Zi.set, tb = Zi.getterFor, eb = Jr.find, ib = Jr.findIndex, ob = 0, nb = function(t4) {
        return t4.frozen || (t4.frozen = new rb);
    }, rb = function() {
        this.entries = [];
    }, sb = function(t4, e31) {
        return eb(t4.entries, function(t12) {
            return t12[0] === e31;
        });
    };
    rb.prototype = {
        get: function(t4) {
            var e31 = sb(this, t4);
            if (e31) return e31[1];
        },
        has: function(t4) {
            return !!sb(this, t4);
        },
        set: function(t4, e31) {
            var i68 = sb(this, t4);
            i68 ? i68[1] = e31 : this.entries.push([
                t4,
                e31
            ]);
        },
        delete: function(t4) {
            var e31 = ib(this.entries, function(e32) {
                return e32[0] === t4;
            });
            return ~e31 && this.entries.splice(e31, 1), !!~e31;
        }
    };
    var ab, hb = {
        getConstructor: function(t4, e31, i68, o81) {
            var n107 = t4(function(t12, r63) {
                $m(t12, n107, e31), Jm(t12, {
                    type: e31,
                    id: ob++,
                    frozen: void 0
                }), null != r63 && Zm(r63, t12[o81], {
                    that: t12,
                    AS_ENTRIES: i68
                });
            }), r63 = tb(e31), s57 = function(t12, e32, i69) {
                var o82 = r63(t12), n108 = Xm(Gm(e32), !0);
                return !0 === n108 ? nb(o82).set(e32, i69) : n108[o82.id] = i69, t12;
            };
            return Ym(n107.prototype, {
                delete: function(t12) {
                    var e32 = r63(this);
                    if (!Km(t12)) return !1;
                    var i69 = Xm(t12);
                    return !0 === i69 ? nb(e32).delete(t12) : i69 && Qm(i69, e32.id) && delete i69[e32.id];
                },
                has: function(t12) {
                    var e32 = r63(this);
                    if (!Km(t12)) return !1;
                    var i69 = Xm(t12);
                    return !0 === i69 ? nb(e32).has(t12) : i69 && Qm(i69, e32.id);
                }
            }), Ym(n107.prototype, i68 ? {
                get: function(t12) {
                    var e32 = r63(this);
                    if (Km(t12)) {
                        var i69 = Xm(t12);
                        return !0 === i69 ? nb(e32).get(t12) : i69 ? i69[e32.id] : void 0;
                    }
                },
                set: function(t12, e32) {
                    return s57(this, t12, e32);
                }
            } : {
                add: function(t12) {
                    return s57(this, t12, !0);
                }
            }), n107;
        }
    }, db = n, lb = hv, cb = kp.exports, ub = sv, fb = hb, pb = E, vb = Zi.enforce, gb = Mi, yb = !db.ActiveXObject && "ActiveXObject" in db, mb = Object.isExtensible, bb = function(t4) {
        return function() {
            return t4(this, arguments.length ? arguments[0] : void 0);
        };
    }, wb = ub("WeakMap", bb, fb);
    if (gb && yb) {
        ab = fb.getConstructor(bb, "WeakMap", !0), cb.enable();
        var kb = wb.prototype, _b = kb.delete, xb = kb.has, Eb = kb.get, Ob = kb.set;
        lb(kb, {
            delete: function(t4) {
                if (pb(t4) && !mb(t4)) {
                    var e31 = vb(this);
                    return e31.frozen || (e31.frozen = new ab), _b.call(this, t4) || e31.frozen.delete(t4);
                }
                return _b.call(this, t4);
            },
            has: function(t4) {
                if (pb(t4) && !mb(t4)) {
                    var e32 = vb(this);
                    return e32.frozen || (e32.frozen = new ab), xb.call(this, t4) || e32.frozen.has(t4);
                }
                return xb.call(this, t4);
            },
            get: function(t4) {
                if (pb(t4) && !mb(t4)) {
                    var e33 = vb(this);
                    return e33.frozen || (e33.frozen = new ab), xb.call(this, t4) ? Eb.call(this, t4) : e33.frozen.get(t4);
                }
                return Eb.call(this, t4);
            },
            set: function(t4, e34) {
                if (pb(t4) && !mb(t4)) {
                    var i68 = vb(this);
                    i68.frozen || (i68.frozen = new ab), xb.call(this, t4) ? Ob.call(this, t4, e34) : i68.frozen.set(t4, e34);
                } else Ob.call(this, t4, e34);
                return this;
            }
        });
    }
    var Cb, Sb, Tb, Mb, Pb, Db = O.WeakMap;
    /*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */ function Bb(t4, e34, i70, o81) {
        if ("a" === i70 && !o81) throw new TypeError("Private accessor was defined without a getter");
        if ("function" == typeof e34 ? t4 !== e34 || !o81 : !e34.has(t4)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return "m" === i70 ? o81 : "a" === i70 ? o81.call(t4) : o81 ? o81.value : e34.get(t4);
    }
    function Ib(t4, e34, i70, o81, n107) {
        if ("m" === o81) throw new TypeError("Private method is not writable");
        if ("a" === o81 && !n107) throw new TypeError("Private accessor was defined without a setter");
        if ("function" == typeof e34 ? t4 !== e34 || !n107 : !e34.has(t4)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return "a" === o81 ? n107.call(t4, i70) : n107 ? n107.value = i70 : e34.set(t4, i70), i70;
    }
    function zb(t4, e34) {
        var i70 = (void 0) !== Nh && xr(t4) || t4["@@iterator"];
        if (!i70) {
            if (Hh(t4) || (i70 = (function(t12, e35) {
                var i71;
                if (!t12) return;
                if ("string" == typeof t12) return Fb(t12, e35);
                var o81 = Lh(i71 = Object.prototype.toString.call(t12)).call(i71, 8, -1);
                "Object" === o81 && t12.constructor && (o81 = t12.constructor.name);
                if ("Map" === o81 || "Set" === o81) return rr(t12);
                if ("Arguments" === o81 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o81)) return Fb(t12, e35);
            })(t4)) || e34 && t4 && "number" == typeof t4.length) {
                i70 && (t4 = i70);
                var o81 = 0, n107 = function() {
                };
                return {
                    s: n107,
                    n: function() {
                        return o81 >= t4.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t4[o81++]
                        };
                    },
                    e: function(t12) {
                        throw t12;
                    },
                    f: n107
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r63, s57 = !0, a52 = !1;
        return {
            s: function() {
                i70 = i70.call(t4);
            },
            n: function() {
                var t12 = i70.next();
                return s57 = t12.done, t12;
            },
            e: function(t12) {
                a52 = !0, r63 = t12;
            },
            f: function() {
                try {
                    s57 || null == i70.return || i70.return();
                } finally{
                    if (a52) throw r63;
                }
            }
        };
    }
    function Fb(t4, e34) {
        (null == e34 || e34 > t4.length) && (e34 = t4.length);
        for(var i70 = 0, o82 = new Array(e34); i70 < e34; i70++)o82[i70] = t4[i70];
        return o82;
    }
    function Nb(t4, e34) {
        var i70, o82 = new Um, n108 = zb(e34);
        try {
            for(n108.s(); !(i70 = n108.n()).done;){
                var r63 = i70.value;
                t4.has(r63) || o82.add(r63);
            }
        } catch (t12) {
            n108.e(t12);
        } finally{
            n108.f();
        }
        return o82;
    }
    var Ab = function() {
        function t4() {
            Ra(this, t4), Cb.set(this, new Um), Sb.set(this, new Um);
        }
        return Ha(t4, [
            {
                key: "size",
                get: function() {
                    return Bb(this, Sb, "f").size;
                }
            },
            {
                key: "add",
                value: function() {
                    for(var t12 = arguments.length, e34 = new Array(t12), i70 = 0; i70 < t12; i70++)e34[i70] = arguments[i70];
                    for(var o82 = 0, n108 = e34; o82 < n108.length; o82++){
                        var r64 = n108[o82];
                        Bb(this, Sb, "f").add(r64);
                    }
                }
            },
            {
                key: "delete",
                value: function() {
                    for(var t12 = arguments.length, e34 = new Array(t12), i70 = 0; i70 < t12; i70++)e34[i70] = arguments[i70];
                    for(var o82 = 0, n108 = e34; o82 < n108.length; o82++){
                        var r65 = n108[o82];
                        Bb(this, Sb, "f").delete(r65);
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    Bb(this, Sb, "f").clear();
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return Fh(Bb(this, Sb, "f"));
                }
            },
            {
                key: "getChanges",
                value: function() {
                    return {
                        added: Fh(Nb(Bb(this, Cb, "f"), Bb(this, Sb, "f"))),
                        deleted: Fh(Nb(Bb(this, Sb, "f"), Bb(this, Cb, "f"))),
                        previous: Fh(new Um(Bb(this, Cb, "f"))),
                        current: Fh(new Um(Bb(this, Sb, "f")))
                    };
                }
            },
            {
                key: "commit",
                value: function() {
                    var t12 = this.getChanges();
                    Ib(this, Cb, Bb(this, Sb, "f"), "f"), Ib(this, Sb, new Um(Bb(this, Cb, "f")), "f");
                    var e34, i70 = zb(t12.added);
                    try {
                        for(i70.s(); !(e34 = i70.n()).done;)e34.value.select();
                    } catch (t13) {
                        i70.e(t13);
                    } finally{
                        i70.f();
                    }
                    var o82, n108 = zb(t12.deleted);
                    try {
                        for(n108.s(); !(o82 = n108.n()).done;)o82.value.unselect();
                    } catch (t13) {
                        n108.e(t13);
                    } finally{
                        n108.f();
                    }
                    return t12;
                }
            }
        ]), t4;
    }();
    Cb = new Db, Sb = new Db;
    var Rb = function() {
        function t4() {
            var e34 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : function() {
            };
            Ra(this, t4), Tb.set(this, new Ab), Mb.set(this, new Ab), Pb.set(this, void 0), Ib(this, Pb, e34, "f");
        }
        return Ha(t4, [
            {
                key: "sizeNodes",
                get: function() {
                    return Bb(this, Tb, "f").size;
                }
            },
            {
                key: "sizeEdges",
                get: function() {
                    return Bb(this, Mb, "f").size;
                }
            },
            {
                key: "getNodes",
                value: function() {
                    return Bb(this, Tb, "f").getSelection();
                }
            },
            {
                key: "getEdges",
                value: function() {
                    return Bb(this, Mb, "f").getSelection();
                }
            },
            {
                key: "addNodes",
                value: function() {
                    var t12;
                    (t12 = Bb(this, Tb, "f")).add.apply(t12, arguments);
                }
            },
            {
                key: "addEdges",
                value: function() {
                    var t12;
                    (t12 = Bb(this, Mb, "f")).add.apply(t12, arguments);
                }
            },
            {
                key: "deleteNodes",
                value: function(t12) {
                    Bb(this, Tb, "f").delete(t12);
                }
            },
            {
                key: "deleteEdges",
                value: function(t12) {
                    Bb(this, Mb, "f").delete(t12);
                }
            },
            {
                key: "clear",
                value: function() {
                    Bb(this, Tb, "f").clear(), Bb(this, Mb, "f").clear();
                }
            },
            {
                key: "commit",
                value: function() {
                    for(var t12, e34, i70 = {
                        nodes: Bb(this, Tb, "f").commit(),
                        edges: Bb(this, Mb, "f").commit()
                    }, o82 = arguments.length, n108 = new Array(o82), r66 = 0; r66 < o82; r66++)n108[r66] = arguments[r66];
                    return (t12 = Bb(this, Pb, "f")).call.apply(t12, jh(e34 = [
                        this,
                        i70
                    ]).call(e34, n108)), i70;
                }
            }
        ]), t4;
    }();
    function jb(t4, e34) {
        var i70 = (void 0) !== Nh && xr(t4) || t4["@@iterator"];
        if (!i70) {
            if (Hh(t4) || (i70 = (function(t12, e35) {
                var i71;
                if (!t12) return;
                if ("string" == typeof t12) return Lb(t12, e35);
                var o82 = Lh(i71 = Object.prototype.toString.call(t12)).call(i71, 8, -1);
                "Object" === o82 && t12.constructor && (o82 = t12.constructor.name);
                if ("Map" === o82 || "Set" === o82) return rr(t12);
                if ("Arguments" === o82 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o82)) return Lb(t12, e35);
            })(t4)) || e34 && t4 && "number" == typeof t4.length) {
                i70 && (t4 = i70);
                var o82 = 0, n108 = function() {
                };
                return {
                    s: n108,
                    n: function() {
                        return o82 >= t4.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t4[o82++]
                        };
                    },
                    e: function(t12) {
                        throw t12;
                    },
                    f: n108
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r66, s57 = !0, a52 = !1;
        return {
            s: function() {
                i70 = i70.call(t4);
            },
            n: function() {
                var t12 = i70.next();
                return s57 = t12.done, t12;
            },
            e: function(t12) {
                a52 = !0, r66 = t12;
            },
            f: function() {
                try {
                    s57 || null == i70.return || i70.return();
                } finally{
                    if (a52) throw r66;
                }
            }
        };
    }
    function Lb(t4, e34) {
        (null == e34 || e34 > t4.length) && (e34 = t4.length);
        for(var i70 = 0, o83 = new Array(e34); i70 < e34; i70++)o83[i70] = t4[i70];
        return o83;
    }
    Tb = new Db, Mb = new Db, Pb = new Db;
    var Hb = function() {
        function t4(e34, i70) {
            var o83 = this;
            Ra(this, t4), this.body = e34, this.canvas = i70, this._selectionAccumulator = new Rb, this.hoverObj = {
                nodes: {
                },
                edges: {
                }
            }, this.options = {
            }, this.defaultOptions = {
                multiselect: !1,
                selectable: !0,
                selectConnectedEdges: !0,
                hoverConnectedEdges: !0
            }, Ke(this.options, this.defaultOptions), this.body.emitter.on("_dataChanged", function() {
                o83.updateSelection();
            });
        }
        return Ha(t4, [
            {
                key: "setOptions",
                value: function(t12) {
                    if ((void 0) !== t12) nf([
                        "multiselect",
                        "hoverConnectedEdges",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t12);
                }
            },
            {
                key: "selectOnPoint",
                value: function(t12) {
                    var e34 = !1;
                    if (!0 === this.options.selectable) {
                        var i70 = this.getNodeAt(t12) || this.getEdgeAt(t12);
                        this.unselectAll(), (void 0) !== i70 && (e34 = this.selectObject(i70)), this.body.emitter.emit("_requestRedraw");
                    }
                    return e34;
                }
            },
            {
                key: "selectAdditionalOnPoint",
                value: function(t12) {
                    var e34 = !1;
                    if (!0 === this.options.selectable) {
                        var i71 = this.getNodeAt(t12) || this.getEdgeAt(t12);
                        (void 0) !== i71 && (e34 = !0, !0 === i71.isSelected() ? this.deselectObject(i71) : this.selectObject(i71), this.body.emitter.emit("_requestRedraw"));
                    }
                    return e34;
                }
            },
            {
                key: "_initBaseEvent",
                value: function(t12, e34) {
                    var i72 = {
                    };
                    return i72.pointer = {
                        DOM: {
                            x: e34.x,
                            y: e34.y
                        },
                        canvas: this.canvas.DOMtoCanvas(e34)
                    }, i72.event = t12, i72;
                }
            },
            {
                key: "generateClickEvent",
                value: function(t12, e34, i72, o83) {
                    var n109 = arguments.length > 4 && (void 0) !== arguments[4] && arguments[4], r66 = this._initBaseEvent(e34, i72);
                    if (!0 === n109) r66.nodes = [], r66.edges = [];
                    else {
                        var s57 = this.getSelection();
                        r66.nodes = s57.nodes, r66.edges = s57.edges;
                    }
                    (void 0) !== o83 && (r66.previousSelection = o83), "click" == t12 && (r66.items = this.getClickedItems(i72)), (void 0) !== e34.controlEdge && (r66.controlEdge = e34.controlEdge), this.body.emitter.emit(t12, r66);
                }
            },
            {
                key: "selectObject",
                value: function(t12) {
                    var e34 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : this.options.selectConnectedEdges;
                    if ((void 0) !== t12) {
                        if (t12 instanceof uy) {
                            var i72;
                            if (!0 === e34) (i72 = this._selectionAccumulator).addEdges.apply(i72, Fh(t12.edges));
                            this._selectionAccumulator.addNodes(t12);
                        } else this._selectionAccumulator.addEdges(t12);
                        return !0;
                    }
                    return !1;
                }
            },
            {
                key: "deselectObject",
                value: function(t12) {
                    !0 === t12.isSelected() && (t12.selected = !1, this._removeFromSelection(t12));
                }
            },
            {
                key: "_getAllNodesOverlappingWith",
                value: function(t12) {
                    for(var e34 = [], i73 = this.body.nodes, o83 = 0; o83 < this.body.nodeIndices.length; o83++){
                        var n109 = this.body.nodeIndices[o83];
                        i73[n109].isOverlappingWith(t12) && e34.push(n109);
                    }
                    return e34;
                }
            },
            {
                key: "_pointerToPositionObject",
                value: function(t12) {
                    var e34 = this.canvas.DOMtoCanvas(t12);
                    return {
                        left: e34.x - 1,
                        top: e34.y + 1,
                        right: e34.x + 1,
                        bottom: e34.y - 1
                    };
                }
            },
            {
                key: "getNodeAt",
                value: function(t12) {
                    var e34 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1], i73 = this._pointerToPositionObject(t12), o83 = this._getAllNodesOverlappingWith(i73);
                    return o83.length > 0 ? !0 === e34 ? this.body.nodes[o83[o83.length - 1]] : o83[o83.length - 1] : void 0;
                }
            },
            {
                key: "_getEdgesOverlappingWith",
                value: function(t12, e34) {
                    for(var i73 = this.body.edges, o83 = 0; o83 < this.body.edgeIndices.length; o83++){
                        var n110 = this.body.edgeIndices[o83];
                        i73[n110].isOverlappingWith(t12) && e34.push(n110);
                    }
                }
            },
            {
                key: "_getAllEdgesOverlappingWith",
                value: function(t12) {
                    var e34 = [];
                    return this._getEdgesOverlappingWith(t12, e34), e34;
                }
            },
            {
                key: "getEdgeAt",
                value: function(t12) {
                    for(var e34 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1], i73 = this.canvas.DOMtoCanvas(t12), o83 = 10, n111 = null, r66 = this.body.edges, s58 = 0; s58 < this.body.edgeIndices.length; s58++){
                        var a52 = this.body.edgeIndices[s58], h32 = r66[a52];
                        if (h32.connected) {
                            var d26 = h32.from.x, l22 = h32.from.y, c17 = h32.to.x, u15 = h32.to.y, f18 = h32.edgeType.getDistanceToEdge(d26, l22, c17, u15, i73.x, i73.y);
                            f18 < o83 && (n111 = a52, o83 = f18);
                        }
                    }
                    return null !== n111 ? !0 === e34 ? this.body.edges[n111] : n111 : void 0;
                }
            },
            {
                key: "_addToHover",
                value: function(t12) {
                    t12 instanceof uy ? this.hoverObj.nodes[t12.id] = t12 : this.hoverObj.edges[t12.id] = t12;
                }
            },
            {
                key: "_removeFromSelection",
                value: function(t12) {
                    var e34;
                    t12 instanceof uy ? (this._selectionAccumulator.deleteNodes(t12), (e34 = this._selectionAccumulator).deleteEdges.apply(e34, Fh(t12.edges))) : this._selectionAccumulator.deleteEdges(t12);
                }
            },
            {
                key: "unselectAll",
                value: function() {
                    this._selectionAccumulator.clear();
                }
            },
            {
                key: "getSelectedNodeCount",
                value: function() {
                    return this._selectionAccumulator.sizeNodes;
                }
            },
            {
                key: "getSelectedEdgeCount",
                value: function() {
                    return this._selectionAccumulator.sizeEdges;
                }
            },
            {
                key: "_hoverConnectedEdges",
                value: function(t12) {
                    for(var e34 = 0; e34 < t12.edges.length; e34++){
                        var i73 = t12.edges[e34];
                        i73.hover = !0, this._addToHover(i73);
                    }
                }
            },
            {
                key: "emitBlurEvent",
                value: function(t12, e34, i74) {
                    var o83 = this._initBaseEvent(t12, e34);
                    !0 === i74.hover && (i74.hover = !1, i74 instanceof uy ? (o83.node = i74.id, this.body.emitter.emit("blurNode", o83)) : (o83.edge = i74.id, this.body.emitter.emit("blurEdge", o83)));
                }
            },
            {
                key: "emitHoverEvent",
                value: function(t12, e34, i74) {
                    var o83 = this._initBaseEvent(t12, e34), n111 = !1;
                    return !1 === i74.hover && (i74.hover = !0, this._addToHover(i74), n111 = !0, i74 instanceof uy ? (o83.node = i74.id, this.body.emitter.emit("hoverNode", o83)) : (o83.edge = i74.id, this.body.emitter.emit("hoverEdge", o83))), n111;
                }
            },
            {
                key: "hoverObject",
                value: function(t12, e34) {
                    var i74 = this.getNodeAt(e34);
                    (void 0) === i74 && (i74 = this.getEdgeAt(e34));
                    var o83 = !1;
                    for(var n111 in this.hoverObj.nodes)Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, n111) && ((void 0) === i74 || i74 instanceof uy && i74.id != n111 || i74 instanceof sm) && (this.emitBlurEvent(t12, e34, this.hoverObj.nodes[n111]), delete this.hoverObj.nodes[n111], o83 = !0);
                    for(var r66 in this.hoverObj.edges)Object.prototype.hasOwnProperty.call(this.hoverObj.edges, r66) && (!0 === o83 ? (this.hoverObj.edges[r66].hover = !1, delete this.hoverObj.edges[r66]) : ((void 0) === i74 || i74 instanceof sm && i74.id != r66 || i74 instanceof uy && !i74.hover) && (this.emitBlurEvent(t12, e34, this.hoverObj.edges[r66]), delete this.hoverObj.edges[r66], o83 = !0));
                    if ((void 0) !== i74) {
                        var s58 = Gh(this.hoverObj.edges).length, a53 = Gh(this.hoverObj.nodes).length;
                        (o83 || i74 instanceof sm && 0 === s58 && 0 === a53 || i74 instanceof uy && 0 === s58 && 0 === a53) && (o83 = this.emitHoverEvent(t12, e34, i74)), i74 instanceof uy && !0 === this.options.hoverConnectedEdges && this._hoverConnectedEdges(i74);
                    }
                    !0 === o83 && this.body.emitter.emit("_requestRedraw");
                }
            },
            {
                key: "commitWithoutEmitting",
                value: function() {
                    this._selectionAccumulator.commit();
                }
            },
            {
                key: "commitAndEmit",
                value: function(t12, e34) {
                    var i74 = !1, o83 = this._selectionAccumulator.commit(), n111 = {
                        nodes: o83.nodes.previous,
                        edges: o83.edges.previous
                    };
                    o83.edges.deleted.length > 0 && (this.generateClickEvent("deselectEdge", e34, t12, n111), i74 = !0), o83.nodes.deleted.length > 0 && (this.generateClickEvent("deselectNode", e34, t12, n111), i74 = !0), o83.nodes.added.length > 0 && (this.generateClickEvent("selectNode", e34, t12), i74 = !0), o83.edges.added.length > 0 && (this.generateClickEvent("selectEdge", e34, t12), i74 = !0), !0 === i74 && this.generateClickEvent("select", e34, t12);
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return {
                        nodes: this.getSelectedNodeIds(),
                        edges: this.getSelectedEdgeIds()
                    };
                }
            },
            {
                key: "getSelectedNodes",
                value: function() {
                    return this._selectionAccumulator.getNodes();
                }
            },
            {
                key: "getSelectedEdges",
                value: function() {
                    return this._selectionAccumulator.getEdges();
                }
            },
            {
                key: "getSelectedNodeIds",
                value: function() {
                    var t12;
                    return Uh(t12 = this._selectionAccumulator.getNodes()).call(t12, function(t13) {
                        return t13.id;
                    });
                }
            },
            {
                key: "getSelectedEdgeIds",
                value: function() {
                    var t12;
                    return Uh(t12 = this._selectionAccumulator.getEdges()).call(t12, function(t13) {
                        return t13.id;
                    });
                }
            },
            {
                key: "setSelection",
                value: function(t12) {
                    var e34 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : {
                    };
                    if (!t12 || !t12.nodes && !t12.edges) throw new TypeError("Selection must be an object with nodes and/or edges properties");
                    if ((e34.unselectAll || (void 0) === e34.unselectAll) && this.unselectAll(), t12.nodes) {
                        var i74, o83 = jb(t12.nodes);
                        try {
                            for(o83.s(); !(i74 = o83.n()).done;){
                                var n111 = i74.value, r66 = this.body.nodes[n111];
                                if (!r66) throw new RangeError('Node with id "' + n111 + '" not found');
                                this.selectObject(r66, e34.highlightEdges);
                            }
                        } catch (t13) {
                            o83.e(t13);
                        } finally{
                            o83.f();
                        }
                    }
                    if (t12.edges) {
                        var s59, a54 = jb(t12.edges);
                        try {
                            for(a54.s(); !(s59 = a54.n()).done;){
                                var h33 = s59.value, d27 = this.body.edges[h33];
                                if (!d27) throw new RangeError('Edge with id "' + h33 + '" not found');
                                this.selectObject(d27);
                            }
                        } catch (t13) {
                            a54.e(t13);
                        } finally{
                            a54.f();
                        }
                    }
                    this.body.emitter.emit("_requestRedraw"), this._selectionAccumulator.commit();
                }
            },
            {
                key: "selectNodes",
                value: function(t12) {
                    var e34 = !(arguments.length > 1 && (void 0) !== arguments[1]) || arguments[1];
                    if (!t12 || (void 0) === t12.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        nodes: t12
                    }, {
                        highlightEdges: e34
                    });
                }
            },
            {
                key: "selectEdges",
                value: function(t12) {
                    if (!t12 || (void 0) === t12.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        edges: t12
                    });
                }
            },
            {
                key: "updateSelection",
                value: function() {
                    for(var t12 in this._selectionAccumulator.getNodes())Object.prototype.hasOwnProperty.call(this.body.nodes, t12.id) || this._selectionAccumulator.deleteNodes(t12);
                    for(var e34 in this._selectionAccumulator.getEdges())Object.prototype.hasOwnProperty.call(this.body.edges, e34.id) || this._selectionAccumulator.deleteEdges(e34);
                }
            },
            {
                key: "getClickedItems",
                value: function(t12) {
                    for(var e34 = this.canvas.DOMtoCanvas(t12), i75 = [], o84 = this.body.nodeIndices, n112 = this.body.nodes, r67 = o84.length - 1; r67 >= 0; r67--){
                        var s60 = n112[o84[r67]].getItemsOnPoint(e34);
                        i75.push.apply(i75, s60);
                    }
                    for(var a55 = this.body.edgeIndices, h34 = this.body.edges, d28 = a55.length - 1; d28 >= 0; d28--){
                        var l23 = h34[a55[d28]].getItemsOnPoint(e34);
                        i75.push.apply(i75, l23);
                    }
                    return i75;
                }
            }
        ]), t4;
    }(), Wb = Math.floor, Vb = function(t4, e34) {
        var i75 = t4.length, o84 = Wb(i75 / 2);
        return i75 < 8 ? qb(t4, e34) : Ub(Vb(t4.slice(0, o84), e34), Vb(t4.slice(o84), e34), e34);
    }, qb = function(t4, e34) {
        for(var i75, o84, n112 = t4.length, r67 = 1; r67 < n112;){
            for(o84 = r67, i75 = t4[r67]; o84 && e34(t4[o84 - 1], i75) > 0;)t4[o84] = t4[--o84];
            o84 !== r67++ && (t4[o84] = i75);
        }
        return t4;
    }, Ub = function(t4, e34, i75) {
        for(var o84 = t4.length, n112 = e34.length, r67 = 0, s61 = 0, a55 = []; r67 < o84 || s61 < n112;)r67 < o84 && s61 < n112 ? a55.push(i75(t4[r67], e34[s61]) <= 0 ? t4[r67++] : e34[s61++]) : a55.push(r67 < o84 ? t4[r67++] : e34[s61++]);
        return a55;
    }, Yb = Vb, Xb = P.match(/firefox\/(\d+)/i), Gb = !!Xb && +Xb[1], Kb = /MSIE|Trident/.test(P), $b = P.match(/AppleWebKit\/(\d+)\./), Zb = !!$b && +$b[1], Qb = ue, Jb = qt, tw = Q, ew = me, iw = gi, ow = s, nw = Yb, rw = Zh, sw = Gb, aw = Kb, hw = A, dw = Zb, lw = [], cw = lw.sort, uw = ow(function() {
        lw.sort(void 0);
    }), fw = ow(function() {
        lw.sort(null);
    }), pw = rw("sort"), vw = !ow(function() {
        if (hw) return hw < 70;
        if (!(sw && sw > 3)) {
            if (aw) return !0;
            if (dw) return dw < 603;
            var t4, e34, i75, o84, n112 = "";
            for(t4 = 65; t4 < 76; t4++){
                switch(e34 = String.fromCharCode(t4), t4){
                    case 66:
                    case 69:
                    case 70:
                    case 72:
                        i75 = 3;
                        break;
                    case 68:
                    case 71:
                        i75 = 4;
                        break;
                    default:
                        i75 = 2;
                }
                for(o84 = 0; o84 < 47; o84++)lw.push({
                    k: e34 + o84,
                    v: i75
                });
            }
            for(lw.sort(function(t12, e35) {
                return e35.v - t12.v;
            }), o84 = 0; o84 < lw.length; o84++)e34 = lw[o84].k.charAt(0), n112.charAt(n112.length - 1) !== e34 && (n112 += e34);
            return "DGBEFHACIJK" !== n112;
        }
    });
    Qb({
        target: "Array",
        proto: !0,
        forced: uw || !fw || !pw || !vw
    }, {
        sort: function(t12) {
            (void 0) !== t12 && Jb(t12);
            var e35 = tw(this);
            if (vw) return (void 0) === t12 ? cw.call(e35) : cw.call(e35, t12);
            var i76, o85, n113 = [], r67 = ew(e35.length);
            for(o85 = 0; o85 < r67; o85++)o85 in e35 && n113.push(e35[o85]);
            for(i76 = (n113 = nw(n113, function(t13) {
                return function(e36, i77) {
                    return (void 0) === i77 ? -1 : (void 0) === e36 ? 1 : (void 0) !== t13 ? +t13(e36, i77) || 0 : iw(e36) > iw(i77) ? 1 : -1;
                };
            }(t12))).length, o85 = 0; o85 < i76;)e35[o85] = n113[o85++];
            for(; o85 < r67;)delete e35[o85++];
            return e35;
        }
    });
    var gw = oi("Array").sort, yw = Array.prototype, mw = function(t12) {
        var e35 = t12.sort;
        return t12 === yw || t12 instanceof Array && e35 === yw.sort ? gw : e35;
    }, bw = qt, ww = Q, kw = b, _w = me, xw = function(t12) {
        return function(e35, i76, o85, n113) {
            bw(i76);
            var r67 = ww(e35), s61 = kw(r67), a55 = _w(r67.length), h34 = t12 ? a55 - 1 : 0, d28 = t12 ? -1 : 1;
            if (o85 < 2) for(;;){
                if (h34 in s61) {
                    n113 = s61[h34], h34 += d28;
                    break;
                }
                if (h34 += d28, t12 ? h34 < 0 : a55 <= h34) throw TypeError("Reduce of empty array with no initial value");
            }
            for(; t12 ? h34 >= 0 : a55 > h34; h34 += d28)h34 in s61 && (n113 = i76(n113, s61[h34], h34, r67));
            return n113;
        };
    }, Ew = {
        left: xw(!1),
        right: xw(!0)
    }, Ow = "process" == g(n.process), Cw = Ew.left, Sw = A, Tw = Ow;
    ue({
        target: "Array",
        proto: !0,
        forced: !Zh("reduce") || !Tw && Sw > 79 && Sw < 83
    }, {
        reduce: function(t12) {
            return Cw(this, t12, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Mw = oi("Array").reduce, Pw = Array.prototype, Dw = function(t12) {
        var e35 = t12.reduce;
        return t12 === Pw || t12 instanceof Array && e35 === Pw.reduce ? Mw : e35;
    }, Bw = {
    };
    !function(t12) {
        !function(t13) {
            function e35(t14, e36) {
                if (!(t14 instanceof e36)) throw new TypeError("Cannot call a class as a function");
            }
            t13.__esModule = !0, t13.sort = v13;
            var i76 = 32, o85 = 7, n113 = 256, r67 = [
                1,
                10,
                100,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000
            ];
            function s61(t14) {
                return t14 < 100000 ? t14 < 100 ? t14 < 10 ? 0 : 1 : t14 < 10000 ? t14 < 1000 ? 2 : 3 : 4 : t14 < 10000000 ? t14 < 1000000 ? 5 : 6 : t14 < 1000000000 ? t14 < 100000000 ? 7 : 8 : 9;
            }
            function a55(t14, e36) {
                if (t14 === e36) return 0;
                if (~~t14 === t14 && ~~e36 === e36) {
                    if (0 === t14 || 0 === e36) return t14 < e36 ? -1 : 1;
                    if (t14 < 0 || e36 < 0) {
                        if (e36 >= 0) return -1;
                        if (t14 >= 0) return 1;
                        t14 = -t14, e36 = -e36;
                    }
                    var i77 = s61(t14), o86 = s61(e36), n114 = 0;
                    return i77 < o86 ? (t14 *= r67[o86 - i77 - 1], e36 /= 10, n114 = -1) : i77 > o86 && (e36 *= r67[i77 - o86 - 1], t14 /= 10, n114 = 1), t14 === e36 ? n114 : t14 < e36 ? -1 : 1;
                }
                var a56 = String(t14), h34 = String(e36);
                return a56 === h34 ? 0 : a56 < h34 ? -1 : 1;
            }
            function h34(t14) {
                for(var e36 = 0; t14 >= i76;)e36 |= 1 & t14, t14 >>= 1;
                return t14 + e36;
            }
            function d28(t14, e36, i78, o87) {
                var n115 = e36 + 1;
                if (n115 === i78) return 1;
                if (o87(t14[n115++], t14[e36]) < 0) {
                    for(; n115 < i78 && o87(t14[n115], t14[n115 - 1]) < 0;)n115++;
                    l25(t14, e36, n115);
                } else for(; n115 < i78 && o87(t14[n115], t14[n115 - 1]) >= 0;)n115++;
                return n115 - e36;
            }
            function l25(t14, e36, i78) {
                for(i78--; e36 < i78;){
                    var o87 = t14[e36];
                    t14[e36++] = t14[i78], t14[i78--] = o87;
                }
            }
            function c18(t14, e36, i78, o88, n115) {
                for(o88 === e36 && o88++; o88 < i78; o88++){
                    for(var r68 = t14[o88], s62 = e36, a56 = o88; s62 < a56;){
                        var h35 = s62 + a56 >>> 1;
                        n115(r68, t14[h35]) < 0 ? a56 = h35 : s62 = h35 + 1;
                    }
                    var d29 = o88 - s62;
                    switch(d29){
                        case 3:
                            t14[s62 + 3] = t14[s62 + 2];
                        case 2:
                            t14[s62 + 2] = t14[s62 + 1];
                        case 1:
                            t14[s62 + 1] = t14[s62];
                            break;
                        default:
                            for(; d29 > 0;)t14[s62 + d29] = t14[s62 + d29 - 1], d29--;
                    }
                    t14[s62] = r68;
                }
            }
            function u16(t14, e36, i78, o88, n115, r69) {
                var s63 = 0, a57 = 0, h36 = 1;
                if (r69(t14, e36[i78 + n115]) > 0) {
                    for(a57 = o88 - n115; h36 < a57 && r69(t14, e36[i78 + n115 + h36]) > 0;)s63 = h36, (h36 = 1 + (h36 << 1)) <= 0 && (h36 = a57);
                    h36 > a57 && (h36 = a57), s63 += n115, h36 += n115;
                } else {
                    for(a57 = n115 + 1; h36 < a57 && r69(t14, e36[i78 + n115 - h36]) <= 0;)s63 = h36, (h36 = 1 + (h36 << 1)) <= 0 && (h36 = a57);
                    h36 > a57 && (h36 = a57);
                    var d30 = s63;
                    s63 = n115 - h36, h36 = n115 - d30;
                }
                for(s63++; s63 < h36;){
                    var l26 = s63 + (h36 - s63 >>> 1);
                    r69(t14, e36[i78 + l26]) > 0 ? s63 = l26 + 1 : h36 = l26;
                }
                return h36;
            }
            function f19(t14, e36, i78, o88, n115, r69) {
                var s63 = 0, a57 = 0, h36 = 1;
                if (r69(t14, e36[i78 + n115]) < 0) {
                    for(a57 = n115 + 1; h36 < a57 && r69(t14, e36[i78 + n115 - h36]) < 0;)s63 = h36, (h36 = 1 + (h36 << 1)) <= 0 && (h36 = a57);
                    h36 > a57 && (h36 = a57);
                    var d31 = s63;
                    s63 = n115 - h36, h36 = n115 - d31;
                } else {
                    for(a57 = o88 - n115; h36 < a57 && r69(t14, e36[i78 + n115 + h36]) >= 0;)s63 = h36, (h36 = 1 + (h36 << 1)) <= 0 && (h36 = a57);
                    h36 > a57 && (h36 = a57), s63 += n115, h36 += n115;
                }
                for(s63++; s63 < h36;){
                    var l27 = s63 + (h36 - s63 >>> 1);
                    r69(t14, e36[i78 + l27]) < 0 ? h36 = l27 : s63 = l27 + 1;
                }
                return h36;
            }
            var p15 = function() {
                function t14(i78, r69) {
                    e35(this, t14), this.array = null, this.compare = null, this.minGallop = o85, this.length = 0, this.tmpStorageLength = n113, this.stackLength = 0, this.runStart = null, this.runLength = null, this.stackSize = 0, this.array = i78, this.compare = r69, this.length = i78.length, this.length < 2 * n113 && (this.tmpStorageLength = this.length >>> 1), this.tmp = new Array(this.tmpStorageLength), this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40, this.runStart = new Array(this.stackLength), this.runLength = new Array(this.stackLength);
                }
                return t14.prototype.pushRun = function(t15, e36) {
                    this.runStart[this.stackSize] = t15, this.runLength[this.stackSize] = e36, this.stackSize += 1;
                }, t14.prototype.mergeRuns = function() {
                    for(; this.stackSize > 1;){
                        var t15 = this.stackSize - 2;
                        if (t15 >= 1 && this.runLength[t15 - 1] <= this.runLength[t15] + this.runLength[t15 + 1] || t15 >= 2 && this.runLength[t15 - 2] <= this.runLength[t15] + this.runLength[t15 - 1]) this.runLength[t15 - 1] < this.runLength[t15 + 1] && t15--;
                        else if (this.runLength[t15] > this.runLength[t15 + 1]) break;
                        this.mergeAt(t15);
                    }
                }, t14.prototype.forceMergeRuns = function() {
                    for(; this.stackSize > 1;){
                        var t16 = this.stackSize - 2;
                        t16 > 0 && this.runLength[t16 - 1] < this.runLength[t16 + 1] && t16--, this.mergeAt(t16);
                    }
                }, t14.prototype.mergeAt = function(t17) {
                    var e36 = this.compare, i78 = this.array, o88 = this.runStart[t17], n115 = this.runLength[t17], r69 = this.runStart[t17 + 1], s63 = this.runLength[t17 + 1];
                    this.runLength[t17] = n115 + s63, t17 === this.stackSize - 3 && (this.runStart[t17 + 1] = this.runStart[t17 + 2], this.runLength[t17 + 1] = this.runLength[t17 + 2]), this.stackSize--;
                    var a57 = f19(i78[r69], i78, o88, n115, 0, e36);
                    o88 += a57, 0 != (n115 -= a57) && 0 !== (s63 = u16(i78[o88 + n115 - 1], i78, r69, s63, s63 - 1, e36)) && (n115 <= s63 ? this.mergeLow(o88, n115, r69, s63) : this.mergeHigh(o88, n115, r69, s63));
                }, t14.prototype.mergeLow = function(t17, e36, i78, n115) {
                    var r69 = this.compare, s63 = this.array, a57 = this.tmp, h36 = 0;
                    for(h36 = 0; h36 < e36; h36++)a57[h36] = s63[t17 + h36];
                    var d32 = 0, l28 = i78, c19 = t17;
                    if (s63[c19++] = s63[l28++], 0 != --n115) {
                        if (1 !== e36) {
                            for(var p16 = this.minGallop;;){
                                var v12 = 0, g10 = 0, y6 = !1;
                                do {
                                    if (r69(s63[l28], a57[d32]) < 0) {
                                        if (s63[c19++] = s63[l28++], g10++, v12 = 0, 0 == --n115) {
                                            y6 = !0;
                                            break;
                                        }
                                    } else if (s63[c19++] = a57[d32++], v12++, g10 = 0, 1 == --e36) {
                                        y6 = !0;
                                        break;
                                    }
                                }while ((v12 | g10) < p16)
                                if (y6) break;
                                do {
                                    if (0 !== (v12 = f19(s63[l28], a57, d32, e36, 0, r69))) {
                                        for(h36 = 0; h36 < v12; h36++)s63[c19 + h36] = a57[d32 + h36];
                                        if (c19 += v12, d32 += v12, (e36 -= v12) <= 1) {
                                            y6 = !0;
                                            break;
                                        }
                                    }
                                    if (s63[c19++] = s63[l28++], 0 == --n115) {
                                        y6 = !0;
                                        break;
                                    }
                                    if (0 !== (g10 = u16(a57[d32], s63, l28, n115, 0, r69))) {
                                        for(h36 = 0; h36 < g10; h36++)s63[c19 + h36] = s63[l28 + h36];
                                        if (c19 += g10, l28 += g10, 0 == (n115 -= g10)) {
                                            y6 = !0;
                                            break;
                                        }
                                    }
                                    if (s63[c19++] = a57[d32++], 1 == --e36) {
                                        y6 = !0;
                                        break;
                                    }
                                    p16--;
                                }while (v12 >= o85 || g10 >= o85)
                                if (y6) break;
                                p16 < 0 && (p16 = 0), p16 += 2;
                            }
                            if (this.minGallop = p16, p16 < 1 && (this.minGallop = 1), 1 === e36) {
                                for(h36 = 0; h36 < n115; h36++)s63[c19 + h36] = s63[l28 + h36];
                                s63[c19 + n115] = a57[d32];
                            } else {
                                if (0 === e36) throw new Error("mergeLow preconditions were not respected");
                                for(h36 = 0; h36 < e36; h36++)s63[c19 + h36] = a57[d32 + h36];
                            }
                        } else {
                            for(h36 = 0; h36 < n115; h36++)s63[c19 + h36] = s63[l28 + h36];
                            s63[c19 + n115] = a57[d32];
                        }
                    } else for(h36 = 0; h36 < e36; h36++)s63[c19 + h36] = a57[d32 + h36];
                }, t14.prototype.mergeHigh = function(t17, e36, i78, n115) {
                    var r69 = this.compare, s63 = this.array, a57 = this.tmp, h36 = 0;
                    for(h36 = 0; h36 < n115; h36++)a57[h36] = s63[i78 + h36];
                    var d32 = t17 + e36 - 1, l28 = n115 - 1, c19 = i78 + n115 - 1, p17 = 0, v13 = 0;
                    if (s63[c19--] = s63[d32--], 0 != --e36) {
                        if (1 !== n115) {
                            for(var g11 = this.minGallop;;){
                                var y7 = 0, m7 = 0, b7 = !1;
                                do {
                                    if (r69(a57[l28], s63[d32]) < 0) {
                                        if (s63[c19--] = s63[d32--], y7++, m7 = 0, 0 == --e36) {
                                            b7 = !0;
                                            break;
                                        }
                                    } else if (s63[c19--] = a57[l28--], m7++, y7 = 0, 1 == --n115) {
                                        b7 = !0;
                                        break;
                                    }
                                }while ((y7 | m7) < g11)
                                if (b7) break;
                                do {
                                    if (0 != (y7 = e36 - f19(a57[l28], s63, t17, e36, e36 - 1, r69))) {
                                        for(e36 -= y7, v13 = 1 + (c19 -= y7), p17 = 1 + (d32 -= y7), h36 = y7 - 1; h36 >= 0; h36--)s63[v13 + h36] = s63[p17 + h36];
                                        if (0 === e36) {
                                            b7 = !0;
                                            break;
                                        }
                                    }
                                    if (s63[c19--] = a57[l28--], 1 == --n115) {
                                        b7 = !0;
                                        break;
                                    }
                                    if (0 != (m7 = n115 - u16(s63[d32], a57, 0, n115, n115 - 1, r69))) {
                                        for(n115 -= m7, v13 = 1 + (c19 -= m7), p17 = 1 + (l28 -= m7), h36 = 0; h36 < m7; h36++)s63[v13 + h36] = a57[p17 + h36];
                                        if (n115 <= 1) {
                                            b7 = !0;
                                            break;
                                        }
                                    }
                                    if (s63[c19--] = s63[d32--], 0 == --e36) {
                                        b7 = !0;
                                        break;
                                    }
                                    g11--;
                                }while (y7 >= o85 || m7 >= o85)
                                if (b7) break;
                                g11 < 0 && (g11 = 0), g11 += 2;
                            }
                            if (this.minGallop = g11, g11 < 1 && (this.minGallop = 1), 1 === n115) {
                                for(v13 = 1 + (c19 -= e36), p17 = 1 + (d32 -= e36), h36 = e36 - 1; h36 >= 0; h36--)s63[v13 + h36] = s63[p17 + h36];
                                s63[c19] = a57[l28];
                            } else {
                                if (0 === n115) throw new Error("mergeHigh preconditions were not respected");
                                for(p17 = c19 - (n115 - 1), h36 = 0; h36 < n115; h36++)s63[p17 + h36] = a57[h36];
                            }
                        } else {
                            for(v13 = 1 + (c19 -= e36), p17 = 1 + (d32 -= e36), h36 = e36 - 1; h36 >= 0; h36--)s63[v13 + h36] = s63[p17 + h36];
                            s63[c19] = a57[l28];
                        }
                    } else for(p17 = c19 - (n115 - 1), h36 = 0; h36 < n115; h36++)s63[p17 + h36] = a57[h36];
                }, t14;
            }();
            function v13(t14, e36, o88, n115) {
                if (!Array.isArray(t14)) throw new TypeError("Can only sort arrays");
                e36 ? "function" != typeof e36 && (n115 = o88, o88 = e36, e36 = a55) : e36 = a55, o88 || (o88 = 0), n115 || (n115 = t14.length);
                var r69 = n115 - o88;
                if (!(r69 < 2)) {
                    var s63 = 0;
                    if (r69 < i76) c18(t14, o88, n115, o88 + (s63 = d28(t14, o88, n115, e36)), e36);
                    else {
                        var l28 = new p15(t14, e36), u17 = h34(r69);
                        do {
                            if ((s63 = d28(t14, o88, n115, e36)) < u17) {
                                var f20 = r69;
                                f20 > u17 && (f20 = u17), c18(t14, o88, o88 + f20, o88 + s63, e36), s63 = f20;
                            }
                            l28.pushRun(o88, s63), l28.mergeRuns(), r69 -= s63, o88 += s63;
                        }while (0 !== r69)
                        l28.forceMergeRuns();
                    }
                }
            }
        }(t12);
    }(Bw);
    var Iw = Bw;
    function zw(t12) {
        var e35 = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t13) {
                return !1;
            }
        }();
        return function() {
            var i76, o85 = Eg(t12);
            if (e35) {
                var n113 = Eg(this).constructor;
                i76 = yg(o85, arguments, n113);
            } else i76 = o85.apply(this, arguments);
            return _g(this, i76);
        };
    }
    var Fw = function() {
        function t12() {
            Ra(this, t12);
        }
        return Ha(t12, [
            {
                key: "abstract",
                value: function() {
                    throw new Error("Can't instantiate abstract class!");
                }
            },
            {
                key: "fake_use",
                value: function() {
                }
            },
            {
                key: "curveType",
                value: function() {
                    return this.abstract();
                }
            },
            {
                key: "getPosition",
                value: function(t13) {
                    return this.fake_use(t13), this.abstract();
                }
            },
            {
                key: "setPosition",
                value: function(t13, e35) {
                    var i76 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : void 0;
                    this.fake_use(t13, e35, i76), this.abstract();
                }
            },
            {
                key: "getTreeSize",
                value: function(t13) {
                    return this.fake_use(t13), this.abstract();
                }
            },
            {
                key: "sort",
                value: function(t13) {
                    this.fake_use(t13), this.abstract();
                }
            },
            {
                key: "fix",
                value: function(t13, e35) {
                    this.fake_use(t13, e35), this.abstract();
                }
            },
            {
                key: "shift",
                value: function(t13, e35) {
                    this.fake_use(t13, e35), this.abstract();
                }
            }
        ]), t12;
    }(), Nw = function(t12) {
        kg(i76, t12);
        var e35 = zw(i76);
        function i76(t13) {
            var o85;
            return Ra(this, i76), (o85 = e35.call(this)).layout = t13, o85;
        }
        return Ha(i76, [
            {
                key: "curveType",
                value: function() {
                    return "horizontal";
                }
            },
            {
                key: "getPosition",
                value: function(t13) {
                    return t13.x;
                }
            },
            {
                key: "setPosition",
                value: function(t13, e36) {
                    var i78 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : void 0;
                    (void 0) !== i78 && this.layout.hierarchical.addToOrdering(t13, i78), t13.x = e36;
                }
            },
            {
                key: "getTreeSize",
                value: function(t13) {
                    var e36 = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t13);
                    return {
                        min: e36.min_x,
                        max: e36.max_x
                    };
                }
            },
            {
                key: "sort",
                value: function(t13) {
                    Iw.sort(t13, function(t14, e36) {
                        return t14.x - e36.x;
                    });
                }
            },
            {
                key: "fix",
                value: function(t13, e36) {
                    t13.y = this.layout.options.hierarchical.levelSeparation * e36, t13.options.fixed.y = !0;
                }
            },
            {
                key: "shift",
                value: function(t13, e36) {
                    this.layout.body.nodes[t13].x += e36;
                }
            }
        ]), i76;
    }(Fw), Aw = function(t12) {
        kg(i76, t12);
        var e35 = zw(i76);
        function i76(t13) {
            var o85;
            return Ra(this, i76), (o85 = e35.call(this)).layout = t13, o85;
        }
        return Ha(i76, [
            {
                key: "curveType",
                value: function() {
                    return "vertical";
                }
            },
            {
                key: "getPosition",
                value: function(t13) {
                    return t13.y;
                }
            },
            {
                key: "setPosition",
                value: function(t13, e36) {
                    var i78 = arguments.length > 2 && (void 0) !== arguments[2] ? arguments[2] : void 0;
                    (void 0) !== i78 && this.layout.hierarchical.addToOrdering(t13, i78), t13.y = e36;
                }
            },
            {
                key: "getTreeSize",
                value: function(t13) {
                    var e36 = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t13);
                    return {
                        min: e36.min_y,
                        max: e36.max_y
                    };
                }
            },
            {
                key: "sort",
                value: function(t13) {
                    Iw.sort(t13, function(t14, e36) {
                        return t14.y - e36.y;
                    });
                }
            },
            {
                key: "fix",
                value: function(t13, e36) {
                    t13.x = this.layout.options.hierarchical.levelSeparation * e36, t13.options.fixed.x = !0;
                }
            },
            {
                key: "shift",
                value: function(t13, e36) {
                    this.layout.body.nodes[t13].y += e36;
                }
            }
        ]), i76;
    }(Fw), Rw = Jr.every;
    ue({
        target: "Array",
        proto: !0,
        forced: !Zh("every")
    }, {
        every: function(t12) {
            return Rw(this, t12, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var jw = oi("Array").every, Lw = Array.prototype, Hw = function(t12) {
        var e35 = t12.every;
        return t12 === Lw || t12 instanceof Array && e35 === Lw.every ? jw : e35;
    };
    function Ww(t12, e35) {
        var i76 = (void 0) !== Nh && xr(t12) || t12["@@iterator"];
        if (!i76) {
            if (Hh(t12) || (i76 = (function(t13, e36) {
                var i78;
                if (!t13) return;
                if ("string" == typeof t13) return Vw(t13, e36);
                var o85 = Lh(i78 = Object.prototype.toString.call(t13)).call(i78, 8, -1);
                "Object" === o85 && t13.constructor && (o85 = t13.constructor.name);
                if ("Map" === o85 || "Set" === o85) return rr(t13);
                if ("Arguments" === o85 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o85)) return Vw(t13, e36);
            })(t12)) || e35 && t12 && "number" == typeof t12.length) {
                i76 && (t12 = i76);
                var o85 = 0, n115 = function() {
                };
                return {
                    s: n115,
                    n: function() {
                        return o85 >= t12.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t12[o85++]
                        };
                    },
                    e: function(t13) {
                        throw t13;
                    },
                    f: n115
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r67, s61 = !0, a55 = !1;
        return {
            s: function() {
                i76 = i76.call(t12);
            },
            n: function() {
                var t13 = i76.next();
                return s61 = t13.done, t13;
            },
            e: function(t13) {
                a55 = !0, r67 = t13;
            },
            f: function() {
                try {
                    s61 || null == i76.return || i76.return();
                } finally{
                    if (a55) throw r67;
                }
            }
        };
    }
    function Vw(t12, e35) {
        (null == e35 || e35 > t12.length) && (e35 = t12.length);
        for(var i76 = 0, o88 = new Array(e35); i76 < e35; i76++)o88[i76] = t12[i76];
        return o88;
    }
    function qw(t12, e35) {
        var i76 = new Um;
        return nd(t12).call(t12, function(t13) {
            var e36;
            nd(e36 = t13.edges).call(e36, function(t14) {
                t14.connected && i76.add(t14);
            });
        }), nd(i76).call(i76, function(t13) {
            var i78 = t13.from.id, o88 = t13.to.id;
            null == e35[i78] && (e35[i78] = 0), (null == e35[o88] || e35[i78] >= e35[o88]) && (e35[o88] = e35[i78] + 1);
        }), e35;
    }
    function Uw(t12, e35, i76, o88) {
        var n116, r67, s61 = Bl(null), a55 = Dw(n116 = Fh(Jv(o88).call(o88))).call(n116, function(t13, e36) {
            return t13 + 1 + e36.edges.length;
        }, 0), h34 = i76 + "Id", d28 = "to" === i76 ? 1 : -1, l25 = Ww(o88);
        try {
            var c18 = function() {
                var n117 = Bh(r67.value, 2), l29 = n117[0], c19 = n117[1];
                if (!o88.has(l29) || !t12(c19)) return "continue";
                s61[l29] = 0;
                for(var u16 = [
                    c19
                ], f19 = 0, p15 = void 0, v13 = function() {
                    var t13, n118;
                    if (!o88.has(l29)) return "continue";
                    var r69 = s61[p15.id] + d28;
                    if (nd(t13 = $d(n118 = p15.edges).call(n118, function(t14) {
                        return t14.connected && t14.to !== t14.from && t14[i76] !== p15 && o88.has(t14.toId) && o88.has(t14.fromId);
                    })).call(t13, function(t14) {
                        var o89 = t14[h34], n119 = s61[o89];
                        (null == n119 || e35(r69, n119)) && (s61[o89] = r69, u16.push(t14[i76]));
                    }), f19 > a55) return {
                        v: {
                            v: qw(o88, s61)
                        }
                    };
                    ++f19;
                }; p15 = u16.pop();){
                    var g12 = v13();
                    if ("continue" !== g12 && "object" === zh(g12)) return g12.v;
                }
            };
            for(l25.s(); !(r67 = l25.n()).done;){
                var u16 = c18();
                if ("continue" !== u16 && "object" === zh(u16)) return u16.v;
            }
        } catch (t13) {
            l25.e(t13);
        } finally{
            l25.f();
        }
        return s61;
    }
    var Yw = function() {
        function t12() {
            Ra(this, t12), this.childrenReference = {
            }, this.parentReference = {
            }, this.trees = {
            }, this.distributionOrdering = {
            }, this.levels = {
            }, this.distributionIndex = {
            }, this.isTree = !1, this.treeIndex = -1;
        }
        return Ha(t12, [
            {
                key: "addRelation",
                value: function(t13, e35) {
                    (void 0) === this.childrenReference[t13] && (this.childrenReference[t13] = []), this.childrenReference[t13].push(e35), (void 0) === this.parentReference[e35] && (this.parentReference[e35] = []), this.parentReference[e35].push(t13);
                }
            },
            {
                key: "checkIfTree",
                value: function() {
                    for(var t13 in this.parentReference)if (this.parentReference[t13].length > 1) return void (this.isTree = !1);
                    this.isTree = !0;
                }
            },
            {
                key: "numTrees",
                value: function() {
                    return this.treeIndex + 1;
                }
            },
            {
                key: "setTreeIndex",
                value: function(t13, e35) {
                    (void 0) !== e35 && (void 0) === this.trees[t13.id] && (this.trees[t13.id] = e35, this.treeIndex = Math.max(e35, this.treeIndex));
                }
            },
            {
                key: "ensureLevel",
                value: function(t13) {
                    (void 0) === this.levels[t13] && (this.levels[t13] = 0);
                }
            },
            {
                key: "getMaxLevel",
                value: function(t13) {
                    var e35 = this, i76 = {
                    };
                    return (function t14(o88) {
                        if ((void 0) !== i76[o88]) return i76[o88];
                        var n116 = e35.levels[o88];
                        if (e35.childrenReference[o88]) {
                            var r67 = e35.childrenReference[o88];
                            if (r67.length > 0) for(var s61 = 0; s61 < r67.length; s61++)n116 = Math.max(n116, t14(r67[s61]));
                        }
                        return i76[o88] = n116, n116;
                    })(t13);
                }
            },
            {
                key: "levelDownstream",
                value: function(t13, e35) {
                    (void 0) === this.levels[e35.id] && ((void 0) === this.levels[t13.id] && (this.levels[t13.id] = 0), this.levels[e35.id] = this.levels[t13.id] + 1);
                }
            },
            {
                key: "setMinLevelToZero",
                value: function(t13) {
                    var e35 = 1000000000;
                    for(var i76 in t13)Object.prototype.hasOwnProperty.call(t13, i76) && (void 0) !== this.levels[i76] && (e35 = Math.min(this.levels[i76], e35));
                    for(var o88 in t13)Object.prototype.hasOwnProperty.call(t13, o88) && (void 0) !== this.levels[o88] && (this.levels[o88] -= e35);
                }
            },
            {
                key: "getTreeSize",
                value: function(t13, e35) {
                    var i76 = 1000000000, o88 = -1000000000, n116 = 1000000000, r69 = -1000000000;
                    for(var s64 in this.trees)if (Object.prototype.hasOwnProperty.call(this.trees, s64) && this.trees[s64] === e35) {
                        var a55 = t13[s64];
                        i76 = Math.min(a55.x, i76), o88 = Math.max(a55.x, o88), n116 = Math.min(a55.y, n116), r69 = Math.max(a55.y, r69);
                    }
                    return {
                        min_x: i76,
                        max_x: o88,
                        min_y: n116,
                        max_y: r69
                    };
                }
            },
            {
                key: "hasSameParent",
                value: function(t13, e35) {
                    var i76 = this.parentReference[t13.id], o88 = this.parentReference[e35.id];
                    if ((void 0) === i76 || (void 0) === o88) return !1;
                    for(var n116 = 0; n116 < i76.length; n116++)for(var r69 = 0; r69 < o88.length; r69++)if (i76[n116] == o88[r69]) return !0;
                    return !1;
                }
            },
            {
                key: "inSameSubNetwork",
                value: function(t13, e35) {
                    return this.trees[t13.id] === this.trees[e35.id];
                }
            },
            {
                key: "getLevels",
                value: function() {
                    return Gh(this.distributionOrdering);
                }
            },
            {
                key: "addToOrdering",
                value: function(t13, e35) {
                    (void 0) === this.distributionOrdering[e35] && (this.distributionOrdering[e35] = []);
                    var i76 = !1, o88 = this.distributionOrdering[e35];
                    for(var n116 in o88)if (o88[n116] === t13) {
                        i76 = !0;
                        break;
                    }
                    i76 || (this.distributionOrdering[e35].push(t13), this.distributionIndex[t13.id] = this.distributionOrdering[e35].length - 1);
                }
            }
        ]), t12;
    }(), Xw = function() {
        function t12(e35) {
            Ra(this, t12), this.body = e35, this._resetRNG(Math.random() + ":" + Kh()), this.setPhysics = !1, this.options = {
            }, this.optionsBackup = {
                physics: {
                }
            }, this.defaultOptions = {
                randomSeed: void 0,
                improvedLayout: !0,
                clusterThreshold: 150,
                hierarchical: {
                    enabled: !1,
                    levelSeparation: 150,
                    nodeSpacing: 100,
                    treeSpacing: 200,
                    blockShifting: !0,
                    edgeMinimization: !0,
                    parentCentralization: !0,
                    direction: "UD",
                    sortMethod: "hubsize"
                }
            }, Ke(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t12, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t13 = this;
                    this.body.emitter.on("_dataChanged", function() {
                        t13.setupHierarchicalLayout();
                    }), this.body.emitter.on("_dataLoaded", function() {
                        t13.layoutNetwork();
                    }), this.body.emitter.on("_resetHierarchicalLayout", function() {
                        t13.setupHierarchicalLayout();
                    }), this.body.emitter.on("_adjustEdgesForHierarchicalLayout", function() {
                        if (!0 === t13.options.hierarchical.enabled) {
                            var e35 = t13.direction.curveType();
                            t13.body.emitter.emit("_forceDisableDynamicCurves", e35, !1);
                        }
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t13, e36) {
                    if ((void 0) !== t13) {
                        var i76 = this.options.hierarchical, o88 = i76.enabled;
                        if (nf([
                            "randomSeed",
                            "improvedLayout",
                            "clusterThreshold"
                        ], this.options, t13), _f(this.options, t13, "hierarchical"), (void 0) !== t13.randomSeed && this._resetRNG(t13.randomSeed), !0 === i76.enabled) return !0 === o88 && this.body.emitter.emit("refresh", !0), "RL" === i76.direction || "DU" === i76.direction ? i76.levelSeparation > 0 && (i76.levelSeparation *= -1) : i76.levelSeparation < 0 && (i76.levelSeparation *= -1), this.setDirectionStrategy(), this.body.emitter.emit("_resetHierarchicalLayout"), this.adaptAllOptionsForHierarchicalLayout(e36);
                        if (!0 === o88) return this.body.emitter.emit("refresh"), sf(e36, this.optionsBackup);
                    }
                    return e36;
                }
            },
            {
                key: "_resetRNG",
                value: function(t13) {
                    this.initialRandomSeed = t13, this._rng = Vu(this.initialRandomSeed);
                }
            },
            {
                key: "adaptAllOptionsForHierarchicalLayout",
                value: function(t13) {
                    if (!0 === this.options.hierarchical.enabled) {
                        var e36 = this.optionsBackup.physics;
                        (void 0) === t13.physics || !0 === t13.physics ? (t13.physics = {
                            enabled: (void 0) === e36.enabled || e36.enabled,
                            solver: "hierarchicalRepulsion"
                        }, e36.enabled = (void 0) === e36.enabled || e36.enabled, e36.solver = e36.solver || "barnesHut") : "object" === zh(t13.physics) ? (e36.enabled = (void 0) === t13.physics.enabled || t13.physics.enabled, e36.solver = t13.physics.solver || "barnesHut", t13.physics.solver = "hierarchicalRepulsion") : !1 !== t13.physics && (e36.solver = "barnesHut", t13.physics = {
                            solver: "hierarchicalRepulsion"
                        });
                        var i78 = this.direction.curveType();
                        if ((void 0) === t13.edges) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t13.edges = {
                            smooth: !1
                        };
                        else if ((void 0) === t13.edges.smooth) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t13.edges.smooth = !1;
                        else if ("boolean" == typeof t13.edges.smooth) this.optionsBackup.edges = {
                            smooth: t13.edges.smooth
                        }, t13.edges.smooth = {
                            enabled: t13.edges.smooth,
                            type: i78
                        };
                        else {
                            var o89 = t13.edges.smooth;
                            (void 0) !== o89.type && "dynamic" !== o89.type && (i78 = o89.type), this.optionsBackup.edges = {
                                smooth: {
                                    enabled: (void 0) === o89.enabled || o89.enabled,
                                    type: (void 0) === o89.type ? "dynamic" : o89.type,
                                    roundness: (void 0) === o89.roundness ? 0.5 : o89.roundness,
                                    forceDirection: (void 0) !== o89.forceDirection && o89.forceDirection
                                }
                            }, t13.edges.smooth = {
                                enabled: (void 0) === o89.enabled || o89.enabled,
                                type: i78,
                                roundness: (void 0) === o89.roundness ? 0.5 : o89.roundness,
                                forceDirection: (void 0) !== o89.forceDirection && o89.forceDirection
                            };
                        }
                        this.body.emitter.emit("_forceDisableDynamicCurves", i78);
                    }
                    return t13;
                }
            },
            {
                key: "positionInitially",
                value: function(t13) {
                    if (!0 !== this.options.hierarchical.enabled) {
                        this._resetRNG(this.initialRandomSeed);
                        for(var e37 = t13.length + 50, i79 = 0; i79 < t13.length; i79++){
                            var o90 = t13[i79], n116 = 2 * Math.PI * this._rng();
                            (void 0) === o90.x && (o90.x = e37 * Math.cos(n116)), (void 0) === o90.y && (o90.y = e37 * Math.sin(n116));
                        }
                    }
                }
            },
            {
                key: "layoutNetwork",
                value: function() {
                    if (!0 !== this.options.hierarchical.enabled && !0 === this.options.improvedLayout) {
                        for(var t13 = this.body.nodeIndices, e38 = 0, i80 = 0; i80 < t13.length; i80++)!0 === this.body.nodes[t13[i80]].predefinedPosition && (e38 += 1);
                        if (e38 < 0.5 * t13.length) {
                            var o91 = 0, n117 = this.options.clusterThreshold, r69 = {
                                clusterNodeProperties: {
                                    shape: "ellipse",
                                    label: "",
                                    group: "",
                                    font: {
                                        multi: !1
                                    }
                                },
                                clusterEdgeProperties: {
                                    label: "",
                                    font: {
                                        multi: !1
                                    },
                                    smooth: {
                                        enabled: !1
                                    }
                                }
                            };
                            if (t13.length > n117) {
                                for(var s64 = t13.length; t13.length > n117 && o91 <= 10;){
                                    o91 += 1;
                                    var a57 = t13.length;
                                    if (o91 % 3 == 0 ? this.body.modules.clustering.clusterBridges(r69) : this.body.modules.clustering.clusterOutliers(r69), a57 == t13.length && o91 % 3 != 0) return this._declusterAll(), this.body.emitter.emit("_layoutFailed"), void console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
                                }
                                this.body.modules.kamadaKawai.setOptions({
                                    springLength: Math.max(150, 2 * s64)
                                });
                            }
                            o91 > 10 && console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result."), this.body.modules.kamadaKawai.solve(t13, this.body.edgeIndices, !0), this._shiftToCenter();
                            for(var h34 = 0; h34 < t13.length; h34++){
                                var d28 = this.body.nodes[t13[h34]];
                                !1 === d28.predefinedPosition && (d28.x += 70 * (0.5 - this._rng()), d28.y += 70 * (0.5 - this._rng()));
                            }
                            this._declusterAll(), this.body.emitter.emit("_repositionBezierNodes");
                        }
                    }
                }
            },
            {
                key: "_shiftToCenter",
                value: function() {
                    for(var t14 = Sm.getRangeCore(this.body.nodes, this.body.nodeIndices), e39 = Sm.findCenter(t14), i81 = 0; i81 < this.body.nodeIndices.length; i81++){
                        var o92 = this.body.nodes[this.body.nodeIndices[i81]];
                        o92.x -= e39.x, o92.y -= e39.y;
                    }
                }
            },
            {
                key: "_declusterAll",
                value: function() {
                    for(var t14 = !0; !0 === t14;){
                        t14 = !1;
                        for(var e39 = 0; e39 < this.body.nodeIndices.length; e39++)!0 === this.body.nodes[this.body.nodeIndices[e39]].isCluster && (t14 = !0, this.body.modules.clustering.openCluster(this.body.nodeIndices[e39], {
                        }, !1));
                        !0 === t14 && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "getSeed",
                value: function() {
                    return this.initialRandomSeed;
                }
            },
            {
                key: "setupHierarchicalLayout",
                value: function() {
                    if (!0 === this.options.hierarchical.enabled && this.body.nodeIndices.length > 0) {
                        var t14, e40, i81 = !1, o93 = !1;
                        for(e40 in this.lastNodeOnLevel = {
                        }, this.hierarchical = new Yw, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e40) && ((void 0) !== (t14 = this.body.nodes[e40]).options.level ? (i81 = !0, this.hierarchical.levels[e40] = t14.options.level) : o93 = !0);
                        if (!0 === o93 && !0 === i81) throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");
                        if (!0 === o93) {
                            var n118 = this.options.hierarchical.sortMethod;
                            "hubsize" === n118 ? this._determineLevelsByHubsize() : "directed" === n118 ? this._determineLevelsDirected() : "custom" === n118 && this._determineLevelsCustomCallback();
                        }
                        for(var r70 in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r70) && this.hierarchical.ensureLevel(r70);
                        var s65 = this._getDistribution();
                        this._generateMap(), this._placeNodesByHierarchy(s65), this._condenseHierarchy(), this._shiftToCenter();
                    }
                }
            },
            {
                key: "_condenseHierarchy",
                value: function() {
                    var t17 = this, e41 = !1, i82 = {
                    }, o94 = function(e42, i83) {
                        var o95 = t17.hierarchical.trees;
                        for(var n119 in o95)Object.prototype.hasOwnProperty.call(o95, n119) && o95[n119] === e42 && t17.direction.shift(n119, i83);
                    }, n119 = function() {
                        for(var e42 = [], i83 = 0; i83 < t17.hierarchical.numTrees(); i83++)e42.push(t17.direction.getTreeSize(i83));
                        return e42;
                    }, r71 = function e42(i83, o95) {
                        if (!o95[i83.id] && (o95[i83.id] = !0, t17.hierarchical.childrenReference[i83.id])) {
                            var n120 = t17.hierarchical.childrenReference[i83.id];
                            if (n120.length > 0) for(var r72 = 0; r72 < n120.length; r72++)e42(t17.body.nodes[n120[r72]], o95);
                        }
                    }, s66 = function(e43) {
                        var i83 = arguments.length > 1 && (void 0) !== arguments[1] ? arguments[1] : 1000000000, o95 = 1000000000, n121 = 1000000000, r73 = 1000000000, s67 = -1000000000;
                        for(var a58 in e43)if (Object.prototype.hasOwnProperty.call(e43, a58)) {
                            var h36 = t17.body.nodes[a58], d32 = t17.hierarchical.levels[h36.id], l25 = t17.direction.getPosition(h36), c18 = t17._getSpaceAroundNode(h36, e43), u18 = Bh(c18, 2), f19 = u18[0], p15 = u18[1];
                            o95 = Math.min(f19, o95), n121 = Math.min(p15, n121), d32 <= i83 && (r73 = Math.min(l25, r73), s67 = Math.max(l25, s67));
                        }
                        return [
                            r73,
                            s67,
                            o95,
                            n121
                        ];
                    }, a58 = function(e43, i83) {
                        var o95 = t17.hierarchical.getMaxLevel(e43.id), n121 = t17.hierarchical.getMaxLevel(i83.id);
                        return Math.min(o95, n121);
                    }, h37 = function(e43, i83, o95) {
                        for(var n121 = t17.hierarchical, r73 = 0; r73 < i83.length; r73++){
                            var s67 = i83[r73], a59 = n121.distributionOrdering[s67];
                            if (a59.length > 1) for(var h38 = 0; h38 < a59.length - 1; h38++){
                                var d33 = a59[h38], l29 = a59[h38 + 1];
                                n121.hasSameParent(d33, l29) && n121.inSameSubNetwork(d33, l29) && e43(d33, l29, o95);
                            }
                        }
                    }, d34 = function(i83, o95) {
                        var n121 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2], h39 = t17.direction.getPosition(i83), d35 = t17.direction.getPosition(o95), l30 = Math.abs(d35 - h39), c19 = t17.options.hierarchical.nodeSpacing;
                        if (l30 > c19) {
                            var u19 = {
                            }, f21 = {
                            };
                            r71(i83, u19), r71(o95, f21);
                            var p17 = a58(i83, o95), v13 = s66(u19, p17), g13 = s66(f21, p17), y8 = v13[1], m8 = g13[0], b8 = g13[2], w3 = Math.abs(y8 - m8);
                            if (w3 > c19) {
                                var k2 = y8 - m8 + c19;
                                k2 < -b8 + c19 && (k2 = -b8 + c19), k2 < 0 && (t17._shiftBlock(o95.id, k2), e41 = !0, !0 === n121 && t17._centerParent(o95));
                            }
                        }
                    }, l30 = function(o95, n121) {
                        for(var a60 = n121.id, h39 = n121.edges, d35 = t17.hierarchical.levels[n121.id], l31 = t17.options.hierarchical.levelSeparation * t17.options.hierarchical.levelSeparation, c19 = {
                        }, u20 = [], f22 = 0; f22 < h39.length; f22++){
                            var p18 = h39[f22];
                            if (p18.toId != p18.fromId) {
                                var v14 = p18.toId == a60 ? p18.from : p18.to;
                                c19[h39[f22].id] = v14, t17.hierarchical.levels[v14.id] < d35 && u20.push(p18);
                            }
                        }
                        var g14 = function(e43, i83) {
                            for(var o96 = 0, n122 = 0; n122 < i83.length; n122++)if ((void 0) !== c19[i83[n122].id]) {
                                var r73 = t17.direction.getPosition(c19[i83[n122].id]) - e43;
                                o96 += r73 / Math.sqrt(r73 * r73 + l31);
                            }
                            return o96;
                        }, y9 = function(e43, i83) {
                            for(var o96 = 0, n122 = 0; n122 < i83.length; n122++)if ((void 0) !== c19[i83[n122].id]) {
                                var r74 = t17.direction.getPosition(c19[i83[n122].id]) - e43;
                                o96 -= l31 * Math.pow(r74 * r74 + l31, -1.5);
                            }
                            return o96;
                        }, m9 = function(e43, i83) {
                            for(var o96 = t17.direction.getPosition(n121), r75 = {
                            }, s68 = 0; s68 < e43; s68++){
                                var a61 = g14(o96, i83), h40 = y9(o96, i83);
                                if ((void 0) !== r75[o96 -= Math.max(-40, Math.min(40, Math.round(a61 / h40)))]) break;
                                r75[o96] = s68;
                            }
                            return o96;
                        }, b9 = m9(o95, u20);
                        !function(o96) {
                            var a62 = t17.direction.getPosition(n121);
                            if ((void 0) === i82[n121.id]) {
                                var h41 = {
                                };
                                r71(n121, h41), i82[n121.id] = h41;
                            }
                            var d36 = s66(i82[n121.id]), l32 = d36[2], c20 = d36[3], u21 = o96 - a62, f23 = 0;
                            u21 > 0 ? f23 = Math.min(u21, c20 - t17.options.hierarchical.nodeSpacing) : u21 < 0 && (f23 = -Math.min(-u21, l32 - t17.options.hierarchical.nodeSpacing)), 0 != f23 && (t17._shiftBlock(n121.id, f23), e41 = !0);
                        }(b9), (function(i83) {
                            var o96 = t17.direction.getPosition(n121), r75 = Bh(t17._getSpaceAroundNode(n121), 2), s68 = r75[0], a62 = r75[1], h42 = i83 - o96, d36 = o96;
                            h42 > 0 ? d36 = Math.min(o96 + (a62 - t17.options.hierarchical.nodeSpacing), i83) : h42 < 0 && (d36 = Math.max(o96 - (s68 - t17.options.hierarchical.nodeSpacing), i83)), d36 !== o96 && (t17.direction.setPosition(n121, d36), e41 = !0);
                        })(b9 = m9(o95, h39));
                    };
                    !0 === this.options.hierarchical.blockShifting && ((function(i83) {
                        var o95 = t17.hierarchical.getLevels();
                        o95 = ld(o95).call(o95);
                        for(var n121 = 0; n121 < i83 && (e41 = !1, h37(d34, o95, !0), !0 === e41); n121++);
                    })(5), (function() {
                        for(var e43 in t17.body.nodes)Object.prototype.hasOwnProperty.call(t17.body.nodes, e43) && t17._centerParent(t17.body.nodes[e43]);
                    })()), !0 === this.options.hierarchical.edgeMinimization && (function(i83) {
                        var o95 = t17.hierarchical.getLevels();
                        o95 = ld(o95).call(o95);
                        for(var n121 = 0; n121 < i83; n121++){
                            e41 = !1;
                            for(var r75 = 0; r75 < o95.length; r75++)for(var s68 = o95[r75], a60 = t17.hierarchical.distributionOrdering[s68], h39 = 0; h39 < a60.length; h39++)l30(1000, a60[h39]);
                            if (!0 !== e41) break;
                        }
                    })(20), !0 === this.options.hierarchical.parentCentralization && (function() {
                        var e43 = t17.hierarchical.getLevels();
                        e43 = ld(e43).call(e43);
                        for(var i83 = 0; i83 < e43.length; i83++)for(var o95 = e43[i83], n121 = t17.hierarchical.distributionOrdering[o95], r76 = 0; r76 < n121.length; r76++)t17._centerParent(n121[r76]);
                    })(), (function() {
                        for(var e43 = n119(), i83 = 0, r76 = 0; r76 < e43.length - 1; r76++)i83 += e43[r76].max - e43[r76 + 1].min + t17.options.hierarchical.treeSpacing, o94(r76 + 1, i83);
                    })();
                }
            },
            {
                key: "_getSpaceAroundNode",
                value: function(t17, e41) {
                    var i82 = !0;
                    (void 0) === e41 && (i82 = !1);
                    var o94 = this.hierarchical.levels[t17.id];
                    if ((void 0) !== o94) {
                        var n119 = this.hierarchical.distributionIndex[t17.id], r71 = this.direction.getPosition(t17), s66 = this.hierarchical.distributionOrdering[o94], a58 = 1000000000, h37 = 1000000000;
                        if (0 !== n119) {
                            var d34 = s66[n119 - 1];
                            if (!0 === i82 && (void 0) === e41[d34.id] || !1 === i82) a58 = r71 - this.direction.getPosition(d34);
                        }
                        if (n119 != s66.length - 1) {
                            var l30 = s66[n119 + 1];
                            if (!0 === i82 && (void 0) === e41[l30.id] || !1 === i82) {
                                var c19 = this.direction.getPosition(l30);
                                h37 = Math.min(h37, c19 - r71);
                            }
                        }
                        return [
                            a58,
                            h37
                        ];
                    }
                    return [
                        0,
                        0
                    ];
                }
            },
            {
                key: "_centerParent",
                value: function(t17) {
                    if (this.hierarchical.parentReference[t17.id]) for(var e41 = this.hierarchical.parentReference[t17.id], i82 = 0; i82 < e41.length; i82++){
                        var o94 = e41[i82], n121 = this.body.nodes[o94], r76 = this.hierarchical.childrenReference[o94];
                        if ((void 0) !== r76) {
                            var s69 = this._getCenterPosition(r76), a62 = this.direction.getPosition(n121), h42 = Bh(this._getSpaceAroundNode(n121), 2), d35 = h42[0], l31 = h42[1], c20 = a62 - s69;
                            (c20 < 0 && Math.abs(c20) < l31 - this.options.hierarchical.nodeSpacing || c20 > 0 && Math.abs(c20) < d35 - this.options.hierarchical.nodeSpacing) && this.direction.setPosition(n121, s69);
                        }
                    }
                }
            },
            {
                key: "_placeNodesByHierarchy",
                value: function(t17) {
                    for(var e41 in this.positionedNodes = {
                    }, t17)if (Object.prototype.hasOwnProperty.call(t17, e41)) {
                        var i82, o95 = Gh(t17[e41]);
                        o95 = this._indexArrayToNodes(o95), mw(i82 = this.direction).call(i82, o95);
                        for(var n122 = 0, r77 = 0; r77 < o95.length; r77++){
                            var s70 = o95[r77];
                            if ((void 0) === this.positionedNodes[s70.id]) {
                                var a63 = this.options.hierarchical.nodeSpacing, h43 = a63 * n122;
                                n122 > 0 && (h43 = this.direction.getPosition(o95[r77 - 1]) + a63), this.direction.setPosition(s70, h43, e41), this._validatePositionAndContinue(s70, e41, h43), n122++;
                            }
                        }
                    }
                }
            },
            {
                key: "_placeBranchNodes",
                value: function(t17, e41) {
                    var i83, o96 = this.hierarchical.childrenReference[t17];
                    if ((void 0) !== o96) {
                        for(var n123 = [], r78 = 0; r78 < o96.length; r78++)n123.push(this.body.nodes[o96[r78]]);
                        mw(i83 = this.direction).call(i83, n123);
                        for(var s71 = 0; s71 < n123.length; s71++){
                            var a64 = n123[s71], h44 = this.hierarchical.levels[a64.id];
                            if (!(h44 > e41 && (void 0) === this.positionedNodes[a64.id])) return;
                            var d36 = this.options.hierarchical.nodeSpacing, l32 = void 0;
                            l32 = 0 === s71 ? this.direction.getPosition(this.body.nodes[t17]) : this.direction.getPosition(n123[s71 - 1]) + d36, this.direction.setPosition(a64, l32, h44), this._validatePositionAndContinue(a64, h44, l32);
                        }
                        var c21 = this._getCenterPosition(n123);
                        this.direction.setPosition(this.body.nodes[t17], c21, e41);
                    }
                }
            },
            {
                key: "_validatePositionAndContinue",
                value: function(t17, e41, i83) {
                    if (this.hierarchical.isTree) {
                        if ((void 0) !== this.lastNodeOnLevel[e41]) {
                            var o96 = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[e41]]);
                            if (i83 - o96 < this.options.hierarchical.nodeSpacing) {
                                var n124 = o96 + this.options.hierarchical.nodeSpacing - i83, r79 = this._findCommonParent(this.lastNodeOnLevel[e41], t17.id);
                                this._shiftBlock(r79.withChild, n124);
                            }
                        }
                        this.lastNodeOnLevel[e41] = t17.id, this.positionedNodes[t17.id] = !0, this._placeBranchNodes(t17.id, e41);
                    }
                }
            },
            {
                key: "_indexArrayToNodes",
                value: function(t17) {
                    for(var e41 = [], i83 = 0; i83 < t17.length; i83++)e41.push(this.body.nodes[t17[i83]]);
                    return e41;
                }
            },
            {
                key: "_getDistribution",
                value: function() {
                    var t17, e41, i83 = {
                    };
                    for(t17 in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, t17)) {
                        e41 = this.body.nodes[t17];
                        var o97 = (void 0) === this.hierarchical.levels[t17] ? 0 : this.hierarchical.levels[t17];
                        this.direction.fix(e41, o97), (void 0) === i83[o97] && (i83[o97] = {
                        }), i83[o97][t17] = e41;
                    }
                    return i83;
                }
            },
            {
                key: "_getActiveEdges",
                value: function(t17) {
                    var e41 = this, i83 = [];
                    return lf(t17.edges, function(t18) {
                        var o98;
                        -1 !== Cl(o98 = e41.body.edgeIndices).call(o98, t18.id) && i83.push(t18);
                    }), i83;
                }
            },
            {
                key: "_getHubSizes",
                value: function() {
                    var t17 = this, e41 = {
                    };
                    lf(this.body.nodeIndices, function(i83) {
                        var o98 = t17.body.nodes[i83], n125 = t17._getActiveEdges(o98).length;
                        e41[n125] = !0;
                    });
                    var i83 = [];
                    return lf(e41, function(t18) {
                        i83.push(Number(t18));
                    }), mw(Iw).call(Iw, i83, function(t18, e42) {
                        return e42 - t18;
                    }), i83;
                }
            },
            {
                key: "_determineLevelsByHubsize",
                value: function() {
                    for(var t17 = this, e41 = function(e42, i83) {
                        t17.hierarchical.levelDownstream(e42, i83);
                    }, i83 = this._getHubSizes(), o98 = function(o99) {
                        var n125 = i83[o99];
                        if (0 === n125) return "break";
                        lf(t17.body.nodeIndices, function(i84) {
                            var o100 = t17.body.nodes[i84];
                            n125 === t17._getActiveEdges(o100).length && t17._crawlNetwork(e41, i84);
                        });
                    }, n125 = 0; n125 < i83.length; ++n125){
                        if ("break" === o98(n125)) break;
                    }
                }
            },
            {
                key: "_determineLevelsCustomCallback",
                value: function() {
                    var t17 = this;
                    this._crawlNetwork(function(e41, i83, o98) {
                        var n125 = t17.hierarchical.levels[e41.id];
                        (void 0) === n125 && (n125 = t17.hierarchical.levels[e41.id] = 100000);
                        var r80 = (Sm.cloneOptions(e41, "node"), Sm.cloneOptions(i83, "node"), void Sm.cloneOptions(o98, "edge"));
                        t17.hierarchical.levels[i83.id] = n125 + r80;
                    }), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_determineLevelsDirected",
                value: function() {
                    var t17, e41 = this, i83 = Dw(t17 = this.body.nodeIndices).call(t17, function(t18, i84) {
                        return t18.set(i84, e41.body.nodes[i84]), t18;
                    }, new Cv);
                    "roots" === this.options.hierarchical.shakeTowards ? this.hierarchical.levels = (function(t18) {
                        return Uw(function(e42) {
                            var i84, o98;
                            return Hw(i84 = $d(o98 = e42.edges).call(o98, function(e43) {
                                return t18.has(e43.toId);
                            })).call(i84, function(t19) {
                                return t19.from === e42;
                            });
                        }, function(t19, e42) {
                            return e42 < t19;
                        }, "to", t18);
                    })(i83) : this.hierarchical.levels = (function(t18) {
                        return Uw(function(e42) {
                            var i84, o98;
                            return Hw(i84 = $d(o98 = e42.edges).call(o98, function(e43) {
                                return t18.has(e43.toId);
                            })).call(i84, function(t19) {
                                return t19.to === e42;
                            });
                        }, function(t19, e42) {
                            return e42 > t19;
                        }, "from", t18);
                    })(i83), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_generateMap",
                value: function() {
                    var t17 = this;
                    this._crawlNetwork(function(e41, i83) {
                        t17.hierarchical.levels[i83.id] > t17.hierarchical.levels[e41.id] && t17.hierarchical.addRelation(e41.id, i83.id);
                    }), this.hierarchical.checkIfTree();
                }
            },
            {
                key: "_crawlNetwork",
                value: function() {
                    var t17 = this, e41 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : function() {
                    }, i83 = arguments.length > 1 ? arguments[1] : void 0, o98 = {
                    }, n125 = function i84(n126, r80) {
                        if ((void 0) === o98[n126.id]) {
                            var s72;
                            t17.hierarchical.setTreeIndex(n126, r80), o98[n126.id] = !0;
                            for(var a65 = t17._getActiveEdges(n126), h45 = 0; h45 < a65.length; h45++){
                                var d37 = a65[h45];
                                !0 === d37.connected && (s72 = d37.toId == n126.id ? d37.from : d37.to, n126.id != s72.id && (e41(n126, s72, d37), i84(s72, r80)));
                            }
                        }
                    };
                    if ((void 0) === i83) for(var r80 = 0, s73 = 0; s73 < this.body.nodeIndices.length; s73++){
                        var a66 = this.body.nodeIndices[s73];
                        if ((void 0) === o98[a66]) {
                            var h46 = this.body.nodes[a66];
                            n125(h46, r80), r80 += 1;
                        }
                    }
                    else {
                        var d38 = this.body.nodes[i83];
                        if ((void 0) === d38) return void console.error("Node not found:", i83);
                        n125(d38);
                    }
                }
            },
            {
                key: "_shiftBlock",
                value: function(t17, e41) {
                    var i83 = this, o98 = {
                    };
                    !function t18(n125) {
                        if (!o98[n125]) {
                            o98[n125] = !0, i83.direction.shift(n125, e41);
                            var r80 = i83.hierarchical.childrenReference[n125];
                            if ((void 0) !== r80) for(var s73 = 0; s73 < r80.length; s73++)t18(r80[s73]);
                        }
                    }(t17);
                }
            },
            {
                key: "_findCommonParent",
                value: function(t17, e41) {
                    var i83 = this, o98 = {
                    };
                    return (function t18(e42, o99) {
                        var n125 = i83.hierarchical.parentReference[o99];
                        if ((void 0) !== n125) for(var r81 = 0; r81 < n125.length; r81++){
                            var s74 = n125[r81];
                            e42[s74] = !0, t18(e42, s74);
                        }
                    })(o98, t17), (function t19(e42, o99) {
                        var n125 = i83.hierarchical.parentReference[o99];
                        if ((void 0) !== n125) for(var r81 = 0; r81 < n125.length; r81++){
                            var s75 = n125[r81];
                            if ((void 0) !== e42[s75]) return {
                                foundParent: s75,
                                withChild: o99
                            };
                            var a67 = t19(e42, s75);
                            if (null !== a67.foundParent) return a67;
                        }
                        return {
                            foundParent: null,
                            withChild: o99
                        };
                    })(o98, e41);
                }
            },
            {
                key: "setDirectionStrategy",
                value: function() {
                    var t17 = "UD" === this.options.hierarchical.direction || "DU" === this.options.hierarchical.direction;
                    this.direction = t17 ? new Nw(this) : new Aw(this);
                }
            },
            {
                key: "_getCenterPosition",
                value: function(t17) {
                    for(var e41 = 1000000000, i83 = -1000000000, o98 = 0; o98 < t17.length; o98++){
                        var n125 = void 0;
                        if ((void 0) !== t17[o98].id) n125 = t17[o98];
                        else {
                            var r81 = t17[o98];
                            n125 = this.body.nodes[r81];
                        }
                        var s76 = this.direction.getPosition(n125);
                        e41 = Math.min(e41, s76), i83 = Math.max(i83, s76);
                    }
                    return 0.5 * (e41 + i83);
                }
            }
        ]), t12;
    }();
    function Gw(t12, e41) {
        var i83 = (void 0) !== Nh && xr(t12) || t12["@@iterator"];
        if (!i83) {
            if (Hh(t12) || (i83 = (function(t17, e42) {
                var i84;
                if (!t17) return;
                if ("string" == typeof t17) return Kw(t17, e42);
                var o98 = Lh(i84 = Object.prototype.toString.call(t17)).call(i84, 8, -1);
                "Object" === o98 && t17.constructor && (o98 = t17.constructor.name);
                if ("Map" === o98 || "Set" === o98) return rr(t17);
                if ("Arguments" === o98 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o98)) return Kw(t17, e42);
            })(t12)) || e41 && t12 && "number" == typeof t12.length) {
                i83 && (t12 = i83);
                var o98 = 0, n126 = function() {
                };
                return {
                    s: n126,
                    n: function() {
                        return o98 >= t12.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t12[o98++]
                        };
                    },
                    e: function(t17) {
                        throw t17;
                    },
                    f: n126
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r82, s77 = !0, a68 = !1;
        return {
            s: function() {
                i83 = i83.call(t12);
            },
            n: function() {
                var t17 = i83.next();
                return s77 = t17.done, t17;
            },
            e: function(t17) {
                a68 = !0, r82 = t17;
            },
            f: function() {
                try {
                    s77 || null == i83.return || i83.return();
                } finally{
                    if (a68) throw r82;
                }
            }
        };
    }
    function Kw(t12, e41) {
        (null == e41 || e41 > t12.length) && (e41 = t12.length);
        for(var i83 = 0, o99 = new Array(e41); i83 < e41; i83++)o99[i83] = t12[i83];
        return o99;
    }
    var $w = function() {
        function t12(e41, i83, o99, n127) {
            var r82, s77, a68 = this;
            Ra(this, t12), this.body = e41, this.canvas = i83, this.selectionHandler = o99, this.interactionHandler = n127, this.editMode = !1, this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0, this._domEventListenerCleanupQueue = [], this.temporaryUIFunctions = {
            }, this.temporaryEventFunctions = [], this.touchTime = 0, this.temporaryIds = {
                nodes: [],
                edges: []
            }, this.guiEnabled = !1, this.inMode = !1, this.selectedControlNode = void 0, this.options = {
            }, this.defaultOptions = {
                enabled: !1,
                initiallyActive: !1,
                addNode: !0,
                addEdge: !0,
                editNode: void 0,
                editEdge: !0,
                deleteNode: !0,
                deleteEdge: !0,
                controlNodeStyle: {
                    shape: "dot",
                    size: 6,
                    color: {
                        background: "#ff0000",
                        border: "#3c3c3c",
                        highlight: {
                            background: "#07f968",
                            border: "#3c3c3c"
                        }
                    },
                    borderWidth: 2,
                    borderWidthSelected: 2
                }
            }, Ke(this.options, this.defaultOptions), this.body.emitter.on("destroy", function() {
                a68._clean();
            }), this.body.emitter.on("_dataChanged", si(r82 = this._restore).call(r82, this)), this.body.emitter.on("_resetData", si(s77 = this._restore).call(s77, this));
        }
        return Ha(t12, [
            {
                key: "_restore",
                value: function() {
                    !1 !== this.inMode && (!0 === this.options.initiallyActive ? this.enableEditMode() : this.disableEditMode());
                }
            },
            {
                key: "setOptions",
                value: function(t17, e41, i83) {
                    (void 0) !== e41 && ((void 0) !== e41.locale ? this.options.locale = e41.locale : this.options.locale = i83.locale, (void 0) !== e41.locales ? this.options.locales = e41.locales : this.options.locales = i83.locales), (void 0) !== t17 && ("boolean" == typeof t17 ? this.options.enabled = t17 : (this.options.enabled = !0, sf(this.options, t17)), !0 === this.options.initiallyActive && (this.editMode = !0), this._setup());
                }
            },
            {
                key: "toggleEditMode",
                value: function() {
                    !0 === this.editMode ? this.disableEditMode() : this.enableEditMode();
                }
            },
            {
                key: "enableEditMode",
                value: function() {
                    this.editMode = !0, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block", this.editModeDiv.style.display = "none", this.showManipulatorToolbar());
                }
            },
            {
                key: "disableEditMode",
                value: function() {
                    this.editMode = !1, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "none", this.closeDiv.style.display = "none", this.editModeDiv.style.display = "block", this._createEditButton());
                }
            },
            {
                key: "showManipulatorToolbar",
                value: function() {
                    if (this._clean(), this.manipulationDOM = {
                    }, !0 === this.guiEnabled) {
                        var t17, e41;
                        this.editMode = !0, this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block";
                        var i83 = this.selectionHandler.getSelectedNodeCount(), o99 = this.selectionHandler.getSelectedEdgeCount(), n127 = i83 + o99, r82 = this.options.locales[this.options.locale], s77 = !1;
                        !1 !== this.options.addNode && (this._createAddNodeButton(r82), s77 = !0), !1 !== this.options.addEdge && (!0 === s77 ? this._createSeperator(1) : s77 = !0, this._createAddEdgeButton(r82)), 1 === i83 && "function" == typeof this.options.editNode ? (!0 === s77 ? this._createSeperator(2) : s77 = !0, this._createEditNodeButton(r82)) : 1 === o99 && 0 === i83 && !1 !== this.options.editEdge && (!0 === s77 ? this._createSeperator(3) : s77 = !0, this._createEditEdgeButton(r82)), 0 !== n127 && (i83 > 0 && !1 !== this.options.deleteNode || 0 === i83 && !1 !== this.options.deleteEdge) && (!0 === s77 && this._createSeperator(4), this._createDeleteButton(r82)), this._bindElementEvents(this.closeDiv, si(t17 = this.toggleEditMode).call(t17, this)), this._temporaryBindEvent("select", si(e41 = this.showManipulatorToolbar).call(e41, this));
                    }
                    this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "addNodeMode",
                value: function() {
                    var t18;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addNode", !0 === this.guiEnabled) {
                        var e42, i84 = this.options.locales[this.options.locale];
                        this.manipulationDOM = {
                        }, this._createBackButton(i84), this._createSeperator(), this._createDescription(i84.addDescription || this.options.locales.en.addDescription), this._bindElementEvents(this.closeDiv, si(e42 = this.toggleEditMode).call(e42, this));
                    }
                    this._temporaryBindEvent("click", si(t18 = this._performAddNode).call(t18, this));
                }
            },
            {
                key: "editNode",
                value: function() {
                    var t18 = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean();
                    var e43 = this.selectionHandler.getSelectedNodes()[0];
                    if ((void 0) !== e43) {
                        if (this.inMode = "editNode", "function" != typeof this.options.editNode) throw new Error("No function has been configured to handle the editing of nodes.");
                        if (!0 !== e43.isCluster) {
                            var i85 = sf({
                            }, e43.options, !1);
                            if (i85.x = e43.x, i85.y = e43.y, 2 !== this.options.editNode.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                            this.options.editNode(i85, function(e44) {
                                null != e44 && "editNode" === t18.inMode && t18.body.data.nodes.getDataSet().update(e44), t18.showManipulatorToolbar();
                            });
                        } else alert(this.options.locales[this.options.locale].editClusterError || this.options.locales.en.editClusterError);
                    } else this.showManipulatorToolbar();
                }
            },
            {
                key: "addEdgeMode",
                value: function() {
                    var t18, e43, i86, o100, n128;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addEdge", !0 === this.guiEnabled) {
                        var r83, s78 = this.options.locales[this.options.locale];
                        this.manipulationDOM = {
                        }, this._createBackButton(s78), this._createSeperator(), this._createDescription(s78.edgeDescription || this.options.locales.en.edgeDescription), this._bindElementEvents(this.closeDiv, si(r83 = this.toggleEditMode).call(r83, this));
                    }
                    this._temporaryBindUI("onTouch", si(t18 = this._handleConnect).call(t18, this)), this._temporaryBindUI("onDragEnd", si(e43 = this._finishConnect).call(e43, this)), this._temporaryBindUI("onDrag", si(i86 = this._dragControlNode).call(i86, this)), this._temporaryBindUI("onRelease", si(o100 = this._finishConnect).call(o100, this)), this._temporaryBindUI("onDragStart", si(n128 = this._dragStartEdge).call(n128, this)), this._temporaryBindUI("onHold", function() {
                    });
                }
            },
            {
                key: "editEdgeMode",
                value: function() {
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "editEdge", "object" !== zh(this.options.editEdge) || "function" != typeof this.options.editEdge.editWithoutDrag || (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], (void 0) === this.edgeBeingEditedId)) {
                        if (!0 === this.guiEnabled) {
                            var t18, e43 = this.options.locales[this.options.locale];
                            this.manipulationDOM = {
                            }, this._createBackButton(e43), this._createSeperator(), this._createDescription(e43.editEdgeDescription || this.options.locales.en.editEdgeDescription), this._bindElementEvents(this.closeDiv, si(t18 = this.toggleEditMode).call(t18, this));
                        }
                        if (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], (void 0) !== this.edgeBeingEditedId) {
                            var i86, o100, n128, r84, s79 = this.body.edges[this.edgeBeingEditedId], a68 = this._getNewTargetNode(s79.from.x, s79.from.y), h47 = this._getNewTargetNode(s79.to.x, s79.to.y);
                            this.temporaryIds.nodes.push(a68.id), this.temporaryIds.nodes.push(h47.id), this.body.nodes[a68.id] = a68, this.body.nodeIndices.push(a68.id), this.body.nodes[h47.id] = h47, this.body.nodeIndices.push(h47.id), this._temporaryBindUI("onTouch", si(i86 = this._controlNodeTouch).call(i86, this)), this._temporaryBindUI("onTap", function() {
                            }), this._temporaryBindUI("onHold", function() {
                            }), this._temporaryBindUI("onDragStart", si(o100 = this._controlNodeDragStart).call(o100, this)), this._temporaryBindUI("onDrag", si(n128 = this._controlNodeDrag).call(n128, this)), this._temporaryBindUI("onDragEnd", si(r84 = this._controlNodeDragEnd).call(r84, this)), this._temporaryBindUI("onMouseMove", function() {
                            }), this._temporaryBindEvent("beforeDrawing", function(t19) {
                                var e44 = s79.edgeType.findBorderPositions(t19);
                                !1 === a68.selected && (a68.x = e44.from.x, a68.y = e44.from.y), !1 === h47.selected && (h47.x = e44.to.x, h47.y = e44.to.y);
                            }), this.body.emitter.emit("_redraw");
                        } else this.showManipulatorToolbar();
                    } else {
                        var d39 = this.body.edges[this.edgeBeingEditedId];
                        this._performEditEdge(d39.from.id, d39.to.id);
                    }
                }
            },
            {
                key: "deleteSelected",
                value: function() {
                    var t19 = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "delete";
                    var e44 = this.selectionHandler.getSelectedNodeIds(), i87 = this.selectionHandler.getSelectedEdgeIds(), o101 = void 0;
                    if (e44.length > 0) {
                        for(var n129 = 0; n129 < e44.length; n129++)if (!0 === this.body.nodes[e44[n129]].isCluster) return void alert(this.options.locales[this.options.locale].deleteClusterError || this.options.locales.en.deleteClusterError);
                        "function" == typeof this.options.deleteNode && (o101 = this.options.deleteNode);
                    } else i87.length > 0 && "function" == typeof this.options.deleteEdge && (o101 = this.options.deleteEdge);
                    if ("function" == typeof o101) {
                        var r85 = {
                            nodes: e44,
                            edges: i87
                        };
                        if (2 !== o101.length) throw new Error("The function for delete does not support two arguments (data, callback)");
                        o101(r85, function(e45) {
                            null != e45 && "delete" === t19.inMode ? (t19.body.data.edges.getDataSet().remove(e45.edges), t19.body.data.nodes.getDataSet().remove(e45.nodes), t19.body.emitter.emit("startSimulation"), t19.showManipulatorToolbar()) : (t19.body.emitter.emit("startSimulation"), t19.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().remove(i87), this.body.data.nodes.getDataSet().remove(e44), this.body.emitter.emit("startSimulation"), this.showManipulatorToolbar();
                }
            },
            {
                key: "_setup",
                value: function() {
                    !0 === this.options.enabled ? (this.guiEnabled = !0, this._createWrappers(), !1 === this.editMode ? this._createEditButton() : this.showManipulatorToolbar()) : (this._removeManipulationDOM(), this.guiEnabled = !1);
                }
            },
            {
                key: "_createWrappers",
                value: function() {
                    var t19, e44;
                    ((void 0) === this.manipulationDiv && (this.manipulationDiv = document.createElement("div"), this.manipulationDiv.className = "vis-manipulation", !0 === this.editMode ? this.manipulationDiv.style.display = "block" : this.manipulationDiv.style.display = "none", this.canvas.frame.appendChild(this.manipulationDiv)), (void 0) === this.editModeDiv && (this.editModeDiv = document.createElement("div"), this.editModeDiv.className = "vis-edit-mode", !0 === this.editMode ? this.editModeDiv.style.display = "none" : this.editModeDiv.style.display = "block", this.canvas.frame.appendChild(this.editModeDiv)), (void 0) === this.closeDiv) && (this.closeDiv = document.createElement("button"), this.closeDiv.className = "vis-close", this.closeDiv.setAttribute("aria-label", null !== (t19 = null === (e44 = this.options.locales[this.options.locale]) || (void 0) === e44 ? void 0 : e44.close) && (void 0) !== t19 ? t19 : this.options.locales.en.close), this.closeDiv.style.display = this.manipulationDiv.style.display, this.canvas.frame.appendChild(this.closeDiv));
                }
            },
            {
                key: "_getNewTargetNode",
                value: function(t19, e44) {
                    var i87 = sf({
                    }, this.options.controlNodeStyle);
                    i87.id = "targetNode" + Cm(), i87.hidden = !1, i87.physics = !1, i87.x = t19, i87.y = e44;
                    var o101 = this.body.functions.createNode(i87);
                    return o101.shape.boundingBox = {
                        left: t19,
                        right: t19,
                        top: e44,
                        bottom: e44
                    }, o101;
                }
            },
            {
                key: "_createEditButton",
                value: function() {
                    var t19;
                    this._clean(), this.manipulationDOM = {
                    }, Qu(this.editModeDiv);
                    var e44 = this.options.locales[this.options.locale], i87 = this._createButton("editMode", "vis-edit vis-edit-mode", e44.edit || this.options.locales.en.edit);
                    this.editModeDiv.appendChild(i87), this._bindElementEvents(i87, si(t19 = this.toggleEditMode).call(t19, this));
                }
            },
            {
                key: "_clean",
                value: function() {
                    this.inMode = !1, !0 === this.guiEnabled && (Qu(this.editModeDiv), Qu(this.manipulationDiv), this._cleanupDOMEventListeners()), this._cleanupTemporaryNodesAndEdges(), this._unbindTemporaryUIs(), this._unbindTemporaryEvents(), this.body.emitter.emit("restorePhysics");
                }
            },
            {
                key: "_cleanupDOMEventListeners",
                value: function() {
                    var t19, e44, i87 = Gw(Od(t19 = this._domEventListenerCleanupQueue).call(t19, 0));
                    try {
                        for(i87.s(); !(e44 = i87.n()).done;)e44.value();
                    } catch (t20) {
                        i87.e(t20);
                    } finally{
                        i87.f();
                    }
                }
            },
            {
                key: "_removeManipulationDOM",
                value: function() {
                    this._clean(), Qu(this.manipulationDiv), Qu(this.editModeDiv), Qu(this.closeDiv), this.manipulationDiv && this.canvas.frame.removeChild(this.manipulationDiv), this.editModeDiv && this.canvas.frame.removeChild(this.editModeDiv), this.closeDiv && this.canvas.frame.removeChild(this.closeDiv), this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0;
                }
            },
            {
                key: "_createSeperator",
                value: function() {
                    var t19 = arguments.length > 0 && (void 0) !== arguments[0] ? arguments[0] : 1;
                    this.manipulationDOM["seperatorLineDiv" + t19] = document.createElement("div"), this.manipulationDOM["seperatorLineDiv" + t19].className = "vis-separator-line", this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + t19]);
                }
            },
            {
                key: "_createAddNodeButton",
                value: function(t19) {
                    var e44, i87 = this._createButton("addNode", "vis-add", t19.addNode || this.options.locales.en.addNode);
                    this.manipulationDiv.appendChild(i87), this._bindElementEvents(i87, si(e44 = this.addNodeMode).call(e44, this));
                }
            },
            {
                key: "_createAddEdgeButton",
                value: function(t19) {
                    var e44, i87 = this._createButton("addEdge", "vis-connect", t19.addEdge || this.options.locales.en.addEdge);
                    this.manipulationDiv.appendChild(i87), this._bindElementEvents(i87, si(e44 = this.addEdgeMode).call(e44, this));
                }
            },
            {
                key: "_createEditNodeButton",
                value: function(t19) {
                    var e44, i87 = this._createButton("editNode", "vis-edit", t19.editNode || this.options.locales.en.editNode);
                    this.manipulationDiv.appendChild(i87), this._bindElementEvents(i87, si(e44 = this.editNode).call(e44, this));
                }
            },
            {
                key: "_createEditEdgeButton",
                value: function(t19) {
                    var e44, i87 = this._createButton("editEdge", "vis-edit", t19.editEdge || this.options.locales.en.editEdge);
                    this.manipulationDiv.appendChild(i87), this._bindElementEvents(i87, si(e44 = this.editEdgeMode).call(e44, this));
                }
            },
            {
                key: "_createDeleteButton",
                value: function(t19) {
                    var e44, i87;
                    i87 = this.options.rtl ? "vis-delete-rtl" : "vis-delete";
                    var o101 = this._createButton("delete", i87, t19.del || this.options.locales.en.del);
                    this.manipulationDiv.appendChild(o101), this._bindElementEvents(o101, si(e44 = this.deleteSelected).call(e44, this));
                }
            },
            {
                key: "_createBackButton",
                value: function(t19) {
                    var e44, i87 = this._createButton("back", "vis-back", t19.back || this.options.locales.en.back);
                    this.manipulationDiv.appendChild(i87), this._bindElementEvents(i87, si(e44 = this.showManipulatorToolbar).call(e44, this));
                }
            },
            {
                key: "_createButton",
                value: function(t19, e44, i87) {
                    var o101 = arguments.length > 3 && (void 0) !== arguments[3] ? arguments[3] : "vis-label";
                    return this.manipulationDOM[t19 + "Div"] = document.createElement("button"), this.manipulationDOM[t19 + "Div"].className = "vis-button " + e44, this.manipulationDOM[t19 + "Label"] = document.createElement("div"), this.manipulationDOM[t19 + "Label"].className = o101, this.manipulationDOM[t19 + "Label"].innerText = i87, this.manipulationDOM[t19 + "Div"].appendChild(this.manipulationDOM[t19 + "Label"]), this.manipulationDOM[t19 + "Div"];
                }
            },
            {
                key: "_createDescription",
                value: function(t19) {
                    this.manipulationDOM.descriptionLabel = document.createElement("div"), this.manipulationDOM.descriptionLabel.className = "vis-none", this.manipulationDOM.descriptionLabel.innerText = t19, this.manipulationDiv.appendChild(this.manipulationDOM.descriptionLabel);
                }
            },
            {
                key: "_temporaryBindEvent",
                value: function(t19, e44) {
                    this.temporaryEventFunctions.push({
                        event: t19,
                        boundFunction: e44
                    }), this.body.emitter.on(t19, e44);
                }
            },
            {
                key: "_temporaryBindUI",
                value: function(t19, e44) {
                    if ((void 0) === this.body.eventListeners[t19]) throw new Error("This UI function does not exist. Typo? You tried: " + t19 + " possible are: " + Wl(Gh(this.body.eventListeners)));
                    this.temporaryUIFunctions[t19] = this.body.eventListeners[t19], this.body.eventListeners[t19] = e44;
                }
            },
            {
                key: "_unbindTemporaryUIs",
                value: function() {
                    for(var t19 in this.temporaryUIFunctions)Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, t19) && (this.body.eventListeners[t19] = this.temporaryUIFunctions[t19], delete this.temporaryUIFunctions[t19]);
                    this.temporaryUIFunctions = {
                    };
                }
            },
            {
                key: "_unbindTemporaryEvents",
                value: function() {
                    for(var t19 = 0; t19 < this.temporaryEventFunctions.length; t19++){
                        var e44 = this.temporaryEventFunctions[t19].event, i87 = this.temporaryEventFunctions[t19].boundFunction;
                        this.body.emitter.off(e44, i87);
                    }
                    this.temporaryEventFunctions = [];
                }
            },
            {
                key: "_bindElementEvents",
                value: function(t19, e45) {
                    var i88 = new If(t19, {
                    });
                    Fm(i88, e45), this._domEventListenerCleanupQueue.push(function() {
                        i88.destroy();
                    });
                    var o101 = function(t20) {
                        var i89 = t20.keyCode, o102 = t20.key;
                        "Enter" !== o102 && " " !== o102 && 13 !== i89 && 32 !== i89 || e45();
                    };
                    t19.addEventListener("keyup", o101, !1), this._domEventListenerCleanupQueue.push(function() {
                        t19.removeEventListener("keyup", o101, !1);
                    });
                }
            },
            {
                key: "_cleanupTemporaryNodesAndEdges",
                value: function() {
                    for(var t19 = 0; t19 < this.temporaryIds.edges.length; t19++){
                        var e45;
                        this.body.edges[this.temporaryIds.edges[t19]].disconnect(), delete this.body.edges[this.temporaryIds.edges[t19]];
                        var i88, o101 = Cl(e45 = this.body.edgeIndices).call(e45, this.temporaryIds.edges[t19]);
                        if (-1 !== o101) Od(i88 = this.body.edgeIndices).call(i88, o101, 1);
                    }
                    for(var n130 = 0; n130 < this.temporaryIds.nodes.length; n130++){
                        var r86;
                        delete this.body.nodes[this.temporaryIds.nodes[n130]];
                        var s80, a69 = Cl(r86 = this.body.nodeIndices).call(r86, this.temporaryIds.nodes[n130]);
                        if (-1 !== a69) Od(s80 = this.body.nodeIndices).call(s80, a69, 1);
                    }
                    this.temporaryIds = {
                        nodes: [],
                        edges: []
                    };
                }
            },
            {
                key: "_controlNodeTouch",
                value: function(t19) {
                    this.selectionHandler.unselectAll(), this.lastTouch = this.body.functions.getPointer(t19.center), this.lastTouch.translation = Ke({
                    }, this.body.view.translation);
                }
            },
            {
                key: "_controlNodeDragStart",
                value: function() {
                    var t19 = this.lastTouch, e46 = this.selectionHandler._pointerToPositionObject(t19), i89 = this.body.nodes[this.temporaryIds.nodes[0]], o102 = this.body.nodes[this.temporaryIds.nodes[1]], n130 = this.body.edges[this.edgeBeingEditedId];
                    this.selectedControlNode = void 0;
                    var r87 = i89.isOverlappingWith(e46), s81 = o102.isOverlappingWith(e46);
                    !0 === r87 ? (this.selectedControlNode = i89, n130.edgeType.from = i89) : !0 === s81 && (this.selectedControlNode = o102, n130.edgeType.to = o102), (void 0) !== this.selectedControlNode && this.selectionHandler.selectObject(this.selectedControlNode), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDrag",
                value: function(t19) {
                    this.body.emitter.emit("disablePhysics");
                    var e46 = this.body.functions.getPointer(t19.center), i89 = this.canvas.DOMtoCanvas(e46);
                    (void 0) !== this.selectedControlNode ? (this.selectedControlNode.x = i89.x, this.selectedControlNode.y = i89.y) : this.interactionHandler.onDrag(t19), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDragEnd",
                value: function(t19) {
                    var e46 = this.body.functions.getPointer(t19.center), i89 = this.selectionHandler._pointerToPositionObject(e46), o102 = this.body.edges[this.edgeBeingEditedId];
                    if ((void 0) !== this.selectedControlNode) {
                        this.selectionHandler.unselectAll();
                        for(var n130 = this.selectionHandler._getAllNodesOverlappingWith(i89), r87 = void 0, s81 = n130.length - 1; s81 >= 0; s81--)if (n130[s81] !== this.selectedControlNode.id) {
                            r87 = this.body.nodes[n130[s81]];
                            break;
                        }
                        if ((void 0) !== r87 && (void 0) !== this.selectedControlNode) {
                            if (!0 === r87.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var a70 = this.body.nodes[this.temporaryIds.nodes[0]];
                                this.selectedControlNode.id === a70.id ? this._performEditEdge(r87.id, o102.to.id) : this._performEditEdge(o102.from.id, r87.id);
                            }
                        } else o102.updateEdgeType(), this.body.emitter.emit("restorePhysics");
                        this.body.emitter.emit("_redraw");
                    }
                }
            },
            {
                key: "_handleConnect",
                value: function(t19) {
                    if ((new Date).valueOf() - this.touchTime > 100) {
                        this.lastTouch = this.body.functions.getPointer(t19.center), this.lastTouch.translation = Ke({
                        }, this.body.view.translation), this.interactionHandler.drag.pointer = this.lastTouch, this.interactionHandler.drag.translation = this.lastTouch.translation;
                        var e46 = this.lastTouch, i89 = this.selectionHandler.getNodeAt(e46);
                        if ((void 0) !== i89) {
                            if (!0 === i89.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var o102 = this._getNewTargetNode(i89.x, i89.y);
                                this.body.nodes[o102.id] = o102, this.body.nodeIndices.push(o102.id);
                                var n131 = this.body.functions.createEdge({
                                    id: "connectionEdge" + Cm(),
                                    from: i89.id,
                                    to: o102.id,
                                    physics: !1,
                                    smooth: {
                                        enabled: !0,
                                        type: "continuous",
                                        roundness: 0.5
                                    }
                                });
                                this.body.edges[n131.id] = n131, this.body.edgeIndices.push(n131.id), this.temporaryIds.nodes.push(o102.id), this.temporaryIds.edges.push(n131.id);
                            }
                        }
                        this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "_dragControlNode",
                value: function(t19) {
                    var e47 = this.body.functions.getPointer(t19.center), i90 = this.selectionHandler._pointerToPositionObject(e47), o103 = void 0;
                    (void 0) !== this.temporaryIds.edges[0] && (o103 = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n132 = this.selectionHandler._getAllNodesOverlappingWith(i90), r88 = void 0, s82 = n132.length - 1; s82 >= 0; s82--){
                        var a71;
                        if (-1 === Cl(a71 = this.temporaryIds.nodes).call(a71, n132[s82])) {
                            r88 = this.body.nodes[n132[s82]];
                            break;
                        }
                    }
                    if (t19.controlEdge = {
                        from: o103,
                        to: r88 ? r88.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragging", t19, e47), (void 0) !== this.temporaryIds.nodes[0]) {
                        var h48 = this.body.nodes[this.temporaryIds.nodes[0]];
                        h48.x = this.canvas._XconvertDOMtoCanvas(e47.x), h48.y = this.canvas._YconvertDOMtoCanvas(e47.y), this.body.emitter.emit("_redraw");
                    } else this.interactionHandler.onDrag(t19);
                }
            },
            {
                key: "_finishConnect",
                value: function(t19) {
                    var e47 = this.body.functions.getPointer(t19.center), i90 = this.selectionHandler._pointerToPositionObject(e47), o103 = void 0;
                    (void 0) !== this.temporaryIds.edges[0] && (o103 = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n132 = this.selectionHandler._getAllNodesOverlappingWith(i90), r88 = void 0, s82 = n132.length - 1; s82 >= 0; s82--){
                        var a72;
                        if (-1 === Cl(a72 = this.temporaryIds.nodes).call(a72, n132[s82])) {
                            r88 = this.body.nodes[n132[s82]];
                            break;
                        }
                    }
                    this._cleanupTemporaryNodesAndEdges(), (void 0) !== r88 && (!0 === r88.isCluster ? alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError) : (void 0) !== this.body.nodes[o103] && (void 0) !== this.body.nodes[r88.id] && this._performAddEdge(o103, r88.id)), t19.controlEdge = {
                        from: o103,
                        to: r88 ? r88.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragEnd", t19, e47), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_dragStartEdge",
                value: function(t19) {
                    var e47 = this.lastTouch;
                    this.selectionHandler.generateClickEvent("dragStart", t19, e47, void 0, !0);
                }
            },
            {
                key: "_performAddNode",
                value: function(t19) {
                    var e47 = this, i90 = {
                        id: Cm(),
                        x: t19.pointer.canvas.x,
                        y: t19.pointer.canvas.y,
                        label: "new"
                    };
                    if ("function" == typeof this.options.addNode) {
                        if (2 !== this.options.addNode.length) throw this.showManipulatorToolbar(), new Error("The function for add does not support two arguments (data,callback)");
                        this.options.addNode(i90, function(t20) {
                            null != t20 && "addNode" === e47.inMode && e47.body.data.nodes.getDataSet().add(t20), e47.showManipulatorToolbar();
                        });
                    } else this.body.data.nodes.getDataSet().add(i90), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performAddEdge",
                value: function(t19, e47) {
                    var i90 = this, o103 = {
                        from: t19,
                        to: e47
                    };
                    if ("function" == typeof this.options.addEdge) {
                        if (2 !== this.options.addEdge.length) throw new Error("The function for connect does not support two arguments (data,callback)");
                        this.options.addEdge(o103, function(t20) {
                            null != t20 && "addEdge" === i90.inMode && (i90.body.data.edges.getDataSet().add(t20), i90.selectionHandler.unselectAll(), i90.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().add(o103), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performEditEdge",
                value: function(t19, e47) {
                    var i90 = this, o103 = {
                        id: this.edgeBeingEditedId,
                        from: t19,
                        to: e47,
                        label: this.body.data.edges.get(this.edgeBeingEditedId).label
                    }, n132 = this.options.editEdge;
                    if ("object" === zh(n132) && (n132 = n132.editWithoutDrag), "function" == typeof n132) {
                        if (2 !== n132.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                        n132(o103, function(t20) {
                            null == t20 || "editEdge" !== i90.inMode ? (i90.body.edges[o103.id].updateEdgeType(), i90.body.emitter.emit("_redraw"), i90.showManipulatorToolbar()) : (i90.body.data.edges.getDataSet().update(t20), i90.selectionHandler.unselectAll(), i90.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().update(o103), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            }
        ]), t12;
    }(), Zw = "string", Qw = "boolean", Jw = "number", tk = "array", ek = "object", ik = [
        "arrow",
        "bar",
        "box",
        "circle",
        "crow",
        "curve",
        "diamond",
        "image",
        "inv_curve",
        "inv_triangle",
        "triangle",
        "vee"
    ], ok = {
        borderWidth: {
            number: Jw
        },
        borderWidthSelected: {
            number: Jw,
            undefined: "undefined"
        },
        brokenImage: {
            string: Zw,
            undefined: "undefined"
        },
        chosen: {
            label: {
                boolean: Qw,
                function: "function"
            },
            node: {
                boolean: Qw,
                function: "function"
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        color: {
            border: {
                string: Zw
            },
            background: {
                string: Zw
            },
            highlight: {
                border: {
                    string: Zw
                },
                background: {
                    string: Zw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            hover: {
                border: {
                    string: Zw
                },
                background: {
                    string: Zw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            __type__: {
                object: ek,
                string: Zw
            }
        },
        opacity: {
            number: Jw,
            undefined: "undefined"
        },
        fixed: {
            x: {
                boolean: Qw
            },
            y: {
                boolean: Qw
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        font: {
            align: {
                string: Zw
            },
            color: {
                string: Zw
            },
            size: {
                number: Jw
            },
            face: {
                string: Zw
            },
            background: {
                string: Zw
            },
            strokeWidth: {
                number: Jw
            },
            strokeColor: {
                string: Zw
            },
            vadjust: {
                number: Jw
            },
            multi: {
                boolean: Qw,
                string: Zw
            },
            bold: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            boldital: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            ital: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            mono: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            __type__: {
                object: ek,
                string: Zw
            }
        },
        group: {
            string: Zw,
            number: Jw,
            undefined: "undefined"
        },
        heightConstraint: {
            minimum: {
                number: Jw
            },
            valign: {
                string: Zw
            },
            __type__: {
                object: ek,
                boolean: Qw,
                number: Jw
            }
        },
        hidden: {
            boolean: Qw
        },
        icon: {
            face: {
                string: Zw
            },
            code: {
                string: Zw
            },
            size: {
                number: Jw
            },
            color: {
                string: Zw
            },
            weight: {
                string: Zw,
                number: Jw
            },
            __type__: {
                object: ek
            }
        },
        id: {
            string: Zw,
            number: Jw
        },
        image: {
            selected: {
                string: Zw,
                undefined: "undefined"
            },
            unselected: {
                string: Zw,
                undefined: "undefined"
            },
            __type__: {
                object: ek,
                string: Zw
            }
        },
        imagePadding: {
            top: {
                number: Jw
            },
            right: {
                number: Jw
            },
            bottom: {
                number: Jw
            },
            left: {
                number: Jw
            },
            __type__: {
                object: ek,
                number: Jw
            }
        },
        label: {
            string: Zw,
            undefined: "undefined"
        },
        labelHighlightBold: {
            boolean: Qw
        },
        level: {
            number: Jw,
            undefined: "undefined"
        },
        margin: {
            top: {
                number: Jw
            },
            right: {
                number: Jw
            },
            bottom: {
                number: Jw
            },
            left: {
                number: Jw
            },
            __type__: {
                object: ek,
                number: Jw
            }
        },
        mass: {
            number: Jw
        },
        physics: {
            boolean: Qw
        },
        scaling: {
            min: {
                number: Jw
            },
            max: {
                number: Jw
            },
            label: {
                enabled: {
                    boolean: Qw
                },
                min: {
                    number: Jw
                },
                max: {
                    number: Jw
                },
                maxVisible: {
                    number: Jw
                },
                drawThreshold: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            customScalingFunction: {
                function: "function"
            },
            __type__: {
                object: ek
            }
        },
        shadow: {
            enabled: {
                boolean: Qw
            },
            color: {
                string: Zw
            },
            size: {
                number: Jw
            },
            x: {
                number: Jw
            },
            y: {
                number: Jw
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        shape: {
            string: [
                "custom",
                "ellipse",
                "circle",
                "database",
                "box",
                "text",
                "image",
                "circularImage",
                "diamond",
                "dot",
                "star",
                "triangle",
                "triangleDown",
                "square",
                "icon",
                "hexagon"
            ]
        },
        ctxRenderer: {
            function: "function"
        },
        shapeProperties: {
            borderDashes: {
                boolean: Qw,
                array: tk
            },
            borderRadius: {
                number: Jw
            },
            interpolation: {
                boolean: Qw
            },
            useImageSize: {
                boolean: Qw
            },
            useBorderWithImage: {
                boolean: Qw
            },
            coordinateOrigin: {
                string: [
                    "center",
                    "top-left"
                ]
            },
            __type__: {
                object: ek
            }
        },
        size: {
            number: Jw
        },
        title: {
            string: Zw,
            dom: "dom",
            undefined: "undefined"
        },
        value: {
            number: Jw,
            undefined: "undefined"
        },
        widthConstraint: {
            minimum: {
                number: Jw
            },
            maximum: {
                number: Jw
            },
            __type__: {
                object: ek,
                boolean: Qw,
                number: Jw
            }
        },
        x: {
            number: Jw
        },
        y: {
            number: Jw
        },
        __type__: {
            object: ek
        }
    }, nk = {
        configure: {
            enabled: {
                boolean: Qw
            },
            filter: {
                boolean: Qw,
                string: Zw,
                array: tk,
                function: "function"
            },
            container: {
                dom: "dom"
            },
            showButton: {
                boolean: Qw
            },
            __type__: {
                object: ek,
                boolean: Qw,
                string: Zw,
                array: tk,
                function: "function"
            }
        },
        edges: {
            arrows: {
                to: {
                    enabled: {
                        boolean: Qw
                    },
                    scaleFactor: {
                        number: Jw
                    },
                    type: {
                        string: ik
                    },
                    imageHeight: {
                        number: Jw
                    },
                    imageWidth: {
                        number: Jw
                    },
                    src: {
                        string: Zw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                middle: {
                    enabled: {
                        boolean: Qw
                    },
                    scaleFactor: {
                        number: Jw
                    },
                    type: {
                        string: ik
                    },
                    imageWidth: {
                        number: Jw
                    },
                    imageHeight: {
                        number: Jw
                    },
                    src: {
                        string: Zw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                from: {
                    enabled: {
                        boolean: Qw
                    },
                    scaleFactor: {
                        number: Jw
                    },
                    type: {
                        string: ik
                    },
                    imageWidth: {
                        number: Jw
                    },
                    imageHeight: {
                        number: Jw
                    },
                    src: {
                        string: Zw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                __type__: {
                    string: [
                        "from",
                        "to",
                        "middle"
                    ],
                    object: ek
                }
            },
            endPointOffset: {
                from: {
                    number: Jw
                },
                to: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    number: Jw
                }
            },
            arrowStrikethrough: {
                boolean: Qw
            },
            background: {
                enabled: {
                    boolean: Qw
                },
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                dashes: {
                    boolean: Qw,
                    array: tk
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            chosen: {
                label: {
                    boolean: Qw,
                    function: "function"
                },
                edge: {
                    boolean: Qw,
                    function: "function"
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            color: {
                color: {
                    string: Zw
                },
                highlight: {
                    string: Zw
                },
                hover: {
                    string: Zw
                },
                inherit: {
                    string: [
                        "from",
                        "to",
                        "both"
                    ],
                    boolean: Qw
                },
                opacity: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            dashes: {
                boolean: Qw,
                array: tk
            },
            font: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                background: {
                    string: Zw
                },
                strokeWidth: {
                    number: Jw
                },
                strokeColor: {
                    string: Zw
                },
                align: {
                    string: [
                        "horizontal",
                        "top",
                        "middle",
                        "bottom"
                    ]
                },
                vadjust: {
                    number: Jw
                },
                multi: {
                    boolean: Qw,
                    string: Zw
                },
                bold: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                boldital: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                ital: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                mono: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            hidden: {
                boolean: Qw
            },
            hoverWidth: {
                function: "function",
                number: Jw
            },
            label: {
                string: Zw,
                undefined: "undefined"
            },
            labelHighlightBold: {
                boolean: Qw
            },
            length: {
                number: Jw,
                undefined: "undefined"
            },
            physics: {
                boolean: Qw
            },
            scaling: {
                min: {
                    number: Jw
                },
                max: {
                    number: Jw
                },
                label: {
                    enabled: {
                        boolean: Qw
                    },
                    min: {
                        number: Jw
                    },
                    max: {
                        number: Jw
                    },
                    maxVisible: {
                        number: Jw
                    },
                    drawThreshold: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                customScalingFunction: {
                    function: "function"
                },
                __type__: {
                    object: ek
                }
            },
            selectionWidth: {
                function: "function",
                number: Jw
            },
            selfReferenceSize: {
                number: Jw
            },
            selfReference: {
                size: {
                    number: Jw
                },
                angle: {
                    number: Jw
                },
                renderBehindTheNode: {
                    boolean: Qw
                },
                __type__: {
                    object: ek
                }
            },
            shadow: {
                enabled: {
                    boolean: Qw
                },
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                x: {
                    number: Jw
                },
                y: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            smooth: {
                enabled: {
                    boolean: Qw
                },
                type: {
                    string: [
                        "dynamic",
                        "continuous",
                        "discrete",
                        "diagonalCross",
                        "straightCross",
                        "horizontal",
                        "vertical",
                        "curvedCW",
                        "curvedCCW",
                        "cubicBezier"
                    ]
                },
                roundness: {
                    number: Jw
                },
                forceDirection: {
                    string: [
                        "horizontal",
                        "vertical",
                        "none"
                    ],
                    boolean: Qw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            title: {
                string: Zw,
                undefined: "undefined"
            },
            width: {
                number: Jw
            },
            widthConstraint: {
                maximum: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    boolean: Qw,
                    number: Jw
                }
            },
            value: {
                number: Jw,
                undefined: "undefined"
            },
            __type__: {
                object: ek
            }
        },
        groups: {
            useDefaultGroups: {
                boolean: Qw
            },
            __any__: ok,
            __type__: {
                object: ek
            }
        },
        interaction: {
            dragNodes: {
                boolean: Qw
            },
            dragView: {
                boolean: Qw
            },
            hideEdgesOnDrag: {
                boolean: Qw
            },
            hideEdgesOnZoom: {
                boolean: Qw
            },
            hideNodesOnDrag: {
                boolean: Qw
            },
            hover: {
                boolean: Qw
            },
            keyboard: {
                enabled: {
                    boolean: Qw
                },
                speed: {
                    x: {
                        number: Jw
                    },
                    y: {
                        number: Jw
                    },
                    zoom: {
                        number: Jw
                    },
                    __type__: {
                        object: ek
                    }
                },
                bindToWindow: {
                    boolean: Qw
                },
                autoFocus: {
                    boolean: Qw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            multiselect: {
                boolean: Qw
            },
            navigationButtons: {
                boolean: Qw
            },
            selectable: {
                boolean: Qw
            },
            selectConnectedEdges: {
                boolean: Qw
            },
            hoverConnectedEdges: {
                boolean: Qw
            },
            tooltipDelay: {
                number: Jw
            },
            zoomView: {
                boolean: Qw
            },
            zoomSpeed: {
                number: Jw
            },
            __type__: {
                object: ek
            }
        },
        layout: {
            randomSeed: {
                undefined: "undefined",
                number: Jw,
                string: Zw
            },
            improvedLayout: {
                boolean: Qw
            },
            clusterThreshold: {
                number: Jw
            },
            hierarchical: {
                enabled: {
                    boolean: Qw
                },
                levelSeparation: {
                    number: Jw
                },
                nodeSpacing: {
                    number: Jw
                },
                treeSpacing: {
                    number: Jw
                },
                blockShifting: {
                    boolean: Qw
                },
                edgeMinimization: {
                    boolean: Qw
                },
                parentCentralization: {
                    boolean: Qw
                },
                direction: {
                    string: [
                        "UD",
                        "DU",
                        "LR",
                        "RL"
                    ]
                },
                sortMethod: {
                    string: [
                        "hubsize",
                        "directed"
                    ]
                },
                shakeTowards: {
                    string: [
                        "leaves",
                        "roots"
                    ]
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            __type__: {
                object: ek
            }
        },
        manipulation: {
            enabled: {
                boolean: Qw
            },
            initiallyActive: {
                boolean: Qw
            },
            addNode: {
                boolean: Qw,
                function: "function"
            },
            addEdge: {
                boolean: Qw,
                function: "function"
            },
            editNode: {
                function: "function"
            },
            editEdge: {
                editWithoutDrag: {
                    function: "function"
                },
                __type__: {
                    object: ek,
                    boolean: Qw,
                    function: "function"
                }
            },
            deleteNode: {
                boolean: Qw,
                function: "function"
            },
            deleteEdge: {
                boolean: Qw,
                function: "function"
            },
            controlNodeStyle: ok,
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        nodes: ok,
        physics: {
            enabled: {
                boolean: Qw
            },
            barnesHut: {
                theta: {
                    number: Jw
                },
                gravitationalConstant: {
                    number: Jw
                },
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                avoidOverlap: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            forceAtlas2Based: {
                theta: {
                    number: Jw
                },
                gravitationalConstant: {
                    number: Jw
                },
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                avoidOverlap: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            repulsion: {
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                nodeDistance: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            hierarchicalRepulsion: {
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                nodeDistance: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                avoidOverlap: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            maxVelocity: {
                number: Jw
            },
            minVelocity: {
                number: Jw
            },
            solver: {
                string: [
                    "barnesHut",
                    "repulsion",
                    "hierarchicalRepulsion",
                    "forceAtlas2Based"
                ]
            },
            stabilization: {
                enabled: {
                    boolean: Qw
                },
                iterations: {
                    number: Jw
                },
                updateInterval: {
                    number: Jw
                },
                onlyDynamicEdges: {
                    boolean: Qw
                },
                fit: {
                    boolean: Qw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            timestep: {
                number: Jw
            },
            adaptiveTimestep: {
                boolean: Qw
            },
            wind: {
                x: {
                    number: Jw
                },
                y: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        autoResize: {
            boolean: Qw
        },
        clickToUse: {
            boolean: Qw
        },
        locale: {
            string: Zw
        },
        locales: {
            __any__: {
                any: "any"
            },
            __type__: {
                object: ek
            }
        },
        height: {
            string: Zw
        },
        width: {
            string: Zw
        },
        __type__: {
            object: ek
        }
    }, rk = {
        nodes: {
            borderWidth: [
                1,
                0,
                10,
                1
            ],
            borderWidthSelected: [
                2,
                0,
                10,
                1
            ],
            color: {
                border: [
                    "color",
                    "#2B7CE9"
                ],
                background: [
                    "color",
                    "#97C2FC"
                ],
                highlight: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                },
                hover: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                }
            },
            opacity: [
                0,
                0,
                1,
                0.1
            ],
            fixed: {
                x: !1,
                y: !1
            },
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    0,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ]
            },
            hidden: !1,
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    10,
                    0,
                    200,
                    1
                ],
                max: [
                    30,
                    0,
                    200,
                    1
                ],
                label: {
                    enabled: !1,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            shape: [
                "ellipse",
                "box",
                "circle",
                "database",
                "diamond",
                "dot",
                "square",
                "star",
                "text",
                "triangle",
                "triangleDown",
                "hexagon"
            ],
            shapeProperties: {
                borderDashes: !1,
                borderRadius: [
                    6,
                    0,
                    20,
                    1
                ],
                interpolation: !0,
                useImageSize: !1
            },
            size: [
                25,
                0,
                200,
                1
            ]
        },
        edges: {
            arrows: {
                to: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        0.05
                    ],
                    type: "arrow"
                },
                middle: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        0.05
                    ],
                    type: "arrow"
                },
                from: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        0.05
                    ],
                    type: "arrow"
                }
            },
            endPointOffset: {
                from: [
                    0,
                    -10,
                    10,
                    1
                ],
                to: [
                    0,
                    -10,
                    10,
                    1
                ]
            },
            arrowStrikethrough: !0,
            color: {
                color: [
                    "color",
                    "#848484"
                ],
                highlight: [
                    "color",
                    "#848484"
                ],
                hover: [
                    "color",
                    "#848484"
                ],
                inherit: [
                    "from",
                    "to",
                    "both",
                    !0,
                    !1
                ],
                opacity: [
                    1,
                    0,
                    1,
                    0.05
                ]
            },
            dashes: !1,
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    2,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ],
                align: [
                    "horizontal",
                    "top",
                    "middle",
                    "bottom"
                ]
            },
            hidden: !1,
            hoverWidth: [
                1.5,
                0,
                5,
                0.1
            ],
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    1,
                    0,
                    100,
                    1
                ],
                max: [
                    15,
                    0,
                    100,
                    1
                ],
                label: {
                    enabled: !0,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            selectionWidth: [
                1.5,
                0,
                5,
                0.1
            ],
            selfReferenceSize: [
                20,
                0,
                200,
                1
            ],
            selfReference: {
                size: [
                    20,
                    0,
                    200,
                    1
                ],
                angle: [
                    Math.PI / 2,
                    -6 * Math.PI,
                    6 * Math.PI,
                    Math.PI / 8
                ],
                renderBehindTheNode: !0
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            smooth: {
                enabled: !0,
                type: [
                    "dynamic",
                    "continuous",
                    "discrete",
                    "diagonalCross",
                    "straightCross",
                    "horizontal",
                    "vertical",
                    "curvedCW",
                    "curvedCCW",
                    "cubicBezier"
                ],
                forceDirection: [
                    "horizontal",
                    "vertical",
                    "none"
                ],
                roundness: [
                    0.5,
                    0,
                    1,
                    0.05
                ]
            },
            width: [
                1,
                0,
                30,
                1
            ]
        },
        layout: {
            hierarchical: {
                enabled: !1,
                levelSeparation: [
                    150,
                    20,
                    500,
                    5
                ],
                nodeSpacing: [
                    100,
                    20,
                    500,
                    5
                ],
                treeSpacing: [
                    200,
                    20,
                    500,
                    5
                ],
                blockShifting: !0,
                edgeMinimization: !0,
                parentCentralization: !0,
                direction: [
                    "UD",
                    "DU",
                    "LR",
                    "RL"
                ],
                sortMethod: [
                    "hubsize",
                    "directed"
                ],
                shakeTowards: [
                    "leaves",
                    "roots"
                ]
            }
        },
        interaction: {
            dragNodes: !0,
            dragView: !0,
            hideEdgesOnDrag: !1,
            hideEdgesOnZoom: !1,
            hideNodesOnDrag: !1,
            hover: !1,
            keyboard: {
                enabled: !1,
                speed: {
                    x: [
                        10,
                        0,
                        40,
                        1
                    ],
                    y: [
                        10,
                        0,
                        40,
                        1
                    ],
                    zoom: [
                        0.02,
                        0,
                        0.1,
                        0.005
                    ]
                },
                bindToWindow: !0,
                autoFocus: !0
            },
            multiselect: !1,
            navigationButtons: !1,
            selectable: !0,
            selectConnectedEdges: !0,
            hoverConnectedEdges: !0,
            tooltipDelay: [
                300,
                0,
                1000,
                25
            ],
            zoomView: !0,
            zoomSpeed: [
                1,
                0.1,
                2,
                0.1
            ]
        },
        manipulation: {
            enabled: !1,
            initiallyActive: !1
        },
        physics: {
            enabled: !0,
            barnesHut: {
                theta: [
                    0.5,
                    0.1,
                    1,
                    0.05
                ],
                gravitationalConstant: [
                    -2000,
                    -30000,
                    0,
                    50
                ],
                centralGravity: [
                    0.3,
                    0,
                    10,
                    0.05
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.04,
                    0,
                    1.2,
                    0.005
                ],
                damping: [
                    0.09,
                    0,
                    1,
                    0.01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    0.01
                ]
            },
            forceAtlas2Based: {
                theta: [
                    0.5,
                    0.1,
                    1,
                    0.05
                ],
                gravitationalConstant: [
                    -50,
                    -500,
                    0,
                    1
                ],
                centralGravity: [
                    0.01,
                    0,
                    1,
                    0.005
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.08,
                    0,
                    1.2,
                    0.005
                ],
                damping: [
                    0.4,
                    0,
                    1,
                    0.01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    0.01
                ]
            },
            repulsion: {
                centralGravity: [
                    0.2,
                    0,
                    10,
                    0.05
                ],
                springLength: [
                    200,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.05,
                    0,
                    1.2,
                    0.005
                ],
                nodeDistance: [
                    100,
                    0,
                    500,
                    5
                ],
                damping: [
                    0.09,
                    0,
                    1,
                    0.01
                ]
            },
            hierarchicalRepulsion: {
                centralGravity: [
                    0.2,
                    0,
                    10,
                    0.05
                ],
                springLength: [
                    100,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.01,
                    0,
                    1.2,
                    0.005
                ],
                nodeDistance: [
                    120,
                    0,
                    500,
                    5
                ],
                damping: [
                    0.09,
                    0,
                    1,
                    0.01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    0.01
                ]
            },
            maxVelocity: [
                50,
                0,
                150,
                1
            ],
            minVelocity: [
                0.1,
                0.01,
                0.5,
                0.01
            ],
            solver: [
                "barnesHut",
                "forceAtlas2Based",
                "repulsion",
                "hierarchicalRepulsion"
            ],
            timestep: [
                0.5,
                0.01,
                1,
                0.01
            ],
            wind: {
                x: [
                    0,
                    -10,
                    10,
                    0.1
                ],
                y: [
                    0,
                    -10,
                    10,
                    0.1
                ]
            }
        }
    }, sk = function(t12, e47, i90) {
        var o103;
        return !(!Hd(t12).call(t12, "physics") || !Hd(o103 = rk.physics.solver).call(o103, e47) || i90.physics.solver === e47 || "wind" === e47);
    }, ak = Object.freeze({
        __proto__: null,
        configuratorHideOption: sk,
        allOptions: nk,
        configureOptions: rk
    }), hk = function() {
        function t12() {
            Ra(this, t12);
        }
        return Ha(t12, [
            {
                key: "getDistances",
                value: function(t19, e47, i90) {
                    for(var o103 = {
                    }, n132 = t19.edges, r88 = 0; r88 < e47.length; r88++){
                        var s82 = {
                        };
                        o103[e47[r88]] = s82;
                        for(var a73 = 0; a73 < e47.length; a73++)s82[e47[a73]] = r88 == a73 ? 0 : 1000000000;
                    }
                    for(var h49 = 0; h49 < i90.length; h49++){
                        var d40 = n132[i90[h49]];
                        !0 === d40.connected && (void 0) !== o103[d40.fromId] && (void 0) !== o103[d40.toId] && (o103[d40.fromId][d40.toId] = 1, o103[d40.toId][d40.fromId] = 1);
                    }
                    for(var l33 = e47.length, c22 = 0; c22 < l33; c22++)for(var u20 = e47[c22], f22 = o103[u20], p19 = 0; p19 < l33 - 1; p19++)for(var v15 = e47[p19], g14 = o103[v15], y9 = p19 + 1; y9 < l33; y9++){
                        var m9 = e47[y9], b9 = o103[m9], w4 = Math.min(g14[m9], g14[u20] + f22[m9]);
                        g14[m9] = w4, b9[v15] = w4;
                    }
                    return o103;
                }
            }
        ]), t12;
    }(), dk = function() {
        function t12(e47, i90, o103) {
            Ra(this, t12), this.body = e47, this.springLength = i90, this.springConstant = o103, this.distanceSolver = new hk;
        }
        return Ha(t12, [
            {
                key: "setOptions",
                value: function(t19) {
                    t19 && (t19.springLength && (this.springLength = t19.springLength), t19.springConstant && (this.springConstant = t19.springConstant));
                }
            },
            {
                key: "solve",
                value: function(t19, e47) {
                    var i90 = arguments.length > 2 && (void 0) !== arguments[2] && arguments[2], o103 = this.distanceSolver.getDistances(this.body, t19, e47);
                    this._createL_matrix(o103), this._createK_matrix(o103), this._createE_matrix();
                    for(var n132 = 0.01, r88 = 1, s83 = 0, a74 = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000)), h49 = 5, d41 = 1000000000, l33 = 0, c22 = 0, u20 = 0, f22 = 0, p19 = 0; d41 > n132 && s83 < a74;){
                        s83 += 1;
                        var v15 = this._getHighestEnergyNode(i90), g14 = Bh(v15, 4);
                        for(l33 = g14[0], d41 = g14[1], c22 = g14[2], u20 = g14[3], f22 = d41, p19 = 0; f22 > r88 && p19 < h49;){
                            p19 += 1, this._moveNode(l33, c22, u20);
                            var y9 = this._getEnergy(l33), m10 = Bh(y9, 3);
                            f22 = m10[0], c22 = m10[1], u20 = m10[2];
                        }
                    }
                }
            },
            {
                key: "_getHighestEnergyNode",
                value: function(t19) {
                    for(var e47 = this.body.nodeIndices, i90 = this.body.nodes, o103 = 0, n132 = e47[0], r88 = 0, s83 = 0, a74 = 0; a74 < e47.length; a74++){
                        var h49 = e47[a74];
                        if (!0 !== i90[h49].predefinedPosition || !0 === i90[h49].isCluster && !0 === t19 || !0 !== i90[h49].options.fixed.x || !0 !== i90[h49].options.fixed.y) {
                            var d41 = Bh(this._getEnergy(h49), 3), l33 = d41[0], c22 = d41[1], u20 = d41[2];
                            o103 < l33 && (o103 = l33, n132 = h49, r88 = c22, s83 = u20);
                        }
                    }
                    return [
                        n132,
                        o103,
                        r88,
                        s83
                    ];
                }
            },
            {
                key: "_getEnergy",
                value: function(t19) {
                    var e47 = Bh(this.E_sums[t19], 2), i90 = e47[0], o103 = e47[1];
                    return [
                        Math.sqrt(Math.pow(i90, 2) + Math.pow(o103, 2)),
                        i90,
                        o103
                    ];
                }
            },
            {
                key: "_moveNode",
                value: function(t19, e47, i90) {
                    for(var o103 = this.body.nodeIndices, n132 = this.body.nodes, r88 = 0, s83 = 0, a74 = 0, h50 = n132[t19].x, d42 = n132[t19].y, l34 = this.K_matrix[t19], c23 = this.L_matrix[t19], u21 = 0; u21 < o103.length; u21++){
                        var f22 = o103[u21];
                        if (f22 !== t19) {
                            var p19 = n132[f22].x, v16 = n132[f22].y, g15 = l34[f22], y10 = c23[f22], m11 = 1 / Math.pow(Math.pow(h50 - p19, 2) + Math.pow(d42 - v16, 2), 1.5);
                            r88 += g15 * (1 - y10 * Math.pow(d42 - v16, 2) * m11), s83 += g15 * (y10 * (h50 - p19) * (d42 - v16) * m11), a74 += g15 * (1 - y10 * Math.pow(h50 - p19, 2) * m11);
                        }
                    }
                    var b10 = (e47 / r88 + i90 / s83) / (s83 / r88 - a74 / s83), w5 = -(s83 * b10 + e47) / r88;
                    n132[t19].x += w5, n132[t19].y += b10, this._updateE_matrix(t19);
                }
            },
            {
                key: "_createL_matrix",
                value: function(t19) {
                    var e47 = this.body.nodeIndices, i90 = this.springLength;
                    this.L_matrix = [];
                    for(var o103 = 0; o103 < e47.length; o103++){
                        this.L_matrix[e47[o103]] = {
                        };
                        for(var n132 = 0; n132 < e47.length; n132++)this.L_matrix[e47[o103]][e47[n132]] = i90 * t19[e47[o103]][e47[n132]];
                    }
                }
            },
            {
                key: "_createK_matrix",
                value: function(t19) {
                    var e47 = this.body.nodeIndices, i90 = this.springConstant;
                    this.K_matrix = [];
                    for(var o103 = 0; o103 < e47.length; o103++){
                        this.K_matrix[e47[o103]] = {
                        };
                        for(var n133 = 0; n133 < e47.length; n133++)this.K_matrix[e47[o103]][e47[n133]] = i90 * Math.pow(t19[e47[o103]][e47[n133]], -2);
                    }
                }
            },
            {
                key: "_createE_matrix",
                value: function() {
                    var t19 = this.body.nodeIndices, e47 = this.body.nodes;
                    this.E_matrix = {
                    }, this.E_sums = {
                    };
                    for(var i90 = 0; i90 < t19.length; i90++)this.E_matrix[t19[i90]] = [];
                    for(var o103 = 0; o103 < t19.length; o103++){
                        for(var n134 = t19[o103], r88 = e47[n134].x, s83 = e47[n134].y, a74 = 0, h50 = 0, d42 = o103; d42 < t19.length; d42++){
                            var l34 = t19[d42];
                            if (l34 !== n134) {
                                var c23 = e47[l34].x, u21 = e47[l34].y, f23 = 1 / Math.sqrt(Math.pow(r88 - c23, 2) + Math.pow(s83 - u21, 2));
                                this.E_matrix[n134][d42] = [
                                    this.K_matrix[n134][l34] * (r88 - c23 - this.L_matrix[n134][l34] * (r88 - c23) * f23),
                                    this.K_matrix[n134][l34] * (s83 - u21 - this.L_matrix[n134][l34] * (s83 - u21) * f23)
                                ], this.E_matrix[l34][o103] = this.E_matrix[n134][d42], a74 += this.E_matrix[n134][d42][0], h50 += this.E_matrix[n134][d42][1];
                            }
                        }
                        this.E_sums[n134] = [
                            a74,
                            h50
                        ];
                    }
                }
            },
            {
                key: "_updateE_matrix",
                value: function(t19) {
                    for(var e47 = this.body.nodeIndices, i90 = this.body.nodes, o103 = this.E_matrix[t19], n135 = this.K_matrix[t19], r89 = this.L_matrix[t19], s84 = i90[t19].x, a75 = i90[t19].y, h51 = 0, d43 = 0, l35 = 0; l35 < e47.length; l35++){
                        var c24 = e47[l35];
                        if (c24 !== t19) {
                            var u22 = o103[l35], f24 = u22[0], p20 = u22[1], v17 = i90[c24].x, g16 = i90[c24].y, y11 = 1 / Math.sqrt(Math.pow(s84 - v17, 2) + Math.pow(a75 - g16, 2)), m12 = n135[c24] * (s84 - v17 - r89[c24] * (s84 - v17) * y11), b10 = n135[c24] * (a75 - g16 - r89[c24] * (a75 - g16) * y11);
                            o103[l35] = [
                                m12,
                                b10
                            ], h51 += m12, d43 += b10;
                            var w5 = this.E_sums[c24];
                            w5[0] += m12 - f24, w5[1] += b10 - p20;
                        }
                    }
                    this.E_sums[t19] = [
                        h51,
                        d43
                    ];
                }
            }
        ]), t12;
    }();
    function lk(t12, e47, i90) {
        var o103, n135, r89, s84, a75 = this;
        if (!(this instanceof lk)) throw new SyntaxError("Constructor must be called with the new operator");
        this.options = {
        }, this.defaultOptions = {
            locale: "en",
            locales: mp,
            clickToUse: !1
        }, Ke(this.options, this.defaultOptions), this.body = {
            container: t12,
            nodes: {
            },
            nodeIndices: [],
            edges: {
            },
            edgeIndices: [],
            emitter: {
                on: si(o103 = this.on).call(o103, this),
                off: si(n135 = this.off).call(n135, this),
                emit: si(r89 = this.emit).call(r89, this),
                once: si(s84 = this.once).call(s84, this)
            },
            eventListeners: {
                onTap: function() {
                },
                onTouch: function() {
                },
                onDoubleTap: function() {
                },
                onHold: function() {
                },
                onDragStart: function() {
                },
                onDrag: function() {
                },
                onDragEnd: function() {
                },
                onMouseWheel: function() {
                },
                onPinch: function() {
                },
                onMouseMove: function() {
                },
                onRelease: function() {
                },
                onContext: function() {
                }
            },
            data: {
                nodes: null,
                edges: null
            },
            functions: {
                createNode: function() {
                },
                createEdge: function() {
                },
                getPointer: function() {
                }
            },
            modules: {
            },
            view: {
                scale: 1,
                translation: {
                    x: 0,
                    y: 0
                }
            },
            selectionBox: {
                show: !1,
                position: {
                    start: {
                        x: 0,
                        y: 0
                    },
                    end: {
                        x: 0,
                        y: 0
                    }
                }
            }
        }, this.bindEventListeners(), this.images = new wp(function() {
            return a75.body.emitter.emit("_requestRedraw");
        }), this.groups = new Sv, this.canvas = new Am(this.body), this.selectionHandler = new Hb(this.body, this.canvas), this.interactionHandler = new qm(this.body, this.canvas, this.selectionHandler), this.view = new jm(this.body, this.canvas), this.renderer = new Im(this.body, this.canvas), this.physics = new bm(this.body), this.layoutEngine = new Xw(this.body), this.clustering = new Pm(this.body), this.manipulation = new $w(this.body, this.canvas, this.selectionHandler, this.interactionHandler), this.nodesHandler = new vy(this.body, this.images, this.groups, this.layoutEngine), this.edgesHandler = new am(this.body, this.images, this.groups), this.body.modules.kamadaKawai = new dk(this.body, 150, 0.05), this.body.modules.clustering = this.clustering, this.canvas._create(), this.setOptions(i90), this.setData(e47);
    }
    pi(lk.prototype), lk.prototype.setOptions = function(t12) {
        var e47 = this;
        if (null === t12 && (t12 = void 0), (void 0) !== t12) {
            !0 === Nf.validate(t12, nk) && console.error("%cErrors have been found in the supplied options object.", Ff);
            if (nf([
                "locale",
                "locales",
                "clickToUse"
            ], this.options, t12), (void 0) !== t12.locale && (t12.locale = (function(t19, e48) {
                try {
                    var i90 = Bh(e48.split(/[-_ /]/, 2), 2), o103 = i90[0], n135 = i90[1], r89 = null != o103 ? o103.toLowerCase() : null, s84 = null != n135 ? n135.toUpperCase() : null;
                    if (r89 && s84) {
                        var a75, h51 = r89 + "-" + s84;
                        if (Object.prototype.hasOwnProperty.call(t19, h51)) return h51;
                        console.warn(jh(a75 = "Unknown variant ".concat(s84, " of language ")).call(a75, r89, "."));
                    }
                    if (r89) {
                        var d43 = r89;
                        if (Object.prototype.hasOwnProperty.call(t19, d43)) return d43;
                        console.warn("Unknown language ".concat(r89));
                    }
                    return console.warn("Unknown locale ".concat(e48, ", falling back to English.")), "en";
                } catch (t20) {
                    return console.error(t20), console.warn("Unexpected error while normalizing locale ".concat(e48, ", falling back to English.")), "en";
                }
            })(t12.locales || this.options.locales, t12.locale)), t12 = this.layoutEngine.setOptions(t12.layout, t12), this.canvas.setOptions(t12), this.groups.setOptions(t12.groups), this.nodesHandler.setOptions(t12.nodes), this.edgesHandler.setOptions(t12.edges), this.physics.setOptions(t12.physics), this.manipulation.setOptions(t12.manipulation, t12, this.options), this.interactionHandler.setOptions(t12.interaction), this.renderer.setOptions(t12.interaction), this.selectionHandler.setOptions(t12.interaction), (void 0) !== t12.groups && this.body.emitter.emit("refreshNodes"), "configure" in t12 && (this.configurator || (this.configurator = new Bf(this, this.body.container, rk, this.canvas.pixelRatio, sk)), this.configurator.setOptions(t12.configure)), this.configurator && !0 === this.configurator.options.enabled) {
                var i90 = {
                    nodes: {
                    },
                    edges: {
                    },
                    layout: {
                    },
                    interaction: {
                    },
                    manipulation: {
                    },
                    physics: {
                    },
                    global: {
                    }
                };
                sf(i90.nodes, this.nodesHandler.options), sf(i90.edges, this.edgesHandler.options), sf(i90.layout, this.layoutEngine.options), sf(i90.interaction, this.selectionHandler.options), sf(i90.interaction, this.renderer.options), sf(i90.interaction, this.interactionHandler.options), sf(i90.manipulation, this.manipulation.options), sf(i90.physics, this.physics.options), sf(i90.global, this.canvas.options), sf(i90.global, this.options), this.configurator.setModuleOptions(i90);
            }
            (void 0) !== t12.clickToUse ? !0 === t12.clickToUse ? (void 0) === this.activator && (this.activator = new Df(this.canvas.frame), this.activator.on("change", function() {
                e47.body.emitter.emit("activate");
            })) : ((void 0) !== this.activator && (this.activator.destroy(), delete this.activator), this.body.emitter.emit("activate")) : this.body.emitter.emit("activate"), this.canvas.setSize(), this.body.emitter.emit("startSimulation");
        }
    }, lk.prototype._updateVisibleIndices = function() {
        var t12 = this.body.nodes, e47 = this.body.edges;
        for(var i91 in this.body.nodeIndices = [], this.body.edgeIndices = [], t12)Object.prototype.hasOwnProperty.call(t12, i91) && (this.clustering._isClusteredNode(i91) || !1 !== t12[i91].options.hidden || this.body.nodeIndices.push(t12[i91].id));
        for(var o103 in e47)if (Object.prototype.hasOwnProperty.call(e47, o103)) {
            var n135 = e47[o103], r89 = t12[n135.fromId], s84 = t12[n135.toId], a76 = (void 0) !== r89 && (void 0) !== s84;
            !this.clustering._isClusteredEdge(o103) && !1 === n135.options.hidden && a76 && !1 === r89.options.hidden && !1 === s84.options.hidden && this.body.edgeIndices.push(n135.id);
        }
    }, lk.prototype.bindEventListeners = function() {
        var t12 = this;
        this.body.emitter.on("_dataChanged", function() {
            t12.edgesHandler._updateState(), t12.body.emitter.emit("_dataUpdated");
        }), this.body.emitter.on("_dataUpdated", function() {
            t12.clustering._updateState(), t12._updateVisibleIndices(), t12._updateValueRange(t12.body.nodes), t12._updateValueRange(t12.body.edges), t12.body.emitter.emit("startSimulation"), t12.body.emitter.emit("_requestRedraw");
        });
    }, lk.prototype.setData = function(t12) {
        if (this.body.emitter.emit("resetPhysics"), this.body.emitter.emit("_resetData"), this.selectionHandler.unselectAll(), t12 && t12.dot && (t12.nodes || t12.edges)) throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');
        if (this.setOptions(t12 && t12.options), t12 && t12.dot) {
            console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
            var e47 = pp(t12.dot);
            this.setData(e47);
        } else if (t12 && t12.gephi) {
            console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
            var i91 = gp(t12.gephi);
            this.setData(i91);
        } else this.nodesHandler.setData(t12 && t12.nodes, !0), this.edgesHandler.setData(t12 && t12.edges, !0), this.body.emitter.emit("_dataChanged"), this.body.emitter.emit("_dataLoaded"), this.body.emitter.emit("initPhysics");
    }, lk.prototype.destroy = function() {
        for(var t12 in this.body.emitter.emit("destroy"), this.body.emitter.off(), this.off(), delete this.groups, delete this.canvas, delete this.selectionHandler, delete this.interactionHandler, delete this.view, delete this.renderer, delete this.physics, delete this.layoutEngine, delete this.clustering, delete this.manipulation, delete this.nodesHandler, delete this.edgesHandler, delete this.configurator, delete this.images, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, t12) && delete this.body.nodes[t12];
        for(var e48 in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, e48) && delete this.body.edges[e48];
        Qu(this.body.container);
    }, lk.prototype._updateValueRange = function(t12) {
        var e48, i92 = void 0, o103 = void 0, n136 = 0;
        for(e48 in t12)if (Object.prototype.hasOwnProperty.call(t12, e48)) {
            var r90 = t12[e48].getValue();
            (void 0) !== r90 && (i92 = (void 0) === i92 ? r90 : Math.min(r90, i92), o103 = (void 0) === o103 ? r90 : Math.max(r90, o103), n136 += r90);
        }
        if ((void 0) !== i92 && (void 0) !== o103) for(e48 in t12)Object.prototype.hasOwnProperty.call(t12, e48) && t12[e48].setValueRange(i92, o103, n136);
    }, lk.prototype.isActive = function() {
        return !this.activator || this.activator.active;
    }, lk.prototype.setSize = function() {
        return this.canvas.setSize.apply(this.canvas, arguments);
    }, lk.prototype.canvasToDOM = function() {
        return this.canvas.canvasToDOM.apply(this.canvas, arguments);
    }, lk.prototype.DOMtoCanvas = function() {
        return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
    }, lk.prototype.findNode = function() {
        return this.clustering.findNode.apply(this.clustering, arguments);
    }, lk.prototype.isCluster = function() {
        return this.clustering.isCluster.apply(this.clustering, arguments);
    }, lk.prototype.openCluster = function() {
        return this.clustering.openCluster.apply(this.clustering, arguments);
    }, lk.prototype.cluster = function() {
        return this.clustering.cluster.apply(this.clustering, arguments);
    }, lk.prototype.getNodesInCluster = function() {
        return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
    }, lk.prototype.clusterByConnection = function() {
        return this.clustering.clusterByConnection.apply(this.clustering, arguments);
    }, lk.prototype.clusterByHubsize = function() {
        return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
    }, lk.prototype.updateClusteredNode = function() {
        return this.clustering.updateClusteredNode.apply(this.clustering, arguments);
    }, lk.prototype.getClusteredEdges = function() {
        return this.clustering.getClusteredEdges.apply(this.clustering, arguments);
    }, lk.prototype.getBaseEdge = function() {
        return this.clustering.getBaseEdge.apply(this.clustering, arguments);
    }, lk.prototype.getBaseEdges = function() {
        return this.clustering.getBaseEdges.apply(this.clustering, arguments);
    }, lk.prototype.updateEdge = function() {
        return this.clustering.updateEdge.apply(this.clustering, arguments);
    }, lk.prototype.clusterOutliers = function() {
        return this.clustering.clusterOutliers.apply(this.clustering, arguments);
    }, lk.prototype.getSeed = function() {
        return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
    }, lk.prototype.enableEditMode = function() {
        return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
    }, lk.prototype.disableEditMode = function() {
        return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
    }, lk.prototype.addNodeMode = function() {
        return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
    }, lk.prototype.editNode = function() {
        return this.manipulation.editNode.apply(this.manipulation, arguments);
    }, lk.prototype.editNodeMode = function() {
        return console.warn("Deprecated: Please use editNode instead of editNodeMode."), this.manipulation.editNode.apply(this.manipulation, arguments);
    }, lk.prototype.addEdgeMode = function() {
        return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
    }, lk.prototype.editEdgeMode = function() {
        return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
    }, lk.prototype.deleteSelected = function() {
        return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
    }, lk.prototype.getPositions = function() {
        return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
    }, lk.prototype.getPosition = function() {
        return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);
    }, lk.prototype.storePositions = function() {
        return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
    }, lk.prototype.moveNode = function() {
        return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
    }, lk.prototype.getBoundingBox = function() {
        return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
    }, lk.prototype.getConnectedNodes = function(t12) {
        return (void 0) !== this.body.nodes[t12] ? this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments) : this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
    }, lk.prototype.getConnectedEdges = function() {
        return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
    }, lk.prototype.startSimulation = function() {
        return this.physics.startSimulation.apply(this.physics, arguments);
    }, lk.prototype.stopSimulation = function() {
        return this.physics.stopSimulation.apply(this.physics, arguments);
    }, lk.prototype.stabilize = function() {
        return this.physics.stabilize.apply(this.physics, arguments);
    }, lk.prototype.getSelection = function() {
        return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
    }, lk.prototype.setSelection = function() {
        return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
    }, lk.prototype.getSelectedNodes = function() {
        return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);
    }, lk.prototype.getSelectedEdges = function() {
        return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);
    }, lk.prototype.getNodeAt = function() {
        var t12 = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
        return (void 0) !== t12 && (void 0) !== t12.id ? t12.id : t12;
    }, lk.prototype.getEdgeAt = function() {
        var t12 = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
        return (void 0) !== t12 && (void 0) !== t12.id ? t12.id : t12;
    }, lk.prototype.selectNodes = function() {
        return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
    }, lk.prototype.selectEdges = function() {
        return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
    }, lk.prototype.unselectAll = function() {
        this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments), this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler), this.redraw();
    }, lk.prototype.redraw = function() {
        return this.renderer.redraw.apply(this.renderer, arguments);
    }, lk.prototype.getScale = function() {
        return this.view.getScale.apply(this.view, arguments);
    }, lk.prototype.getViewPosition = function() {
        return this.view.getViewPosition.apply(this.view, arguments);
    }, lk.prototype.fit = function() {
        return this.view.fit.apply(this.view, arguments);
    }, lk.prototype.moveTo = function() {
        return this.view.moveTo.apply(this.view, arguments);
    }, lk.prototype.focus = function() {
        return this.view.focus.apply(this.view, arguments);
    }, lk.prototype.releaseNode = function() {
        return this.view.releaseNode.apply(this.view, arguments);
    }, lk.prototype.getOptionsFromConfigurator = function() {
        var t12 = {
        };
        return this.configurator && (t12 = this.configurator.getOptions.apply(this.configurator)), t12;
    };
    var ck = pp;
    t1.Network = lk, t1.NetworkImages = wp, t1.networkDOTParser = vp, t1.networkGephiParser = yp, t1.networkOptions = ak, t1.parseDOTNetwork = ck, t1.parseGephiNetwork = gp, Object.defineProperty(t1, "__esModule", {
        value: !0
    });
});

},{"vis-data/peer/umd/vis-data.js":"dI4DC"}],"dI4DC":[function(require,module,exports) {
var global = arguments[3];
(function(global1, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : (global1 = typeof globalThis !== 'undefined' ? globalThis : global1 || self, factory(global1.vis = global1.vis || {
    }));
})(this, function(exports) {
    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {
    };
    function createCommonjsModule(fn) {
        var module = {
            exports: {
            }
        };
        return fn(module, module.exports), module.exports;
    }
    var check = function(it) {
        return it && it.Math == Math && it;
    }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global$1 = check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || function() {
        return this;
    }() || Function('return this')();
    var fails = function(exec) {
        try {
            return !!exec();
        } catch (error) {
            return true;
        }
    };
    var descriptors = !fails(function() {
        return Object.defineProperty({
        }, 1, {
            get: function() {
                return 7;
            }
        })[1] != 7;
    });
    var nativePropertyIsEnumerable = {
    }.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug
    var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
        1: 2
    }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
    var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
    } : nativePropertyIsEnumerable;
    var objectPropertyIsEnumerable = {
        f: f
    };
    var createPropertyDescriptor = function(bitmap, value) {
        return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
        };
    };
    var toString = {
    }.toString;
    var classofRaw = function(it) {
        return toString.call(it).slice(8, -1);
    };
    var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var indexedObject = fails(function() {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins
        return !Object('z').propertyIsEnumerable(0);
    }) ? function(it) {
        return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
    } : Object;
    // `RequireObjectCoercible` abstract operation
    // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
    var requireObjectCoercible = function(it) {
        if (it == undefined) throw TypeError("Can't call method on " + it);
        return it;
    };
    var toIndexedObject = function(it) {
        return indexedObject(requireObjectCoercible(it));
    };
    var isObject = function(it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
    };
    // https://tc39.github.io/ecma262/#sec-toprimitive
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    var toPrimitive = function(input, PREFERRED_STRING) {
        if (!isObject(input)) return input;
        var fn, val;
        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        throw TypeError("Can't convert object to primitive value");
    };
    var hasOwnProperty = {
    }.hasOwnProperty;
    var has = function(it, key) {
        return hasOwnProperty.call(it, key);
    };
    var document$1 = global$1.document; // typeof document.createElement is 'object' in old IE
    var EXISTS = isObject(document$1) && isObject(document$1.createElement);
    var documentCreateElement = function(it) {
        return EXISTS ? document$1.createElement(it) : {
        };
    };
    var ie8DomDefine = !descriptors && !fails(function() {
        return Object.defineProperty(documentCreateElement('div'), 'a', {
            get: function() {
                return 7;
            }
        }).a != 7;
    });
    var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
    var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor1(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (ie8DomDefine) try {
            return nativeGetOwnPropertyDescriptor(O, P);
        } catch (error) {
        /* empty */ }
        if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
    };
    var objectGetOwnPropertyDescriptor = {
        f: f$1
    };
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, '.').toLowerCase();
    };
    var data = isForced.data = {
    };
    var NATIVE = isForced.NATIVE = 'N';
    var POLYFILL = isForced.POLYFILL = 'P';
    var isForced_1 = isForced;
    var path = {
    };
    var aFunction = function(it) {
        if (typeof it != 'function') throw TypeError(String(it) + ' is not a function');
        return it;
    };
    var functionBindContext = function(fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;
        switch(length){
            case 0:
                return function() {
                    return fn.call(that);
                };
            case 1:
                return function(a) {
                    return fn.call(that, a);
                };
            case 2:
                return function(a, b) {
                    return fn.call(that, a, b);
                };
            case 3:
                return function(a, b, c) {
                    return fn.call(that, a, b, c);
                };
        }
        return function() /* ...args */ {
            return fn.apply(that, arguments);
        };
    };
    var anObject = function(it) {
        if (!isObject(it)) throw TypeError(String(it) + ' is not an object');
        return it;
    };
    var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperty
    var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (ie8DomDefine) try {
            return nativeDefineProperty(O, P, Attributes);
        } catch (error) {
        /* empty */ }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
    };
    var objectDefineProperty = {
        f: f$2
    };
    var createNonEnumerableProperty = descriptors ? function(object, key, value) {
        return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
    } : function(object, key, value) {
        object[key] = value;
        return object;
    };
    var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
    var wrapConstructor = function(NativeConstructor) {
        var Wrapper = function(a, b, c) {
            if (this instanceof NativeConstructor) {
                switch(arguments.length){
                    case 0:
                        return new NativeConstructor();
                    case 1:
                        return new NativeConstructor(a);
                    case 2:
                        return new NativeConstructor(a, b);
                }
                return new NativeConstructor(a, b, c);
            }
            return NativeConstructor.apply(this, arguments);
        };
        Wrapper.prototype = NativeConstructor.prototype;
        return Wrapper;
    };
    /*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/ var _export = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var PROTO = options.proto;
        var nativeSource = GLOBAL ? global$1 : STATIC ? global$1[TARGET] : (global$1[TARGET] || {
        }).prototype;
        var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {
        });
        var targetPrototype = target.prototype;
        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
        for(key in source){
            FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contains in native
            USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);
            targetProperty = target[key];
            if (USE_NATIVE) {
                if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor$1(nativeSource, key);
                    nativeProperty = descriptor && descriptor.value;
                } else nativeProperty = nativeSource[key]; // export native or implementation
            }
            sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
            if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue; // bind timers to global for call from export context
            if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global$1); // wrap global constructors for prevent changs in this version
            else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty); // make static versions for prototype methods
            else if (PROTO && typeof sourceProperty == 'function') resultProperty = functionBindContext(Function.call, sourceProperty); // default case
            else resultProperty = sourceProperty; // add a flag to not completely full polyfills
            if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty(resultProperty, 'sham', true);
            target[key] = resultProperty;
            if (PROTO) {
                VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
                if (!has(path, VIRTUAL_PROTOTYPE)) createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {
                });
                 // export virtual prototype methods
                path[VIRTUAL_PROTOTYPE][key] = sourceProperty; // export real prototype methods
                if (options.real && targetPrototype && !targetPrototype[key]) createNonEnumerableProperty(targetPrototype, key, sourceProperty);
            }
        }
    };
    // https://tc39.github.io/ecma262/#sec-isarray
    var isArray = Array.isArray || function isArray1(arg) {
        return classofRaw(arg) == 'Array';
    };
    var ceil = Math.ceil;
    var floor = Math.floor; // `ToInteger` abstract operation
    // https://tc39.github.io/ecma262/#sec-tointeger
    var toInteger = function(argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
    };
    var min = Math.min; // `ToLength` abstract operation
    // https://tc39.github.io/ecma262/#sec-tolength
    var toLength = function(argument) {
        return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0; // 2 ** 53 - 1 == 9007199254740991
    };
    // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
    var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? functionBindContext(mapper, thisArg, 3) : false;
        var element;
        while(sourceIndex < sourceLen){
            if (sourceIndex in source) {
                element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
                if (depth > 0 && isArray(element)) targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                else {
                    if (targetIndex >= 9007199254740991) throw TypeError('Exceed the acceptable array length');
                    target[targetIndex] = element;
                }
                targetIndex++;
            }
            sourceIndex++;
        }
        return targetIndex;
    };
    var flattenIntoArray_1 = flattenIntoArray;
    // https://tc39.github.io/ecma262/#sec-toobject
    var toObject = function(argument) {
        return Object(requireObjectCoercible(argument));
    };
    var setGlobal = function(key, value) {
        try {
            createNonEnumerableProperty(global$1, key, value);
        } catch (error) {
            global$1[key] = value;
        }
        return value;
    };
    var SHARED = '__core-js_shared__';
    var store = global$1[SHARED] || setGlobal(SHARED, {
    });
    var sharedStore = store;
    var shared = createCommonjsModule(function(module) {
        (module.exports = function(key, value) {
            return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {
            });
        })('versions', []).push({
            version: '3.7.0',
            mode: 'pure',
            copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
        });
    });
    var id = 0;
    var postfix = Math.random();
    var uid = function(key) {
        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + ((++id) + postfix).toString(36);
    };
    var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function() {
        // Chrome 38 Symbol has incorrect toString conversion
        // eslint-disable-next-line no-undef
        return !String(Symbol());
    });
    var useSymbolAsUid = nativeSymbol // eslint-disable-next-line no-undef
     && !Symbol.sham // eslint-disable-next-line no-undef
     && typeof Symbol.iterator == 'symbol';
    var WellKnownSymbolsStore = shared('wks');
    var Symbol$1 = global$1.Symbol;
    var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;
    var wellKnownSymbol = function(name) {
        if (!has(WellKnownSymbolsStore, name)) {
            if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
            else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
        }
        return WellKnownSymbolsStore[name];
    };
    var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
    // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
    var arraySpeciesCreate = function(originalArray, length) {
        var C;
        if (isArray(originalArray)) {
            C = originalArray.constructor; // cross-realm fallback
            if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
            else if (isObject(C)) {
                C = C[SPECIES];
                if (C === null) C = undefined;
            }
        }
        return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
    };
    // https://github.com/tc39/proposal-flatMap
    _export({
        target: 'Array',
        proto: true
    }, {
        flatMap: function flatMap(callbackfn) {
            var O = toObject(this);
            var sourceLen = toLength(O.length);
            var A;
            aFunction(callbackfn);
            A = arraySpeciesCreate(O, 0);
            A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            return A;
        }
    });
    var entryVirtual = function(CONSTRUCTOR) {
        return path[CONSTRUCTOR + 'Prototype'];
    };
    var flatMap = entryVirtual('Array').flatMap;
    var ArrayPrototype = Array.prototype;
    var flatMap_1 = function(it) {
        var own = it.flatMap;
        return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.flatMap ? flatMap : own;
    };
    var flatMap$1 = flatMap_1;
    var flatMap$2 = flatMap$1;
    var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
    var createMethod = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
            var O = toObject($this);
            var self = indexedObject(O);
            var boundFunction = functionBindContext(callbackfn, that, 3);
            var length = toLength(self.length);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate;
            var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
            var value, result;
            for(; length > index; index++)if (NO_HOLES || index in self) {
                value = self[index];
                result = boundFunction(value, index, O);
                if (TYPE) {
                    if (IS_MAP) target[index] = result; // map
                    else if (result) switch(TYPE){
                        case 3:
                            return true;
                        // some
                        case 5:
                            return value;
                        // find
                        case 6:
                            return index;
                        // findIndex
                        case 2:
                            push.call(target, value);
                    }
                    else if (IS_EVERY) return false; // every
                }
            }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
    };
    var arrayIteration = {
        // `Array.prototype.forEach` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
        forEach: createMethod(0),
        // `Array.prototype.map` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.map
        map: createMethod(1),
        // `Array.prototype.filter` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.filter
        filter: createMethod(2),
        // `Array.prototype.some` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.some
        some: createMethod(3),
        // `Array.prototype.every` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.every
        every: createMethod(4),
        // `Array.prototype.find` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.find
        find: createMethod(5),
        // `Array.prototype.findIndex` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod(6)
    };
    var aFunction$1 = function(variable) {
        return typeof variable == 'function' ? variable : undefined;
    };
    var getBuiltIn = function(namespace, method) {
        return arguments.length < 2 ? aFunction$1(path[namespace]) || aFunction$1(global$1[namespace]) : path[namespace] && path[namespace][method] || global$1[namespace] && global$1[namespace][method];
    };
    var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';
    var process = global$1.process;
    var versions = process && process.versions;
    var v8 = versions && versions.v8;
    var match, version;
    if (v8) {
        match = v8.split('.');
        version = match[0] + match[1];
    } else if (engineUserAgent) {
        match = engineUserAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
            match = engineUserAgent.match(/Chrome\/(\d+)/);
            if (match) version = match[1];
        }
    }
    var engineV8Version = version && +version;
    var SPECIES$1 = wellKnownSymbol('species');
    var arrayMethodHasSpeciesSupport = function(METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return engineV8Version >= 51 || !fails(function() {
            var array = [];
            var constructor = array.constructor = {
            };
            constructor[SPECIES$1] = function() {
                return {
                    foo: 1
                };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
        });
    };
    var defineProperty1 = Object.defineProperty;
    var cache = {
    };
    var thrower = function(it) {
        throw it;
    };
    var arrayMethodUsesToLength = function(METHOD_NAME, options) {
        if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
        if (!options) options = {
        };
        var method = [][METHOD_NAME];
        var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
        var argument0 = has(options, 0) ? options[0] : thrower;
        var argument1 = has(options, 1) ? options[1] : undefined;
        return cache[METHOD_NAME] = !!method && !fails(function() {
            if (ACCESSORS && !descriptors) return true;
            var O = {
                length: -1
            };
            if (ACCESSORS) defineProperty1(O, 1, {
                enumerable: true,
                get: thrower
            });
            else O[1] = 1;
            method.call(O, argument0, argument1);
        });
    };
    var $map = arrayIteration.map;
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // FF49- issue
    var USES_TO_LENGTH = arrayMethodUsesToLength('map'); // `Array.prototype.map` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.map
    // with adding support of @@species
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
    }, {
        map: function map(callbackfn) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var map = entryVirtual('Array').map;
    var ArrayPrototype$1 = Array.prototype;
    var map_1 = function(it) {
        var own = it.map;
        return it === ArrayPrototype$1 || it instanceof Array && own === ArrayPrototype$1.map ? map : own;
    };
    var map$1 = map_1;
    var map$2 = map$1;
    var $filter = arrayIteration.filter;
    var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('filter'); // Edge 14- issue
    var USES_TO_LENGTH$1 = arrayMethodUsesToLength('filter'); // `Array.prototype.filter` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.filter
    // with adding support of @@species
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$1
    }, {
        filter: function filter(callbackfn) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var filter = entryVirtual('Array').filter;
    var ArrayPrototype$2 = Array.prototype;
    var filter_1 = function(it) {
        var own = it.filter;
        return it === ArrayPrototype$2 || it instanceof Array && own === ArrayPrototype$2.filter ? filter : own;
    };
    var filter$1 = filter_1;
    var filter$2 = filter$1;
    var createMethod$1 = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
            aFunction(callbackfn);
            var O = toObject(that);
            var self = indexedObject(O);
            var length = toLength(O.length);
            var index = IS_RIGHT ? length - 1 : 0;
            var i = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2) while(true){
                if (index in self) {
                    memo = self[index];
                    index += i;
                    break;
                }
                index += i;
                if (IS_RIGHT ? index < 0 : length <= index) throw TypeError('Reduce of empty array with no initial value');
            }
            for(; IS_RIGHT ? index >= 0 : length > index; index += i)if (index in self) memo = callbackfn(memo, self[index], index, O);
            return memo;
        };
    };
    var arrayReduce = {
        // `Array.prototype.reduce` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
        left: createMethod$1(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
        right: createMethod$1(true)
    };
    var arrayMethodIsStrict = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function() {
            // eslint-disable-next-line no-useless-call,no-throw-literal
            method.call(null, argument || function() {
                throw 1;
            }, 1);
        });
    };
    var engineIsNode = classofRaw(global$1.process) == 'process';
    var $reduce = arrayReduce.left;
    var STRICT_METHOD = arrayMethodIsStrict('reduce');
    var USES_TO_LENGTH$2 = arrayMethodUsesToLength('reduce', {
        1: 0
    }); // Chrome 80-82 has a critical bug
    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
    var CHROME_BUG = !engineIsNode && engineV8Version > 79 && engineV8Version < 83; // `Array.prototype.reduce` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
    _export({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH$2 || CHROME_BUG
    }, {
        reduce: function reduce(callbackfn) {
            return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var reduce = entryVirtual('Array').reduce;
    var ArrayPrototype$3 = Array.prototype;
    var reduce_1 = function(it) {
        var own = it.reduce;
        return it === ArrayPrototype$3 || it instanceof Array && own === ArrayPrototype$3.reduce ? reduce : own;
    };
    var reduce$1 = reduce_1;
    var reduce$2 = reduce$1;
    var slice = [].slice;
    var factories = {
    };
    var construct = function(C, argsLength, args) {
        if (!(argsLength in factories)) {
            for(var list = [], i = 0; i < argsLength; i++)list[i] = 'a[' + i + ']'; // eslint-disable-next-line no-new-func
            factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
        }
        return factories[argsLength](C, args);
    }; // `Function.prototype.bind` method implementation
    // https://tc39.github.io/ecma262/#sec-function.prototype.bind
    var functionBind = Function.bind || function bind(that) {
        var fn = aFunction(this);
        var partArgs = slice.call(arguments, 1);
        var boundFunction = function bound() /* args... */ {
            var args = partArgs.concat(slice.call(arguments));
            return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
        };
        if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
        return boundFunction;
    };
    // https://tc39.github.io/ecma262/#sec-function.prototype.bind
    _export({
        target: 'Function',
        proto: true
    }, {
        bind: functionBind
    });
    var bind1 = entryVirtual('Function').bind;
    var FunctionPrototype = Function.prototype;
    var bind_1 = function(it) {
        var own = it.bind;
        return it === FunctionPrototype || it instanceof Function && own === FunctionPrototype.bind ? bind1 : own;
    };
    var bind$1 = bind_1;
    var bind$2 = bind$1;
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    var classCallCheck = _classCallCheck;
    // https://tc39.github.io/ecma262/#sec-object.defineproperty
    _export({
        target: 'Object',
        stat: true,
        forced: !descriptors,
        sham: !descriptors
    }, {
        defineProperty: objectDefineProperty.f
    });
    var defineProperty_1 = createCommonjsModule(function(module) {
        var Object1 = path.Object;
        var defineProperty2 = module.exports = function defineProperty3(it, key, desc) {
            return Object1.defineProperty(it, key, desc);
        };
        if (Object1.defineProperty.sham) defineProperty2.sham = true;
    });
    var defineProperty$1 = defineProperty_1;
    var defineProperty$2 = defineProperty$1;
    function _defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            defineProperty$2(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var createClass = _createClass;
    /**
	 * Create new data pipe.
	 *
	 * @param from - The source data set or data view.
	 *
	 * @remarks
	 * Example usage:
	 * ```typescript
	 * interface AppItem {
	 *   whoami: string;
	 *   appData: unknown;
	 *   visData: VisItem;
	 * }
	 * interface VisItem {
	 *   id: number;
	 *   label: string;
	 *   color: string;
	 *   x: number;
	 *   y: number;
	 * }
	 *
	 * const ds1 = new DataSet<AppItem, "whoami">([], { fieldId: "whoami" });
	 * const ds2 = new DataSet<VisItem, "id">();
	 *
	 * const pipe = createNewDataPipeFrom(ds1)
	 *   .filter((item): boolean => item.enabled === true)
	 *   .map<VisItem, "id">((item): VisItem => item.visData)
	 *   .to(ds2);
	 *
	 * pipe.start();
	 * ```
	 *
	 * @returns A factory whose methods can be used to configure the pipe.
	 */ function createNewDataPipeFrom(from) {
        return new DataPipeUnderConstruction(from);
    }
    /**
	 * Internal implementation of the pipe. This should be accessible only through
	 * `createNewDataPipeFrom` from the outside.
	 *
	 * @typeParam SI - Source item type.
	 * @typeParam SP - Source item type's id property name.
	 * @typeParam TI - Target item type.
	 * @typeParam TP - Target item type's id property name.
	 */ var SimpleDataPipe = /*#__PURE__*/ function() {
        /**
	   * Create a new data pipe.
	   *
	   * @param _source - The data set or data view that will be observed.
	   * @param _transformers - An array of transforming functions to be used to
	   * filter or transform the items in the pipe.
	   * @param _target - The data set or data view that will receive the items.
	   */ function SimpleDataPipe1(_source, _transformers, _target) {
            var _context, _context2, _context3;
            classCallCheck(this, SimpleDataPipe1);
            this._source = _source;
            this._transformers = _transformers;
            this._target = _target;
            /**
	     * Bound listeners for use with `DataInterface['on' | 'off']`.
	     */ this._listeners = {
                add: bind$2(_context = this._add).call(_context, this),
                remove: bind$2(_context2 = this._remove).call(_context2, this),
                update: bind$2(_context3 = this._update).call(_context3, this)
            };
        }
        /** @inheritDoc */ createClass(SimpleDataPipe1, [
            {
                key: "all",
                value: function all() {
                    this._target.update(this._transformItems(this._source.get()));
                    return this;
                }
            },
            {
                key: "start",
                value: function start() {
                    this._source.on("add", this._listeners.add);
                    this._source.on("remove", this._listeners.remove);
                    this._source.on("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "stop",
                value: function stop() {
                    this._source.off("add", this._listeners.add);
                    this._source.off("remove", this._listeners.remove);
                    this._source.off("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "_transformItems",
                value: function _transformItems(items) {
                    var _context4;
                    return reduce$2(_context4 = this._transformers).call(_context4, function(items1, transform) {
                        return transform(items1);
                    }, items);
                }
            },
            {
                key: "_add",
                value: function _add(_name, payload) {
                    if (payload == null) return;
                    this._target.add(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_update",
                value: function _update(_name, payload) {
                    if (payload == null) return;
                    this._target.update(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_remove",
                value: function _remove(_name, payload) {
                    if (payload == null) return;
                    this._target.remove(this._transformItems(payload.oldData));
                }
            }
        ]);
        return SimpleDataPipe1;
    }();
    /**
	 * Internal implementation of the pipe factory. This should be accessible
	 * only through `createNewDataPipeFrom` from the outside.
	 *
	 * @typeParam TI - Target item type.
	 * @typeParam TP - Target item type's id property name.
	 */ var DataPipeUnderConstruction = /*#__PURE__*/ function() {
        /**
	   * Create a new data pipe factory. This is an internal constructor that
	   * should never be called from outside of this file.
	   *
	   * @param _source - The source data set or data view for this pipe.
	   */ function DataPipeUnderConstruction1(_source) {
            classCallCheck(this, DataPipeUnderConstruction1);
            this._source = _source;
            /**
	     * Array transformers used to transform items within the pipe. This is typed
	     * as any for the sake of simplicity.
	     */ this._transformers = [];
        }
        /**
	   * Filter the items.
	   *
	   * @param callback - A filtering function that returns true if given item
	   * should be piped and false if not.
	   *
	   * @returns This factory for further configuration.
	   */ createClass(DataPipeUnderConstruction1, [
            {
                key: "filter",
                value: function filter1(callback) {
                    this._transformers.push(function(input) {
                        return filter$2(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "map",
                value: function map1(callback) {
                    this._transformers.push(function(input) {
                        return map$2(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "flatMap",
                value: function flatMap1(callback) {
                    this._transformers.push(function(input) {
                        return flatMap$2(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "to",
                value: function to(target) {
                    return new SimpleDataPipe(this._source, this._transformers, target);
                }
            }
        ]);
        return DataPipeUnderConstruction1;
    }();
    var defineProperty$3 = defineProperty_1;
    var defineProperty$4 = defineProperty$3;
    var max = Math.max;
    var min$1 = Math.min; // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
    var toAbsoluteIndex = function(index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
    };
    var createMethod$2 = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value; // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare
            if (IS_INCLUDES && el != el) while(length > index){
                value = O[index++]; // eslint-disable-next-line no-self-compare
                if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
            }
            else for(; length > index; index++){
                if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
            }
            return !IS_INCLUDES && -1;
        };
    };
    var arrayIncludes = {
        // `Array.prototype.includes` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.includes
        includes: createMethod$2(true),
        // `Array.prototype.indexOf` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod$2(false)
    };
    var hiddenKeys = {
    };
    var indexOf = arrayIncludes.indexOf;
    var objectKeysInternal = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for(key in O)!has(hiddenKeys, key) && has(O, key) && result.push(key); // Don't enum bug & hidden keys
        while(names.length > i)if (has(O, key = names[i++])) ~indexOf(result, key) || result.push(key);
        return result;
    };
    // IE8- don't enum bug keys
    var enumBugKeys = [
        'constructor',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'toLocaleString',
        'toString',
        'valueOf'
    ];
    // https://tc39.github.io/ecma262/#sec-object.keys
    var objectKeys = Object.keys || function keys(O) {
        return objectKeysInternal(O, enumBugKeys);
    };
    // https://tc39.github.io/ecma262/#sec-object.defineproperties
    var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys1 = objectKeys(Properties);
        var length = keys1.length;
        var index = 0;
        var key;
        while(length > index)objectDefineProperty.f(O, key = keys1[index++], Properties[key]);
        return O;
    };
    // https://tc39.github.io/ecma262/#sec-object.defineproperties
    _export({
        target: 'Object',
        stat: true,
        forced: !descriptors,
        sham: !descriptors
    }, {
        defineProperties: objectDefineProperties
    });
    var defineProperties_1 = createCommonjsModule(function(module) {
        var Object1 = path.Object;
        var defineProperties1 = module.exports = function defineProperties2(T, D) {
            return Object1.defineProperties(T, D);
        };
        if (Object1.defineProperties.sham) defineProperties1.sham = true;
    });
    var defineProperties1 = defineProperties_1;
    var defineProperties$1 = defineProperties1;
    var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
    var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return objectKeysInternal(O, hiddenKeys$1);
    };
    var objectGetOwnPropertyNames = {
        f: f$3
    };
    var f$4 = Object.getOwnPropertySymbols;
    var objectGetOwnPropertySymbols = {
        f: f$4
    };
    var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys1(it) {
        var keys1 = objectGetOwnPropertyNames.f(anObject(it));
        var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
        return getOwnPropertySymbols ? keys1.concat(getOwnPropertySymbols(it)) : keys1;
    };
    var createProperty = function(object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
        else object[propertyKey] = value;
    };
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
    _export({
        target: 'Object',
        stat: true,
        sham: !descriptors
    }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
            var O = toIndexedObject(object);
            var getOwnPropertyDescriptor2 = objectGetOwnPropertyDescriptor.f;
            var keys1 = ownKeys(O);
            var result = {
            };
            var index = 0;
            var key, descriptor;
            while(keys1.length > index){
                descriptor = getOwnPropertyDescriptor2(O, key = keys1[index++]);
                if (descriptor !== undefined) createProperty(result, key, descriptor);
            }
            return result;
        }
    });
    var getOwnPropertyDescriptors = path.Object.getOwnPropertyDescriptors;
    var getOwnPropertyDescriptors$1 = getOwnPropertyDescriptors;
    var getOwnPropertyDescriptors$2 = getOwnPropertyDescriptors$1;
    var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
    var FAILS_ON_PRIMITIVES = fails(function() {
        nativeGetOwnPropertyDescriptor$1(1);
    });
    var FORCED = !descriptors || FAILS_ON_PRIMITIVES; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
    _export({
        target: 'Object',
        stat: true,
        forced: FORCED,
        sham: !descriptors
    }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor2(it, key) {
            return nativeGetOwnPropertyDescriptor$1(toIndexedObject(it), key);
        }
    });
    var getOwnPropertyDescriptor_1 = createCommonjsModule(function(module) {
        var Object1 = path.Object;
        var getOwnPropertyDescriptor2 = module.exports = function getOwnPropertyDescriptor3(it, key) {
            return Object1.getOwnPropertyDescriptor(it, key);
        };
        if (Object1.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor2.sham = true;
    });
    var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor_1;
    var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$2;
    var html = getBuiltIn('document', 'documentElement');
    var keys1 = shared('keys');
    var sharedKey = function(key) {
        return keys1[key] || (keys1[key] = uid(key));
    };
    var GT = '>';
    var LT = '<';
    var PROTOTYPE = 'prototype';
    var SCRIPT = 'script';
    var IE_PROTO = sharedKey('IE_PROTO');
    var EmptyConstructor = function() {
    /* empty */ };
    var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
    }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
    var NullProtoObjectViaActiveX = function(activeXDocument) {
        activeXDocument.write(scriptTag(''));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak
        return temp;
    }; // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var NullProtoObjectViaIFrame = function() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var JS = 'java' + SCRIPT + ':';
        var iframeDocument;
        iframe.style.display = 'none';
        html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag('document.F=Object'));
        iframeDocument.close();
        return iframeDocument.F;
    }; // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug
    var activeXDocument;
    var NullProtoObject = function() {
        try {
            /* global ActiveXObject */ activeXDocument = document.domain && new ActiveXObject('htmlfile');
        } catch (error) {
        /* ignore */ }
        NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
        var length = enumBugKeys.length;
        while(length--)delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true; // `Object.create` method
    // https://tc39.github.io/ecma262/#sec-object.create
    var objectCreate = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
            EmptyConstructor[PROTOTYPE] = anObject(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO] = O;
        } else result = NullProtoObject();
        return Properties === undefined ? result : objectDefineProperties(result, Properties);
    };
    var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;
    var toString$1 = {
    }.toString;
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
        try {
            return nativeGetOwnPropertyNames(it);
        } catch (error) {
            return windowNames.slice();
        }
    }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var f$5 = function getOwnPropertyNames1(it) {
        return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
    };
    var objectGetOwnPropertyNamesExternal = {
        f: f$5
    };
    var redefine = function(target, key, value, options) {
        if (options && options.enumerable) target[key] = value;
        else createNonEnumerableProperty(target, key, value);
    };
    var f$6 = wellKnownSymbol;
    var wellKnownSymbolWrapped = {
        f: f$6
    };
    var defineProperty$5 = objectDefineProperty.f;
    var defineWellKnownSymbol = function(NAME) {
        var Symbol1 = path.Symbol || (path.Symbol = {
        });
        if (!has(Symbol1, NAME)) defineProperty$5(Symbol1, NAME, {
            value: wellKnownSymbolWrapped.f(NAME)
        });
    };
    var TO_STRING_TAG = wellKnownSymbol('toStringTag');
    var test = {
    };
    test[TO_STRING_TAG] = 'z';
    var toStringTagSupport = String(test) === '[object z]';
    var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag'); // ES3 wrong here
    var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
    }()) == 'Arguments'; // fallback for IE11 Script Access Denied error
    var tryGet = function(it, key) {
        try {
            return it[key];
        } catch (error) {
        /* empty */ }
    }; // getting tag from ES6+ `Object.prototype.toString`
    var classof = toStringTagSupport ? classofRaw : function(it) {
        var O, tag, result;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
         : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag // builtinTag case
         : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
         : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
    };
    // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
    var objectToString = toStringTagSupport ? {
    }.toString : function toString1() {
        return '[object ' + classof(this) + ']';
    };
    var defineProperty$6 = objectDefineProperty.f;
    var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
    var setToStringTag = function(it, TAG, STATIC, SET_METHOD) {
        if (it) {
            var target = STATIC ? it : it.prototype;
            if (!has(target, TO_STRING_TAG$2)) defineProperty$6(target, TO_STRING_TAG$2, {
                configurable: true,
                value: TAG
            });
            if (SET_METHOD && !toStringTagSupport) createNonEnumerableProperty(target, 'toString', objectToString);
        }
    };
    var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
    if (typeof sharedStore.inspectSource != 'function') sharedStore.inspectSource = function(it) {
        return functionToString.call(it);
    };
    var inspectSource = sharedStore.inspectSource;
    var WeakMap1 = global$1.WeakMap;
    var nativeWeakMap = typeof WeakMap1 === 'function' && /native code/.test(inspectSource(WeakMap1));
    var WeakMap$1 = global$1.WeakMap;
    var set, get, has$1;
    var enforce = function(it) {
        return has$1(it) ? get(it) : set(it, {
        });
    };
    var getterFor = function(TYPE) {
        return function(it) {
            var state;
            if (!isObject(it) || (state = get(it)).type !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required');
            return state;
        };
    };
    if (nativeWeakMap) {
        var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$1());
        var wmget = store$1.get;
        var wmhas = store$1.has;
        var wmset = store$1.set;
        set = function(it, metadata) {
            metadata.facade = it;
            wmset.call(store$1, it, metadata);
            return metadata;
        };
        get = function(it) {
            return wmget.call(store$1, it) || {
            };
        };
        has$1 = function(it) {
            return wmhas.call(store$1, it);
        };
    } else {
        var STATE = sharedKey('state');
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
            metadata.facade = it;
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
        };
        get = function(it) {
            return has(it, STATE) ? it[STATE] : {
            };
        };
        has$1 = function(it) {
            return has(it, STATE);
        };
    }
    var internalState = {
        set: set,
        get: get,
        has: has$1,
        enforce: enforce,
        getterFor: getterFor
    };
    var $forEach = arrayIteration.forEach;
    var HIDDEN = sharedKey('hidden');
    var SYMBOL = 'Symbol';
    var PROTOTYPE$1 = 'prototype';
    var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
    var setInternalState = internalState.set;
    var getInternalState = internalState.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE$1];
    var $Symbol = global$1.Symbol;
    var $stringify = getBuiltIn('JSON', 'stringify');
    var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
    var nativeDefineProperty$1 = objectDefineProperty.f;
    var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
    var AllSymbols = shared('symbols');
    var ObjectPrototypeSymbols = shared('op-symbols');
    var StringToSymbolRegistry = shared('string-to-symbol-registry');
    var SymbolToStringRegistry = shared('symbol-to-string-registry');
    var WellKnownSymbolsStore$1 = shared('wks');
    var QObject = global$1.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDescriptor = descriptors && fails(function() {
        return objectCreate(nativeDefineProperty$1({
        }, 'a', {
            get: function() {
                return nativeDefineProperty$1(this, 'a', {
                    value: 7
                }).a;
            }
        })).a != 7;
    }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
        nativeDefineProperty$1(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) nativeDefineProperty$1(ObjectPrototype, P, ObjectPrototypeDescriptor);
    } : nativeDefineProperty$1;
    var wrap = function(tag, description) {
        var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
        setInternalState(symbol, {
            type: SYMBOL,
            tag: tag,
            description: description
        });
        if (!descriptors) symbol.description = description;
        return symbol;
    };
    var isSymbol = useSymbolAsUid ? function(it) {
        return typeof it == 'symbol';
    } : function(it) {
        return Object(it) instanceof $Symbol;
    };
    var $defineProperty = function defineProperty2(O, P, Attributes) {
        if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPrimitive(P, true);
        anObject(Attributes);
        if (has(AllSymbols, key)) {
            if (!Attributes.enumerable) {
                if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {
                }));
                O[HIDDEN][key] = true;
            } else {
                if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = objectCreate(Attributes, {
                    enumerable: createPropertyDescriptor(0, false)
                });
            }
            return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty$1(O, key, Attributes);
    };
    var $defineProperties = function defineProperties2(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys2 = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys2, function(key) {
            if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
    };
    var $create = function create1(O, Properties) {
        return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable1(V) {
        var P = toPrimitive(V, true);
        var enumerable = nativePropertyIsEnumerable$1.call(this, P);
        if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(O, P) {
        var it = toIndexedObject(O);
        var key = toPrimitive(P, true);
        if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
        if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) descriptor.enumerable = true;
        return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames2(O) {
        var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
            if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
        });
        return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
            if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) result.push(AllSymbols[key]);
        });
        return result;
    }; // `Symbol` constructor
    // https://tc39.github.io/ecma262/#sec-symbol-constructor
    if (!nativeSymbol) {
        $Symbol = function Symbol1() {
            if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
            var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
            var tag = uid(description);
            var setter = function(value) {
                if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
                if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
            };
            if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
                configurable: true,
                set: setter
            });
            return wrap(tag, description);
        };
        redefine($Symbol[PROTOTYPE$1], 'toString', function toString2() {
            return getInternalState(this).tag;
        });
        redefine($Symbol, 'withoutSetter', function(description) {
            return wrap(uid(description), description);
        });
        objectPropertyIsEnumerable.f = $propertyIsEnumerable;
        objectDefineProperty.f = $defineProperty;
        objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
        objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;
        wellKnownSymbolWrapped.f = function(name) {
            return wrap(wellKnownSymbol(name), name);
        };
        if (descriptors) // https://github.com/tc39/proposal-Symbol-description
        nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
            configurable: true,
            get: function description() {
                return getInternalState(this).description;
            }
        });
    }
    _export({
        global: true,
        wrap: true,
        forced: !nativeSymbol,
        sham: !nativeSymbol
    }, {
        Symbol: $Symbol
    });
    $forEach(objectKeys(WellKnownSymbolsStore$1), function(name) {
        defineWellKnownSymbol(name);
    });
    _export({
        target: SYMBOL,
        stat: true,
        forced: !nativeSymbol
    }, {
        // `Symbol.for` method
        // https://tc39.github.io/ecma262/#sec-symbol.for
        'for': function(key) {
            var string = String(key);
            if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
            var symbol = $Symbol(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.github.io/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
            if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
            if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function() {
            USE_SETTER = true;
        },
        useSimple: function() {
            USE_SETTER = false;
        }
    });
    _export({
        target: 'Object',
        stat: true,
        forced: !nativeSymbol,
        sham: !descriptors
    }, {
        // `Object.create` method
        // https://tc39.github.io/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    _export({
        target: 'Object',
        stat: true,
        forced: !nativeSymbol
    }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
    }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443
    _export({
        target: 'Object',
        stat: true,
        forced: fails(function() {
            objectGetOwnPropertySymbols.f(1);
        })
    }, {
        getOwnPropertySymbols: function getOwnPropertySymbols1(it) {
            return objectGetOwnPropertySymbols.f(toObject(it));
        }
    }); // `JSON.stringify` method behavior with symbols
    // https://tc39.github.io/ecma262/#sec-json.stringify
    if ($stringify) {
        var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function() {
            var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}
            return $stringify([
                symbol
            ]) != '[null]' // WebKit converts symbol values to JSON as null
             || $stringify({
                a: symbol
            }) != '{}' // V8 throws on boxed symbols
             || $stringify(Object(symbol)) != '{}';
        });
        _export({
            target: 'JSON',
            stat: true,
            forced: FORCED_JSON_STRINGIFY
        }, {
            // eslint-disable-next-line no-unused-vars
            stringify: function stringify(it, replacer, space) {
                var args = [
                    it
                ];
                var index = 1;
                var $replacer;
                while(arguments.length > index)args.push(arguments[index++]);
                $replacer = replacer;
                if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                if (!isArray(replacer)) replacer = function(key, value) {
                    if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return $stringify.apply(null, args);
            }
        });
    } // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
    if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
     // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
    setToStringTag($Symbol, SYMBOL);
    hiddenKeys[HIDDEN] = true;
    var getOwnPropertySymbols1 = path.Object.getOwnPropertySymbols;
    var getOwnPropertySymbols$1 = getOwnPropertySymbols1;
    var getOwnPropertySymbols$2 = getOwnPropertySymbols$1;
    var iterators = {
    };
    var correctPrototypeGetter = !fails(function() {
        function F() {
        /* empty */ }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
    });
    var IE_PROTO$1 = sharedKey('IE_PROTO');
    var ObjectPrototype$1 = Object.prototype; // `Object.getPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.getprototypeof
    var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function(O) {
        O = toObject(O);
        if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
        if (typeof O.constructor == 'function' && O instanceof O.constructor) return O.constructor.prototype;
        return O instanceof Object ? ObjectPrototype$1 : null;
    };
    var ITERATOR = wellKnownSymbol('iterator');
    var BUGGY_SAFARI_ITERATORS = false;
    // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
    var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
    if ([].keys) {
        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`
        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
        else {
            PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
    }
    if (IteratorPrototype == undefined) IteratorPrototype = {
    }; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    var iteratorsCore = {
        IteratorPrototype: IteratorPrototype,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
    };
    var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
    var returnThis = function() {
        return this;
    };
    var createIteratorConstructor = function(IteratorConstructor, NAME, next) {
        var TO_STRING_TAG1 = NAME + ' Iterator';
        IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, {
            next: createPropertyDescriptor(1, next)
        });
        setToStringTag(IteratorConstructor, TO_STRING_TAG1, false, true);
        iterators[TO_STRING_TAG1] = returnThis;
        return IteratorConstructor;
    };
    var aPossiblePrototype = function(it) {
        if (!isObject(it) && it !== null) throw TypeError("Can't set " + String(it) + ' as a prototype');
        return it;
    };
    // https://tc39.github.io/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    /* eslint-disable no-proto */ var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {
    } ? function() {
        var CORRECT_SETTER = false;
        var test1 = {
        };
        var setter;
        try {
            setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
            setter.call(test1, []);
            CORRECT_SETTER = test1 instanceof Array;
        } catch (error) {
        /* empty */ }
        return function setPrototypeOf(O, proto) {
            anObject(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER) setter.call(O, proto);
            else O.__proto__ = proto;
            return O;
        };
    }() : undefined);
    var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR$1 = wellKnownSymbol('iterator');
    var KEYS = 'keys';
    var VALUES = 'values';
    var ENTRIES = 'entries';
    var returnThis$1 = function() {
        return this;
    };
    var defineIterator = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED1) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
            switch(KIND){
                case KEYS:
                    return function keys2() {
                        return new IteratorConstructor(this, KIND);
                    };
                case VALUES:
                    return function values() {
                        return new IteratorConstructor(this, KIND);
                    };
                case ENTRIES:
                    return function entries() {
                        return new IteratorConstructor(this, KIND);
                    };
            }
            return function() {
                return new IteratorConstructor(this);
            };
        };
        var TO_STRING_TAG1 = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR$1] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY; // fix native
        if (anyNativeIterator) {
            CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
            if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
                setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG1, true, true);
                iterators[TO_STRING_TAG1] = returnThis$1;
            }
        } // fix Array#{values, @@iterator}.name in V8 / FF
        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
                return nativeIterator.call(this);
            };
        } // define iterator
        if (FORCED1 && IterablePrototype[ITERATOR$1] !== defaultIterator) createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
        iterators[NAME] = defaultIterator; // export additional methods
        if (DEFAULT) {
            methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES)
            };
            if (FORCED1) for(KEY in methods)if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) redefine(IterablePrototype, KEY, methods[KEY]);
            else _export({
                target: NAME,
                proto: true,
                forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME
            }, methods);
        }
        return methods;
    };
    var ARRAY_ITERATOR = 'Array Iterator';
    var setInternalState$1 = internalState.set;
    var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.github.io/ecma262/#sec-createarrayiterator
    var es_array_iterator = defineIterator(Array, 'Array', function(iterated, kind) {
        setInternalState$1(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject(iterated),
            // target
            index: 0,
            // next index
            kind: kind // kind
        }); // `%ArrayIteratorPrototype%.next` method
    // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
    }, function() {
        var state = getInternalState$1(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
            state.target = undefined;
            return {
                value: undefined,
                done: true
            };
        }
        if (kind == 'keys') return {
            value: index,
            done: false
        };
        if (kind == 'values') return {
            value: target[index],
            done: false
        };
        return {
            value: [
                index,
                target[index]
            ],
            done: false
        };
    }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
    iterators.Arguments = iterators.Array; // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
    // iterable DOM collections
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    var domIterables = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    };
    var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
    for(var COLLECTION_NAME in domIterables){
        var Collection = global$1[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;
        if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG$3) createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
        iterators[COLLECTION_NAME] = iterators.Array;
    }
    var createMethod$3 = function(CONVERT_TO_STRING) {
        return function($this, pos) {
            var S = String(requireObjectCoercible($this));
            var position = toInteger(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
            first = S.charCodeAt(position);
            return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
    };
    var stringMultibyte = {
        // `String.prototype.codePointAt` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod$3(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod$3(true)
    };
    var charAt = stringMultibyte.charAt;
    var STRING_ITERATOR = 'String Iterator';
    var setInternalState$2 = internalState.set;
    var getInternalState$2 = internalState.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
    // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
    defineIterator(String, 'String', function(iterated) {
        setInternalState$2(this, {
            type: STRING_ITERATOR,
            string: String(iterated),
            index: 0
        }); // `%StringIteratorPrototype%.next` method
    // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
    }, function next() {
        var state = getInternalState$2(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
            value: undefined,
            done: true
        };
        point = charAt(string, index);
        state.index += point.length;
        return {
            value: point,
            done: false
        };
    });
    var ITERATOR$2 = wellKnownSymbol('iterator');
    var getIteratorMethod = function(it) {
        if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || iterators[classof(it)];
    };
    var getIterator = function(it) {
        var iteratorMethod = getIteratorMethod(it);
        if (typeof iteratorMethod != 'function') throw TypeError(String(it) + ' is not iterable');
        return anObject(iteratorMethod.call(it));
    };
    var getIterator_1 = getIterator;
    var getIterator$1 = getIterator_1;
    var getIteratorMethod_1 = getIteratorMethod;
    var getIteratorMethod$1 = getIteratorMethod_1;
    var iteratorClose = function(iterator) {
        var returnMethod = iterator['return'];
        if (returnMethod !== undefined) return anObject(returnMethod.call(iterator)).value;
    };
    var callWithSafeIterationClosing = function(iterator, fn, value, ENTRIES1) {
        try {
            return ENTRIES1 ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (error) {
            iteratorClose(iterator);
            throw error;
        }
    };
    var ITERATOR$3 = wellKnownSymbol('iterator');
    var ArrayPrototype$4 = Array.prototype; // check on default Array iterator
    var isArrayIteratorMethod = function(it) {
        return it !== undefined && (iterators.Array === it || ArrayPrototype$4[ITERATOR$3] === it);
    };
    // https://tc39.github.io/ecma262/#sec-array.from
    var arrayFrom = function from(arrayLike) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator, next1, value;
        if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case
        if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
            iterator = iteratorMethod.call(O);
            next1 = iterator.next;
            result = new C();
            for(; !(step = next1.call(iterator)).done; index++){
                value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [
                    step.value,
                    index
                ], true) : step.value;
                createProperty(result, index, value);
            }
        } else {
            length = toLength(O.length);
            result = new C(length);
            for(; length > index; index++){
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty(result, index, value);
            }
        }
        result.length = index;
        return result;
    };
    var ITERATOR$4 = wellKnownSymbol('iterator');
    var SAFE_CLOSING = false;
    try {
        var called = 0;
        var iteratorWithReturn = {
            next: function() {
                return {
                    done: !!called++
                };
            },
            'return': function() {
                SAFE_CLOSING = true;
            }
        };
        iteratorWithReturn[ITERATOR$4] = function() {
            return this;
        }; // eslint-disable-next-line no-throw-literal
        Array.from(iteratorWithReturn, function() {
            throw 2;
        });
    } catch (error) {
    /* empty */ }
    var checkCorrectnessOfIteration = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;
        try {
            var object = {
            };
            object[ITERATOR$4] = function() {
                return {
                    next: function() {
                        return {
                            done: ITERATION_SUPPORT = true
                        };
                    }
                };
            };
            exec(object);
        } catch (error) {
        /* empty */ }
        return ITERATION_SUPPORT;
    };
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
        Array.from(iterable);
    }); // `Array.from` method
    // https://tc39.github.io/ecma262/#sec-array.from
    _export({
        target: 'Array',
        stat: true,
        forced: INCORRECT_ITERATION
    }, {
        from: arrayFrom
    });
    var from1 = path.Array.from;
    var from$1 = from1;
    var from$2 = from$1;
    // https://tc39.github.io/ecma262/#sec-array.prototype.fill
    var arrayFill = function fill(value) {
        var O = toObject(this);
        var length = toLength(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
        while(endPos > index)O[index++] = value;
        return O;
    };
    // https://tc39.github.io/ecma262/#sec-array.prototype.fill
    _export({
        target: 'Array',
        proto: true
    }, {
        fill: arrayFill
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
    var fill1 = entryVirtual('Array').fill;
    var slice$1 = [].slice;
    var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check
    var wrap$1 = function(scheduler) {
        return function(handler, timeout) {
            var boundArgs = arguments.length > 2;
            var args = boundArgs ? slice$1.call(arguments, 2) : undefined;
            return scheduler(boundArgs ? function() {
                // eslint-disable-next-line no-new-func
                (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
            } : handler, timeout);
        };
    }; // ie9- setTimeout & setInterval additional parameters fix
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
    _export({
        global: true,
        bind: true,
        forced: MSIE
    }, {
        // `setTimeout` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
        setTimeout: wrap$1(global$1.setTimeout),
        // `setInterval` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
        setInterval: wrap$1(global$1.setInterval)
    });
    var setTimeout$1 = path.setTimeout;
    var setTimeout$2 = setTimeout$1;
    var $stringify$1 = getBuiltIn('JSON', 'stringify');
    var re = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var fix = function(match1, offset, string) {
        var prev = string.charAt(offset - 1);
        var next1 = string.charAt(offset + 1);
        if (low.test(match1) && !hi.test(next1) || hi.test(match1) && !low.test(prev)) return '\\u' + match1.charCodeAt(0).toString(16);
        return match1;
    };
    var FORCED$1 = fails(function() {
        return $stringify$1('\uDF06\uD834') !== '"\\udf06\\ud834"' || $stringify$1('\uDEAD') !== '"\\udead"';
    });
    if ($stringify$1) // https://github.com/tc39/proposal-well-formed-stringify
    _export({
        target: 'JSON',
        stat: true,
        forced: FORCED$1
    }, {
        // eslint-disable-next-line no-unused-vars
        stringify: function stringify(it, replacer, space) {
            var result = $stringify$1.apply(null, arguments);
            return typeof result == 'string' ? result.replace(re, fix) : result;
        }
    });
    if (!path.JSON) path.JSON = {
        stringify: JSON.stringify
    }; // eslint-disable-next-line no-unused-vars
    var stringify = function stringify1(it, replacer, space) {
        return path.JSON.stringify.apply(null, arguments);
    };
    var stringify$1 = stringify;
    var stringify$2 = stringify$1;
    // https://tc39.github.io/ecma262/#sec-object.create
    _export({
        target: 'Object',
        stat: true,
        sham: !descriptors
    }, {
        create: objectCreate
    });
    var Object$1 = path.Object;
    var create2 = function create3(P, D) {
        return Object$1.create(P, D);
    };
    var create$1 = create2;
    var create$2 = create$1;
    function _defineProperty(obj, key, value) {
        if (key in obj) defineProperty$2(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    var defineProperty$7 = _defineProperty;
    // a string of all valid unicode whitespaces
    // eslint-disable-next-line max-len
    var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
    var whitespace = '[' + whitespaces + ']';
    var ltrim = RegExp('^' + whitespace + whitespace + '*');
    var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
    var createMethod$4 = function(TYPE) {
        return function($this) {
            var string = String(requireObjectCoercible($this));
            if (TYPE & 1) string = string.replace(ltrim, '');
            if (TYPE & 2) string = string.replace(rtrim, '');
            return string;
        };
    };
    var stringTrim = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
        start: createMethod$4(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
        end: createMethod$4(2),
        // `String.prototype.trim` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.trim
        trim: createMethod$4(3)
    };
    var non = '\u200B\u0085\u180E'; // check that a method works with the correct list
    // of whitespaces and has a correct name
    var stringTrimForced = function(METHOD_NAME) {
        return fails(function() {
            return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
    };
    var $trim = stringTrim.trim; // `String.prototype.trim` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.trim
    _export({
        target: 'String',
        proto: true,
        forced: stringTrimForced('trim')
    }, {
        trim: function trim() {
            return $trim(this);
        }
    });
    var trim = entryVirtual('String').trim;
    var $indexOf = arrayIncludes.indexOf;
    var nativeIndexOf = [].indexOf;
    var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [
        1
    ].indexOf(1, -0) < 0;
    var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');
    var USES_TO_LENGTH$3 = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
    }); // `Array.prototype.indexOf` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
    _export({
        target: 'Array',
        proto: true,
        forced: NEGATIVE_ZERO || !STRICT_METHOD$1 || !USES_TO_LENGTH$3
    }, {
        indexOf: function indexOf1(searchElement) {
            return NEGATIVE_ZERO // convert -0 to +0
             ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var indexOf$1 = entryVirtual('Array').indexOf;
    var trim$1 = stringTrim.trim;
    var $parseInt = global$1.parseInt;
    var hex = /^[+-]?0[Xx]/;
    var FORCED$2 = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22; // `parseInt` method
    // https://tc39.github.io/ecma262/#sec-parseint-string-radix
    var numberParseInt = FORCED$2 ? function parseInt1(string, radix) {
        var S = trim$1(String(string));
        return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
    } : $parseInt;
    // https://tc39.github.io/ecma262/#sec-parseint-string-radix
    _export({
        global: true,
        forced: parseInt != numberParseInt
    }, {
        parseInt: numberParseInt
    });
    var propertyIsEnumerable2 = objectPropertyIsEnumerable.f; // `Object.{ entries, values }` methods implementation
    var createMethod$5 = function(TO_ENTRIES) {
        return function(it) {
            var O = toIndexedObject(it);
            var keys2 = objectKeys(O);
            var length = keys2.length;
            var i = 0;
            var result = [];
            var key;
            while(length > i){
                key = keys2[i++];
                if (!descriptors || propertyIsEnumerable2.call(O, key)) result.push(TO_ENTRIES ? [
                    key,
                    O[key]
                ] : O[key]);
            }
            return result;
        };
    };
    var objectToArray = {
        // `Object.entries` method
        // https://tc39.github.io/ecma262/#sec-object.entries
        entries: createMethod$5(true),
        // `Object.values` method
        // https://tc39.github.io/ecma262/#sec-object.values
        values: createMethod$5(false)
    };
    var $values = objectToArray.values; // `Object.values` method
    // https://tc39.github.io/ecma262/#sec-object.values
    _export({
        target: 'Object',
        stat: true
    }, {
        values: function values(O) {
            return $values(O);
        }
    });
    var values1 = path.Object.values;
    var FAILS_ON_PRIMITIVES$1 = fails(function() {
        objectGetPrototypeOf(1);
    }); // `Object.getPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.getprototypeof
    _export({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES$1,
        sham: !correctPrototypeGetter
    }, {
        getPrototypeOf: function getPrototypeOf(it) {
            return objectGetPrototypeOf(toObject(it));
        }
    });
    var getPrototypeOf = path.Object.getPrototypeOf;
    var $includes = arrayIncludes.includes;
    var USES_TO_LENGTH$4 = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
    }); // `Array.prototype.includes` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.includes
    _export({
        target: 'Array',
        proto: true,
        forced: !USES_TO_LENGTH$4
    }, {
        includes: function includes(el) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
    var includes = entryVirtual('Array').includes;
    var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
    // https://tc39.github.io/ecma262/#sec-isregexp
    var isRegexp = function(it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
    };
    var notARegexp = function(it) {
        if (isRegexp(it)) throw TypeError("The method doesn't accept regular expressions");
        return it;
    };
    var MATCH$1 = wellKnownSymbol('match');
    var correctIsRegexpLogic = function(METHOD_NAME) {
        var regexp = /./;
        try {
            '/./'[METHOD_NAME](regexp);
        } catch (error1) {
            try {
                regexp[MATCH$1] = false;
                return '/./'[METHOD_NAME](regexp);
            } catch (error2) {
            /* empty */ }
        }
        return false;
    };
    // https://tc39.github.io/ecma262/#sec-string.prototype.includes
    _export({
        target: 'String',
        proto: true,
        forced: !correctIsRegexpLogic('includes')
    }, {
        includes: function includes1(searchString) {
            return !!~String(requireObjectCoercible(this)).indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var includes$1 = entryVirtual('String').includes;
    var nativeAssign = Object.assign;
    var defineProperty$8 = Object.defineProperty; // `Object.assign` method
    // https://tc39.github.io/ecma262/#sec-object.assign
    var objectAssign = !nativeAssign || fails(function() {
        // should have correct order of operations (Edge bug)
        if (descriptors && nativeAssign({
            b: 1
        }, nativeAssign(defineProperty$8({
        }, 'a', {
            enumerable: true,
            get: function() {
                defineProperty$8(this, 'b', {
                    value: 3,
                    enumerable: false
                });
            }
        }), {
            b: 2
        })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)
        var A = {
        };
        var B = {
        }; // eslint-disable-next-line no-undef
        var symbol = Symbol();
        var alphabet = 'abcdefghijklmnopqrst';
        A[symbol] = 7;
        alphabet.split('').forEach(function(chr) {
            B[chr] = chr;
        });
        return nativeAssign({
        }, A)[symbol] != 7 || objectKeys(nativeAssign({
        }, B)).join('') != alphabet;
    }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols2 = objectGetOwnPropertySymbols.f;
        var propertyIsEnumerable3 = objectPropertyIsEnumerable.f;
        while(argumentsLength > index){
            var S = indexedObject(arguments[index++]);
            var keys2 = getOwnPropertySymbols2 ? objectKeys(S).concat(getOwnPropertySymbols2(S)) : objectKeys(S);
            var length = keys2.length;
            var j = 0;
            var key;
            while(length > j){
                key = keys2[j++];
                if (!descriptors || propertyIsEnumerable3.call(S, key)) T[key] = S[key];
            }
        }
        return T;
    } : nativeAssign;
    // https://tc39.github.io/ecma262/#sec-object.assign
    _export({
        target: 'Object',
        stat: true,
        forced: Object.assign !== objectAssign
    }, {
        assign: objectAssign
    });
    var assign1 = path.Object.assign;
    var assign$1 = assign1;
    var assign$2 = assign$1;
    var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('splice');
    var USES_TO_LENGTH$5 = arrayMethodUsesToLength('splice', {
        ACCESSORS: true,
        0: 0,
        1: 2
    });
    var max$1 = Math.max;
    var min$2 = Math.min;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.splice
    // with adding support of @@species
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$5
    }, {
        splice: function splice(start, deleteCount) {
            var O = toObject(this);
            var len = toLength(O.length);
            var actualStart = toAbsoluteIndex(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from2, to;
            if (argumentsLength === 0) insertCount = actualDeleteCount = 0;
            else if (argumentsLength === 1) {
                insertCount = 0;
                actualDeleteCount = len - actualStart;
            } else {
                insertCount = argumentsLength - 2;
                actualDeleteCount = min$2(max$1(toInteger(deleteCount), 0), len - actualStart);
            }
            if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
            A = arraySpeciesCreate(O, actualDeleteCount);
            for(k = 0; k < actualDeleteCount; k++){
                from2 = actualStart + k;
                if (from2 in O) createProperty(A, k, O[from2]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
                for(k = actualStart; k < len - actualDeleteCount; k++){
                    from2 = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from2 in O) O[to] = O[from2];
                    else delete O[to];
                }
                for(k = len; k > len - actualDeleteCount + insertCount; k--)delete O[k - 1];
            } else if (insertCount > actualDeleteCount) for(k = len - actualDeleteCount; k > actualStart; k--){
                from2 = k + actualDeleteCount - 1;
                to = k + insertCount - 1;
                if (from2 in O) O[to] = O[from2];
                else delete O[to];
            }
            for(k = 0; k < insertCount; k++)O[k + actualStart] = arguments[k + 2];
            O.length = len - actualDeleteCount + insertCount;
            return A;
        }
    });
    var splice = entryVirtual('Array').splice;
    var ArrayPrototype$5 = Array.prototype;
    var splice_1 = function(it) {
        var own = it.splice;
        return it === ArrayPrototype$5 || it instanceof Array && own === ArrayPrototype$5.splice ? splice : own;
    };
    var splice$1 = splice_1;
    var splice$2 = splice$1;
    var nativeReverse = [].reverse;
    var test$1 = [
        1,
        2
    ]; // `Array.prototype.reverse` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reverse
    // fix for Safari 12.0 bug
    // https://bugs.webkit.org/show_bug.cgi?id=188794
    _export({
        target: 'Array',
        proto: true,
        forced: String(test$1) === String(test$1.reverse())
    }, {
        reverse: function reverse() {
            // eslint-disable-next-line no-self-assign
            if (isArray(this)) this.length = this.length;
            return nativeReverse.call(this);
        }
    });
    var reverse = entryVirtual('Array').reverse;
    var ArrayPrototype$6 = Array.prototype;
    var reverse_1 = function(it) {
        var own = it.reverse;
        return it === ArrayPrototype$6 || it instanceof Array && own === ArrayPrototype$6.reverse ? reverse : own;
    };
    var reverse$1 = reverse_1;
    var reverse$2 = reverse$1;
    var $forEach$1 = arrayIteration.forEach;
    var STRICT_METHOD$2 = arrayMethodIsStrict('forEach');
    var USES_TO_LENGTH$6 = arrayMethodUsesToLength('forEach'); // `Array.prototype.forEach` method implementation
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
    var arrayForEach = !STRICT_METHOD$2 || !USES_TO_LENGTH$6 ? function forEach(callbackfn) {
        return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    } : [].forEach;
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
    _export({
        target: 'Array',
        proto: true,
        forced: [].forEach != arrayForEach
    }, {
        forEach: arrayForEach
    });
    var forEach1 = entryVirtual('Array').forEach;
    var forEach$1 = forEach1;
    var ArrayPrototype$7 = Array.prototype;
    var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
    };
    var forEach_1 = function(it) {
        var own = it.forEach;
        return it === ArrayPrototype$7 || it instanceof Array && own === ArrayPrototype$7.forEach // eslint-disable-next-line no-prototype-builtins
         || DOMIterables.hasOwnProperty(classof(it)) ? forEach$1 : own;
    };
    var forEach$2 = forEach_1;
    // https://tc39.github.io/ecma262/#sec-array.isarray
    _export({
        target: 'Array',
        stat: true
    }, {
        isArray: isArray
    });
    var isArray$1 = path.Array.isArray;
    var isArray$2 = isArray$1;
    var isArray$3 = isArray$2;
    function _arrayWithHoles(arr) {
        if (isArray$3(arr)) return arr;
    }
    var arrayWithHoles = _arrayWithHoles;
    var ITERATOR$5 = wellKnownSymbol('iterator');
    var isIterable = function(it) {
        var O = Object(it);
        return O[ITERATOR$5] !== undefined || '@@iterator' in O // eslint-disable-next-line no-prototype-builtins
         || iterators.hasOwnProperty(classof(O));
    };
    var isIterable_1 = isIterable;
    var isIterable$1 = isIterable_1;
    var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/679
    var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
    });
    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');
    var isConcatSpreadable = function(O) {
        if (!isObject(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray(O);
    };
    var FORCED$3 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.concat
    // with adding support of @@isConcatSpreadable and @@species
    _export({
        target: 'Array',
        proto: true,
        forced: FORCED$3
    }, {
        concat: function concat(arg) {
            // eslint-disable-line no-unused-vars
            var O = toObject(this);
            var A = arraySpeciesCreate(O, 0);
            var n = 0;
            var i, k, length, len, E;
            for(i = -1, length = arguments.length; i < length; i++){
                E = i === -1 ? O : arguments[i];
                if (isConcatSpreadable(E)) {
                    len = toLength(E.length);
                    if (n + len > MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for(k = 0; k < len; k++, n++)if (k in E) createProperty(A, n, E[k]);
                } else {
                    if (n >= MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty(A, n++, E);
                }
            }
            A.length = n;
            return A;
        }
    });
    // https://tc39.github.io/ecma262/#sec-symbol.asynciterator
    defineWellKnownSymbol('asyncIterator');
    // https://tc39.github.io/ecma262/#sec-symbol.hasinstance
    defineWellKnownSymbol('hasInstance');
    // https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
    defineWellKnownSymbol('isConcatSpreadable');
    // https://tc39.github.io/ecma262/#sec-symbol.iterator
    defineWellKnownSymbol('iterator');
    // https://tc39.github.io/ecma262/#sec-symbol.match
    defineWellKnownSymbol('match');
    defineWellKnownSymbol('matchAll');
    // https://tc39.github.io/ecma262/#sec-symbol.replace
    defineWellKnownSymbol('replace');
    // https://tc39.github.io/ecma262/#sec-symbol.search
    defineWellKnownSymbol('search');
    // https://tc39.github.io/ecma262/#sec-symbol.species
    defineWellKnownSymbol('species');
    // https://tc39.github.io/ecma262/#sec-symbol.split
    defineWellKnownSymbol('split');
    // https://tc39.github.io/ecma262/#sec-symbol.toprimitive
    defineWellKnownSymbol('toPrimitive');
    // https://tc39.github.io/ecma262/#sec-symbol.tostringtag
    defineWellKnownSymbol('toStringTag');
    // https://tc39.github.io/ecma262/#sec-symbol.unscopables
    defineWellKnownSymbol('unscopables');
    // https://tc39.github.io/ecma262/#sec-json-@@tostringtag
    setToStringTag(global$1.JSON, 'JSON', true);
    var symbol = path.Symbol;
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol('asyncDispose');
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol('dispose');
    // https://github.com/tc39/proposal-observable
    defineWellKnownSymbol('observable');
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol('patternMatch');
    defineWellKnownSymbol('replaceAll');
    var symbol$1 = symbol;
    var symbol$2 = symbol$1;
    function _iterableToArrayLimit(arr, i) {
        if (typeof symbol$2 === "undefined" || !isIterable$1(Object(arr))) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for(var _i = getIterator$1(arr), _s; !(_n = (_s = _i.next()).done); _n = true){
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally{
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    var iterableToArrayLimit = _iterableToArrayLimit;
    var from$3 = from1;
    var from$4 = from$3;
    var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('slice');
    var USES_TO_LENGTH$7 = arrayMethodUsesToLength('slice', {
        ACCESSORS: true,
        0: 0,
        1: 2
    });
    var SPECIES$2 = wellKnownSymbol('species');
    var nativeSlice = [].slice;
    var max$2 = Math.max; // `Array.prototype.slice` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.slice
    // fallback for not array-like ES3 strings and DOM objects
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$7
    }, {
        slice: function slice1(start, end) {
            var O = toIndexedObject(this);
            var length = toLength(O.length);
            var k = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
            var Constructor, result, n;
            if (isArray(O)) {
                Constructor = O.constructor; // cross-realm fallback
                if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) Constructor = undefined;
                else if (isObject(Constructor)) {
                    Constructor = Constructor[SPECIES$2];
                    if (Constructor === null) Constructor = undefined;
                }
                if (Constructor === Array || Constructor === undefined) return nativeSlice.call(O, k, fin);
            }
            result = new (Constructor === undefined ? Array : Constructor)(max$2(fin - k, 0));
            for(n = 0; k < fin; k++, n++)if (k in O) createProperty(result, n, O[k]);
            result.length = n;
            return result;
        }
    });
    var slice$2 = entryVirtual('Array').slice;
    var ArrayPrototype$8 = Array.prototype;
    var slice_1 = function(it) {
        var own = it.slice;
        return it === ArrayPrototype$8 || it instanceof Array && own === ArrayPrototype$8.slice ? slice$2 : own;
    };
    var slice$3 = slice_1;
    var slice$4 = slice$3;
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    var arrayLikeToArray = _arrayLikeToArray;
    function _unsupportedIterableToArray(o, minLen) {
        var _context;
        if (!o) return;
        if (typeof o === "string") return arrayLikeToArray(o, minLen);
        var n = slice$4(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$4(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
    }
    var unsupportedIterableToArray = _unsupportedIterableToArray;
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var nonIterableRest = _nonIterableRest;
    function _slicedToArray(arr, i) {
        return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }
    var slicedToArray = _slicedToArray;
    // https://tc39.github.io/ecma262/#sec-date.now
    _export({
        target: 'Date',
        stat: true
    }, {
        now: function now() {
            return new Date().getTime();
        }
    });
    var now = path.Date.now;
    var FAILS_ON_PRIMITIVES$2 = fails(function() {
        objectKeys(1);
    }); // `Object.keys` method
    // https://tc39.github.io/ecma262/#sec-object.keys
    _export({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES$2
    }, {
        keys: function keys3(it) {
            return objectKeys(toObject(it));
        }
    });
    var keys$1 = path.Object.keys;
    var keys$2 = keys$1;
    var keys$3 = keys$2;
    var isArray$4 = isArray$1;
    var isArray$5 = isArray$4;
    var iterator = wellKnownSymbolWrapped.f('iterator');
    var iterator$1 = iterator;
    var iterator$2 = iterator$1;
    var _typeof_1 = createCommonjsModule(function(module) {
        function _typeof(obj) {
            if (typeof symbol$2 === "function" && typeof iterator$2 === "symbol") module.exports = _typeof = function _typeof1(obj1) {
                return typeof obj1;
            };
            else module.exports = _typeof = function _typeof2(obj1) {
                return obj1 && typeof symbol$2 === "function" && obj1.constructor === symbol$2 && obj1 !== symbol$2.prototype ? "symbol" : typeof obj1;
            };
            return _typeof(obj);
        }
        module.exports = _typeof;
    });
    // https://tc39.github.io/ecma262/#sec-reflect.ownkeys
    _export({
        target: 'Reflect',
        stat: true
    }, {
        ownKeys: ownKeys
    });
    var ownKeys$1 = path.Reflect.ownKeys;
    var ownKeys$2 = ownKeys$1;
    var ownKeys$3 = ownKeys$2;
    var slice$5 = slice_1;
    var slice$6 = slice$5;
    function _arrayWithoutHoles(arr) {
        if (isArray$3(arr)) return arrayLikeToArray(arr);
    }
    var arrayWithoutHoles = _arrayWithoutHoles;
    function _iterableToArray(iter) {
        if (typeof symbol$2 !== "undefined" && isIterable$1(Object(iter))) return from$4(iter);
    }
    var iterableToArray = _iterableToArray;
    function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var nonIterableSpread = _nonIterableSpread;
    function _toConsumableArray(arr) {
        return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
    }
    var toConsumableArray = _toConsumableArray;
    var concat = entryVirtual('Array').concat;
    var ArrayPrototype$9 = Array.prototype;
    var concat_1 = function(it) {
        var own = it.concat;
        return it === ArrayPrototype$9 || it instanceof Array && own === ArrayPrototype$9.concat ? concat : own;
    };
    var concat$1 = concat_1;
    var concat$2 = concat$1;
    var symbol$3 = symbol;
    var symbol$4 = symbol$3;
    var componentEmitter = createCommonjsModule(function(module) {
        module.exports = Emitter;
        /**
	   * Initialize a new `Emitter`.
	   *
	   * @api public
	   */ function Emitter(obj) {
            if (obj) return mixin(obj);
        }
        /**
	   * Mixin the emitter properties.
	   *
	   * @param {Object} obj
	   * @return {Object}
	   * @api private
	   */ function mixin(obj) {
            for(var key in Emitter.prototype)obj[key] = Emitter.prototype[key];
            return obj;
        }
        /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */ Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
            this._callbacks = this._callbacks || {
            };
            (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
            return this;
        };
        /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */ Emitter.prototype.once = function(event, fn) {
            function on() {
                this.off(event, on);
                fn.apply(this, arguments);
            }
            on.fn = fn;
            this.on(event, on);
            return this;
        };
        /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */ Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
            this._callbacks = this._callbacks || {
            }; // all
            if (0 == arguments.length) {
                this._callbacks = {
                };
                return this;
            } // specific event
            var callbacks = this._callbacks['$' + event];
            if (!callbacks) return this; // remove all handlers
            if (1 == arguments.length) {
                delete this._callbacks['$' + event];
                return this;
            } // remove specific handler
            var cb;
            for(var i = 0; i < callbacks.length; i++){
                cb = callbacks[i];
                if (cb === fn || cb.fn === fn) {
                    callbacks.splice(i, 1);
                    break;
                }
            } // Remove event specific arrays for event types that no
            // one is subscribed for to avoid memory leak.
            if (callbacks.length === 0) delete this._callbacks['$' + event];
            return this;
        };
        /**
	   * Emit `event` with the given args.
	   *
	   * @param {String} event
	   * @param {Mixed} ...
	   * @return {Emitter}
	   */ Emitter.prototype.emit = function(event) {
            this._callbacks = this._callbacks || {
            };
            var args = new Array(arguments.length - 1), callbacks = this._callbacks['$' + event];
            for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
            if (callbacks) {
                callbacks = callbacks.slice(0);
                for(var i = 0, len = callbacks.length; i < len; ++i)callbacks[i].apply(this, args);
            }
            return this;
        };
        /**
	   * Return array of callbacks for `event`.
	   *
	   * @param {String} event
	   * @return {Array}
	   * @api public
	   */ Emitter.prototype.listeners = function(event) {
            this._callbacks = this._callbacks || {
            };
            return this._callbacks['$' + event] || [];
        };
        /**
	   * Check if this emitter has `event` handlers.
	   *
	   * @param {String} event
	   * @return {Boolean}
	   * @api public
	   */ Emitter.prototype.hasListeners = function(event) {
            return !!this.listeners(event).length;
        };
    });
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function _extends() {
        _extends = Object.assign || function(target) {
            for(var i = 1; i < arguments.length; i++){
                var source = arguments[i];
                for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
            }
            return target;
        };
        return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    function _assertThisInitialized(self) {
        if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self;
    }
    /**
	 * @private
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} target
	 * @param {...Object} objects_to_assign
	 * @returns {Object} target
	 */ var assign$3;
    if (typeof Object.assign !== 'function') assign$3 = function assign2(target) {
        if (target === undefined || target === null) throw new TypeError('Cannot convert undefined or null to object');
        var output = Object(target);
        for(var index = 1; index < arguments.length; index++){
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for(var nextKey in source)if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];
            }
        }
        return output;
    };
    else assign$3 = Object.assign;
    var assign$1$1 = assign$3;
    var VENDOR_PREFIXES = [
        '',
        'webkit',
        'Moz',
        'MS',
        'ms',
        'o'
    ];
    var TEST_ELEMENT = typeof document === "undefined" ? {
        style: {
        }
    } : document.createElement('div');
    var TYPE_FUNCTION = 'function';
    var round = Math.round, abs = Math.abs;
    var now$1 = Date.now;
    /**
	 * @private
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */ function prefixed(obj, property) {
        var prefix;
        var prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while(i < VENDOR_PREFIXES.length){
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) return prop;
            i++;
        }
        return undefined;
    }
    /* eslint-disable no-new-func, no-nested-ternary */ var win;
    if (typeof window === "undefined") // window is undefined in node.js
    win = {
    };
    else win = window;
    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) return false;
        var touchMap = {
        };
        var cssSupports = win.CSS && win.CSS.supports;
        [
            'auto',
            'manipulation',
            'pan-y',
            'pan-x',
            'pan-x pan-y',
            'none'
        ].forEach(function(val) {
            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            return touchMap[val] = cssSupports ? win.CSS.supports('touch-action', val) : true;
        });
        return touchMap;
    }
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';
    var TOUCH_ACTION_MAP = getTouchActionProps();
    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
    var SUPPORT_TOUCH = 'ontouchstart' in win;
    var SUPPORT_POINTER_EVENTS = prefixed(win, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';
    var COMPUTE_INTERVAL = 25;
    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;
    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;
    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    var PROPS_XY = [
        'x',
        'y'
    ];
    var PROPS_CLIENT_XY = [
        'clientX',
        'clientY'
    ];
    /**
	 * @private
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */ function each(obj, iterator1, context) {
        var i;
        if (!obj) return;
        if (obj.forEach) obj.forEach(iterator1, context);
        else if (obj.length !== undefined) {
            i = 0;
            while(i < obj.length){
                iterator1.call(context, obj[i], i, obj);
                i++;
            }
        } else for(i in obj)obj.hasOwnProperty(i) && iterator1.call(context, obj[i], i, obj);
    }
    /**
	 * @private
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */ function boolOrFn(val, args) {
        if (typeof val === TYPE_FUNCTION) return val.apply(args ? args[0] || undefined : undefined, args);
        return val;
    }
    /**
	 * @private
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */ function inStr(str, find) {
        return str.indexOf(find) > -1;
    }
    /**
	 * @private
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */ function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) return TOUCH_ACTION_NONE;
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) return TOUCH_ACTION_NONE;
         // pan-x OR pan-y
        if (hasPanX || hasPanY) return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
         // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) return TOUCH_ACTION_MANIPULATION;
        return TOUCH_ACTION_AUTO;
    }
    /**
	 * @private
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */ var TouchAction = /*#__PURE__*/ function() {
        function TouchAction1(manager, value) {
            this.manager = manager;
            this.set(value);
        }
        /**
	   * @private
	   * set the touchAction value on the element or enable the polyfill
	   * @param {String} value
	   */ var _proto = TouchAction1.prototype;
        _proto.set = function set1(value) {
            // find out the touch-action by the event handlers
            if (value === TOUCH_ACTION_COMPUTE) value = this.compute();
            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            this.actions = value.toLowerCase().trim();
        };
        /**
	   * @private
	   * just re-set the touchAction value
	   */ _proto.update = function update() {
            this.set(this.manager.options.touchAction);
        };
        /**
	   * @private
	   * compute the value for the touchAction property based on the recognizer's settings
	   * @returns {String} value
	   */ _proto.compute = function compute() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [
                    recognizer
                ])) actions = actions.concat(recognizer.getTouchAction());
            });
            return cleanTouchActions(actions.join(' '));
        };
        /**
	   * @private
	   * this method is called on each input cycle and provides the preventing of the browser behavior
	   * @param {Object} input
	   */ _proto.preventDefaults = function preventDefaults(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection; // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }
            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
            if (hasNone) {
                // do not prevent defaults if this is a tap gesture
                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;
                if (isTapPointer && isTapMovement && isTapTouchTime) return;
            }
            if (hasPanX && hasPanY) // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) return this.preventSrc(srcEvent);
        };
        /**
	   * @private
	   * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	   * @param {Object} srcEvent
	   */ _proto.preventSrc = function preventSrc(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        };
        return TouchAction1;
    }();
    /**
	 * @private
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */ function hasParent(node, parent) {
        while(node){
            if (node === parent) return true;
            node = node.parentNode;
        }
        return false;
    }
    /**
	 * @private
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */ function getCenter(pointers) {
        var pointersLength = pointers.length; // no need to loop when only one touch
        if (pointersLength === 1) return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
        var x = 0;
        var y = 0;
        var i = 0;
        while(i < pointersLength){
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }
        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }
    /**
	 * @private
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */ function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while(i < input.pointers.length){
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }
        return {
            timeStamp: now$1(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }
    /**
	 * @private
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */ function getDistance(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
    }
    /**
	 * @private
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */ function getAngle(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
	 * @private
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */ function getDirection(x, y) {
        if (x === y) return DIRECTION_NONE;
        if (abs(x) >= abs(y)) return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    function computeDeltaXY(session, input) {
        var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;
        // jscs throwing error on defalut destructured values and without defaults tests fail
        var offset = session.offsetDelta || {
        };
        var prevDelta = session.prevDelta || {
        };
        var prevInput = session.prevInput || {
        };
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
	 * @private
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */ function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }
    /**
	 * @private
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */ function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }
    /**
	 * @private
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */ function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
	 * @private
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */ function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input;
        var deltaTime = input.timeStamp - last.timeStamp;
        var velocity;
        var velocityX;
        var velocityY;
        var direction;
        if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }
    /**
	* @private
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */ function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length; // store the first input to calculate the distance and direction
        if (!session.firstInput) session.firstInput = simpleCloneInputData(input);
         // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) session.firstMultiple = simpleCloneInputData(input);
        else if (pointersLength === 1) session.firstMultiple = false;
        var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now$1();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input); // find the correct target
        var target = manager.element;
        var srcEvent = input.srcEvent;
        var srcEventTarget;
        if (srcEvent.composedPath) srcEventTarget = srcEvent.composedPath()[0];
        else if (srcEvent.path) srcEventTarget = srcEvent.path[0];
        else srcEventTarget = srcEvent.target;
        if (hasParent(srcEventTarget, target)) target = srcEventTarget;
        input.target = target;
    }
    /**
	 * @private
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */ function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) manager.session = {
        };
         // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType; // compute scale, rotation etc
        computeInputData(manager, input); // emit secret event
        manager.emit('hammer.input', input);
        manager.recognize(input);
        manager.session.prevInput = input;
    }
    /**
	 * @private
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */ function splitStr(str) {
        return str.trim().split(/\s+/g);
    }
    /**
	 * @private
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */ function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }
    /**
	 * @private
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */ function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }
    /**
	 * @private
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */ function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
    }
    /**
	 * @private
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */ var Input = /*#__PURE__*/ function() {
        function Input1(manager, callback) {
            var self = this;
            this.manager = manager;
            this.callback = callback;
            this.element = manager.element;
            this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
            // so when disabled the input events are completely bypassed.
            this.domHandler = function(ev) {
                if (boolOrFn(manager.options.enable, [
                    manager
                ])) self.handler(ev);
            };
            this.init();
        }
        /**
	   * @private
	   * should handle the inputEvent data and trigger the callback
	   * @virtual
	   */ var _proto = Input1.prototype;
        _proto.handler = function handler() {
        };
        /**
	   * @private
	   * bind the events
	   */ _proto.init = function init() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        /**
	   * @private
	   * unbind the events
	   */ _proto.destroy = function destroy() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        return Input1;
    }();
    /**
	 * @private
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */ function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) return src.indexOf(find);
        else {
            var i = 0;
            while(i < src.length){
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) // do not use === here, test fails
                return i;
                i++;
            }
            return -1;
        }
    }
    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    }; // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };
    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive
    if (win.MSPointerEvent && !win.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }
    /**
	 * @private
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */ var PointerEventInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(PointerEventInput2, _Input);
        function PointerEventInput2() {
            var _this;
            var proto = PointerEventInput2.prototype;
            proto.evEl = POINTER_ELEMENT_EVENTS;
            proto.evWin = POINTER_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.store = _this.manager.session.pointerEvents = [];
            return _this;
        }
        /**
	   * @private
	   * handle mouse events
	   * @param {Object} ev
	   */ var _proto = PointerEventInput2.prototype;
        _proto.handler = function handler(ev) {
            var store1 = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store
            var storeIndex = inArray(store1, ev.pointerId, 'pointerId'); // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store1.push(ev);
                    storeIndex = store1.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) removePointer = true;
             // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) return;
             // update the event in the store
            store1[storeIndex] = ev;
            this.callback(this.manager, eventType, {
                pointers: store1,
                changedPointers: [
                    ev
                ],
                pointerType: pointerType,
                srcEvent: ev
            });
            if (removePointer) // remove from the store
            store1.splice(storeIndex, 1);
        };
        return PointerEventInput2;
    }(Input);
    /**
	 * @private
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */ function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }
    /**
	 * @private
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */ function uniqueArray(src, key, sort) {
        var results = [];
        var values1 = [];
        var i = 0;
        while(i < src.length){
            var val = key ? src[i][key] : src[i];
            if (inArray(values1, val) < 0) results.push(src[i]);
            values1[i] = val;
            i++;
        }
        if (sort) {
            if (!key) results = results.sort();
            else results = results.sort(function(a, b) {
                return a[key] > b[key];
            });
        }
        return results;
    }
    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
	 * @private
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */ var TouchInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(TouchInput2, _Input);
        function TouchInput2() {
            var _this;
            TouchInput2.prototype.evTarget = TOUCH_TARGET_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.targetIds = {
            }; // this.evTarget = TOUCH_TARGET_EVENTS;
            return _this;
        }
        var _proto = TouchInput2.prototype;
        _proto.handler = function handler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) return;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return TouchInput2;
    }(Input);
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds; // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [
                allTouches,
                allTouches
            ];
        }
        var i;
        var targetTouches;
        var changedTouches = toArray(ev.changedTouches);
        var changedTargetTouches = [];
        var target = this.target; // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        }); // collect touches
        if (type === INPUT_START) {
            i = 0;
            while(i < targetTouches.length){
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        } // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while(i < changedTouches.length){
            if (targetIds[changedTouches[i].identifier]) changedTargetTouches.push(changedTouches[i]);
             // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) delete targetIds[changedTouches[i].identifier];
            i++;
        }
        if (!changedTargetTouches.length) return;
        return [
            uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
            changedTargetTouches
        ];
    }
    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };
    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
    /**
	 * @private
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */ var MouseInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(MouseInput2, _Input);
        function MouseInput2() {
            var _this;
            var proto = MouseInput2.prototype;
            proto.evEl = MOUSE_ELEMENT_EVENTS;
            proto.evWin = MOUSE_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.pressed = false; // mousedown state
            return _this;
        }
        /**
	   * @private
	   * handle mouse events
	   * @param {Object} ev
	   */ var _proto = MouseInput2.prototype;
        _proto.handler = function handler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) this.pressed = true;
            if (eventType & INPUT_MOVE && ev.which !== 1) eventType = INPUT_END;
             // mouse must be down
            if (!this.pressed) return;
            if (eventType & INPUT_END) this.pressed = false;
            this.callback(this.manager, eventType, {
                pointers: [
                    ev
                ],
                changedPointers: [
                    ev
                ],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        };
        return MouseInput2;
    }(Input);
    /**
	 * @private
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */ var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;
    function setLastTouch(eventData) {
        var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
        if (touch.identifier === this.primaryTouch) {
            var lastTouch = {
                x: touch.clientX,
                y: touch.clientY
            };
            var lts = this.lastTouches;
            this.lastTouches.push(lastTouch);
            var removeLastTouch = function removeLastTouch1() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) lts.splice(i, 1);
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }
    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) setLastTouch.call(this, eventData);
    }
    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX;
        var y = eventData.srcEvent.clientY;
        for(var i = 0; i < this.lastTouches.length; i++){
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x);
            var dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) return true;
        }
        return false;
    }
    var TouchMouseInput2 = /*#__PURE__*/ function() {
        var TouchMouseInput1 = /*#__PURE__*/ function(_Input) {
            _inheritsLoose(TouchMouseInput3, _Input);
            function TouchMouseInput3(_manager, callback) {
                var _this;
                _this = _Input.call(this, _manager, callback) || this;
                _this.handler = function(manager, inputEvent, inputData) {
                    var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
                    var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
                    if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) return;
                     // when we're in a touch event, record touches to  de-dupe synthetic mouse event
                    if (isTouch) recordTouches.call(_assertThisInitialized(_assertThisInitialized(_this)), inputEvent, inputData);
                    else if (isMouse && isSyntheticEvent.call(_assertThisInitialized(_assertThisInitialized(_this)), inputData)) return;
                    _this.callback(manager, inputEvent, inputData);
                };
                _this.touch = new TouchInput1(_this.manager, _this.handler);
                _this.mouse = new MouseInput1(_this.manager, _this.handler);
                _this.primaryTouch = null;
                _this.lastTouches = [];
                return _this;
            }
            /**
	     * @private
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */ var _proto = TouchMouseInput3.prototype;
            /**
	     * @private
	     * remove the event listeners
	     */ _proto.destroy = function destroy() {
                this.touch.destroy();
                this.mouse.destroy();
            };
            return TouchMouseInput3;
        }(Input);
        return TouchMouseInput1;
    }();
    /**
	 * @private
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */ function createInputInstance(manager) {
        var Type; // let inputClass = manager.options.inputClass;
        var inputClass = manager.options.inputClass;
        if (inputClass) Type = inputClass;
        else if (SUPPORT_POINTER_EVENTS) Type = PointerEventInput1;
        else if (SUPPORT_ONLY_TOUCH) Type = TouchInput1;
        else if (!SUPPORT_TOUCH) Type = MouseInput1;
        else Type = TouchMouseInput2;
        return new Type(manager, inputHandler);
    }
    /**
	 * @private
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */ function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;
    /**
	 * @private
	 * get a unique id
	 * @returns {number} uniqueId
	 */ var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }
    /**
	 * @private
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */ function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) return manager.get(otherRecognizer);
        return otherRecognizer;
    }
    /**
	 * @private
	 * get a usable string, used as event postfix
	 * @param {constant} state
	 * @returns {String} state
	 */ function stateStr(state) {
        if (state & STATE_CANCELLED) return 'cancel';
        else if (state & STATE_ENDED) return 'end';
        else if (state & STATE_CHANGED) return 'move';
        else if (state & STATE_BEGAN) return 'start';
        return '';
    }
    /**
	 * @private
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */ /**
	 * @private
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */ var Recognizer = /*#__PURE__*/ function() {
        function Recognizer1(options) {
            if (options === void 0) options = {
            };
            this.options = _extends({
                enable: true
            }, options);
            this.id = uniqueId();
            this.manager = null; // default is enable true
            this.state = STATE_POSSIBLE;
            this.simultaneous = {
            };
            this.requireFail = [];
        }
        /**
	   * @private
	   * set options
	   * @param {Object} options
	   * @return {Recognizer}
	   */ var _proto = Recognizer1.prototype;
        _proto.set = function set1(options) {
            assign$1$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        };
        /**
	   * @private
	   * recognize simultaneous with an other recognizer.
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.recognizeWith = function recognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) return this;
            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        };
        /**
	   * @private
	   * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        };
        /**
	   * @private
	   * recognizer can only run when an other is failing
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.requireFailure = function requireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) return this;
            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        };
        /**
	   * @private
	   * drop the requireFailure link. it does not remove the link on the other recognizer.
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) this.requireFail.splice(index, 1);
            return this;
        };
        /**
	   * @private
	   * has require failures boolean
	   * @returns {boolean}
	   */ _proto.hasRequireFailures = function hasRequireFailures() {
            return this.requireFail.length > 0;
        };
        /**
	   * @private
	   * if the recognizer can recognize simultaneous with an other recognizer
	   * @param {Recognizer} otherRecognizer
	   * @returns {Boolean}
	   */ _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        };
        /**
	   * @private
	   * You should use `tryEmit` instead of `emit` directly to check
	   * that all the needed recognizers has failed before emitting.
	   * @param {Object} input
	   */ _proto.emit = function emit(input) {
            var self = this;
            var state = this.state;
            function emit(event) {
                self.manager.emit(event, input);
            } // 'panstart' and 'panmove'
            if (state < STATE_ENDED) emit(self.options.event + stateStr(state));
            emit(self.options.event); // simple 'eventName' events
            if (input.additionalEvent) // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
             // panend and pancancel
            if (state >= STATE_ENDED) emit(self.options.event + stateStr(state));
        };
        /**
	   * @private
	   * Check that all the require failure recognizers has failed,
	   * if true, it emits a gesture event,
	   * otherwise, setup the state to FAILED.
	   * @param {Object} input
	   */ _proto.tryEmit = function tryEmit(input) {
            if (this.canEmit()) return this.emit(input);
             // it's failing anyway
            this.state = STATE_FAILED;
        };
        /**
	   * @private
	   * can we emit?
	   * @returns {boolean}
	   */ _proto.canEmit = function canEmit() {
            var i = 0;
            while(i < this.requireFail.length){
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) return false;
                i++;
            }
            return true;
        };
        /**
	   * @private
	   * update the recognizer
	   * @param {Object} inputData
	   */ _proto.recognize = function recognize(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign$1$1({
            }, inputData); // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [
                this,
                inputDataClone
            ])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            } // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) this.state = STATE_POSSIBLE;
            this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) this.tryEmit(inputDataClone);
        };
        /**
	   * @private
	   * return the state of the recognizer
	   * the actual recognizing happens in this method
	   * @virtual
	   * @param {Object} inputData
	   * @returns {constant} STATE
	   */ /* jshint ignore:start */ _proto.process = function process1(inputData) {
        };
        /* jshint ignore:end */ /**
	   * @private
	   * return the preferred touch-action
	   * @virtual
	   * @returns {Array}
	   */ _proto.getTouchAction = function getTouchAction() {
        };
        /**
	   * @private
	   * called when the gesture isn't allowed to recognize
	   * like when another is being recognized or it is disabled
	   * @virtual
	   */ _proto.reset = function reset() {
        };
        return Recognizer1;
    }();
    /**
	 * @private
	 * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */ var TapRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(TapRecognizer2, _Recognizer);
        function TapRecognizer2(options) {
            var _this;
            if (options === void 0) options = {
            };
            _this = _Recognizer.call(this, _extends({
                event: 'tap',
                pointers: 1,
                taps: 1,
                interval: 300,
                // max time between the multi-tap taps
                time: 250,
                // max time of the pointer to be down (like finger on the screen)
                threshold: 9,
                // a minimal movement is ok, but keep it low
                posThreshold: 10
            }, options)) || this; // previous time and center,
            // used for tap counting
            _this.pTime = false;
            _this.pCenter = false;
            _this._timer = null;
            _this._input = null;
            _this.count = 0;
            return _this;
        }
        var _proto = TapRecognizer2.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_MANIPULATION
            ];
        };
        _proto.process = function process1(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();
            if (input.eventType & INPUT_START && this.count === 0) return this.failTimeout();
             // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType !== INPUT_END) return this.failTimeout();
                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                this.pTime = input.timeStamp;
                this.pCenter = input.center;
                if (!validMultiTap || !validInterval) this.count = 1;
                else this.count += 1;
                this._input = input; // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) return STATE_RECOGNIZED;
                    else {
                        this._timer = setTimeout(function() {
                            _this2.state = STATE_RECOGNIZED;
                            _this2.tryEmit();
                        }, options.interval);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        };
        _proto.failTimeout = function failTimeout() {
            var _this3 = this;
            this._timer = setTimeout(function() {
                _this3.state = STATE_FAILED;
            }, this.options.interval);
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit() {
            if (this.state === STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        };
        return TapRecognizer2;
    }(Recognizer);
    /**
	 * @private
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */ var AttrRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(AttrRecognizer2, _Recognizer);
        function AttrRecognizer2(options) {
            if (options === void 0) options = {
            };
            return _Recognizer.call(this, _extends({
                pointers: 1
            }, options)) || this;
        }
        /**
	   * @private
	   * Used to check if it the recognizer receives valid input, like input.distance > 10.
	   * @memberof AttrRecognizer
	   * @param {Object} input
	   * @returns {Boolean} recognized
	   */ var _proto = AttrRecognizer2.prototype;
        _proto.attrTest = function attrTest(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        };
        /**
	   * @private
	   * Process the input and return the state for the recognizer
	   * @memberof AttrRecognizer
	   * @param {Object} input
	   * @returns {*} State
	   */ _proto.process = function process1(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) return state | STATE_CANCELLED;
            else if (isRecognized || isValid) {
                if (eventType & INPUT_END) return state | STATE_ENDED;
                else if (!(state & STATE_BEGAN)) return STATE_BEGAN;
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        };
        return AttrRecognizer2;
    }(Recognizer);
    /**
	 * @private
	 * direction cons to string
	 * @param {constant} direction
	 * @returns {String}
	 */ function directionStr(direction) {
        if (direction === DIRECTION_DOWN) return 'down';
        else if (direction === DIRECTION_UP) return 'up';
        else if (direction === DIRECTION_LEFT) return 'left';
        else if (direction === DIRECTION_RIGHT) return 'right';
        return '';
    }
    /**
	 * @private
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */ var PanRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PanRecognizer2, _AttrRecognizer);
        function PanRecognizer2(options) {
            var _this;
            if (options === void 0) options = {
            };
            _this = _AttrRecognizer.call(this, _extends({
                event: 'pan',
                threshold: 10,
                pointers: 1,
                direction: DIRECTION_ALL
            }, options)) || this;
            _this.pX = null;
            _this.pY = null;
            return _this;
        }
        var _proto = PanRecognizer2.prototype;
        _proto.getTouchAction = function getTouchAction() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) actions.push(TOUCH_ACTION_PAN_Y);
            if (direction & DIRECTION_VERTICAL) actions.push(TOUCH_ACTION_PAN_X);
            return actions;
        };
        _proto.directionTest = function directionTest(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY; // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x !== this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y !== this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        };
        _proto.attrTest = function attrTest(input) {
            return AttrRecognizer1.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        };
        _proto.emit = function emit(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);
            if (direction) input.additionalEvent = this.options.event + direction;
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PanRecognizer2;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */ var SwipeRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(SwipeRecognizer2, _AttrRecognizer);
        function SwipeRecognizer2(options) {
            if (options === void 0) options = {
            };
            return _AttrRecognizer.call(this, _extends({
                event: 'swipe',
                threshold: 10,
                velocity: 0.3,
                direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                pointers: 1
            }, options)) || this;
        }
        var _proto = SwipeRecognizer2.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return PanRecognizer1.prototype.getTouchAction.call(this);
        };
        _proto.attrTest = function attrTest(input) {
            var direction = this.options.direction;
            var velocity;
            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) velocity = input.overallVelocity;
            else if (direction & DIRECTION_HORIZONTAL) velocity = input.overallVelocityX;
            else if (direction & DIRECTION_VERTICAL) velocity = input.overallVelocityY;
            return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        };
        _proto.emit = function emit(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) this.manager.emit(this.options.event + direction, input);
            this.manager.emit(this.options.event, input);
        };
        return SwipeRecognizer2;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */ var PinchRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PinchRecognizer2, _AttrRecognizer);
        function PinchRecognizer2(options) {
            if (options === void 0) options = {
            };
            return _AttrRecognizer.call(this, _extends({
                event: 'pinch',
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = PinchRecognizer2.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        };
        _proto.emit = function emit(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                input.additionalEvent = this.options.event + inOut;
            }
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PinchRecognizer2;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */ var RotateRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(RotateRecognizer2, _AttrRecognizer);
        function RotateRecognizer2(options) {
            if (options === void 0) options = {
            };
            return _AttrRecognizer.call(this, _extends({
                event: 'rotate',
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = RotateRecognizer2.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        };
        return RotateRecognizer2;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */ var PressRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(PressRecognizer2, _Recognizer);
        function PressRecognizer2(options) {
            var _this;
            if (options === void 0) options = {
            };
            _this = _Recognizer.call(this, _extends({
                event: 'press',
                pointers: 1,
                time: 251,
                // minimal time of the pointer to be pressed
                threshold: 9
            }, options)) || this;
            _this._timer = null;
            _this._input = null;
            return _this;
        }
        var _proto = PressRecognizer2.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_AUTO
            ];
        };
        _proto.process = function process1(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input; // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) this.reset();
            else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeout(function() {
                    _this2.state = STATE_RECOGNIZED;
                    _this2.tryEmit();
                }, options.time);
            } else if (input.eventType & INPUT_END) return STATE_RECOGNIZED;
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit(input) {
            if (this.state !== STATE_RECOGNIZED) return;
            if (input && input.eventType & INPUT_END) this.manager.emit(this.options.event + "up", input);
            else {
                this._input.timeStamp = now$1();
                this.manager.emit(this.options.event, this._input);
            }
        };
        return PressRecognizer2;
    }(Recognizer);
    var defaults = {
        /**
	   * @private
	   * set if DOM events are being triggered.
	   * But this is slower and unused by simple implementations, so disabled by default.
	   * @type {Boolean}
	   * @default false
	   */ domEvents: false,
        /**
	   * @private
	   * The value for the touchAction property/fallback.
	   * When set to `compute` it will magically set the correct value based on the added recognizers.
	   * @type {String}
	   * @default compute
	   */ touchAction: TOUCH_ACTION_COMPUTE,
        /**
	   * @private
	   * @type {Boolean}
	   * @default true
	   */ enable: true,
        /**
	   * @private
	   * EXPERIMENTAL FEATURE -- can be removed/changed
	   * Change the parent input target element.
	   * If Null, then it is being set the to main element.
	   * @type {Null|EventTarget}
	   * @default null
	   */ inputTarget: null,
        /**
	   * @private
	   * force an input class
	   * @type {Null|Function}
	   * @default null
	   */ inputClass: null,
        /**
	   * @private
	   * Some CSS properties can be used to improve the working of Hammer.
	   * Add them to this method and they will be set when creating a new Manager.
	   * @namespace
	   */ cssProps: {
            /**
	     * @private
	     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	     * @type {String}
	     * @default 'none'
	     */ userSelect: "none",
            /**
	     * @private
	     * Disable the Windows Phone grippers when pressing an element.
	     * @type {String}
	     * @default 'none'
	     */ touchSelect: "none",
            /**
	     * @private
	     * Disables the default callout shown when you touch and hold a touch target.
	     * On iOS, when you touch and hold a touch target such as a link, Safari displays
	     * a callout containing information about the link. This property allows you to disable that callout.
	     * @type {String}
	     * @default 'none'
	     */ touchCallout: "none",
            /**
	     * @private
	     * Specifies whether zooming is enabled. Used by IE10>
	     * @type {String}
	     * @default 'none'
	     */ contentZooming: "none",
            /**
	     * @private
	     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	     * @type {String}
	     * @default 'none'
	     */ userDrag: "none",
            /**
	     * @private
	     * Overrides the highlight color shown when the user taps a link or a JavaScript
	     * clickable element in iOS. This property obeys the alpha value, if specified.
	     * @type {String}
	     * @default 'rgba(0,0,0,0)'
	     */ tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    /**
	 * @private
	 * Default recognizer setup when calling `Hammer()`
	 * When creating a new Manager these will be skipped.
	 * This is separated with other defaults because of tree-shaking.
	 * @type {Array}
	 */ var preset = [
        [
            RotateRecognizer1,
            {
                enable: false
            }
        ],
        [
            PinchRecognizer1,
            {
                enable: false
            },
            [
                'rotate'
            ]
        ],
        [
            SwipeRecognizer1,
            {
                direction: DIRECTION_HORIZONTAL
            }
        ],
        [
            PanRecognizer1,
            {
                direction: DIRECTION_HORIZONTAL
            },
            [
                'swipe'
            ]
        ],
        [
            TapRecognizer1
        ],
        [
            TapRecognizer1,
            {
                event: 'doubletap',
                taps: 2
            },
            [
                'tap'
            ]
        ],
        [
            PressRecognizer1
        ]
    ];
    var STOP = 1;
    var FORCED_STOP = 2;
    /**
	 * @private
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */ function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) return;
        var prop;
        each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else element.style[prop] = manager.oldCssProps[prop] || "";
        });
        if (!add) manager.oldCssProps = {
        };
    }
    /**
	 * @private
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */ function triggerDomEvent(event, data1) {
        var gestureEvent = document.createEvent("Event");
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data1;
        data1.target.dispatchEvent(gestureEvent);
    }
    /**
	* @private
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */ var Manager = /*#__PURE__*/ function() {
        function Manager1(element, options) {
            var _this = this;
            this.options = assign$1$1({
            }, defaults, options || {
            });
            this.options.inputTarget = this.options.inputTarget || element;
            this.handlers = {
            };
            this.session = {
            };
            this.recognizers = [];
            this.oldCssProps = {
            };
            this.element = element;
            this.input = createInputInstance(this);
            this.touchAction = new TouchAction(this, this.options.touchAction);
            toggleCssProps(this, true);
            each(this.options.recognizers, function(item) {
                var recognizer = _this.add(new item[0](item[1]));
                item[2] && recognizer.recognizeWith(item[2]);
                item[3] && recognizer.requireFailure(item[3]);
            }, this);
        }
        /**
	   * @private
	   * set options
	   * @param {Object} options
	   * @returns {Manager}
	   */ var _proto = Manager1.prototype;
        _proto.set = function set1(options) {
            assign$1$1(this.options, options); // Options that need a little more setup
            if (options.touchAction) this.touchAction.update();
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        };
        /**
	   * @private
	   * stop recognizing for this session.
	   * This session will be discarded, when a new [input]start event is fired.
	   * When forced, the recognizer cycle is stopped immediately.
	   * @param {Boolean} [force]
	   */ _proto.stop = function stop(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        };
        /**
	   * @private
	   * run the recognizers!
	   * called by the inputHandler function on every movement of the pointers (touches)
	   * it walks through all the recognizers and tries to detect the gesture that is being made
	   * @param {Object} inputData
	   */ _proto.recognize = function recognize(inputData) {
            var session = this.session;
            if (session.stopped) return;
             // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                session.curRecognizer = null;
                curRecognizer = null;
            }
            var i = 0;
            while(i < recognizers.length){
                recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer === curRecognizer || recognizer.canRecognizeWith(curRecognizer))) // 3
                recognizer.recognize(inputData);
                else recognizer.reset();
                 // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    session.curRecognizer = recognizer;
                    curRecognizer = recognizer;
                }
                i++;
            }
        };
        /**
	   * @private
	   * get a recognizer by its event name.
	   * @param {Recognizer|String} recognizer
	   * @returns {Recognizer|Null}
	   */ _proto.get = function get1(recognizer) {
            if (recognizer instanceof Recognizer) return recognizer;
            var recognizers = this.recognizers;
            for(var i = 0; i < recognizers.length; i++){
                if (recognizers[i].options.event === recognizer) return recognizers[i];
            }
            return null;
        };
        /**
	   * @private add a recognizer to the manager
	   * existing recognizers with the same event name will be removed
	   * @param {Recognizer} recognizer
	   * @returns {Recognizer|Manager}
	   */ _proto.add = function add(recognizer) {
            if (invokeArrayArg(recognizer, "add", this)) return this;
             // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) this.remove(existing);
            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
        };
        /**
	   * @private
	   * remove a recognizer by name or instance
	   * @param {Recognizer|String} recognizer
	   * @returns {Manager}
	   */ _proto.remove = function remove(recognizer) {
            if (invokeArrayArg(recognizer, "remove", this)) return this;
            var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, targetRecognizer);
                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }
            return this;
        };
        /**
	   * @private
	   * bind event
	   * @param {String} events
	   * @param {Function} handler
	   * @returns {EventEmitter} this
	   */ _proto.on = function on(events, handler) {
            if (events === undefined || handler === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        };
        /**
	   * @private unbind event, leave emit blank to remove all handlers
	   * @param {String} events
	   * @param {Function} [handler]
	   * @returns {EventEmitter} this
	   */ _proto.off = function off(events, handler) {
            if (events === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) delete handlers[event];
                else handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            });
            return this;
        };
        /**
	   * @private emit event to the listeners
	   * @param {String} event
	   * @param {Object} data
	   */ _proto.emit = function emit(event, data1) {
            // we also want to trigger dom events
            if (this.options.domEvents) triggerDomEvent(event, data1);
             // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) return;
            data1.type = event;
            data1.preventDefault = function() {
                data1.srcEvent.preventDefault();
            };
            var i = 0;
            while(i < handlers.length){
                handlers[i](data1);
                i++;
            }
        };
        /**
	   * @private
	   * destroy the manager and unbinds all events
	   * it doesn't unbind dom events, that is the user own responsibility
	   */ _proto.destroy = function destroy() {
            this.element && toggleCssProps(this, false);
            this.handlers = {
            };
            this.session = {
            };
            this.input.destroy();
            this.element = null;
        };
        return Manager1;
    }();
    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
	 * @private
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */ var SingleTouchInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(SingleTouchInput2, _Input);
        function SingleTouchInput2() {
            var _this;
            var proto = SingleTouchInput2.prototype;
            proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
            proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.started = false;
            return _this;
        }
        var _proto = SingleTouchInput2.prototype;
        _proto.handler = function handler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?
            if (type === INPUT_START) this.started = true;
            if (!this.started) return;
            var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) this.started = false;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return SingleTouchInput2;
    }(Input);
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) all = uniqueArray(all.concat(changed), 'identifier', true);
        return [
            all,
            changed
        ];
    }
    /**
	 * @private
	 * wrap a method with a deprecation warning and stack trace
	 * @param {Function} method
	 * @param {String} name
	 * @param {String} message
	 * @returns {Function} A new function wrapping the supplied method.
	 */ function deprecate(method, name, message) {
        var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
        return function() {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
            var log = window.console && (window.console.warn || window.console.log);
            if (log) log.call(window.console, deprecationMessage, stack);
            return method.apply(this, arguments);
        };
    }
    /**
	 * @private
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge=false]
	 * @returns {Object} dest
	 */ var extend = deprecate(function(dest, src, merge) {
        var keys3 = Object.keys(src);
        var i = 0;
        while(i < keys3.length){
            if (!merge || merge && dest[keys3[i]] === undefined) dest[keys3[i]] = src[keys3[i]];
            i++;
        }
        return dest;
    }, 'extend', 'Use `assign`.');
    /**
	 * @private
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */ var merge = deprecate(function(dest, src) {
        return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');
    /**
	 * @private
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */ function inherit(child, base, properties) {
        var baseP = base.prototype;
        var childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) assign$1$1(childP, properties);
    }
    /**
	 * @private
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */ function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }
    /**
	 * @private
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */ var Hammer = /*#__PURE__*/ function() {
        var Hammer1 = /**
	    * @private
	    * @const {string}
	    */ function Hammer2(element, options) {
            if (options === void 0) options = {
            };
            return new Manager(element, _extends({
                recognizers: preset.concat()
            }, options));
        };
        Hammer1.VERSION = "2.0.17-rc";
        Hammer1.DIRECTION_ALL = DIRECTION_ALL;
        Hammer1.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer1.DIRECTION_LEFT = DIRECTION_LEFT;
        Hammer1.DIRECTION_RIGHT = DIRECTION_RIGHT;
        Hammer1.DIRECTION_UP = DIRECTION_UP;
        Hammer1.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
        Hammer1.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
        Hammer1.DIRECTION_NONE = DIRECTION_NONE;
        Hammer1.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer1.INPUT_START = INPUT_START;
        Hammer1.INPUT_MOVE = INPUT_MOVE;
        Hammer1.INPUT_END = INPUT_END;
        Hammer1.INPUT_CANCEL = INPUT_CANCEL;
        Hammer1.STATE_POSSIBLE = STATE_POSSIBLE;
        Hammer1.STATE_BEGAN = STATE_BEGAN;
        Hammer1.STATE_CHANGED = STATE_CHANGED;
        Hammer1.STATE_ENDED = STATE_ENDED;
        Hammer1.STATE_RECOGNIZED = STATE_RECOGNIZED;
        Hammer1.STATE_CANCELLED = STATE_CANCELLED;
        Hammer1.STATE_FAILED = STATE_FAILED;
        Hammer1.Manager = Manager;
        Hammer1.Input = Input;
        Hammer1.TouchAction = TouchAction;
        Hammer1.TouchInput = TouchInput1;
        Hammer1.MouseInput = MouseInput1;
        Hammer1.PointerEventInput = PointerEventInput1;
        Hammer1.TouchMouseInput = TouchMouseInput2;
        Hammer1.SingleTouchInput = SingleTouchInput1;
        Hammer1.Recognizer = Recognizer;
        Hammer1.AttrRecognizer = AttrRecognizer1;
        Hammer1.Tap = TapRecognizer1;
        Hammer1.Pan = PanRecognizer1;
        Hammer1.Swipe = SwipeRecognizer1;
        Hammer1.Pinch = PinchRecognizer1;
        Hammer1.Rotate = RotateRecognizer1;
        Hammer1.Press = PressRecognizer1;
        Hammer1.on = addEventListeners;
        Hammer1.off = removeEventListeners;
        Hammer1.each = each;
        Hammer1.merge = merge;
        Hammer1.extend = extend;
        Hammer1.bindFn = bindFn;
        Hammer1.assign = assign$1$1;
        Hammer1.inherit = inherit;
        Hammer1.bindFn = bindFn;
        Hammer1.prefixed = prefixed;
        Hammer1.toArray = toArray;
        Hammer1.inArray = inArray;
        Hammer1.uniqueArray = uniqueArray;
        Hammer1.splitStr = splitStr;
        Hammer1.boolOrFn = boolOrFn;
        Hammer1.hasParent = hasParent;
        Hammer1.addEventListeners = addEventListeners;
        Hammer1.removeEventListeners = removeEventListeners;
        Hammer1.defaults = assign$1$1({
        }, defaults, {
            preset: preset
        });
        return Hammer1;
    }(); //  style loader but by script tag, not by the loader.
    function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F1() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f1() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
        var _context21;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
        var n = slice$6(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    /**
	 * Use this symbol to delete properies in deepObjectAssign.
	 */ var DELETE = symbol$4("DELETE");
    /**
	 * Pure version of deepObjectAssign, it doesn't modify any of it's arguments.
	 *
	 * @param base - The base object that fullfils the whole interface T.
	 * @param updates - Updates that may change or delete props.
	 *
	 * @returns A brand new instance with all the supplied objects deeply merged.
	 */ function pureDeepObjectAssign(base) {
        var _context;
        for(var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)updates[_key - 1] = arguments[_key];
        return deepObjectAssign.apply(void 0, concat$2(_context = [
            {
            },
            base
        ]).call(_context, updates));
    }
    /**
	 * Deep version of object assign with additional deleting by the DELETE symbol.
	 *
	 * @param values - Objects to be deeply merged.
	 *
	 * @returns The first object from values.
	 */ function deepObjectAssign() {
        var merged = deepObjectAssignNonentry.apply(void 0, arguments);
        stripDelete(merged);
        return merged;
    }
    /**
	 * Deep version of object assign with additional deleting by the DELETE symbol.
	 *
	 * @remarks
	 * This doesn't strip the DELETE symbols so they may end up in the final object.
	 *
	 * @param values - Objects to be deeply merged.
	 *
	 * @returns The first object from values.
	 */ function deepObjectAssignNonentry() {
        for(var _len2 = arguments.length, values1 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)values1[_key2] = arguments[_key2];
        if (values1.length < 2) return values1[0];
        else if (values1.length > 2) {
            var _context2;
            return deepObjectAssignNonentry.apply(void 0, concat$2(_context2 = [
                deepObjectAssign(values1[0], values1[1])
            ]).call(_context2, toConsumableArray(slice$6(values1).call(values1, 2))));
        }
        var a = values1[0];
        var b = values1[1];
        var _iterator = _createForOfIteratorHelper(ownKeys$3(b)), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var prop = _step.value;
                if (!Object.prototype.propertyIsEnumerable.call(b, prop)) ;
                else if (b[prop] === DELETE) delete a[prop];
                else if (a[prop] !== null && b[prop] !== null && _typeof_1(a[prop]) === "object" && _typeof_1(b[prop]) === "object" && !isArray$5(a[prop]) && !isArray$5(b[prop])) a[prop] = deepObjectAssignNonentry(a[prop], b[prop]);
                else a[prop] = clone(b[prop]);
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return a;
    }
    /**
	 * Deep clone given object or array. In case of primitive simply return.
	 *
	 * @param a - Anything.
	 *
	 * @returns Deep cloned object/array or unchanged a.
	 */ function clone(a) {
        if (isArray$5(a)) return map$2(a).call(a, function(value) {
            return clone(value);
        });
        else if (_typeof_1(a) === "object" && a !== null) return deepObjectAssignNonentry({
        }, a);
        else return a;
    }
    /**
	 * Strip DELETE from given object.
	 *
	 * @param a - Object which may contain DELETE but won't after this is executed.
	 */ function stripDelete(a) {
        for(var _i = 0, _Object$keys = keys$3(a); _i < _Object$keys.length; _i++){
            var prop = _Object$keys[_i];
            if (a[prop] === DELETE) delete a[prop];
            else if (_typeof_1(a[prop]) === "object" && a[prop] !== null) stripDelete(a[prop]);
        }
    }
    /**
	 * Setup a mock hammer.js object, for unit testing.
	 *
	 * Inspiration: https://github.com/uber/deck.gl/pull/658
	 *
	 * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
	 */ function hammerMock() {
        var noop = function noop1() {
        };
        return {
            on: noop,
            off: noop,
            destroy: noop,
            emit: noop,
            get: function get1() {
                return {
                    set: noop
                };
            }
        };
    }
    var Hammer$1 = typeof window !== "undefined" ? window.Hammer || Hammer : function() {
        // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
        return hammerMock();
    };
    /**
	 * Turn an element into an clickToUse element.
	 * When not active, the element has a transparent overlay. When the overlay is
	 * clicked, the mode is changed to active.
	 * When active, the element is displayed with a blue border around it, and
	 * the interactive contents of the element can be used. When clicked outside
	 * the element, the elements mode is changed to inactive.
	 *
	 * @param {Element} container
	 * @class Activator
	 */ function Activator(container) {
        var _this = this, _context3;
        this._cleanupQueue = [];
        this.active = false;
        this._dom = {
            container: container,
            overlay: document.createElement("div")
        };
        this._dom.overlay.classList.add("vis-overlay");
        this._dom.container.appendChild(this._dom.overlay);
        this._cleanupQueue.push(function() {
            _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
        });
        var hammer = Hammer$1(this._dom.overlay);
        hammer.on("tap", bind$2(_context3 = this._onTapOverlay).call(_context3, this));
        this._cleanupQueue.push(function() {
            hammer.destroy(); // FIXME: cleaning up hammer instances doesn't work (Timeline not removed
        // from memory)
        }); // block all touch events (except tap)
        var events = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        forEach$2(events).call(events, function(event) {
            hammer.on(event, function(event1) {
                event1.srcEvent.stopPropagation();
            });
        }); // attach a click event to the window, in order to deactivate when clicking outside the timeline
        if (document && document.body) {
            this._onClick = function(event) {
                if (!_hasParent(event.target, container)) _this.deactivate();
            };
            document.body.addEventListener("click", this._onClick);
            this._cleanupQueue.push(function() {
                document.body.removeEventListener("click", _this._onClick);
            });
        } // prepare escape key listener for deactivating when active
        this._escListener = function(event) {
            if ("key" in event ? event.key === "Escape" : event.keyCode === 27) _this.deactivate();
        };
    } // turn into an event emitter
    componentEmitter(Activator.prototype); // The currently active activator
    Activator.current = null;
    /**
	 * Destroy the activator. Cleans up all created DOM and event listeners
	 */ Activator.prototype.destroy = function() {
        var _context4, _context5;
        this.deactivate();
        var _iterator2 = _createForOfIteratorHelper(reverse$2(_context4 = splice$2(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
        try {
            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                var callback = _step2.value;
                callback();
            }
        } catch (err) {
            _iterator2.e(err);
        } finally{
            _iterator2.f();
        }
    };
    /**
	 * Activate the element
	 * Overlay is hidden, element is decorated with a blue shadow border
	 */ Activator.prototype.activate = function() {
        // we allow only one active activator at a time
        if (Activator.current) Activator.current.deactivate();
        Activator.current = this;
        this.active = true;
        this._dom.overlay.style.display = "none";
        this._dom.container.classList.add("vis-active");
        this.emit("change");
        this.emit("activate"); // ugly hack: bind ESC after emitting the events, as the Network rebinds all
        // keyboard events on a 'change' event
        document.body.addEventListener("keydown", this._escListener);
    };
    /**
	 * Deactivate the element
	 * Overlay is displayed on top of the element
	 */ Activator.prototype.deactivate = function() {
        this.active = false;
        this._dom.overlay.style.display = "block";
        this._dom.container.classList.remove("vis-active");
        document.body.removeEventListener("keydown", this._escListener);
        this.emit("change");
        this.emit("deactivate");
    };
    /**
	 * Handle a tap event: activate the container
	 *
	 * @param {Event}  event   The event
	 * @private
	 */ Activator.prototype._onTapOverlay = function(event) {
        // activate the container
        this.activate();
        event.srcEvent.stopPropagation();
    };
    /**
	 * Test whether the element has the requested parent element somewhere in
	 * its chain of parent nodes.
	 *
	 * @param {HTMLElement} element
	 * @param {HTMLElement} parent
	 * @returns {boolean} Returns true when the parent is found somewhere in the
	 *                    chain of parent nodes.
	 * @private
	 */ function _hasParent(element, parent) {
        while(element){
            if (element === parent) return true;
            element = element.parentNode;
        }
        return false;
    } // utility functions
    var nativeConstruct = getBuiltIn('Reflect', 'construct'); // `Reflect.construct` method
    // https://tc39.github.io/ecma262/#sec-reflect.construct
    // MS Edge supports only 2 arguments and argumentsList argument is optional
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    var NEW_TARGET_BUG = fails(function() {
        function F() {
        /* empty */ }
        return !(nativeConstruct(function() {
        /* empty */ }, [], F) instanceof F);
    });
    var ARGS_BUG = !fails(function() {
        nativeConstruct(function() {
        /* empty */ });
    });
    var FORCED$4 = NEW_TARGET_BUG || ARGS_BUG;
    _export({
        target: 'Reflect',
        stat: true,
        forced: FORCED$4,
        sham: FORCED$4
    }, {
        construct: function construct1(Target, args) {
            aFunction(Target);
            anObject(args);
            var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
            if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
            if (Target == newTarget) {
                // w/o altered newTarget, optimization for 0-4 arguments
                switch(args.length){
                    case 0:
                        return new Target();
                    case 1:
                        return new Target(args[0]);
                    case 2:
                        return new Target(args[0], args[1]);
                    case 3:
                        return new Target(args[0], args[1], args[2]);
                    case 4:
                        return new Target(args[0], args[1], args[2], args[3]);
                } // w/o altered newTarget, lot of arguments case
                var $args = [
                    null
                ];
                $args.push.apply($args, args);
                return new (functionBind.apply(Target, $args))();
            } // with altered newTarget, not support built-in constructors
            var proto = newTarget.prototype;
            var instance = objectCreate(isObject(proto) ? proto : Object.prototype);
            var result = Function.apply.call(Target, instance, args);
            return isObject(result) ? result : instance;
        }
    });
    var construct$1 = path.Reflect.construct;
    var construct$2 = construct$1;
    var construct$3 = construct$2;
    var entries = entryVirtual('Array').entries;
    var entries$1 = entries;
    var ArrayPrototype$a = Array.prototype;
    var DOMIterables$1 = {
        DOMTokenList: true,
        NodeList: true
    };
    var entries_1 = function(it) {
        var own = it.entries;
        return it === ArrayPrototype$a || it instanceof Array && own === ArrayPrototype$a.entries // eslint-disable-next-line no-prototype-builtins
         || DOMIterables$1.hasOwnProperty(classof(it)) ? entries$1 : own;
    };
    var entries$2 = entries_1;
    /**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */ var runtime_1 = createCommonjsModule(function(module) {
        var runtime = function(exports1) {
            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined$1; // More compressible than void 0.
            var $Symbol1 = typeof Symbol === "function" ? Symbol : {
            };
            var iteratorSymbol = $Symbol1.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol1.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol1.toStringTag || "@@toStringTag";
            function define(obj, key, value) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
                return obj[key];
            }
            try {
                // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                define({
                }, "");
            } catch (err) {
                define = function(obj, key, value) {
                    return obj[key] = value;
                };
            }
            function wrap1(innerFn, outerFn, self, tryLocsList) {
                // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
                // .throw, and .return methods.
                generator._invoke = makeInvokeMethod(innerFn, self, context);
                return generator;
            }
            exports1.wrap = wrap1; // Try/catch helper to minimize deoptimizations. Returns a completion
            // record like context.tryEntries[i].completion. This interface could
            // have been (and was previously) designed to take a closure to be
            // invoked without arguments, but in all the cases we care about we
            // already have an existing method we want to call, so there's no need
            // to create a new function object. We can even get away with assuming
            // the method takes exactly one argument, since that happens to be true
            // in every case, so we don't have to touch the arguments object. The
            // only additional allocation required is the completion record, which
            // has a stable shape and so hopefully should be cheap to allocate.
            function tryCatch(fn, obj, arg) {
                try {
                    return {
                        type: "normal",
                        arg: fn.call(obj, arg)
                    };
                } catch (err) {
                    return {
                        type: "throw",
                        arg: err
                    };
                }
            }
            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
            // breaking out of the dispatch switch statement.
            var ContinueSentinel = {
            }; // Dummy constructor functions that we use as the .constructor and
            // .constructor.prototype properties for functions that return Generator
            // objects. For full spec compliance, you may wish to configure your
            // minifier not to mangle the names of these two functions.
            function Generator() {
            }
            function GeneratorFunction() {
            }
            function GeneratorFunctionPrototype() {
            } // This is a polyfill for %IteratorPrototype% for environments that
            // don't natively support it.
            var IteratorPrototype1 = {
            };
            IteratorPrototype1[iteratorSymbol] = function() {
                return this;
            };
            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values2([])));
            if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
            // of the polyfill.
            IteratorPrototype1 = NativeIteratorPrototype;
            var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype1);
            GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
            GeneratorFunctionPrototype.constructor = GeneratorFunction;
            GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
            // Iterator interface in terms of a single ._invoke method.
            function defineIteratorMethods(prototype) {
                [
                    "next",
                    "throw",
                    "return"
                ].forEach(function(method) {
                    define(prototype, method, function(arg) {
                        return this._invoke(method, arg);
                    });
                });
            }
            exports1.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || // do is to check its .name property.
                (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
            };
            exports1.mark = function(genFun) {
                if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    define(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            }; // Within the body of any async function, `await x` is transformed to
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
            // `hasOwn.call(value, "__await")` to determine if the yielded value is
            // meant to be awaited.
            exports1.awrap = function(arg) {
                return {
                    __await: arg
                };
            };
            function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") reject(record.arg);
                    else {
                        var result = record.arg;
                        var value = result.value;
                        if (value && typeof value === "object" && hasOwn.call(value, "__await")) return PromiseImpl.resolve(value.__await).then(function(value1) {
                            invoke("next", value1, resolve, reject);
                        }, function(err) {
                            invoke("throw", err, resolve, reject);
                        });
                        return PromiseImpl.resolve(value).then(function(unwrapped) {
                            // When a yielded Promise is resolved, its final value becomes
                            // the .value of the Promise<{value,done}> result for the
                            // current iteration.
                            result.value = unwrapped;
                            resolve(result);
                        }, function(error) {
                            // If a rejected Promise was yielded, throw the rejection back
                            // into the async generator function so it can be handled there.
                            return invoke("throw", error, resolve, reject);
                        });
                    }
                }
                var previousPromise;
                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new PromiseImpl(function(resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }
                    return previousPromise = // all previous Promises have been resolved before calling invoke,
                    // so that results are always delivered in the correct order. If
                    // enqueue has not been called before, then it is important to
                    // call invoke immediately, without waiting on a callback to fire,
                    // so that the async generator function has the opportunity to do
                    // any necessary setup in a predictable way. This predictability
                    // is why the Promise constructor synchronously invokes its
                    // executor callback, and why async functions synchronously
                    // execute code before the first await. Since we implement simple
                    // async functions in terms of async generators, it is especially
                    // important to get this right, even though it requires care.
                    previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // invocations of the iterator.
                    callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                } // Define the unified helper method that is used to implement .next,
                // .throw, and .return (see defineIteratorMethods).
                this._invoke = enqueue;
            }
            defineIteratorMethods(AsyncIterator.prototype);
            AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                return this;
            };
            exports1.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
            // AsyncIterator objects; they just return a Promise for the value of
            // the final result produced by the iterator.
            exports1.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0) PromiseImpl = Promise;
                var iter = new AsyncIterator(wrap1(innerFn, outerFn, self, tryLocsList), PromiseImpl);
                return exports1.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                 : iter.next().then(function(result) {
                    return result.done ? result.value : iter.next();
                });
            };
            function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                    if (state === GenStateExecuting) throw new Error("Generator is already running");
                    if (state === GenStateCompleted) {
                        if (method === "throw") throw arg;
                         // Be forgiving, per 25.3.3.3.3 of the spec:
                        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                        return doneResult();
                    }
                    context.method = method;
                    context.arg = arg;
                    while(true){
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }
                        if (context.method === "next") // Setting context._sent for legacy support of Babel's
                        // function.sent implementation.
                        context.sent = context._sent = context.arg;
                        else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }
                            context.dispatchException(context.arg);
                        } else if (context.method === "return") context.abrupt("return", context.arg);
                        state = GenStateExecuting;
                        var record = tryCatch(innerFn, self, context);
                        if (record.type === "normal") {
                            // If an exception is thrown from innerFn, we leave state ===
                            // GenStateExecuting and loop back for another invocation.
                            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                            if (record.arg === ContinueSentinel) continue;
                            return {
                                value: record.arg,
                                done: context.done
                            };
                        } else if (record.type === "throw") {
                            state = GenStateCompleted; // Dispatch the exception by looping back around to the
                            // context.dispatchException(context.arg) call above.
                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            } // Call delegate.iterator[context.method](context.arg) and handle the
            // result, either by returning a { value, done } result from the
            // delegate iterator, or by modifying context.method and context.arg,
            // setting context.delegate to null, and returning the ContinueSentinel.
            function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined$1) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method always terminates the yield* loop.
                    context.delegate = null;
                    if (context.method === "throw") {
                        // Note: ["return"] must be used for ES3 parsing compatibility.
                        if (delegate.iterator["return"]) {
                            // If the delegate iterator has a return method, give it a
                            // chance to clean up.
                            context.method = "return";
                            context.arg = undefined$1;
                            maybeInvokeDelegate(delegate, context);
                            if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                            // "return" to "throw", let that override the TypeError below.
                            return ContinueSentinel;
                        }
                        context.method = "throw";
                        context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }
                if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).
                    context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.
                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined$1;
                    }
                } else // Re-yield the result returned by the delegate method.
                return info;
                 // The delegate iterator is finished, so forget it and continue with
                // the outer generator.
                context.delegate = null;
                return ContinueSentinel;
            } // Define Generator.prototype.{next,throw,return} in terms of the
            // unified ._invoke helper method.
            defineIteratorMethods(Gp);
            define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
            // @@iterator function is called on it. Some browsers' implementations of the
            // iterator prototype chain incorrectly implement this, causing the Generator
            // object to not be returned from this call. This ensures that doesn't happen.
            // See https://github.com/facebook/regenerator/issues/274 for more details.
            Gp[iteratorSymbol] = function() {
                return this;
            };
            Gp.toString = function() {
                return "[object Generator]";
            };
            function pushTryEntry(locs) {
                var entry = {
                    tryLoc: locs[0]
                };
                if (1 in locs) entry.catchLoc = locs[1];
                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
            }
            function resetTryEntry(entry) {
                var record = entry.completion || {
                };
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }
            function Context(tryLocsList) {
                // The root entry object (effectively a try statement without a catch
                // or a finally block) gives us a place to store values thrown from
                // locations where there is no enclosing try statement.
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }
            exports1.keys = function(object) {
                var keys3 = [];
                for(var key in object)keys3.push(key);
                keys3.reverse(); // Rather than returning an object with a next method, we keep
                // things simple and return the next function itself.
                return function next1() {
                    while(keys3.length){
                        var key1 = keys3.pop();
                        if (key1 in object) {
                            next1.value = key1;
                            next1.done = false;
                            return next1;
                        }
                    } // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.
                    next1.done = true;
                    return next1;
                };
            };
            function values2(iterable) {
                if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) return iteratorMethod.call(iterable);
                    if (typeof iterable.next === "function") return iterable;
                    if (!isNaN(iterable.length)) {
                        var i = -1, next1 = function next2() {
                            while((++i) < iterable.length)if (hasOwn.call(iterable, i)) {
                                next2.value = iterable[i];
                                next2.done = false;
                                return next2;
                            }
                            next2.value = undefined$1;
                            next2.done = true;
                            return next2;
                        };
                        return next1.next = next1;
                    }
                } // Return an iterator with no values.
                return {
                    next: doneResult
                };
            }
            exports1.values = values2;
            function doneResult() {
                return {
                    value: undefined$1,
                    done: true
                };
            }
            Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                    this.prev = 0;
                    this.next = 0; // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    this.sent = this._sent = undefined$1;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined$1;
                    this.tryEntries.forEach(resetTryEntry);
                    if (!skipTempReset) {
                        for(var name in this)// Not sure about the optimal order of these conditions:
                        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined$1;
                    }
                },
                stop: function() {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") throw rootRecord.arg;
                    return this.rval;
                },
                dispatchException: function(exception) {
                    if (this.done) throw exception;
                    var context = this;
                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;
                        if (caught) {
                            // If the dispatched exception was caught by a catch block,
                            // then let that catch block handle the exception normally.
                            context.method = "next";
                            context.arg = undefined$1;
                        }
                        return !!caught;
                    }
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        var record = entry.completion;
                        if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                        // it, so set the completion value of the entire function to
                        // throw the exception.
                        return handle("end");
                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");
                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                                else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                            } else throw new Error("try statement without catch or finally");
                        }
                    }
                },
                abrupt: function(type, arg) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }
                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
                    // location outside the try/catch block.
                    finallyEntry = null;
                    var record = finallyEntry ? finallyEntry.completion : {
                    };
                    record.type = type;
                    record.arg = arg;
                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }
                    return this.complete(record);
                },
                complete: function(record, afterLoc) {
                    if (record.type === "throw") throw record.arg;
                    if (record.type === "break" || record.type === "continue") this.next = record.arg;
                    else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
                    return ContinueSentinel;
                },
                finish: function(finallyLoc) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },
                "catch": function(tryLoc) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    } // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values2(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };
                    if (this.method === "next") // Deliberately forget the last sent value so that we don't
                    // accidentally pass it on to the delegate.
                    this.arg = undefined$1;
                    return ContinueSentinel;
                }
            }; // Regardless of whether this script is executing as a CommonJS module
            // or not, return the runtime object so that we can declare the variable
            // regeneratorRuntime in the outer scope, which allows this module to be
            // injected easily by `bin/regenerator --include-runtime script.js`.
            return exports1;
        }(// as the regeneratorRuntime namespace. Otherwise create a new empty
        // object. Either way, the resulting object will be used to initialize
        // the regeneratorRuntime variable at the top of this file.
        module.exports);
        try {
            regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
            // This module should not be running in strict mode, so the above
            // assignment should always work unless something is misconfigured. Just
            // in case runtime.js accidentally runs in strict mode, we can escape
            // strict mode using a global Function call. This could conceivably fail
            // if a Content Security Policy forbids using Function, but in that case
            // the proper solution is to fix the accidental strict mode problem. If
            // you've misconfigured your bundler to force strict mode and applied a
            // CSP to forbid Function, and you're not willing to fix either of those
            // problems, please detail your unique predicament in a GitHub issue.
            Function("r", "regeneratorRuntime = r")(runtime);
        }
    });
    var regenerator = runtime_1;
    var iterator$3 = iterator;
    var iterator$4 = iterator$3;
    var values$1 = entryVirtual('Array').values;
    var values$2 = values$1;
    var ArrayPrototype$b = Array.prototype;
    var DOMIterables$2 = {
        DOMTokenList: true,
        NodeList: true
    };
    var values_1 = function(it) {
        var own = it.values;
        return it === ArrayPrototype$b || it instanceof Array && own === ArrayPrototype$b.values // eslint-disable-next-line no-prototype-builtins
         || DOMIterables$2.hasOwnProperty(classof(it)) ? values$2 : own;
    };
    var values$3 = values_1;
    var test$2 = [];
    var nativeSort = test$2.sort; // IE8-
    var FAILS_ON_UNDEFINED = fails(function() {
        test$2.sort(undefined);
    }); // V8 bug
    var FAILS_ON_NULL = fails(function() {
        test$2.sort(null);
    }); // Old WebKit
    var STRICT_METHOD$3 = arrayMethodIsStrict('sort');
    var FORCED$5 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$3; // `Array.prototype.sort` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.sort
    _export({
        target: 'Array',
        proto: true,
        forced: FORCED$5
    }, {
        sort: function sort(comparefn) {
            return comparefn === undefined ? nativeSort.call(toObject(this)) : nativeSort.call(toObject(this), aFunction(comparefn));
        }
    });
    var sort = entryVirtual('Array').sort;
    var ArrayPrototype$c = Array.prototype;
    var sort_1 = function(it) {
        var own = it.sort;
        return it === ArrayPrototype$c || it instanceof Array && own === ArrayPrototype$c.sort ? sort : own;
    };
    var sort$1 = sort_1;
    var sort$2 = sort$1;
    var keys$4 = entryVirtual('Array').keys;
    var keys$5 = keys$4;
    var ArrayPrototype$d = Array.prototype;
    var DOMIterables$3 = {
        DOMTokenList: true,
        NodeList: true
    };
    var keys_1 = function(it) {
        var own = it.keys;
        return it === ArrayPrototype$d || it instanceof Array && own === ArrayPrototype$d.keys // eslint-disable-next-line no-prototype-builtins
         || DOMIterables$3.hasOwnProperty(classof(it)) ? keys$5 : own;
    };
    var keys$6 = keys_1;
    var $some = arrayIteration.some;
    var STRICT_METHOD$4 = arrayMethodIsStrict('some');
    var USES_TO_LENGTH$8 = arrayMethodUsesToLength('some'); // `Array.prototype.some` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.some
    _export({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD$4 || !USES_TO_LENGTH$8
    }, {
        some: function some(callbackfn) {
            return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var some = entryVirtual('Array').some;
    var ArrayPrototype$e = Array.prototype;
    var some_1 = function(it) {
        var own = it.some;
        return it === ArrayPrototype$e || it instanceof Array && own === ArrayPrototype$e.some ? some : own;
    };
    var some$1 = some_1;
    var some$2 = some$1;
    var freezing = !fails(function() {
        return Object.isExtensible(Object.preventExtensions({
        }));
    });
    var internalMetadata = createCommonjsModule(function(module) {
        var defineProperty3 = objectDefineProperty.f;
        var METADATA = uid('meta');
        var id1 = 0;
        var isExtensible = Object.isExtensible || function() {
            return true;
        };
        var setMetadata = function(it) {
            defineProperty3(it, METADATA, {
                value: {
                    objectID: 'O' + ++id1,
                    // object ID
                    weakData: {
                    } // weak collections IDs
                }
            });
        };
        var fastKey = function(it, create4) {
            // return a primitive with prefix
            if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
            if (!has(it, METADATA)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return 'F'; // not necessary to add metadata
                if (!create4) return 'E'; // add missing metadata
                setMetadata(it); // return object ID
            }
            return it[METADATA].objectID;
        };
        var getWeakData = function(it, create4) {
            if (!has(it, METADATA)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return true; // not necessary to add metadata
                if (!create4) return false; // add missing metadata
                setMetadata(it); // return the store of weak collections IDs
            }
            return it[METADATA].weakData;
        }; // add metadata on freeze-family methods calling
        var onFreeze = function(it) {
            if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
            return it;
        };
        var meta = module.exports = {
            REQUIRED: false,
            fastKey: fastKey,
            getWeakData: getWeakData,
            onFreeze: onFreeze
        };
        hiddenKeys[METADATA] = true;
    });
    var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
    };
    var iterate = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = functionBindContext(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
        var iterator1, iterFn, index, length, result, next2, step;
        var stop = function(condition) {
            if (iterator1) iteratorClose(iterator1);
            return new Result(true, condition);
        };
        var callFn = function(value) {
            if (AS_ENTRIES) {
                anObject(value);
                return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            }
            return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_ITERATOR) iterator1 = iterable;
        else {
            iterFn = getIteratorMethod(iterable);
            if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators
            if (isArrayIteratorMethod(iterFn)) {
                for(index = 0, length = toLength(iterable.length); length > index; index++){
                    result = callFn(iterable[index]);
                    if (result && result instanceof Result) return result;
                }
                return new Result(false);
            }
            iterator1 = iterFn.call(iterable);
        }
        next2 = iterator1.next;
        while(!(step = next2.call(iterator1)).done){
            try {
                result = callFn(step.value);
            } catch (error) {
                iteratorClose(iterator1);
                throw error;
            }
            if (typeof result == 'object' && result && result instanceof Result) return result;
        }
        return new Result(false);
    };
    var anInstance = function(it, Constructor, name) {
        if (!(it instanceof Constructor)) throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        return it;
    };
    var defineProperty$9 = objectDefineProperty.f;
    var forEach$3 = arrayIteration.forEach;
    var setInternalState$3 = internalState.set;
    var internalStateGetterFor = internalState.getterFor;
    var collection = function(CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
        var ADDER = IS_MAP ? 'set' : 'add';
        var NativeConstructor = global$1[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var exported = {
        };
        var Constructor;
        if (!descriptors || typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
            new NativeConstructor().entries().next();
        }))) {
            // create collection constructor
            Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
            internalMetadata.REQUIRED = true;
        } else {
            Constructor = wrapper(function(target, iterable) {
                setInternalState$3(anInstance(target, Constructor, CONSTRUCTOR_NAME), {
                    type: CONSTRUCTOR_NAME,
                    collection: new NativeConstructor()
                });
                if (iterable != undefined) iterate(iterable, target[ADDER], {
                    that: target,
                    AS_ENTRIES: IS_MAP
                });
            });
            var getInternalState1 = internalStateGetterFor(CONSTRUCTOR_NAME);
            forEach$3([
                'add',
                'clear',
                'delete',
                'forEach',
                'get',
                'has',
                'set',
                'keys',
                'values',
                'entries'
            ], function(KEY) {
                var IS_ADDER = KEY == 'add' || KEY == 'set';
                if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) createNonEnumerableProperty(Constructor.prototype, KEY, function(a, b) {
                    var collection1 = getInternalState1(this).collection;
                    if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
                    var result = collection1[KEY](a === 0 ? 0 : a, b);
                    return IS_ADDER ? this : result;
                });
            });
            IS_WEAK || defineProperty$9(Constructor.prototype, 'size', {
                configurable: true,
                get: function() {
                    return getInternalState1(this).collection.size;
                }
            });
        }
        setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
        exported[CONSTRUCTOR_NAME] = Constructor;
        _export({
            global: true,
            forced: true
        }, exported);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
    };
    var redefineAll = function(target, src, options) {
        for(var key2 in src)if (options && options.unsafe && target[key2]) target[key2] = src[key2];
        else redefine(target, key2, src[key2], options);
        return target;
    };
    var SPECIES$3 = wellKnownSymbol('species');
    var setSpecies = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty3 = objectDefineProperty.f;
        if (descriptors && Constructor && !Constructor[SPECIES$3]) defineProperty3(Constructor, SPECIES$3, {
            configurable: true,
            get: function() {
                return this;
            }
        });
    };
    var defineProperty$a = objectDefineProperty.f;
    var fastKey = internalMetadata.fastKey;
    var setInternalState$4 = internalState.set;
    var internalStateGetterFor$1 = internalState.getterFor;
    var collectionStrong = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
            var C = wrapper(function(that, iterable) {
                anInstance(that, C, CONSTRUCTOR_NAME);
                setInternalState$4(that, {
                    type: CONSTRUCTOR_NAME,
                    index: objectCreate(null),
                    first: undefined,
                    last: undefined,
                    size: 0
                });
                if (!descriptors) that.size = 0;
                if (iterable != undefined) iterate(iterable, that[ADDER], {
                    that: that,
                    AS_ENTRIES: IS_MAP
                });
            });
            var getInternalState2 = internalStateGetterFor$1(CONSTRUCTOR_NAME);
            var define = function(that, key2, value) {
                var state = getInternalState2(that);
                var entry = getEntry(that, key2);
                var previous, index; // change existing entry
                if (entry) entry.value = value; // create new entry
                else {
                    state.last = entry = {
                        index: index = fastKey(key2, true),
                        key: key2,
                        value: value,
                        previous: previous = state.last,
                        next: undefined,
                        removed: false
                    };
                    if (!state.first) state.first = entry;
                    if (previous) previous.next = entry;
                    if (descriptors) state.size++;
                    else that.size++; // add to index
                    if (index !== 'F') state.index[index] = entry;
                }
                return that;
            };
            var getEntry = function(that, key2) {
                var state = getInternalState2(that); // fast case
                var index = fastKey(key2);
                var entry;
                if (index !== 'F') return state.index[index]; // frozen object case
                for(entry = state.first; entry; entry = entry.next){
                    if (entry.key == key2) return entry;
                }
            };
            redefineAll(C.prototype, {
                // 23.1.3.1 Map.prototype.clear()
                // 23.2.3.2 Set.prototype.clear()
                clear: function clear() {
                    var that = this;
                    var state = getInternalState2(that);
                    var data1 = state.index;
                    var entry = state.first;
                    while(entry){
                        entry.removed = true;
                        if (entry.previous) entry.previous = entry.previous.next = undefined;
                        delete data1[entry.index];
                        entry = entry.next;
                    }
                    state.first = state.last = undefined;
                    if (descriptors) state.size = 0;
                    else that.size = 0;
                },
                // 23.1.3.3 Map.prototype.delete(key)
                // 23.2.3.4 Set.prototype.delete(value)
                'delete': function(key2) {
                    var that = this;
                    var state = getInternalState2(that);
                    var entry = getEntry(that, key2);
                    if (entry) {
                        var next2 = entry.next;
                        var prev = entry.previous;
                        delete state.index[entry.index];
                        entry.removed = true;
                        if (prev) prev.next = next2;
                        if (next2) next2.previous = prev;
                        if (state.first == entry) state.first = next2;
                        if (state.last == entry) state.last = prev;
                        if (descriptors) state.size--;
                        else that.size--;
                    }
                    return !!entry;
                },
                // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                forEach: function forEach2(callbackfn) {
                    var state = getInternalState2(this);
                    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                    var entry;
                    while(entry = entry ? entry.next : state.first){
                        boundFunction(entry.value, entry.key, this); // revert to the last existing entry
                        while(entry && entry.removed)entry = entry.previous;
                    }
                },
                // 23.1.3.7 Map.prototype.has(key)
                // 23.2.3.7 Set.prototype.has(value)
                has: function has1(key2) {
                    return !!getEntry(this, key2);
                }
            });
            redefineAll(C.prototype, IS_MAP ? {
                // 23.1.3.6 Map.prototype.get(key)
                get: function get1(key2) {
                    var entry = getEntry(this, key2);
                    return entry && entry.value;
                },
                // 23.1.3.9 Map.prototype.set(key, value)
                set: function set1(key2, value) {
                    return define(this, key2 === 0 ? 0 : key2, value);
                }
            } : {
                // 23.2.3.1 Set.prototype.add(value)
                add: function add(value) {
                    return define(this, value = value === 0 ? 0 : value, value);
                }
            });
            if (descriptors) defineProperty$a(C.prototype, 'size', {
                get: function() {
                    return getInternalState2(this).size;
                }
            });
            return C;
        },
        setStrong: function(C, CONSTRUCTOR_NAME, IS_MAP) {
            var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
            var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
            var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME); // add .keys, .values, .entries, [@@iterator]
            // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
            defineIterator(C, CONSTRUCTOR_NAME, function(iterated, kind) {
                setInternalState$4(this, {
                    type: ITERATOR_NAME,
                    target: iterated,
                    state: getInternalCollectionState(iterated),
                    kind: kind,
                    last: undefined
                });
            }, function() {
                var state = getInternalIteratorState(this);
                var kind = state.kind;
                var entry = state.last; // revert to the last existing entry
                while(entry && entry.removed)entry = entry.previous; // get next entry
                if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                    // or finish the iteration
                    state.target = undefined;
                    return {
                        value: undefined,
                        done: true
                    };
                } // return step by kind
                if (kind == 'keys') return {
                    value: entry.key,
                    done: false
                };
                if (kind == 'values') return {
                    value: entry.value,
                    done: false
                };
                return {
                    value: [
                        entry.key,
                        entry.value
                    ],
                    done: false
                };
            }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2
            setSpecies(CONSTRUCTOR_NAME);
        }
    };
    // https://tc39.github.io/ecma262/#sec-map-objects
    var es_map = collection('Map', function(init) {
        return function Map1() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong);
    var map$3 = path.Map;
    var map$4 = map$3;
    var map$5 = map$4;
    var create$3 = create2;
    var create$4 = create$3;
    // https://tc39.github.io/ecma262/#sec-object.setprototypeof
    _export({
        target: 'Object',
        stat: true
    }, {
        setPrototypeOf: objectSetPrototypeOf
    });
    var setPrototypeOf = path.Object.setPrototypeOf;
    var setPrototypeOf$1 = setPrototypeOf;
    var setPrototypeOf$2 = setPrototypeOf$1;
    var setPrototypeOf$3 = createCommonjsModule(function(module) {
        function _setPrototypeOf(o, p) {
            module.exports = _setPrototypeOf = setPrototypeOf$2 || function _setPrototypeOf1(o1, p1) {
                o1.__proto__ = p1;
                return o1;
            };
            return _setPrototypeOf(o, p);
        }
        module.exports = _setPrototypeOf;
    });
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = create$4(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) setPrototypeOf$3(subClass, superClass);
    }
    var inherits = _inherits;
    function _assertThisInitialized$1(self) {
        if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self;
    }
    var assertThisInitialized = _assertThisInitialized$1;
    function _possibleConstructorReturn(self, call) {
        if (call && (_typeof_1(call) === "object" || typeof call === "function")) return call;
        return assertThisInitialized(self);
    }
    var possibleConstructorReturn = _possibleConstructorReturn;
    var getPrototypeOf$1 = getPrototypeOf;
    var getPrototypeOf$2 = getPrototypeOf$1;
    var getPrototypeOf$3 = createCommonjsModule(function(module) {
        function _getPrototypeOf(o) {
            module.exports = _getPrototypeOf = setPrototypeOf$2 ? getPrototypeOf$2 : function _getPrototypeOf1(o1) {
                return o1.__proto__ || getPrototypeOf$2(o1);
            };
            return _getPrototypeOf(o);
        }
        module.exports = _getPrototypeOf;
    });
    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
        // lazy load so that environments that need to polyfill have a chance to do so
        if (!getRandomValues) {
            // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
            // find the complete implementation of crypto (msCrypto) on IE11.
            getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
            if (!getRandomValues) throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
        return getRandomValues(rnds8);
    }
    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function validate(uuid) {
        return typeof uuid === 'string' && REGEX.test(uuid);
    }
    /**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */ var byteToHex = [];
    for(var i = 0; i < 256; ++i)byteToHex.push((i + 256).toString(16).substr(1));
    function stringify$3(arr) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
        // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
        var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
        // of the following:
        // - One or more input array values don't map to a hex octet (leading to
        // "undefined" in the uuid)
        // - Invalid input values for the RFC `version` or `variant` fields
        if (!validate(uuid)) throw TypeError('Stringified UUID is invalid');
        return uuid;
    }
    function v4(options, buf, offset) {
        options = options || {
        };
        var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128; // Copy bytes to buffer, if provided
        if (buf) {
            offset = offset || 0;
            for(var i1 = 0; i1 < 16; ++i1)buf[offset + i1] = rnds[i1];
            return buf;
        }
        return stringify$3(rnds);
    }
    /**
	 * Determine whether a value can be used as an id.
	 *
	 * @param value - Input value of unknown type.
	 *
	 * @returns True if the value is valid id, false otherwise.
	 */ function isId(value) {
        return typeof value === "string" || typeof value === "number";
    }
    /**
	 * A queue.
	 *
	 * @typeParam T - The type of method names to be replaced by queued versions.
	 */ var Queue = /*#__PURE__*/ function() {
        /**
	   * Construct a new Queue.
	   *
	   * @param options - Queue configuration.
	   */ function Queue1(options) {
            classCallCheck(this, Queue1);
            this._queue = [];
            this._timeout = null;
            this._extended = null; // options
            this.delay = null;
            this.max = Infinity;
            this.setOptions(options);
        }
        /**
	   * Update the configuration of the queue.
	   *
	   * @param options - Queue configuration.
	   */ createClass(Queue1, [
            {
                key: "setOptions",
                value: function setOptions(options) {
                    if (options && typeof options.delay !== "undefined") this.delay = options.delay;
                    if (options && typeof options.max !== "undefined") this.max = options.max;
                    this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                /**
	     * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
	     */ value: function destroy() {
                    this.flush();
                    if (this._extended) {
                        var object = this._extended.object;
                        var methods = this._extended.methods;
                        for(var i2 = 0; i2 < methods.length; i2++){
                            var method = methods[i2];
                            if (method.original) // @TODO: better solution?
                            object[method.name] = method.original;
                            else // @TODO: better solution?
                            delete object[method.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function replace(object, method) {
                    /* eslint-disable-next-line @typescript-eslint/no-this-alias -- Function this is necessary in the function bellow, so class this has to be saved into a variable here. */ var me = this;
                    var original = object[method];
                    if (!original) throw new Error("Method " + method + " undefined");
                    object[method] = function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        // add this call to the queue
                        me.queue({
                            args: args,
                            fn: original,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function queue(entry) {
                    if (typeof entry === "function") this._queue.push({
                        fn: entry
                    });
                    else this._queue.push(entry);
                    this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function _flushIfNeeded() {
                    var _this = this;
                    // flush when the maximum is exceeded.
                    if (this._queue.length > this.max) this.flush();
                     // flush after a period of inactivity when a delay is configured
                    if (this._timeout != null) {
                        clearTimeout(this._timeout);
                        this._timeout = null;
                    }
                    if (this.queue.length > 0 && typeof this.delay === "number") this._timeout = setTimeout$2(function() {
                        _this.flush();
                    }, this.delay);
                }
            },
            {
                key: "flush",
                value: function flush() {
                    var _context, _context2;
                    forEach$2(_context = splice$2(_context2 = this._queue).call(_context2, 0)).call(_context, function(entry) {
                        entry.fn.apply(entry.context || entry.fn, entry.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function extend1(object, options) {
                    var queue = new Queue1(options);
                    if (object.flush !== undefined) throw new Error("Target object already has a property flush");
                    object.flush = function() {
                        queue.flush();
                    };
                    var methods = [
                        {
                            name: "flush",
                            original: undefined
                        }
                    ];
                    if (options && options.replace) for(var i3 = 0; i3 < options.replace.length; i3++){
                        var name = options.replace[i3];
                        methods.push({
                            name: name,
                            // @TODO: better solution?
                            original: object[name]
                        }); // @TODO: better solution?
                        queue.replace(object, name);
                    }
                    queue._extended = {
                        object: object,
                        methods: methods
                    };
                    return queue;
                }
            }
        ]);
        return Queue1;
    }();
    /**
	 * [[DataSet]] code that can be reused in [[DataView]] or other similar implementations of [[DataInterface]].
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 */ var DataSetPart = /*#__PURE__*/ function() {
        function DataSetPart1() {
            classCallCheck(this, DataSetPart1);
            this._subscribers = {
                "*": [],
                add: [],
                remove: [],
                update: []
            };
            /**
	     * @deprecated Use on instead (PS: DataView.subscribe === DataView.on).
	     */ this.subscribe = DataSetPart1.prototype.on;
            /**
	     * @deprecated Use off instead (PS: DataView.unsubscribe === DataView.off).
	     */ this.unsubscribe = DataSetPart1.prototype.off;
        }
        /**
	   * Trigger an event
	   *
	   * @param event - Event name.
	   * @param payload - Event payload.
	   * @param senderId - Id of the sender.
	   */ createClass(DataSetPart1, [
            {
                key: "_trigger",
                value: function _trigger(event, payload, senderId) {
                    var _context, _context2;
                    if (event === "*") throw new Error("Cannot trigger event *");
                    forEach$2(_context = concat$2(_context2 = []).call(_context2, toConsumableArray(this._subscribers[event]), toConsumableArray(this._subscribers["*"]))).call(_context, function(subscriber) {
                        subscriber(event, payload, senderId != null ? senderId : null);
                    });
                }
            },
            {
                key: "on",
                value: function on(event, callback) {
                    if (typeof callback === "function") this._subscribers[event].push(callback);
                     // @TODO: Maybe throw for invalid callbacks?
                }
            },
            {
                key: "off",
                value: function off(event, callback) {
                    var _context3;
                    this._subscribers[event] = filter$2(_context3 = this._subscribers[event]).call(_context3, function(subscriber) {
                        return subscriber !== callback;
                    });
                }
            }
        ]);
        return DataSetPart1;
    }();
    // https://tc39.github.io/ecma262/#sec-set-objects
    var es_set = collection('Set', function(init) {
        return function Set1() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong);
    var set$1 = path.Set;
    var set$2 = set$1;
    var set$3 = set$2;
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i3 = 0;
                var F = function F1() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i3 >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i3++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f1() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
        var _context10;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
        var n = slice$6(_context10 = Object.prototype.toString.call(o)).call(_context10, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i4 = 0, arr2 = new Array(len); i4 < len; i4++)arr2[i4] = arr[i4];
        return arr2;
    }
    /**
	 * Data stream
	 *
	 * @remarks
	 * [[DataStream]] offers an always up to date stream of items from a [[DataSet]] or [[DataView]].
	 * That means that the stream is evaluated at the time of iteration, conversion to another data type or when [[cache]] is called, not when the [[DataStream]] was created.
	 * Multiple invocations of for example [[toItemArray]] may yield different results (if the data source like for example [[DataSet]] gets modified).
	 *
	 * @typeParam Item - The item type this stream is going to work with.
	 */ var DataStream = /*#__PURE__*/ function() {
        /**
	   * Create a new data stream.
	   *
	   * @param pairs - The id, item pairs.
	   */ function DataStream1(pairs) {
            classCallCheck(this, DataStream1);
            this._pairs = pairs;
        }
        /**
	   * Return an iterable of key, value pairs for every entry in the stream.
	   */ createClass(DataStream1, [
            {
                key: iterator$4,
                value: /*#__PURE__*/ regenerator.mark(function value() {
                    var _iterator, _step, _step$value, id1, item;
                    return regenerator.wrap(function value$(_context) {
                        while(true)switch(_context.prev = _context.next){
                            case 0:
                                _iterator = _createForOfIteratorHelper$1(this._pairs);
                                _context.prev = 1;
                                _iterator.s();
                            case 3:
                                if ((_step = _iterator.n()).done) {
                                    _context.next = 9;
                                    break;
                                }
                                _step$value = slicedToArray(_step.value, 2), id1 = _step$value[0], item = _step$value[1];
                                _context.next = 7;
                                return [
                                    id1,
                                    item
                                ];
                            case 7:
                                _context.next = 3;
                                break;
                            case 9:
                                _context.next = 14;
                                break;
                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context["catch"](1);
                                _iterator.e(_context.t0);
                            case 14:
                                _context.prev = 14;
                                _iterator.f();
                                return _context.finish(14);
                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }, value, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: /*#__PURE__*/ regenerator.mark(function entries1() {
                    var _iterator2, _step2, _step2$value, id1, item;
                    return regenerator.wrap(function entries$(_context2) {
                        while(true)switch(_context2.prev = _context2.next){
                            case 0:
                                _iterator2 = _createForOfIteratorHelper$1(this._pairs);
                                _context2.prev = 1;
                                _iterator2.s();
                            case 3:
                                if ((_step2 = _iterator2.n()).done) {
                                    _context2.next = 9;
                                    break;
                                }
                                _step2$value = slicedToArray(_step2.value, 2), id1 = _step2$value[0], item = _step2$value[1];
                                _context2.next = 7;
                                return [
                                    id1,
                                    item
                                ];
                            case 7:
                                _context2.next = 3;
                                break;
                            case 9:
                                _context2.next = 14;
                                break;
                            case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2["catch"](1);
                                _iterator2.e(_context2.t0);
                            case 14:
                                _context2.prev = 14;
                                _iterator2.f();
                                return _context2.finish(14);
                            case 17:
                            case "end":
                                return _context2.stop();
                        }
                    }, entries1, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: /*#__PURE__*/ regenerator.mark(function keys3() {
                    var _iterator3, _step3, _step3$value, id1;
                    return regenerator.wrap(function keys$(_context3) {
                        while(true)switch(_context3.prev = _context3.next){
                            case 0:
                                _iterator3 = _createForOfIteratorHelper$1(this._pairs);
                                _context3.prev = 1;
                                _iterator3.s();
                            case 3:
                                if ((_step3 = _iterator3.n()).done) {
                                    _context3.next = 9;
                                    break;
                                }
                                _step3$value = slicedToArray(_step3.value, 1), id1 = _step3$value[0];
                                _context3.next = 7;
                                return id1;
                            case 7:
                                _context3.next = 3;
                                break;
                            case 9:
                                _context3.next = 14;
                                break;
                            case 11:
                                _context3.prev = 11;
                                _context3.t0 = _context3["catch"](1);
                                _iterator3.e(_context3.t0);
                            case 14:
                                _context3.prev = 14;
                                _iterator3.f();
                                return _context3.finish(14);
                            case 17:
                            case "end":
                                return _context3.stop();
                        }
                    }, keys3, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: /*#__PURE__*/ regenerator.mark(function values2() {
                    var _iterator4, _step4, _step4$value, item;
                    return regenerator.wrap(function values$(_context4) {
                        while(true)switch(_context4.prev = _context4.next){
                            case 0:
                                _iterator4 = _createForOfIteratorHelper$1(this._pairs);
                                _context4.prev = 1;
                                _iterator4.s();
                            case 3:
                                if ((_step4 = _iterator4.n()).done) {
                                    _context4.next = 9;
                                    break;
                                }
                                _step4$value = slicedToArray(_step4.value, 2), item = _step4$value[1];
                                _context4.next = 7;
                                return item;
                            case 7:
                                _context4.next = 3;
                                break;
                            case 9:
                                _context4.next = 14;
                                break;
                            case 11:
                                _context4.prev = 11;
                                _context4.t0 = _context4["catch"](1);
                                _iterator4.e(_context4.t0);
                            case 14:
                                _context4.prev = 14;
                                _iterator4.f();
                                return _context4.finish(14);
                            case 17:
                            case "end":
                                return _context4.stop();
                        }
                    }, values2, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function toIdArray() {
                    var _context5;
                    return map$2(_context5 = toConsumableArray(this._pairs)).call(_context5, function(pair) {
                        return pair[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function toItemArray() {
                    var _context6;
                    return map$2(_context6 = toConsumableArray(this._pairs)).call(_context6, function(pair) {
                        return pair[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function toEntryArray() {
                    return toConsumableArray(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function toObjectMap() {
                    var map1 = create$2(null);
                    var _iterator5 = _createForOfIteratorHelper$1(this._pairs), _step5;
                    try {
                        for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                            var _step5$value = slicedToArray(_step5.value, 2), id1 = _step5$value[0], item = _step5$value[1];
                            map1[id1] = item;
                        }
                    } catch (err) {
                        _iterator5.e(err);
                    } finally{
                        _iterator5.f();
                    }
                    return map1;
                }
            },
            {
                key: "toMap",
                value: function toMap() {
                    return new map$5(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function toIdSet() {
                    return new set$3(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function toItemSet() {
                    return new set$3(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function cache1() {
                    return new DataStream1(toConsumableArray(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function distinct(callback) {
                    var set1 = new set$3();
                    var _iterator6 = _createForOfIteratorHelper$1(this._pairs), _step6;
                    try {
                        for(_iterator6.s(); !(_step6 = _iterator6.n()).done;){
                            var _step6$value = slicedToArray(_step6.value, 2), id2 = _step6$value[0], item = _step6$value[1];
                            set1.add(callback(item, id2));
                        }
                    } catch (err) {
                        _iterator6.e(err);
                    } finally{
                        _iterator6.f();
                    }
                    return set1;
                }
            },
            {
                key: "filter",
                value: function filter1(callback) {
                    var pairs = this._pairs;
                    return new DataStream1(defineProperty$7({
                    }, iterator$4, /*#__PURE__*/ regenerator.mark(function _callee() {
                        var _iterator7, _step7, _step7$value, id3, item;
                        return regenerator.wrap(function _callee$(_context7) {
                            while(true)switch(_context7.prev = _context7.next){
                                case 0:
                                    _iterator7 = _createForOfIteratorHelper$1(pairs);
                                    _context7.prev = 1;
                                    _iterator7.s();
                                case 3:
                                    if ((_step7 = _iterator7.n()).done) {
                                        _context7.next = 10;
                                        break;
                                    }
                                    _step7$value = slicedToArray(_step7.value, 2), id3 = _step7$value[0], item = _step7$value[1];
                                    if (!callback(item, id3)) {
                                        _context7.next = 8;
                                        break;
                                    }
                                    _context7.next = 8;
                                    return [
                                        id3,
                                        item
                                    ];
                                case 8:
                                    _context7.next = 3;
                                    break;
                                case 10:
                                    _context7.next = 15;
                                    break;
                                case 12:
                                    _context7.prev = 12;
                                    _context7.t0 = _context7["catch"](1);
                                    _iterator7.e(_context7.t0);
                                case 15:
                                    _context7.prev = 15;
                                    _iterator7.f();
                                    return _context7.finish(15);
                                case 18:
                                case "end":
                                    return _context7.stop();
                            }
                        }, _callee, null, [
                            [
                                1,
                                12,
                                15,
                                18
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "forEach",
                value: function forEach2(callback) {
                    var _iterator8 = _createForOfIteratorHelper$1(this._pairs), _step8;
                    try {
                        for(_iterator8.s(); !(_step8 = _iterator8.n()).done;){
                            var _step8$value = slicedToArray(_step8.value, 2), id3 = _step8$value[0], item = _step8$value[1];
                            callback(item, id3);
                        }
                    } catch (err) {
                        _iterator8.e(err);
                    } finally{
                        _iterator8.f();
                    }
                }
            },
            {
                key: "map",
                value: function map1(callback) {
                    var pairs = this._pairs;
                    return new DataStream1(defineProperty$7({
                    }, iterator$4, /*#__PURE__*/ regenerator.mark(function _callee2() {
                        var _iterator9, _step9, _step9$value, id4, item;
                        return regenerator.wrap(function _callee2$(_context8) {
                            while(true)switch(_context8.prev = _context8.next){
                                case 0:
                                    _iterator9 = _createForOfIteratorHelper$1(pairs);
                                    _context8.prev = 1;
                                    _iterator9.s();
                                case 3:
                                    if ((_step9 = _iterator9.n()).done) {
                                        _context8.next = 9;
                                        break;
                                    }
                                    _step9$value = slicedToArray(_step9.value, 2), id4 = _step9$value[0], item = _step9$value[1];
                                    _context8.next = 7;
                                    return [
                                        id4,
                                        callback(item, id4)
                                    ];
                                case 7:
                                    _context8.next = 3;
                                    break;
                                case 9:
                                    _context8.next = 14;
                                    break;
                                case 11:
                                    _context8.prev = 11;
                                    _context8.t0 = _context8["catch"](1);
                                    _iterator9.e(_context8.t0);
                                case 14:
                                    _context8.prev = 14;
                                    _iterator9.f();
                                    return _context8.finish(14);
                                case 17:
                                case "end":
                                    return _context8.stop();
                            }
                        }, _callee2, null, [
                            [
                                1,
                                11,
                                14,
                                17
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "max",
                value: function max1(callback) {
                    var iter = getIterator$1(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var maxItem = curr.value[1];
                    var maxValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value = slicedToArray(curr.value, 2), id4 = _curr$value[0], item = _curr$value[1];
                        var _value = callback(item, id4);
                        if (_value > maxValue) {
                            maxValue = _value;
                            maxItem = item;
                        }
                    }
                    return maxItem;
                }
            },
            {
                key: "min",
                value: function min1(callback) {
                    var iter = getIterator$1(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var minItem = curr.value[1];
                    var minValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value2 = slicedToArray(curr.value, 2), id5 = _curr$value2[0], item = _curr$value2[1];
                        var _value2 = callback(item, id5);
                        if (_value2 < minValue) {
                            minValue = _value2;
                            minItem = item;
                        }
                    }
                    return minItem;
                }
            },
            {
                key: "reduce",
                value: function reduce1(callback, accumulator) {
                    var _iterator10 = _createForOfIteratorHelper$1(this._pairs), _step10;
                    try {
                        for(_iterator10.s(); !(_step10 = _iterator10.n()).done;){
                            var _step10$value = slicedToArray(_step10.value, 2), id6 = _step10$value[0], item = _step10$value[1];
                            accumulator = callback(accumulator, item, id6);
                        }
                    } catch (err) {
                        _iterator10.e(err);
                    } finally{
                        _iterator10.f();
                    }
                    return accumulator;
                }
            },
            {
                key: "sort",
                value: function sort1(callback) {
                    var _this = this;
                    return new DataStream1(defineProperty$7({
                    }, iterator$4, function() {
                        var _context9;
                        return getIterator$1(sort$2(_context9 = toConsumableArray(_this._pairs)).call(_context9, function(_ref, _ref2) {
                            var _ref3 = slicedToArray(_ref, 2), idA = _ref3[0], itemA = _ref3[1];
                            var _ref4 = slicedToArray(_ref2, 2), idB = _ref4[0], itemB = _ref4[1];
                            return callback(itemA, itemB, idA, idB);
                        }));
                    }));
                }
            }
        ]);
        return DataStream1;
    }();
    function ownKeys$4(object, enumerableOnly) {
        var keys3 = keys$3(object);
        if (getOwnPropertySymbols$2) {
            var symbols = getOwnPropertySymbols$2(object);
            if (enumerableOnly) symbols = filter$2(symbols).call(symbols, function(sym) {
                return getOwnPropertyDescriptor$3(object, sym).enumerable;
            });
            keys3.push.apply(keys3, symbols);
        }
        return keys3;
    }
    function _objectSpread(target) {
        for(var i4 = 1; i4 < arguments.length; i4++){
            var source = arguments[i4] != null ? arguments[i4] : {
            };
            if (i4 % 2) {
                var _context10;
                forEach$2(_context10 = ownKeys$4(Object(source), true)).call(_context10, function(key2) {
                    defineProperty$7(target, key2, source[key2]);
                });
            } else if (getOwnPropertyDescriptors$2) defineProperties$1(target, getOwnPropertyDescriptors$2(source));
            else {
                var _context11;
                forEach$2(_context11 = ownKeys$4(Object(source))).call(_context11, function(key2) {
                    defineProperty$4(target, key2, getOwnPropertyDescriptor$3(source, key2));
                });
            }
        }
        return target;
    }
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i4 = 0;
                var F = function F1() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i4 >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i4++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f1() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
        var _context9;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
        var n = slice$6(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i5 = 0, arr2 = new Array(len); i5 < len; i5++)arr2[i5] = arr[i5];
        return arr2;
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = getPrototypeOf$3(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = getPrototypeOf$3(this).constructor;
                result = construct$3(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !construct$3) return false;
        if (construct$3.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(construct$3(Date, [], function() {
            }));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
	 * Add an id to given item if it doesn't have one already.
	 *
	 * @remarks
	 * The item will be modified.
	 *
	 * @param item - The item that will have an id after a call to this function.
	 * @param idProp - The key of the id property.
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 *
	 * @returns true
	 */ function ensureFullItem(item, idProp) {
        if (item[idProp] == null) // generate an id
        item[idProp] = v4();
        return item;
    }
    /**
	 * # DataSet
	 *
	 * Vis.js comes with a flexible DataSet, which can be used to hold and
	 * manipulate unstructured data and listen for changes in the data. The DataSet
	 * is key/value based. Data items can be added, updated and removed from the
	 * DataSet, and one can subscribe to changes in the DataSet. The data in the
	 * DataSet can be filtered and ordered. Data can be normalized when appending it
	 * to the DataSet as well.
	 *
	 * ## Example
	 *
	 * The following example shows how to use a DataSet.
	 *
	 * ```javascript
	 * // create a DataSet
	 * var options = {};
	 * var data = new vis.DataSet(options);
	 *
	 * // add items
	 * // note that the data items can contain different properties and data formats
	 * data.add([
	 *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
	 *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
	 *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
	 *   {id: 4, text: 'item 4'}
	 * ]);
	 *
	 * // subscribe to any change in the DataSet
	 * data.on('*', function (event, properties, senderId) {
	 *   console.log('event', event, properties);
	 * });
	 *
	 * // update an existing item
	 * data.update({id: 2, group: 1});
	 *
	 * // remove an item
	 * data.remove(4);
	 *
	 * // get all ids
	 * var ids = data.getIds();
	 * console.log('ids', ids);
	 *
	 * // get a specific item
	 * var item1 = data.get(1);
	 * console.log('item1', item1);
	 *
	 * // retrieve a filtered subset of the data
	 * var items = data.get({
	 *   filter: function (item) {
	 *     return item.group == 1;
	 *   }
	 * });
	 * console.log('filtered items', items);
	 * ```
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 */ var DataSet1 = /*#__PURE__*/ function(_DataSetPart) {
        inherits(DataSet2, _DataSetPart);
        var _super = _createSuper(DataSet2);
        /**
	   * Construct a new DataSet.
	   *
	   * @param data - Initial data or options.
	   * @param options - Options (type error if data is also options).
	   */ function DataSet2(data1, options) {
            var _this;
            classCallCheck(this, DataSet2);
            _this = _super.call(this);
            _this._queue = null; // correctly read optional arguments
            if (data1 && !isArray$5(data1)) {
                options = data1;
                data1 = [];
            }
            _this._options = options || {
            };
            _this._data = new map$5(); // map with data indexed by id
            _this.length = 0; // number of items in the DataSet
            _this._idProp = _this._options.fieldId || "id"; // name of the field containing id
            // add initial data when provided
            if (data1 && data1.length) _this.add(data1);
            _this.setOptions(options);
            return _this;
        }
        /** @inheritDoc */ createClass(DataSet2, [
            {
                key: "setOptions",
                /**
	     * Set new options.
	     *
	     * @param options - The new options.
	     */ value: function setOptions(options) {
                    if (options && options.queue !== undefined) {
                        if (options.queue === false) // delete queue if loaded
                        {
                            if (this._queue) {
                                this._queue.destroy();
                                this._queue = null;
                            }
                        } else {
                            // create queue and update its options
                            if (!this._queue) this._queue = Queue.extend(this, {
                                replace: [
                                    "add",
                                    "update",
                                    "remove"
                                ]
                            });
                            if (options.queue && _typeof_1(options.queue) === "object") this._queue.setOptions(options.queue);
                        }
                    }
                }
            },
            {
                key: "add",
                value: function add(data1, senderId) {
                    var _this2 = this;
                    var addedIds = [];
                    var id7;
                    if (isArray$5(data1)) {
                        // Array
                        var idsToAdd = map$2(data1).call(data1, function(d) {
                            return d[_this2._idProp];
                        });
                        if (some$2(idsToAdd).call(idsToAdd, function(id8) {
                            return _this2._data.has(id8);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var i5 = 0, len = data1.length; i5 < len; i5++){
                            id7 = this._addItem(data1[i5]);
                            addedIds.push(id7);
                        }
                    } else if (data1 && _typeof_1(data1) === "object") {
                        // Single item
                        id7 = this._addItem(data1);
                        addedIds.push(id7);
                    } else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    return addedIds;
                }
            },
            {
                key: "update",
                value: function update(data1, senderId) {
                    var _this3 = this;
                    var addedIds = [];
                    var updatedIds = [];
                    var oldData = [];
                    var updatedData = [];
                    var idProp = this._idProp;
                    var addOrUpdate = function addOrUpdate1(item) {
                        var origId = item[idProp];
                        if (origId != null && _this3._data.has(origId)) {
                            var fullItem = item; // it has an id, therefore it is a fullitem
                            var oldItem = assign$2({
                            }, _this3._data.get(origId)); // update item
                            var id7 = _this3._updateItem(fullItem);
                            updatedIds.push(id7);
                            updatedData.push(fullItem);
                            oldData.push(oldItem);
                        } else {
                            // add new item
                            var _id = _this3._addItem(item);
                            addedIds.push(_id);
                        }
                    };
                    if (isArray$5(data1)) {
                        // Array
                        for(var i6 = 0, len = data1.length; i6 < len; i6++)if (data1[i6] && _typeof_1(data1[i6]) === "object") addOrUpdate(data1[i6]);
                        else console.warn("Ignoring input item, which is not an object at index " + i6);
                    } else if (data1 && _typeof_1(data1) === "object") // Single item
                    addOrUpdate(data1);
                    else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) {
                        var props = {
                            items: updatedIds,
                            oldData: oldData,
                            data: updatedData
                        }; // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                    }
                    return concat$2(addedIds).call(addedIds, updatedIds);
                }
            },
            {
                key: "updateOnly",
                value: function updateOnly(data1, senderId) {
                    var _context, _this4 = this;
                    if (!isArray$5(data1)) data1 = [
                        data1
                    ];
                    var updateEventData = map$2(_context = map$2(data1).call(data1, function(update) {
                        var oldData = _this4._data.get(update[_this4._idProp]);
                        if (oldData == null) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData: oldData,
                            update: update
                        };
                    })).call(_context, function(_ref) {
                        var oldData = _ref.oldData, update = _ref.update;
                        var id8 = oldData[_this4._idProp];
                        var updatedData = pureDeepObjectAssign(oldData, update);
                        _this4._data.set(id8, updatedData);
                        return {
                            id: id8,
                            oldData: oldData,
                            updatedData: updatedData
                        };
                    });
                    if (updateEventData.length) {
                        var props = {
                            items: map$2(updateEventData).call(updateEventData, function(value) {
                                return value.id;
                            }),
                            oldData: map$2(updateEventData).call(updateEventData, function(value) {
                                return value.oldData;
                            }),
                            data: map$2(updateEventData).call(updateEventData, function(value) {
                                return value.updatedData;
                            })
                        }; // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                        return props.items;
                    } else return [];
                }
            },
            {
                key: "get",
                value: function get1(first, second) {
                    // @TODO: Woudn't it be better to split this into multiple methods?
                    // parse the arguments
                    var id8 = undefined;
                    var ids = undefined;
                    var options = undefined;
                    if (isId(first)) {
                        // get(id [, options])
                        id8 = first;
                        options = second;
                    } else if (isArray$5(first)) {
                        // get(ids [, options])
                        ids = first;
                        options = second;
                    } else // get([, options])
                    options = first;
                     // determine the return type
                    var returnType = options && options.returnType === "Object" ? "Object" : "Array"; // @TODO: WTF is this? Or am I missing something?
                    // var returnType
                    // if (options && options.returnType) {
                    //   var allowedValues = ['Array', 'Object']
                    //   returnType =
                    //     allowedValues.indexOf(options.returnType) == -1
                    //       ? 'Array'
                    //       : options.returnType
                    // } else {
                    //   returnType = 'Array'
                    // }
                    // build options
                    var filter1 = options && filter$2(options);
                    var items = [];
                    var item = undefined;
                    var itemIds = undefined;
                    var itemId = undefined; // convert items
                    if (id8 != null) {
                        // return a single item
                        item = this._data.get(id8);
                        if (item && filter1 && !filter1(item)) item = undefined;
                    } else if (ids != null) // return a subset of items
                    for(var i7 = 0, len = ids.length; i7 < len; i7++){
                        item = this._data.get(ids[i7]);
                        if (item != null && (!filter1 || filter1(item))) items.push(item);
                    }
                    else {
                        var _context2;
                        // return all items
                        itemIds = toConsumableArray(keys$6(_context2 = this._data).call(_context2));
                        for(var _i = 0, _len = itemIds.length; _i < _len; _i++){
                            itemId = itemIds[_i];
                            item = this._data.get(itemId);
                            if (item != null && (!filter1 || filter1(item))) items.push(item);
                        }
                    } // order the results
                    if (options && options.order && id8 == undefined) this._sort(items, options.order);
                     // filter fields of the items
                    if (options && options.fields) {
                        var fields = options.fields;
                        if (id8 != undefined && item != null) item = this._filterFields(item, fields);
                        else for(var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++)items[_i2] = this._filterFields(items[_i2], fields);
                    } // return the results
                    if (returnType == "Object") {
                        var result = {
                        };
                        for(var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++){
                            var resultant = items[_i3]; // @TODO: Shoudn't this be this._fieldId?
                            // result[resultant.id] = resultant
                            var _id2 = resultant[this._idProp];
                            result[_id2] = resultant;
                        }
                        return result;
                    } else {
                        if (id8 != null) {
                            var _item;
                            // a single item
                            return (_item = item) !== null && _item !== void 0 ? _item : null;
                        } else // just return our array
                        return items;
                    }
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    var data1 = this._data;
                    var filter1 = options && filter$2(options);
                    var order = options && options.order;
                    var itemIds = toConsumableArray(keys$6(data1).call(data1));
                    var ids = [];
                    if (filter1) {
                        // get filtered items
                        if (order) {
                            // create ordered list
                            var items = [];
                            for(var i7 = 0, len = itemIds.length; i7 < len; i7++){
                                var id8 = itemIds[i7];
                                var item = this._data.get(id8);
                                if (item != null && filter1(item)) items.push(item);
                            }
                            this._sort(items, order);
                            for(var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++)ids.push(items[_i4][this._idProp]);
                        } else // create unordered list
                        for(var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++){
                            var _id3 = itemIds[_i5];
                            var _item2 = this._data.get(_id3);
                            if (_item2 != null && filter1(_item2)) ids.push(_item2[this._idProp]);
                        }
                    } else {
                        // get all items
                        if (order) {
                            // create an ordered list
                            var _items = [];
                            for(var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++){
                                var _id4 = itemIds[_i6];
                                _items.push(data1.get(_id4));
                            }
                            this._sort(_items, order);
                            for(var _i7 = 0, _len7 = _items.length; _i7 < _len7; _i7++)ids.push(_items[_i7][this._idProp]);
                        } else // create unordered list
                        for(var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++){
                            var _id5 = itemIds[_i8];
                            var _item3 = data1.get(_id5);
                            if (_item3 != null) ids.push(_item3[this._idProp]);
                        }
                    }
                    return ids;
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function forEach2(callback, options) {
                    var filter1 = options && filter$2(options);
                    var data1 = this._data;
                    var itemIds = toConsumableArray(keys$6(data1).call(data1));
                    if (options && options.order) {
                        // execute forEach on ordered list
                        var items = this.get(options);
                        for(var i8 = 0, len = items.length; i8 < len; i8++){
                            var item = items[i8];
                            var id9 = item[this._idProp];
                            callback(item, id9);
                        }
                    } else // unordered
                    for(var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++){
                        var _id6 = itemIds[_i9];
                        var _item4 = this._data.get(_id6);
                        if (_item4 != null && (!filter1 || filter1(_item4))) callback(_item4, _id6);
                    }
                }
            },
            {
                key: "map",
                value: function map1(callback, options) {
                    var filter1 = options && filter$2(options);
                    var mappedItems = [];
                    var data1 = this._data;
                    var itemIds = toConsumableArray(keys$6(data1).call(data1)); // convert and filter items
                    for(var i9 = 0, len = itemIds.length; i9 < len; i9++){
                        var id10 = itemIds[i9];
                        var item = this._data.get(id10);
                        if (item != null && (!filter1 || filter1(item))) mappedItems.push(callback(item, id10));
                    } // order items
                    if (options && options.order) this._sort(mappedItems, options.order);
                    return mappedItems;
                }
            },
            {
                key: "_filterFields",
                value: function _filterFields(item, fields) {
                    var _context3;
                    if (!item) // item is null
                    return item;
                    return reduce$2(_context3 = isArray$5(fields) ? fields : keys$3(fields)).call(_context3, function(filteredItem, field) {
                        filteredItem[field] = item[field];
                        return filteredItem;
                    }, {
                    });
                }
            },
            {
                key: "_sort",
                value: function _sort(items, order) {
                    if (typeof order === "string") {
                        // order by provided field name
                        var name = order; // field name
                        sort$2(items).call(items, function(a, b) {
                            // @TODO: How to treat missing properties?
                            var av = a[name];
                            var bv = b[name];
                            return av > bv ? 1 : av < bv ? -1 : 0;
                        });
                    } else if (typeof order === "function") // order by sort function
                    sort$2(items).call(items, order);
                    else // TODO: extend order by an Object {field:string, direction:string}
                    //       where direction can be 'asc' or 'desc'
                    throw new TypeError("Order must be a function or a string");
                }
            },
            {
                key: "remove",
                value: function remove(id11, senderId) {
                    var removedIds = [];
                    var removedItems = []; // force everything to be an array for simplicity
                    var ids = isArray$5(id11) ? id11 : [
                        id11
                    ];
                    for(var i9 = 0, len = ids.length; i9 < len; i9++){
                        var item = this._remove(ids[i9]);
                        if (item) {
                            var itemId = item[this._idProp];
                            if (itemId != null) {
                                removedIds.push(itemId);
                                removedItems.push(item);
                            }
                        }
                    }
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                    return removedIds;
                }
            },
            {
                key: "_remove",
                value: function _remove(id11) {
                    // @TODO: It origianlly returned the item although the docs say id.
                    // The code expects the item, so probably an error in the docs.
                    var ident; // confirm the id to use based on the args type
                    if (isId(id11)) ident = id11;
                    else if (id11 && _typeof_1(id11) === "object") ident = id11[this._idProp]; // look for the identifier field using ._idProp
                     // do the removing if the item is found
                    if (ident != null && this._data.has(ident)) {
                        var item = this._data.get(ident) || null;
                        this._data.delete(ident);
                        --this.length;
                        return item;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function clear(senderId) {
                    var _context4;
                    var ids = toConsumableArray(keys$6(_context4 = this._data).call(_context4));
                    var items = [];
                    for(var i9 = 0, len = ids.length; i9 < len; i9++)items.push(this._data.get(ids[i9]));
                    this._data.clear();
                    this.length = 0;
                    this._trigger("remove", {
                        items: ids,
                        oldData: items
                    }, senderId);
                    return ids;
                }
            },
            {
                key: "max",
                value: function max1(field) {
                    var _context5;
                    var max1 = null;
                    var maxField = null;
                    var _iterator = _createForOfIteratorHelper$2(values$3(_context5 = this._data).call(_context5)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var item = _step.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
                                max1 = item;
                                maxField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                    return max1 || null;
                }
            },
            {
                key: "min",
                value: function min1(field) {
                    var _context6;
                    var min1 = null;
                    var minField = null;
                    var _iterator2 = _createForOfIteratorHelper$2(values$3(_context6 = this._data).call(_context6)), _step2;
                    try {
                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                            var item = _step2.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (minField == null || itemField < minField)) {
                                min1 = item;
                                minField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator2.e(err);
                    } finally{
                        _iterator2.f();
                    }
                    return min1 || null;
                }
            },
            {
                key: "distinct",
                value: function distinct(prop) {
                    var data1 = this._data;
                    var itemIds = toConsumableArray(keys$6(data1).call(data1));
                    var values2 = [];
                    var count = 0;
                    for(var i9 = 0, len = itemIds.length; i9 < len; i9++){
                        var id11 = itemIds[i9];
                        var item = data1.get(id11);
                        var value = item[prop];
                        var exists = false;
                        for(var j = 0; j < count; j++)if (values2[j] == value) {
                            exists = true;
                            break;
                        }
                        if (!exists && value !== undefined) {
                            values2[count] = value;
                            count++;
                        }
                    }
                    return values2;
                }
            },
            {
                key: "_addItem",
                value: function _addItem(item) {
                    var fullItem = ensureFullItem(item, this._idProp);
                    var id12 = fullItem[this._idProp]; // check whether this id is already taken
                    if (this._data.has(id12)) // item already exists
                    throw new Error("Cannot add item: item with id " + id12 + " already exists");
                    this._data.set(id12, fullItem);
                    ++this.length;
                    return id12;
                }
            },
            {
                key: "_updateItem",
                value: function _updateItem(update) {
                    var id12 = update[this._idProp];
                    if (id12 == null) throw new Error("Cannot update item: item has no id (item: " + stringify$2(update) + ")");
                    var item = this._data.get(id12);
                    if (!item) // item doesn't exist
                    throw new Error("Cannot update item: no item with id " + id12 + " found");
                    this._data.set(id12, _objectSpread(_objectSpread({
                    }, item), update));
                    return id12;
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    if (ids) {
                        var data1 = this._data;
                        return new DataStream(defineProperty$7({
                        }, iterator$4, /*#__PURE__*/ regenerator.mark(function _callee() {
                            var _iterator3, _step3, id12, item;
                            return regenerator.wrap(function _callee$(_context7) {
                                while(true)switch(_context7.prev = _context7.next){
                                    case 0:
                                        _iterator3 = _createForOfIteratorHelper$2(ids);
                                        _context7.prev = 1;
                                        _iterator3.s();
                                    case 3:
                                        if ((_step3 = _iterator3.n()).done) {
                                            _context7.next = 11;
                                            break;
                                        }
                                        id12 = _step3.value;
                                        item = data1.get(id12);
                                        if (!(item != null)) {
                                            _context7.next = 9;
                                            break;
                                        }
                                        _context7.next = 9;
                                        return [
                                            id12,
                                            item
                                        ];
                                    case 9:
                                        _context7.next = 3;
                                        break;
                                    case 11:
                                        _context7.next = 16;
                                        break;
                                    case 13:
                                        _context7.prev = 13;
                                        _context7.t0 = _context7["catch"](1);
                                        _iterator3.e(_context7.t0);
                                    case 16:
                                        _context7.prev = 16;
                                        _iterator3.f();
                                        return _context7.finish(16);
                                    case 19:
                                    case "end":
                                        return _context7.stop();
                                }
                            }, _callee, null, [
                                [
                                    1,
                                    13,
                                    16,
                                    19
                                ]
                            ]);
                        })));
                    } else {
                        var _context8;
                        return new DataStream(defineProperty$7({
                        }, iterator$4, bind$2(_context8 = entries$2(this._data)).call(_context8, this._data)));
                    }
                }
            },
            {
                key: "idProp",
                get: function get1() {
                    return this._idProp;
                }
            }
        ]);
        return DataSet2;
    }(DataSetPart);
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i9 = 0;
                var F = function F1() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i9 >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i9++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f1() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$4(o, minLen) {
        var _context5;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
        var n = slice$6(_context5 = Object.prototype.toString.call(o)).call(_context5, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i10 = 0, arr2 = new Array(len); i10 < len; i10++)arr2[i10] = arr[i10];
        return arr2;
    }
    function _createSuper$1(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
        return function _createSuperInternal() {
            var Super = getPrototypeOf$3(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = getPrototypeOf$3(this).constructor;
                result = construct$3(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct$1() {
        if (typeof Reflect === "undefined" || !construct$3) return false;
        if (construct$3.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(construct$3(Date, [], function() {
            }));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
	 * DataView
	 *
	 * A DataView offers a filtered and/or formatted view on a DataSet. One can subscribe to changes in a DataView, and easily get filtered or formatted data without having to specify filters and field types all the time.
	 *
	 * ## Example
	 * ```javascript
	 * // create a DataSet
	 * var data = new vis.DataSet();
	 * data.add([
	 *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
	 *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
	 *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
	 *   {id: 4, text: 'item 4'}
	 * ]);
	 *
	 * // create a DataView
	 * // the view will only contain items having a property group with value 1,
	 * // and will only output fields id, text, and date.
	 * var view = new vis.DataView(data, {
	 *   filter: function (item) {
	 *     return (item.group == 1);
	 *   },
	 *   fields: ['id', 'text', 'date']
	 * });
	 *
	 * // subscribe to any change in the DataView
	 * view.on('*', function (event, properties, senderId) {
	 *   console.log('event', event, properties);
	 * });
	 *
	 * // update an item in the data set
	 * data.update({id: 2, group: 1});
	 *
	 * // get all ids in the view
	 * var ids = view.getIds();
	 * console.log('ids', ids); // will output [1, 2]
	 *
	 * // get all items in the view
	 * var items = view.get();
	 * ```
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 */ var DataView1 = /*#__PURE__*/ function(_DataSetPart) {
        inherits(DataView2, _DataSetPart);
        var _super = _createSuper$1(DataView2);
        /**
	   * Create a DataView.
	   *
	   * @param data - The instance containing data (directly or indirectly).
	   * @param options - Options to configure this data view.
	   */ function DataView2(data2, options) {
            var _context;
            var _this;
            classCallCheck(this, DataView2);
            _this = _super.call(this);
            /** @inheritDoc */ _this.length = 0;
            _this._ids = new set$3(); // ids of the items currently in memory (just contains a boolean true)
            _this._options = options || {
            };
            _this._listener = bind$2(_context = _this._onEvent).call(_context, assertThisInitialized(_this));
            _this.setData(data2);
            return _this;
        }
        /** @inheritDoc */ createClass(DataView2, [
            {
                key: "setData",
                // TODO: implement a function .config() to dynamically update things like configured filter
                // and trigger changes accordingly
                /**
	     * Set a data source for the view.
	     *
	     * @param data - The instance containing data (directly or indirectly).
	     *
	     * @remarks
	     * Note that when the data view is bound to a data set it won't be garbage
	     * collected unless the data set is too. Use `dataView.setData(null)` or
	     * `dataView.dispose()` to enable garbage collection before you lose the last
	     * reference.
	     */ value: function setData(data2) {
                    if (this._data) {
                        // unsubscribe from current dataset
                        if (this._data.off) this._data.off("*", this._listener);
                         // trigger a remove of all items in memory
                        var ids = this._data.getIds({
                            filter: filter$2(this._options)
                        });
                        var items = this._data.get(ids);
                        this._ids.clear();
                        this.length = 0;
                        this._trigger("remove", {
                            items: ids,
                            oldData: items
                        });
                    }
                    if (data2 != null) {
                        this._data = data2; // trigger an add of all added items
                        var _ids = this._data.getIds({
                            filter: filter$2(this._options)
                        });
                        for(var i10 = 0, len = _ids.length; i10 < len; i10++){
                            var id12 = _ids[i10];
                            this._ids.add(id12);
                        }
                        this.length = _ids.length;
                        this._trigger("add", {
                            items: _ids
                        });
                    } else this._data = new DataSet1();
                     // subscribe to new dataset
                    if (this._data.on) this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function refresh() {
                    var ids = this._data.getIds({
                        filter: filter$2(this._options)
                    });
                    var oldIds = toConsumableArray(this._ids);
                    var newIds = {
                    };
                    var addedIds = [];
                    var removedIds = [];
                    var removedItems = []; // check for additions
                    for(var i11 = 0, len = ids.length; i11 < len; i11++){
                        var id13 = ids[i11];
                        newIds[id13] = true;
                        if (!this._ids.has(id13)) {
                            addedIds.push(id13);
                            this._ids.add(id13);
                        }
                    } // check for removals
                    for(var _i = 0, _len = oldIds.length; _i < _len; _i++){
                        var _id = oldIds[_i];
                        var item = this._data.get(_id);
                        if (item == null) // @TODO: Investigate.
                        // Doesn't happen during tests or examples.
                        // Is it really impossible or could it eventually happen?
                        // How to handle it if it does? The types guarantee non-nullable items.
                        console.error("If you see this, report it please.");
                        else if (!newIds[_id]) {
                            removedIds.push(_id);
                            removedItems.push(item);
                            this._ids.delete(_id);
                        }
                    }
                    this.length += addedIds.length - removedIds.length; // trigger events
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    });
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    });
                }
            },
            {
                key: "get",
                value: function get1(first, second) {
                    if (this._data == null) return null;
                     // parse the arguments
                    var ids = null;
                    var options;
                    if (isId(first) || isArray$5(first)) {
                        ids = first;
                        options = second;
                    } else options = first;
                     // extend the options with the default options and provided options
                    var viewOptions = assign$2({
                    }, this._options, options); // create a combined filter method when needed
                    var thisFilter = filter$2(this._options);
                    var optionsFilter = options && filter$2(options);
                    if (thisFilter && optionsFilter) viewOptions.filter = function(item) {
                        return thisFilter(item) && optionsFilter(item);
                    };
                    if (ids == null) return this._data.get(viewOptions);
                    else return this._data.get(ids, viewOptions);
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    if (this._data.length) {
                        var defaultFilter = filter$2(this._options);
                        var optionsFilter = options != null ? filter$2(options) : null;
                        var filter1;
                        if (optionsFilter) {
                            if (defaultFilter) filter1 = function filter2(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter1 = optionsFilter;
                        } else filter1 = defaultFilter;
                        return this._data.getIds({
                            filter: filter1,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "forEach",
                value: function forEach2(callback, options) {
                    if (this._data) {
                        var _context2;
                        var defaultFilter = filter$2(this._options);
                        var optionsFilter = options && filter$2(options);
                        var filter2;
                        if (optionsFilter) {
                            if (defaultFilter) filter2 = function filter3(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter2 = optionsFilter;
                        } else filter2 = defaultFilter;
                        forEach$2(_context2 = this._data).call(_context2, callback, {
                            filter: filter2,
                            order: options && options.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function map1(callback, options) {
                    if (this._data) {
                        var _context3;
                        var defaultFilter = filter$2(this._options);
                        var optionsFilter = options && filter$2(options);
                        var filter3;
                        if (optionsFilter) {
                            if (defaultFilter) filter3 = function filter4(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter3 = optionsFilter;
                        } else filter3 = defaultFilter;
                        return map$2(_context3 = this._data).call(_context3, callback, {
                            filter: filter3,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    var _context4;
                    return this._data.stream(ids || defineProperty$7({
                    }, iterator$4, bind$2(_context4 = keys$6(this._ids)).call(_context4, this._ids)));
                }
            },
            {
                key: "dispose",
                value: function dispose() {
                    var _this$_data;
                    if ((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.off) this._data.off("*", this._listener);
                    var message = "This data view has already been disposed of.";
                    var replacement1 = {
                        get: function get1() {
                            throw new Error(message);
                        },
                        set: function set1() {
                            throw new Error(message);
                        },
                        configurable: false
                    };
                    var _iterator = _createForOfIteratorHelper$3(ownKeys$3(DataView2.prototype)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var key2 = _step.value;
                            defineProperty$4(this, key2, replacement1);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function _onEvent(event, params, senderId) {
                    if (!params || !params.items || !this._data) return;
                    var ids = params.items;
                    var addedIds = [];
                    var updatedIds = [];
                    var removedIds = [];
                    var oldItems = [];
                    var updatedItems = [];
                    var removedItems = [];
                    switch(event){
                        case "add":
                            // filter the ids of the added items
                            for(var i11 = 0, len = ids.length; i11 < len; i11++){
                                var id14 = ids[i11];
                                var item = this.get(id14);
                                if (item) {
                                    this._ids.add(id14);
                                    addedIds.push(id14);
                                }
                            }
                            break;
                        case "update":
                            // determine the event from the views viewpoint: an updated
                            // item can be added, updated, or removed from this view.
                            for(var _i2 = 0, _len2 = ids.length; _i2 < _len2; _i2++){
                                var _id2 = ids[_i2];
                                var _item = this.get(_id2);
                                if (_item) {
                                    if (this._ids.has(_id2)) {
                                        updatedIds.push(_id2);
                                        updatedItems.push(params.data[_i2]);
                                        oldItems.push(params.oldData[_i2]);
                                    } else {
                                        this._ids.add(_id2);
                                        addedIds.push(_id2);
                                    }
                                } else if (this._ids.has(_id2)) {
                                    this._ids.delete(_id2);
                                    removedIds.push(_id2);
                                    removedItems.push(params.oldData[_i2]);
                                }
                            }
                            break;
                        case "remove":
                            // filter the ids of the removed items
                            for(var _i3 = 0, _len3 = ids.length; _i3 < _len3; _i3++){
                                var _id3 = ids[_i3];
                                if (this._ids.has(_id3)) {
                                    this._ids.delete(_id3);
                                    removedIds.push(_id3);
                                    removedItems.push(params.oldData[_i3]);
                                }
                            }
                            break;
                    }
                    this.length += addedIds.length - removedIds.length;
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) this._trigger("update", {
                        items: updatedIds,
                        oldData: oldItems,
                        data: updatedItems
                    }, senderId);
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                }
            },
            {
                key: "idProp",
                get: function get1() {
                    return this.getDataSet().idProp;
                }
            }
        ]);
        return DataView2;
    }(DataSetPart);
    /**
	 * Check that given value is compatible with Vis Data Set interface.
	 *
	 * @param idProp - The expected property to contain item id.
	 * @param v - The value to be tested.
	 *
	 * @returns True if all expected values and methods match, false otherwise.
	 */ function isDataSetLike(idProp, v) {
        return _typeof_1(v) === "object" && v !== null && idProp === v.idProp && typeof v.add === "function" && typeof v.clear === "function" && typeof v.distinct === "function" && typeof forEach$2(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$2(v) === "function" && typeof v.max === "function" && typeof v.min === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.remove === "function" && typeof v.setOptions === "function" && typeof v.stream === "function" && typeof v.update === "function" && typeof v.updateOnly === "function";
    }
    /**
	 * Check that given value is compatible with Vis Data View interface.
	 *
	 * @param idProp - The expected property to contain item id.
	 * @param v - The value to be tested.
	 *
	 * @returns True if all expected values and methods match, false otherwise.
	 */ function isDataViewLike(idProp, v) {
        return _typeof_1(v) === "object" && v !== null && idProp === v.idProp && typeof forEach$2(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$2(v) === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.stream === "function" && isDataSetLike(idProp, v.getDataSet());
    }
    exports.DELETE = DELETE;
    exports.DataSet = DataSet1;
    exports.DataStream = DataStream;
    exports.DataView = DataView1;
    exports.Queue = Queue;
    exports.createNewDataPipeFrom = createNewDataPipeFrom;
    exports.isDataSetLike = isDataSetLike;
    exports.isDataViewLike = isDataViewLike;
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
});

},{}],"gRGYu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ parcelHelpers.export(exports, "add", ()=>_addJsDefault.default
);
parcelHelpers.export(exports, "after", ()=>_afterJsDefault.default
);
parcelHelpers.export(exports, "ary", ()=>_aryJsDefault.default
);
parcelHelpers.export(exports, "assign", ()=>_assignJsDefault.default
);
parcelHelpers.export(exports, "assignIn", ()=>_assignInJsDefault.default
);
parcelHelpers.export(exports, "assignInWith", ()=>_assignInWithJsDefault.default
);
parcelHelpers.export(exports, "assignWith", ()=>_assignWithJsDefault.default
);
parcelHelpers.export(exports, "at", ()=>_atJsDefault.default
);
parcelHelpers.export(exports, "attempt", ()=>_attemptJsDefault.default
);
parcelHelpers.export(exports, "before", ()=>_beforeJsDefault.default
);
parcelHelpers.export(exports, "bind", ()=>_bindJsDefault.default
);
parcelHelpers.export(exports, "bindAll", ()=>_bindAllJsDefault.default
);
parcelHelpers.export(exports, "bindKey", ()=>_bindKeyJsDefault.default
);
parcelHelpers.export(exports, "camelCase", ()=>_camelCaseJsDefault.default
);
parcelHelpers.export(exports, "capitalize", ()=>_capitalizeJsDefault.default
);
parcelHelpers.export(exports, "castArray", ()=>_castArrayJsDefault.default
);
parcelHelpers.export(exports, "ceil", ()=>_ceilJsDefault.default
);
parcelHelpers.export(exports, "chain", ()=>_chainJsDefault.default
);
parcelHelpers.export(exports, "chunk", ()=>_chunkJsDefault.default
);
parcelHelpers.export(exports, "clamp", ()=>_clampJsDefault.default
);
parcelHelpers.export(exports, "clone", ()=>_cloneJsDefault.default
);
parcelHelpers.export(exports, "cloneDeep", ()=>_cloneDeepJsDefault.default
);
parcelHelpers.export(exports, "cloneDeepWith", ()=>_cloneDeepWithJsDefault.default
);
parcelHelpers.export(exports, "cloneWith", ()=>_cloneWithJsDefault.default
);
parcelHelpers.export(exports, "commit", ()=>_commitJsDefault.default
);
parcelHelpers.export(exports, "compact", ()=>_compactJsDefault.default
);
parcelHelpers.export(exports, "concat", ()=>_concatJsDefault.default
);
parcelHelpers.export(exports, "cond", ()=>_condJsDefault.default
);
parcelHelpers.export(exports, "conforms", ()=>_conformsJsDefault.default
);
parcelHelpers.export(exports, "conformsTo", ()=>_conformsToJsDefault.default
);
parcelHelpers.export(exports, "constant", ()=>_constantJsDefault.default
);
parcelHelpers.export(exports, "countBy", ()=>_countByJsDefault.default
);
parcelHelpers.export(exports, "create", ()=>_createJsDefault.default
);
parcelHelpers.export(exports, "curry", ()=>_curryJsDefault.default
);
parcelHelpers.export(exports, "curryRight", ()=>_curryRightJsDefault.default
);
parcelHelpers.export(exports, "debounce", ()=>_debounceJsDefault.default
);
parcelHelpers.export(exports, "deburr", ()=>_deburrJsDefault.default
);
parcelHelpers.export(exports, "defaultTo", ()=>_defaultToJsDefault.default
);
parcelHelpers.export(exports, "defaults", ()=>_defaultsJsDefault.default
);
parcelHelpers.export(exports, "defaultsDeep", ()=>_defaultsDeepJsDefault.default
);
parcelHelpers.export(exports, "defer", ()=>_deferJsDefault.default
);
parcelHelpers.export(exports, "delay", ()=>_delayJsDefault.default
);
parcelHelpers.export(exports, "difference", ()=>_differenceJsDefault.default
);
parcelHelpers.export(exports, "differenceBy", ()=>_differenceByJsDefault.default
);
parcelHelpers.export(exports, "differenceWith", ()=>_differenceWithJsDefault.default
);
parcelHelpers.export(exports, "divide", ()=>_divideJsDefault.default
);
parcelHelpers.export(exports, "drop", ()=>_dropJsDefault.default
);
parcelHelpers.export(exports, "dropRight", ()=>_dropRightJsDefault.default
);
parcelHelpers.export(exports, "dropRightWhile", ()=>_dropRightWhileJsDefault.default
);
parcelHelpers.export(exports, "dropWhile", ()=>_dropWhileJsDefault.default
);
parcelHelpers.export(exports, "each", ()=>_eachJsDefault.default
);
parcelHelpers.export(exports, "eachRight", ()=>_eachRightJsDefault.default
);
parcelHelpers.export(exports, "endsWith", ()=>_endsWithJsDefault.default
);
parcelHelpers.export(exports, "entries", ()=>_entriesJsDefault.default
);
parcelHelpers.export(exports, "entriesIn", ()=>_entriesInJsDefault.default
);
parcelHelpers.export(exports, "eq", ()=>_eqJsDefault.default
);
parcelHelpers.export(exports, "escape", ()=>_escapeJsDefault.default
);
parcelHelpers.export(exports, "escapeRegExp", ()=>_escapeRegExpJsDefault.default
);
parcelHelpers.export(exports, "every", ()=>_everyJsDefault.default
);
parcelHelpers.export(exports, "extend", ()=>_extendJsDefault.default
);
parcelHelpers.export(exports, "extendWith", ()=>_extendWithJsDefault.default
);
parcelHelpers.export(exports, "fill", ()=>_fillJsDefault.default
);
parcelHelpers.export(exports, "filter", ()=>_filterJsDefault.default
);
parcelHelpers.export(exports, "find", ()=>_findJsDefault.default
);
parcelHelpers.export(exports, "findIndex", ()=>_findIndexJsDefault.default
);
parcelHelpers.export(exports, "findKey", ()=>_findKeyJsDefault.default
);
parcelHelpers.export(exports, "findLast", ()=>_findLastJsDefault.default
);
parcelHelpers.export(exports, "findLastIndex", ()=>_findLastIndexJsDefault.default
);
parcelHelpers.export(exports, "findLastKey", ()=>_findLastKeyJsDefault.default
);
parcelHelpers.export(exports, "first", ()=>_firstJsDefault.default
);
parcelHelpers.export(exports, "flatMap", ()=>_flatMapJsDefault.default
);
parcelHelpers.export(exports, "flatMapDeep", ()=>_flatMapDeepJsDefault.default
);
parcelHelpers.export(exports, "flatMapDepth", ()=>_flatMapDepthJsDefault.default
);
parcelHelpers.export(exports, "flatten", ()=>_flattenJsDefault.default
);
parcelHelpers.export(exports, "flattenDeep", ()=>_flattenDeepJsDefault.default
);
parcelHelpers.export(exports, "flattenDepth", ()=>_flattenDepthJsDefault.default
);
parcelHelpers.export(exports, "flip", ()=>_flipJsDefault.default
);
parcelHelpers.export(exports, "floor", ()=>_floorJsDefault.default
);
parcelHelpers.export(exports, "flow", ()=>_flowJsDefault.default
);
parcelHelpers.export(exports, "flowRight", ()=>_flowRightJsDefault.default
);
parcelHelpers.export(exports, "forEach", ()=>_forEachJsDefault.default
);
parcelHelpers.export(exports, "forEachRight", ()=>_forEachRightJsDefault.default
);
parcelHelpers.export(exports, "forIn", ()=>_forInJsDefault.default
);
parcelHelpers.export(exports, "forInRight", ()=>_forInRightJsDefault.default
);
parcelHelpers.export(exports, "forOwn", ()=>_forOwnJsDefault.default
);
parcelHelpers.export(exports, "forOwnRight", ()=>_forOwnRightJsDefault.default
);
parcelHelpers.export(exports, "fromPairs", ()=>_fromPairsJsDefault.default
);
parcelHelpers.export(exports, "functions", ()=>_functionsJsDefault.default
);
parcelHelpers.export(exports, "functionsIn", ()=>_functionsInJsDefault.default
);
parcelHelpers.export(exports, "get", ()=>_getJsDefault.default
);
parcelHelpers.export(exports, "groupBy", ()=>_groupByJsDefault.default
);
parcelHelpers.export(exports, "gt", ()=>_gtJsDefault.default
);
parcelHelpers.export(exports, "gte", ()=>_gteJsDefault.default
);
parcelHelpers.export(exports, "has", ()=>_hasJsDefault.default
);
parcelHelpers.export(exports, "hasIn", ()=>_hasInJsDefault.default
);
parcelHelpers.export(exports, "head", ()=>_headJsDefault.default
);
parcelHelpers.export(exports, "identity", ()=>_identityJsDefault.default
);
parcelHelpers.export(exports, "inRange", ()=>_inRangeJsDefault.default
);
parcelHelpers.export(exports, "includes", ()=>_includesJsDefault.default
);
parcelHelpers.export(exports, "indexOf", ()=>_indexOfJsDefault.default
);
parcelHelpers.export(exports, "initial", ()=>_initialJsDefault.default
);
parcelHelpers.export(exports, "intersection", ()=>_intersectionJsDefault.default
);
parcelHelpers.export(exports, "intersectionBy", ()=>_intersectionByJsDefault.default
);
parcelHelpers.export(exports, "intersectionWith", ()=>_intersectionWithJsDefault.default
);
parcelHelpers.export(exports, "invert", ()=>_invertJsDefault.default
);
parcelHelpers.export(exports, "invertBy", ()=>_invertByJsDefault.default
);
parcelHelpers.export(exports, "invoke", ()=>_invokeJsDefault.default
);
parcelHelpers.export(exports, "invokeMap", ()=>_invokeMapJsDefault.default
);
parcelHelpers.export(exports, "isArguments", ()=>_isArgumentsJsDefault.default
);
parcelHelpers.export(exports, "isArray", ()=>_isArrayJsDefault.default
);
parcelHelpers.export(exports, "isArrayBuffer", ()=>_isArrayBufferJsDefault.default
);
parcelHelpers.export(exports, "isArrayLike", ()=>_isArrayLikeJsDefault.default
);
parcelHelpers.export(exports, "isArrayLikeObject", ()=>_isArrayLikeObjectJsDefault.default
);
parcelHelpers.export(exports, "isBoolean", ()=>_isBooleanJsDefault.default
);
parcelHelpers.export(exports, "isBuffer", ()=>_isBufferJsDefault.default
);
parcelHelpers.export(exports, "isDate", ()=>_isDateJsDefault.default
);
parcelHelpers.export(exports, "isElement", ()=>_isElementJsDefault.default
);
parcelHelpers.export(exports, "isEmpty", ()=>_isEmptyJsDefault.default
);
parcelHelpers.export(exports, "isEqual", ()=>_isEqualJsDefault.default
);
parcelHelpers.export(exports, "isEqualWith", ()=>_isEqualWithJsDefault.default
);
parcelHelpers.export(exports, "isError", ()=>_isErrorJsDefault.default
);
parcelHelpers.export(exports, "isFinite", ()=>_isFiniteJsDefault.default
);
parcelHelpers.export(exports, "isFunction", ()=>_isFunctionJsDefault.default
);
parcelHelpers.export(exports, "isInteger", ()=>_isIntegerJsDefault.default
);
parcelHelpers.export(exports, "isLength", ()=>_isLengthJsDefault.default
);
parcelHelpers.export(exports, "isMap", ()=>_isMapJsDefault.default
);
parcelHelpers.export(exports, "isMatch", ()=>_isMatchJsDefault.default
);
parcelHelpers.export(exports, "isMatchWith", ()=>_isMatchWithJsDefault.default
);
parcelHelpers.export(exports, "isNaN", ()=>_isNaNJsDefault.default
);
parcelHelpers.export(exports, "isNative", ()=>_isNativeJsDefault.default
);
parcelHelpers.export(exports, "isNil", ()=>_isNilJsDefault.default
);
parcelHelpers.export(exports, "isNull", ()=>_isNullJsDefault.default
);
parcelHelpers.export(exports, "isNumber", ()=>_isNumberJsDefault.default
);
parcelHelpers.export(exports, "isObject", ()=>_isObjectJsDefault.default
);
parcelHelpers.export(exports, "isObjectLike", ()=>_isObjectLikeJsDefault.default
);
parcelHelpers.export(exports, "isPlainObject", ()=>_isPlainObjectJsDefault.default
);
parcelHelpers.export(exports, "isRegExp", ()=>_isRegExpJsDefault.default
);
parcelHelpers.export(exports, "isSafeInteger", ()=>_isSafeIntegerJsDefault.default
);
parcelHelpers.export(exports, "isSet", ()=>_isSetJsDefault.default
);
parcelHelpers.export(exports, "isString", ()=>_isStringJsDefault.default
);
parcelHelpers.export(exports, "isSymbol", ()=>_isSymbolJsDefault.default
);
parcelHelpers.export(exports, "isTypedArray", ()=>_isTypedArrayJsDefault.default
);
parcelHelpers.export(exports, "isUndefined", ()=>_isUndefinedJsDefault.default
);
parcelHelpers.export(exports, "isWeakMap", ()=>_isWeakMapJsDefault.default
);
parcelHelpers.export(exports, "isWeakSet", ()=>_isWeakSetJsDefault.default
);
parcelHelpers.export(exports, "iteratee", ()=>_iterateeJsDefault.default
);
parcelHelpers.export(exports, "join", ()=>_joinJsDefault.default
);
parcelHelpers.export(exports, "kebabCase", ()=>_kebabCaseJsDefault.default
);
parcelHelpers.export(exports, "keyBy", ()=>_keyByJsDefault.default
);
parcelHelpers.export(exports, "keys", ()=>_keysJsDefault.default
);
parcelHelpers.export(exports, "keysIn", ()=>_keysInJsDefault.default
);
parcelHelpers.export(exports, "last", ()=>_lastJsDefault.default
);
parcelHelpers.export(exports, "lastIndexOf", ()=>_lastIndexOfJsDefault.default
);
parcelHelpers.export(exports, "lodash", ()=>_wrapperLodashJsDefault.default
);
parcelHelpers.export(exports, "lowerCase", ()=>_lowerCaseJsDefault.default
);
parcelHelpers.export(exports, "lowerFirst", ()=>_lowerFirstJsDefault.default
);
parcelHelpers.export(exports, "lt", ()=>_ltJsDefault.default
);
parcelHelpers.export(exports, "lte", ()=>_lteJsDefault.default
);
parcelHelpers.export(exports, "map", ()=>_mapJsDefault.default
);
parcelHelpers.export(exports, "mapKeys", ()=>_mapKeysJsDefault.default
);
parcelHelpers.export(exports, "mapValues", ()=>_mapValuesJsDefault.default
);
parcelHelpers.export(exports, "matches", ()=>_matchesJsDefault.default
);
parcelHelpers.export(exports, "matchesProperty", ()=>_matchesPropertyJsDefault.default
);
parcelHelpers.export(exports, "max", ()=>_maxJsDefault.default
);
parcelHelpers.export(exports, "maxBy", ()=>_maxByJsDefault.default
);
parcelHelpers.export(exports, "mean", ()=>_meanJsDefault.default
);
parcelHelpers.export(exports, "meanBy", ()=>_meanByJsDefault.default
);
parcelHelpers.export(exports, "memoize", ()=>_memoizeJsDefault.default
);
parcelHelpers.export(exports, "merge", ()=>_mergeJsDefault.default
);
parcelHelpers.export(exports, "mergeWith", ()=>_mergeWithJsDefault.default
);
parcelHelpers.export(exports, "method", ()=>_methodJsDefault.default
);
parcelHelpers.export(exports, "methodOf", ()=>_methodOfJsDefault.default
);
parcelHelpers.export(exports, "min", ()=>_minJsDefault.default
);
parcelHelpers.export(exports, "minBy", ()=>_minByJsDefault.default
);
parcelHelpers.export(exports, "mixin", ()=>_mixinJsDefault.default
);
parcelHelpers.export(exports, "multiply", ()=>_multiplyJsDefault.default
);
parcelHelpers.export(exports, "negate", ()=>_negateJsDefault.default
);
parcelHelpers.export(exports, "next", ()=>_nextJsDefault.default
);
parcelHelpers.export(exports, "noop", ()=>_noopJsDefault.default
);
parcelHelpers.export(exports, "now", ()=>_nowJsDefault.default
);
parcelHelpers.export(exports, "nth", ()=>_nthJsDefault.default
);
parcelHelpers.export(exports, "nthArg", ()=>_nthArgJsDefault.default
);
parcelHelpers.export(exports, "omit", ()=>_omitJsDefault.default
);
parcelHelpers.export(exports, "omitBy", ()=>_omitByJsDefault.default
);
parcelHelpers.export(exports, "once", ()=>_onceJsDefault.default
);
parcelHelpers.export(exports, "orderBy", ()=>_orderByJsDefault.default
);
parcelHelpers.export(exports, "over", ()=>_overJsDefault.default
);
parcelHelpers.export(exports, "overArgs", ()=>_overArgsJsDefault.default
);
parcelHelpers.export(exports, "overEvery", ()=>_overEveryJsDefault.default
);
parcelHelpers.export(exports, "overSome", ()=>_overSomeJsDefault.default
);
parcelHelpers.export(exports, "pad", ()=>_padJsDefault.default
);
parcelHelpers.export(exports, "padEnd", ()=>_padEndJsDefault.default
);
parcelHelpers.export(exports, "padStart", ()=>_padStartJsDefault.default
);
parcelHelpers.export(exports, "parseInt", ()=>_parseIntJsDefault.default
);
parcelHelpers.export(exports, "partial", ()=>_partialJsDefault.default
);
parcelHelpers.export(exports, "partialRight", ()=>_partialRightJsDefault.default
);
parcelHelpers.export(exports, "partition", ()=>_partitionJsDefault.default
);
parcelHelpers.export(exports, "pick", ()=>_pickJsDefault.default
);
parcelHelpers.export(exports, "pickBy", ()=>_pickByJsDefault.default
);
parcelHelpers.export(exports, "plant", ()=>_plantJsDefault.default
);
parcelHelpers.export(exports, "property", ()=>_propertyJsDefault.default
);
parcelHelpers.export(exports, "propertyOf", ()=>_propertyOfJsDefault.default
);
parcelHelpers.export(exports, "pull", ()=>_pullJsDefault.default
);
parcelHelpers.export(exports, "pullAll", ()=>_pullAllJsDefault.default
);
parcelHelpers.export(exports, "pullAllBy", ()=>_pullAllByJsDefault.default
);
parcelHelpers.export(exports, "pullAllWith", ()=>_pullAllWithJsDefault.default
);
parcelHelpers.export(exports, "pullAt", ()=>_pullAtJsDefault.default
);
parcelHelpers.export(exports, "random", ()=>_randomJsDefault.default
);
parcelHelpers.export(exports, "range", ()=>_rangeJsDefault.default
);
parcelHelpers.export(exports, "rangeRight", ()=>_rangeRightJsDefault.default
);
parcelHelpers.export(exports, "rearg", ()=>_reargJsDefault.default
);
parcelHelpers.export(exports, "reduce", ()=>_reduceJsDefault.default
);
parcelHelpers.export(exports, "reduceRight", ()=>_reduceRightJsDefault.default
);
parcelHelpers.export(exports, "reject", ()=>_rejectJsDefault.default
);
parcelHelpers.export(exports, "remove", ()=>_removeJsDefault.default
);
parcelHelpers.export(exports, "repeat", ()=>_repeatJsDefault.default
);
parcelHelpers.export(exports, "replace", ()=>_replaceJsDefault.default
);
parcelHelpers.export(exports, "rest", ()=>_restJsDefault.default
);
parcelHelpers.export(exports, "result", ()=>_resultJsDefault.default
);
parcelHelpers.export(exports, "reverse", ()=>_reverseJsDefault.default
);
parcelHelpers.export(exports, "round", ()=>_roundJsDefault.default
);
parcelHelpers.export(exports, "sample", ()=>_sampleJsDefault.default
);
parcelHelpers.export(exports, "sampleSize", ()=>_sampleSizeJsDefault.default
);
parcelHelpers.export(exports, "set", ()=>_setJsDefault.default
);
parcelHelpers.export(exports, "setWith", ()=>_setWithJsDefault.default
);
parcelHelpers.export(exports, "shuffle", ()=>_shuffleJsDefault.default
);
parcelHelpers.export(exports, "size", ()=>_sizeJsDefault.default
);
parcelHelpers.export(exports, "slice", ()=>_sliceJsDefault.default
);
parcelHelpers.export(exports, "snakeCase", ()=>_snakeCaseJsDefault.default
);
parcelHelpers.export(exports, "some", ()=>_someJsDefault.default
);
parcelHelpers.export(exports, "sortBy", ()=>_sortByJsDefault.default
);
parcelHelpers.export(exports, "sortedIndex", ()=>_sortedIndexJsDefault.default
);
parcelHelpers.export(exports, "sortedIndexBy", ()=>_sortedIndexByJsDefault.default
);
parcelHelpers.export(exports, "sortedIndexOf", ()=>_sortedIndexOfJsDefault.default
);
parcelHelpers.export(exports, "sortedLastIndex", ()=>_sortedLastIndexJsDefault.default
);
parcelHelpers.export(exports, "sortedLastIndexBy", ()=>_sortedLastIndexByJsDefault.default
);
parcelHelpers.export(exports, "sortedLastIndexOf", ()=>_sortedLastIndexOfJsDefault.default
);
parcelHelpers.export(exports, "sortedUniq", ()=>_sortedUniqJsDefault.default
);
parcelHelpers.export(exports, "sortedUniqBy", ()=>_sortedUniqByJsDefault.default
);
parcelHelpers.export(exports, "split", ()=>_splitJsDefault.default
);
parcelHelpers.export(exports, "spread", ()=>_spreadJsDefault.default
);
parcelHelpers.export(exports, "startCase", ()=>_startCaseJsDefault.default
);
parcelHelpers.export(exports, "startsWith", ()=>_startsWithJsDefault.default
);
parcelHelpers.export(exports, "stubArray", ()=>_stubArrayJsDefault.default
);
parcelHelpers.export(exports, "stubFalse", ()=>_stubFalseJsDefault.default
);
parcelHelpers.export(exports, "stubObject", ()=>_stubObjectJsDefault.default
);
parcelHelpers.export(exports, "stubString", ()=>_stubStringJsDefault.default
);
parcelHelpers.export(exports, "stubTrue", ()=>_stubTrueJsDefault.default
);
parcelHelpers.export(exports, "subtract", ()=>_subtractJsDefault.default
);
parcelHelpers.export(exports, "sum", ()=>_sumJsDefault.default
);
parcelHelpers.export(exports, "sumBy", ()=>_sumByJsDefault.default
);
parcelHelpers.export(exports, "tail", ()=>_tailJsDefault.default
);
parcelHelpers.export(exports, "take", ()=>_takeJsDefault.default
);
parcelHelpers.export(exports, "takeRight", ()=>_takeRightJsDefault.default
);
parcelHelpers.export(exports, "takeRightWhile", ()=>_takeRightWhileJsDefault.default
);
parcelHelpers.export(exports, "takeWhile", ()=>_takeWhileJsDefault.default
);
parcelHelpers.export(exports, "tap", ()=>_tapJsDefault.default
);
parcelHelpers.export(exports, "template", ()=>_templateJsDefault.default
);
parcelHelpers.export(exports, "templateSettings", ()=>_templateSettingsJsDefault.default
);
parcelHelpers.export(exports, "throttle", ()=>_throttleJsDefault.default
);
parcelHelpers.export(exports, "thru", ()=>_thruJsDefault.default
);
parcelHelpers.export(exports, "times", ()=>_timesJsDefault.default
);
parcelHelpers.export(exports, "toArray", ()=>_toArrayJsDefault.default
);
parcelHelpers.export(exports, "toFinite", ()=>_toFiniteJsDefault.default
);
parcelHelpers.export(exports, "toInteger", ()=>_toIntegerJsDefault.default
);
parcelHelpers.export(exports, "toIterator", ()=>_toIteratorJsDefault.default
);
parcelHelpers.export(exports, "toJSON", ()=>_toJSONJsDefault.default
);
parcelHelpers.export(exports, "toLength", ()=>_toLengthJsDefault.default
);
parcelHelpers.export(exports, "toLower", ()=>_toLowerJsDefault.default
);
parcelHelpers.export(exports, "toNumber", ()=>_toNumberJsDefault.default
);
parcelHelpers.export(exports, "toPairs", ()=>_toPairsJsDefault.default
);
parcelHelpers.export(exports, "toPairsIn", ()=>_toPairsInJsDefault.default
);
parcelHelpers.export(exports, "toPath", ()=>_toPathJsDefault.default
);
parcelHelpers.export(exports, "toPlainObject", ()=>_toPlainObjectJsDefault.default
);
parcelHelpers.export(exports, "toSafeInteger", ()=>_toSafeIntegerJsDefault.default
);
parcelHelpers.export(exports, "toString", ()=>_toStringJsDefault.default
);
parcelHelpers.export(exports, "toUpper", ()=>_toUpperJsDefault.default
);
parcelHelpers.export(exports, "transform", ()=>_transformJsDefault.default
);
parcelHelpers.export(exports, "trim", ()=>_trimJsDefault.default
);
parcelHelpers.export(exports, "trimEnd", ()=>_trimEndJsDefault.default
);
parcelHelpers.export(exports, "trimStart", ()=>_trimStartJsDefault.default
);
parcelHelpers.export(exports, "truncate", ()=>_truncateJsDefault.default
);
parcelHelpers.export(exports, "unary", ()=>_unaryJsDefault.default
);
parcelHelpers.export(exports, "unescape", ()=>_unescapeJsDefault.default
);
parcelHelpers.export(exports, "union", ()=>_unionJsDefault.default
);
parcelHelpers.export(exports, "unionBy", ()=>_unionByJsDefault.default
);
parcelHelpers.export(exports, "unionWith", ()=>_unionWithJsDefault.default
);
parcelHelpers.export(exports, "uniq", ()=>_uniqJsDefault.default
);
parcelHelpers.export(exports, "uniqBy", ()=>_uniqByJsDefault.default
);
parcelHelpers.export(exports, "uniqWith", ()=>_uniqWithJsDefault.default
);
parcelHelpers.export(exports, "uniqueId", ()=>_uniqueIdJsDefault.default
);
parcelHelpers.export(exports, "unset", ()=>_unsetJsDefault.default
);
parcelHelpers.export(exports, "unzip", ()=>_unzipJsDefault.default
);
parcelHelpers.export(exports, "unzipWith", ()=>_unzipWithJsDefault.default
);
parcelHelpers.export(exports, "update", ()=>_updateJsDefault.default
);
parcelHelpers.export(exports, "updateWith", ()=>_updateWithJsDefault.default
);
parcelHelpers.export(exports, "upperCase", ()=>_upperCaseJsDefault.default
);
parcelHelpers.export(exports, "upperFirst", ()=>_upperFirstJsDefault.default
);
parcelHelpers.export(exports, "value", ()=>_valueJsDefault.default
);
parcelHelpers.export(exports, "valueOf", ()=>_valueOfJsDefault.default
);
parcelHelpers.export(exports, "values", ()=>_valuesJsDefault.default
);
parcelHelpers.export(exports, "valuesIn", ()=>_valuesInJsDefault.default
);
parcelHelpers.export(exports, "without", ()=>_withoutJsDefault.default
);
parcelHelpers.export(exports, "words", ()=>_wordsJsDefault.default
);
parcelHelpers.export(exports, "wrap", ()=>_wrapJsDefault.default
);
parcelHelpers.export(exports, "wrapperAt", ()=>_wrapperAtJsDefault.default
);
parcelHelpers.export(exports, "wrapperChain", ()=>_wrapperChainJsDefault.default
);
parcelHelpers.export(exports, "wrapperCommit", ()=>_commitJsDefault.default
);
parcelHelpers.export(exports, "wrapperLodash", ()=>_wrapperLodashJsDefault.default
);
parcelHelpers.export(exports, "wrapperNext", ()=>_nextJsDefault.default
);
parcelHelpers.export(exports, "wrapperPlant", ()=>_plantJsDefault.default
);
parcelHelpers.export(exports, "wrapperReverse", ()=>_wrapperReverseJsDefault.default
);
parcelHelpers.export(exports, "wrapperToIterator", ()=>_toIteratorJsDefault.default
);
parcelHelpers.export(exports, "wrapperValue", ()=>_wrapperValueJsDefault.default
);
parcelHelpers.export(exports, "xor", ()=>_xorJsDefault.default
);
parcelHelpers.export(exports, "xorBy", ()=>_xorByJsDefault.default
);
parcelHelpers.export(exports, "xorWith", ()=>_xorWithJsDefault.default
);
parcelHelpers.export(exports, "zip", ()=>_zipJsDefault.default
);
parcelHelpers.export(exports, "zipObject", ()=>_zipObjectJsDefault.default
);
parcelHelpers.export(exports, "zipObjectDeep", ()=>_zipObjectDeepJsDefault.default
);
parcelHelpers.export(exports, "zipWith", ()=>_zipWithJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_lodashDefaultJsDefault.default
);
var _addJs = require("./add.js");
var _addJsDefault = parcelHelpers.interopDefault(_addJs);
var _afterJs = require("./after.js");
var _afterJsDefault = parcelHelpers.interopDefault(_afterJs);
var _aryJs = require("./ary.js");
var _aryJsDefault = parcelHelpers.interopDefault(_aryJs);
var _assignJs = require("./assign.js");
var _assignJsDefault = parcelHelpers.interopDefault(_assignJs);
var _assignInJs = require("./assignIn.js");
var _assignInJsDefault = parcelHelpers.interopDefault(_assignInJs);
var _assignInWithJs = require("./assignInWith.js");
var _assignInWithJsDefault = parcelHelpers.interopDefault(_assignInWithJs);
var _assignWithJs = require("./assignWith.js");
var _assignWithJsDefault = parcelHelpers.interopDefault(_assignWithJs);
var _atJs = require("./at.js");
var _atJsDefault = parcelHelpers.interopDefault(_atJs);
var _attemptJs = require("./attempt.js");
var _attemptJsDefault = parcelHelpers.interopDefault(_attemptJs);
var _beforeJs = require("./before.js");
var _beforeJsDefault = parcelHelpers.interopDefault(_beforeJs);
var _bindJs = require("./bind.js");
var _bindJsDefault = parcelHelpers.interopDefault(_bindJs);
var _bindAllJs = require("./bindAll.js");
var _bindAllJsDefault = parcelHelpers.interopDefault(_bindAllJs);
var _bindKeyJs = require("./bindKey.js");
var _bindKeyJsDefault = parcelHelpers.interopDefault(_bindKeyJs);
var _camelCaseJs = require("./camelCase.js");
var _camelCaseJsDefault = parcelHelpers.interopDefault(_camelCaseJs);
var _capitalizeJs = require("./capitalize.js");
var _capitalizeJsDefault = parcelHelpers.interopDefault(_capitalizeJs);
var _castArrayJs = require("./castArray.js");
var _castArrayJsDefault = parcelHelpers.interopDefault(_castArrayJs);
var _ceilJs = require("./ceil.js");
var _ceilJsDefault = parcelHelpers.interopDefault(_ceilJs);
var _chainJs = require("./chain.js");
var _chainJsDefault = parcelHelpers.interopDefault(_chainJs);
var _chunkJs = require("./chunk.js");
var _chunkJsDefault = parcelHelpers.interopDefault(_chunkJs);
var _clampJs = require("./clamp.js");
var _clampJsDefault = parcelHelpers.interopDefault(_clampJs);
var _cloneJs = require("./clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _cloneDeepJs = require("./cloneDeep.js");
var _cloneDeepJsDefault = parcelHelpers.interopDefault(_cloneDeepJs);
var _cloneDeepWithJs = require("./cloneDeepWith.js");
var _cloneDeepWithJsDefault = parcelHelpers.interopDefault(_cloneDeepWithJs);
var _cloneWithJs = require("./cloneWith.js");
var _cloneWithJsDefault = parcelHelpers.interopDefault(_cloneWithJs);
var _commitJs = require("./commit.js");
var _commitJsDefault = parcelHelpers.interopDefault(_commitJs);
var _compactJs = require("./compact.js");
var _compactJsDefault = parcelHelpers.interopDefault(_compactJs);
var _concatJs = require("./concat.js");
var _concatJsDefault = parcelHelpers.interopDefault(_concatJs);
var _condJs = require("./cond.js");
var _condJsDefault = parcelHelpers.interopDefault(_condJs);
var _conformsJs = require("./conforms.js");
var _conformsJsDefault = parcelHelpers.interopDefault(_conformsJs);
var _conformsToJs = require("./conformsTo.js");
var _conformsToJsDefault = parcelHelpers.interopDefault(_conformsToJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _countByJs = require("./countBy.js");
var _countByJsDefault = parcelHelpers.interopDefault(_countByJs);
var _createJs = require("./create.js");
var _createJsDefault = parcelHelpers.interopDefault(_createJs);
var _curryJs = require("./curry.js");
var _curryJsDefault = parcelHelpers.interopDefault(_curryJs);
var _curryRightJs = require("./curryRight.js");
var _curryRightJsDefault = parcelHelpers.interopDefault(_curryRightJs);
var _debounceJs = require("./debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _deburrJs = require("./deburr.js");
var _deburrJsDefault = parcelHelpers.interopDefault(_deburrJs);
var _defaultToJs = require("./defaultTo.js");
var _defaultToJsDefault = parcelHelpers.interopDefault(_defaultToJs);
var _defaultsJs = require("./defaults.js");
var _defaultsJsDefault = parcelHelpers.interopDefault(_defaultsJs);
var _defaultsDeepJs = require("./defaultsDeep.js");
var _defaultsDeepJsDefault = parcelHelpers.interopDefault(_defaultsDeepJs);
var _deferJs = require("./defer.js");
var _deferJsDefault = parcelHelpers.interopDefault(_deferJs);
var _delayJs = require("./delay.js");
var _delayJsDefault = parcelHelpers.interopDefault(_delayJs);
var _differenceJs = require("./difference.js");
var _differenceJsDefault = parcelHelpers.interopDefault(_differenceJs);
var _differenceByJs = require("./differenceBy.js");
var _differenceByJsDefault = parcelHelpers.interopDefault(_differenceByJs);
var _differenceWithJs = require("./differenceWith.js");
var _differenceWithJsDefault = parcelHelpers.interopDefault(_differenceWithJs);
var _divideJs = require("./divide.js");
var _divideJsDefault = parcelHelpers.interopDefault(_divideJs);
var _dropJs = require("./drop.js");
var _dropJsDefault = parcelHelpers.interopDefault(_dropJs);
var _dropRightJs = require("./dropRight.js");
var _dropRightJsDefault = parcelHelpers.interopDefault(_dropRightJs);
var _dropRightWhileJs = require("./dropRightWhile.js");
var _dropRightWhileJsDefault = parcelHelpers.interopDefault(_dropRightWhileJs);
var _dropWhileJs = require("./dropWhile.js");
var _dropWhileJsDefault = parcelHelpers.interopDefault(_dropWhileJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _eachRightJs = require("./eachRight.js");
var _eachRightJsDefault = parcelHelpers.interopDefault(_eachRightJs);
var _endsWithJs = require("./endsWith.js");
var _endsWithJsDefault = parcelHelpers.interopDefault(_endsWithJs);
var _entriesJs = require("./entries.js");
var _entriesJsDefault = parcelHelpers.interopDefault(_entriesJs);
var _entriesInJs = require("./entriesIn.js");
var _entriesInJsDefault = parcelHelpers.interopDefault(_entriesInJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
var _escapeJs = require("./escape.js");
var _escapeJsDefault = parcelHelpers.interopDefault(_escapeJs);
var _escapeRegExpJs = require("./escapeRegExp.js");
var _escapeRegExpJsDefault = parcelHelpers.interopDefault(_escapeRegExpJs);
var _everyJs = require("./every.js");
var _everyJsDefault = parcelHelpers.interopDefault(_everyJs);
var _extendJs = require("./extend.js");
var _extendJsDefault = parcelHelpers.interopDefault(_extendJs);
var _extendWithJs = require("./extendWith.js");
var _extendWithJsDefault = parcelHelpers.interopDefault(_extendWithJs);
var _fillJs = require("./fill.js");
var _fillJsDefault = parcelHelpers.interopDefault(_fillJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _findIndexJs = require("./findIndex.js");
var _findIndexJsDefault = parcelHelpers.interopDefault(_findIndexJs);
var _findKeyJs = require("./findKey.js");
var _findKeyJsDefault = parcelHelpers.interopDefault(_findKeyJs);
var _findLastJs = require("./findLast.js");
var _findLastJsDefault = parcelHelpers.interopDefault(_findLastJs);
var _findLastIndexJs = require("./findLastIndex.js");
var _findLastIndexJsDefault = parcelHelpers.interopDefault(_findLastIndexJs);
var _findLastKeyJs = require("./findLastKey.js");
var _findLastKeyJsDefault = parcelHelpers.interopDefault(_findLastKeyJs);
var _firstJs = require("./first.js");
var _firstJsDefault = parcelHelpers.interopDefault(_firstJs);
var _flatMapJs = require("./flatMap.js");
var _flatMapJsDefault = parcelHelpers.interopDefault(_flatMapJs);
var _flatMapDeepJs = require("./flatMapDeep.js");
var _flatMapDeepJsDefault = parcelHelpers.interopDefault(_flatMapDeepJs);
var _flatMapDepthJs = require("./flatMapDepth.js");
var _flatMapDepthJsDefault = parcelHelpers.interopDefault(_flatMapDepthJs);
var _flattenJs = require("./flatten.js");
var _flattenJsDefault = parcelHelpers.interopDefault(_flattenJs);
var _flattenDeepJs = require("./flattenDeep.js");
var _flattenDeepJsDefault = parcelHelpers.interopDefault(_flattenDeepJs);
var _flattenDepthJs = require("./flattenDepth.js");
var _flattenDepthJsDefault = parcelHelpers.interopDefault(_flattenDepthJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _floorJs = require("./floor.js");
var _floorJsDefault = parcelHelpers.interopDefault(_floorJs);
var _flowJs = require("./flow.js");
var _flowJsDefault = parcelHelpers.interopDefault(_flowJs);
var _flowRightJs = require("./flowRight.js");
var _flowRightJsDefault = parcelHelpers.interopDefault(_flowRightJs);
var _forEachJs = require("./forEach.js");
var _forEachJsDefault = parcelHelpers.interopDefault(_forEachJs);
var _forEachRightJs = require("./forEachRight.js");
var _forEachRightJsDefault = parcelHelpers.interopDefault(_forEachRightJs);
var _forInJs = require("./forIn.js");
var _forInJsDefault = parcelHelpers.interopDefault(_forInJs);
var _forInRightJs = require("./forInRight.js");
var _forInRightJsDefault = parcelHelpers.interopDefault(_forInRightJs);
var _forOwnJs = require("./forOwn.js");
var _forOwnJsDefault = parcelHelpers.interopDefault(_forOwnJs);
var _forOwnRightJs = require("./forOwnRight.js");
var _forOwnRightJsDefault = parcelHelpers.interopDefault(_forOwnRightJs);
var _fromPairsJs = require("./fromPairs.js");
var _fromPairsJsDefault = parcelHelpers.interopDefault(_fromPairsJs);
var _functionsJs = require("./functions.js");
var _functionsJsDefault = parcelHelpers.interopDefault(_functionsJs);
var _functionsInJs = require("./functionsIn.js");
var _functionsInJsDefault = parcelHelpers.interopDefault(_functionsInJs);
var _getJs = require("./get.js");
var _getJsDefault = parcelHelpers.interopDefault(_getJs);
var _groupByJs = require("./groupBy.js");
var _groupByJsDefault = parcelHelpers.interopDefault(_groupByJs);
var _gtJs = require("./gt.js");
var _gtJsDefault = parcelHelpers.interopDefault(_gtJs);
var _gteJs = require("./gte.js");
var _gteJsDefault = parcelHelpers.interopDefault(_gteJs);
var _hasJs = require("./has.js");
var _hasJsDefault = parcelHelpers.interopDefault(_hasJs);
var _hasInJs = require("./hasIn.js");
var _hasInJsDefault = parcelHelpers.interopDefault(_hasInJs);
var _headJs = require("./head.js");
var _headJsDefault = parcelHelpers.interopDefault(_headJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _inRangeJs = require("./inRange.js");
var _inRangeJsDefault = parcelHelpers.interopDefault(_inRangeJs);
var _includesJs = require("./includes.js");
var _includesJsDefault = parcelHelpers.interopDefault(_includesJs);
var _indexOfJs = require("./indexOf.js");
var _indexOfJsDefault = parcelHelpers.interopDefault(_indexOfJs);
var _initialJs = require("./initial.js");
var _initialJsDefault = parcelHelpers.interopDefault(_initialJs);
var _intersectionJs = require("./intersection.js");
var _intersectionJsDefault = parcelHelpers.interopDefault(_intersectionJs);
var _intersectionByJs = require("./intersectionBy.js");
var _intersectionByJsDefault = parcelHelpers.interopDefault(_intersectionByJs);
var _intersectionWithJs = require("./intersectionWith.js");
var _intersectionWithJsDefault = parcelHelpers.interopDefault(_intersectionWithJs);
var _invertJs = require("./invert.js");
var _invertJsDefault = parcelHelpers.interopDefault(_invertJs);
var _invertByJs = require("./invertBy.js");
var _invertByJsDefault = parcelHelpers.interopDefault(_invertByJs);
var _invokeJs = require("./invoke.js");
var _invokeJsDefault = parcelHelpers.interopDefault(_invokeJs);
var _invokeMapJs = require("./invokeMap.js");
var _invokeMapJsDefault = parcelHelpers.interopDefault(_invokeMapJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isArrayBufferJs = require("./isArrayBuffer.js");
var _isArrayBufferJsDefault = parcelHelpers.interopDefault(_isArrayBufferJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _isBooleanJs = require("./isBoolean.js");
var _isBooleanJsDefault = parcelHelpers.interopDefault(_isBooleanJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isDateJs = require("./isDate.js");
var _isDateJsDefault = parcelHelpers.interopDefault(_isDateJs);
var _isElementJs = require("./isElement.js");
var _isElementJsDefault = parcelHelpers.interopDefault(_isElementJs);
var _isEmptyJs = require("./isEmpty.js");
var _isEmptyJsDefault = parcelHelpers.interopDefault(_isEmptyJs);
var _isEqualJs = require("./isEqual.js");
var _isEqualJsDefault = parcelHelpers.interopDefault(_isEqualJs);
var _isEqualWithJs = require("./isEqualWith.js");
var _isEqualWithJsDefault = parcelHelpers.interopDefault(_isEqualWithJs);
var _isErrorJs = require("./isError.js");
var _isErrorJsDefault = parcelHelpers.interopDefault(_isErrorJs);
var _isFiniteJs = require("./isFinite.js");
var _isFiniteJsDefault = parcelHelpers.interopDefault(_isFiniteJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isIntegerJs = require("./isInteger.js");
var _isIntegerJsDefault = parcelHelpers.interopDefault(_isIntegerJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
var _isMapJs = require("./isMap.js");
var _isMapJsDefault = parcelHelpers.interopDefault(_isMapJs);
var _isMatchJs = require("./isMatch.js");
var _isMatchJsDefault = parcelHelpers.interopDefault(_isMatchJs);
var _isMatchWithJs = require("./isMatchWith.js");
var _isMatchWithJsDefault = parcelHelpers.interopDefault(_isMatchWithJs);
var _isNaNJs = require("./isNaN.js");
var _isNaNJsDefault = parcelHelpers.interopDefault(_isNaNJs);
var _isNativeJs = require("./isNative.js");
var _isNativeJsDefault = parcelHelpers.interopDefault(_isNativeJs);
var _isNilJs = require("./isNil.js");
var _isNilJsDefault = parcelHelpers.interopDefault(_isNilJs);
var _isNullJs = require("./isNull.js");
var _isNullJsDefault = parcelHelpers.interopDefault(_isNullJs);
var _isNumberJs = require("./isNumber.js");
var _isNumberJsDefault = parcelHelpers.interopDefault(_isNumberJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
var _isPlainObjectJs = require("./isPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
var _isRegExpJs = require("./isRegExp.js");
var _isRegExpJsDefault = parcelHelpers.interopDefault(_isRegExpJs);
var _isSafeIntegerJs = require("./isSafeInteger.js");
var _isSafeIntegerJsDefault = parcelHelpers.interopDefault(_isSafeIntegerJs);
var _isSetJs = require("./isSet.js");
var _isSetJsDefault = parcelHelpers.interopDefault(_isSetJs);
var _isStringJs = require("./isString.js");
var _isStringJsDefault = parcelHelpers.interopDefault(_isStringJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
var _isUndefinedJs = require("./isUndefined.js");
var _isUndefinedJsDefault = parcelHelpers.interopDefault(_isUndefinedJs);
var _isWeakMapJs = require("./isWeakMap.js");
var _isWeakMapJsDefault = parcelHelpers.interopDefault(_isWeakMapJs);
var _isWeakSetJs = require("./isWeakSet.js");
var _isWeakSetJsDefault = parcelHelpers.interopDefault(_isWeakSetJs);
var _iterateeJs = require("./iteratee.js");
var _iterateeJsDefault = parcelHelpers.interopDefault(_iterateeJs);
var _joinJs = require("./join.js");
var _joinJsDefault = parcelHelpers.interopDefault(_joinJs);
var _kebabCaseJs = require("./kebabCase.js");
var _kebabCaseJsDefault = parcelHelpers.interopDefault(_kebabCaseJs);
var _keyByJs = require("./keyBy.js");
var _keyByJsDefault = parcelHelpers.interopDefault(_keyByJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
var _lastIndexOfJs = require("./lastIndexOf.js");
var _lastIndexOfJsDefault = parcelHelpers.interopDefault(_lastIndexOfJs);
var _wrapperLodashJs = require("./wrapperLodash.js");
var _wrapperLodashJsDefault = parcelHelpers.interopDefault(_wrapperLodashJs);
var _lowerCaseJs = require("./lowerCase.js");
var _lowerCaseJsDefault = parcelHelpers.interopDefault(_lowerCaseJs);
var _lowerFirstJs = require("./lowerFirst.js");
var _lowerFirstJsDefault = parcelHelpers.interopDefault(_lowerFirstJs);
var _ltJs = require("./lt.js");
var _ltJsDefault = parcelHelpers.interopDefault(_ltJs);
var _lteJs = require("./lte.js");
var _lteJsDefault = parcelHelpers.interopDefault(_lteJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _mapKeysJs = require("./mapKeys.js");
var _mapKeysJsDefault = parcelHelpers.interopDefault(_mapKeysJs);
var _mapValuesJs = require("./mapValues.js");
var _mapValuesJsDefault = parcelHelpers.interopDefault(_mapValuesJs);
var _matchesJs = require("./matches.js");
var _matchesJsDefault = parcelHelpers.interopDefault(_matchesJs);
var _matchesPropertyJs = require("./matchesProperty.js");
var _matchesPropertyJsDefault = parcelHelpers.interopDefault(_matchesPropertyJs);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxByJs = require("./maxBy.js");
var _maxByJsDefault = parcelHelpers.interopDefault(_maxByJs);
var _meanJs = require("./mean.js");
var _meanJsDefault = parcelHelpers.interopDefault(_meanJs);
var _meanByJs = require("./meanBy.js");
var _meanByJsDefault = parcelHelpers.interopDefault(_meanByJs);
var _memoizeJs = require("./memoize.js");
var _memoizeJsDefault = parcelHelpers.interopDefault(_memoizeJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _mergeWithJs = require("./mergeWith.js");
var _mergeWithJsDefault = parcelHelpers.interopDefault(_mergeWithJs);
var _methodJs = require("./method.js");
var _methodJsDefault = parcelHelpers.interopDefault(_methodJs);
var _methodOfJs = require("./methodOf.js");
var _methodOfJsDefault = parcelHelpers.interopDefault(_methodOfJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minByJs = require("./minBy.js");
var _minByJsDefault = parcelHelpers.interopDefault(_minByJs);
var _mixinJs = require("./mixin.js");
var _mixinJsDefault = parcelHelpers.interopDefault(_mixinJs);
var _multiplyJs = require("./multiply.js");
var _multiplyJsDefault = parcelHelpers.interopDefault(_multiplyJs);
var _negateJs = require("./negate.js");
var _negateJsDefault = parcelHelpers.interopDefault(_negateJs);
var _nextJs = require("./next.js");
var _nextJsDefault = parcelHelpers.interopDefault(_nextJs);
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _nowJs = require("./now.js");
var _nowJsDefault = parcelHelpers.interopDefault(_nowJs);
var _nthJs = require("./nth.js");
var _nthJsDefault = parcelHelpers.interopDefault(_nthJs);
var _nthArgJs = require("./nthArg.js");
var _nthArgJsDefault = parcelHelpers.interopDefault(_nthArgJs);
var _omitJs = require("./omit.js");
var _omitJsDefault = parcelHelpers.interopDefault(_omitJs);
var _omitByJs = require("./omitBy.js");
var _omitByJsDefault = parcelHelpers.interopDefault(_omitByJs);
var _onceJs = require("./once.js");
var _onceJsDefault = parcelHelpers.interopDefault(_onceJs);
var _orderByJs = require("./orderBy.js");
var _orderByJsDefault = parcelHelpers.interopDefault(_orderByJs);
var _overJs = require("./over.js");
var _overJsDefault = parcelHelpers.interopDefault(_overJs);
var _overArgsJs = require("./overArgs.js");
var _overArgsJsDefault = parcelHelpers.interopDefault(_overArgsJs);
var _overEveryJs = require("./overEvery.js");
var _overEveryJsDefault = parcelHelpers.interopDefault(_overEveryJs);
var _overSomeJs = require("./overSome.js");
var _overSomeJsDefault = parcelHelpers.interopDefault(_overSomeJs);
var _padJs = require("./pad.js");
var _padJsDefault = parcelHelpers.interopDefault(_padJs);
var _padEndJs = require("./padEnd.js");
var _padEndJsDefault = parcelHelpers.interopDefault(_padEndJs);
var _padStartJs = require("./padStart.js");
var _padStartJsDefault = parcelHelpers.interopDefault(_padStartJs);
var _parseIntJs = require("./parseInt.js");
var _parseIntJsDefault = parcelHelpers.interopDefault(_parseIntJs);
var _partialJs = require("./partial.js");
var _partialJsDefault = parcelHelpers.interopDefault(_partialJs);
var _partialRightJs = require("./partialRight.js");
var _partialRightJsDefault = parcelHelpers.interopDefault(_partialRightJs);
var _partitionJs = require("./partition.js");
var _partitionJsDefault = parcelHelpers.interopDefault(_partitionJs);
var _pickJs = require("./pick.js");
var _pickJsDefault = parcelHelpers.interopDefault(_pickJs);
var _pickByJs = require("./pickBy.js");
var _pickByJsDefault = parcelHelpers.interopDefault(_pickByJs);
var _plantJs = require("./plant.js");
var _plantJsDefault = parcelHelpers.interopDefault(_plantJs);
var _propertyJs = require("./property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _propertyOfJs = require("./propertyOf.js");
var _propertyOfJsDefault = parcelHelpers.interopDefault(_propertyOfJs);
var _pullJs = require("./pull.js");
var _pullJsDefault = parcelHelpers.interopDefault(_pullJs);
var _pullAllJs = require("./pullAll.js");
var _pullAllJsDefault = parcelHelpers.interopDefault(_pullAllJs);
var _pullAllByJs = require("./pullAllBy.js");
var _pullAllByJsDefault = parcelHelpers.interopDefault(_pullAllByJs);
var _pullAllWithJs = require("./pullAllWith.js");
var _pullAllWithJsDefault = parcelHelpers.interopDefault(_pullAllWithJs);
var _pullAtJs = require("./pullAt.js");
var _pullAtJsDefault = parcelHelpers.interopDefault(_pullAtJs);
var _randomJs = require("./random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
var _rangeJs = require("./range.js");
var _rangeJsDefault = parcelHelpers.interopDefault(_rangeJs);
var _rangeRightJs = require("./rangeRight.js");
var _rangeRightJsDefault = parcelHelpers.interopDefault(_rangeRightJs);
var _reargJs = require("./rearg.js");
var _reargJsDefault = parcelHelpers.interopDefault(_reargJs);
var _reduceJs = require("./reduce.js");
var _reduceJsDefault = parcelHelpers.interopDefault(_reduceJs);
var _reduceRightJs = require("./reduceRight.js");
var _reduceRightJsDefault = parcelHelpers.interopDefault(_reduceRightJs);
var _rejectJs = require("./reject.js");
var _rejectJsDefault = parcelHelpers.interopDefault(_rejectJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _repeatJs = require("./repeat.js");
var _repeatJsDefault = parcelHelpers.interopDefault(_repeatJs);
var _replaceJs = require("./replace.js");
var _replaceJsDefault = parcelHelpers.interopDefault(_replaceJs);
var _restJs = require("./rest.js");
var _restJsDefault = parcelHelpers.interopDefault(_restJs);
var _resultJs = require("./result.js");
var _resultJsDefault = parcelHelpers.interopDefault(_resultJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _sampleJs = require("./sample.js");
var _sampleJsDefault = parcelHelpers.interopDefault(_sampleJs);
var _sampleSizeJs = require("./sampleSize.js");
var _sampleSizeJsDefault = parcelHelpers.interopDefault(_sampleSizeJs);
var _setJs = require("./set.js");
var _setJsDefault = parcelHelpers.interopDefault(_setJs);
var _setWithJs = require("./setWith.js");
var _setWithJsDefault = parcelHelpers.interopDefault(_setWithJs);
var _shuffleJs = require("./shuffle.js");
var _shuffleJsDefault = parcelHelpers.interopDefault(_shuffleJs);
var _sizeJs = require("./size.js");
var _sizeJsDefault = parcelHelpers.interopDefault(_sizeJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _snakeCaseJs = require("./snakeCase.js");
var _snakeCaseJsDefault = parcelHelpers.interopDefault(_snakeCaseJs);
var _someJs = require("./some.js");
var _someJsDefault = parcelHelpers.interopDefault(_someJs);
var _sortByJs = require("./sortBy.js");
var _sortByJsDefault = parcelHelpers.interopDefault(_sortByJs);
var _sortedIndexJs = require("./sortedIndex.js");
var _sortedIndexJsDefault = parcelHelpers.interopDefault(_sortedIndexJs);
var _sortedIndexByJs = require("./sortedIndexBy.js");
var _sortedIndexByJsDefault = parcelHelpers.interopDefault(_sortedIndexByJs);
var _sortedIndexOfJs = require("./sortedIndexOf.js");
var _sortedIndexOfJsDefault = parcelHelpers.interopDefault(_sortedIndexOfJs);
var _sortedLastIndexJs = require("./sortedLastIndex.js");
var _sortedLastIndexJsDefault = parcelHelpers.interopDefault(_sortedLastIndexJs);
var _sortedLastIndexByJs = require("./sortedLastIndexBy.js");
var _sortedLastIndexByJsDefault = parcelHelpers.interopDefault(_sortedLastIndexByJs);
var _sortedLastIndexOfJs = require("./sortedLastIndexOf.js");
var _sortedLastIndexOfJsDefault = parcelHelpers.interopDefault(_sortedLastIndexOfJs);
var _sortedUniqJs = require("./sortedUniq.js");
var _sortedUniqJsDefault = parcelHelpers.interopDefault(_sortedUniqJs);
var _sortedUniqByJs = require("./sortedUniqBy.js");
var _sortedUniqByJsDefault = parcelHelpers.interopDefault(_sortedUniqByJs);
var _splitJs = require("./split.js");
var _splitJsDefault = parcelHelpers.interopDefault(_splitJs);
var _spreadJs = require("./spread.js");
var _spreadJsDefault = parcelHelpers.interopDefault(_spreadJs);
var _startCaseJs = require("./startCase.js");
var _startCaseJsDefault = parcelHelpers.interopDefault(_startCaseJs);
var _startsWithJs = require("./startsWith.js");
var _startsWithJsDefault = parcelHelpers.interopDefault(_startsWithJs);
var _stubArrayJs = require("./stubArray.js");
var _stubArrayJsDefault = parcelHelpers.interopDefault(_stubArrayJs);
var _stubFalseJs = require("./stubFalse.js");
var _stubFalseJsDefault = parcelHelpers.interopDefault(_stubFalseJs);
var _stubObjectJs = require("./stubObject.js");
var _stubObjectJsDefault = parcelHelpers.interopDefault(_stubObjectJs);
var _stubStringJs = require("./stubString.js");
var _stubStringJsDefault = parcelHelpers.interopDefault(_stubStringJs);
var _stubTrueJs = require("./stubTrue.js");
var _stubTrueJsDefault = parcelHelpers.interopDefault(_stubTrueJs);
var _subtractJs = require("./subtract.js");
var _subtractJsDefault = parcelHelpers.interopDefault(_subtractJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _sumByJs = require("./sumBy.js");
var _sumByJsDefault = parcelHelpers.interopDefault(_sumByJs);
var _tailJs = require("./tail.js");
var _tailJsDefault = parcelHelpers.interopDefault(_tailJs);
var _takeJs = require("./take.js");
var _takeJsDefault = parcelHelpers.interopDefault(_takeJs);
var _takeRightJs = require("./takeRight.js");
var _takeRightJsDefault = parcelHelpers.interopDefault(_takeRightJs);
var _takeRightWhileJs = require("./takeRightWhile.js");
var _takeRightWhileJsDefault = parcelHelpers.interopDefault(_takeRightWhileJs);
var _takeWhileJs = require("./takeWhile.js");
var _takeWhileJsDefault = parcelHelpers.interopDefault(_takeWhileJs);
var _tapJs = require("./tap.js");
var _tapJsDefault = parcelHelpers.interopDefault(_tapJs);
var _templateJs = require("./template.js");
var _templateJsDefault = parcelHelpers.interopDefault(_templateJs);
var _templateSettingsJs = require("./templateSettings.js");
var _templateSettingsJsDefault = parcelHelpers.interopDefault(_templateSettingsJs);
var _throttleJs = require("./throttle.js");
var _throttleJsDefault = parcelHelpers.interopDefault(_throttleJs);
var _thruJs = require("./thru.js");
var _thruJsDefault = parcelHelpers.interopDefault(_thruJs);
var _timesJs = require("./times.js");
var _timesJsDefault = parcelHelpers.interopDefault(_timesJs);
var _toArrayJs = require("./toArray.js");
var _toArrayJsDefault = parcelHelpers.interopDefault(_toArrayJs);
var _toFiniteJs = require("./toFinite.js");
var _toFiniteJsDefault = parcelHelpers.interopDefault(_toFiniteJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toIteratorJs = require("./toIterator.js");
var _toIteratorJsDefault = parcelHelpers.interopDefault(_toIteratorJs);
var _toJSONJs = require("./toJSON.js");
var _toJSONJsDefault = parcelHelpers.interopDefault(_toJSONJs);
var _toLengthJs = require("./toLength.js");
var _toLengthJsDefault = parcelHelpers.interopDefault(_toLengthJs);
var _toLowerJs = require("./toLower.js");
var _toLowerJsDefault = parcelHelpers.interopDefault(_toLowerJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
var _toPairsJs = require("./toPairs.js");
var _toPairsJsDefault = parcelHelpers.interopDefault(_toPairsJs);
var _toPairsInJs = require("./toPairsIn.js");
var _toPairsInJsDefault = parcelHelpers.interopDefault(_toPairsInJs);
var _toPathJs = require("./toPath.js");
var _toPathJsDefault = parcelHelpers.interopDefault(_toPathJs);
var _toPlainObjectJs = require("./toPlainObject.js");
var _toPlainObjectJsDefault = parcelHelpers.interopDefault(_toPlainObjectJs);
var _toSafeIntegerJs = require("./toSafeInteger.js");
var _toSafeIntegerJsDefault = parcelHelpers.interopDefault(_toSafeIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
var _toUpperJs = require("./toUpper.js");
var _toUpperJsDefault = parcelHelpers.interopDefault(_toUpperJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);
var _trimJs = require("./trim.js");
var _trimJsDefault = parcelHelpers.interopDefault(_trimJs);
var _trimEndJs = require("./trimEnd.js");
var _trimEndJsDefault = parcelHelpers.interopDefault(_trimEndJs);
var _trimStartJs = require("./trimStart.js");
var _trimStartJsDefault = parcelHelpers.interopDefault(_trimStartJs);
var _truncateJs = require("./truncate.js");
var _truncateJsDefault = parcelHelpers.interopDefault(_truncateJs);
var _unaryJs = require("./unary.js");
var _unaryJsDefault = parcelHelpers.interopDefault(_unaryJs);
var _unescapeJs = require("./unescape.js");
var _unescapeJsDefault = parcelHelpers.interopDefault(_unescapeJs);
var _unionJs = require("./union.js");
var _unionJsDefault = parcelHelpers.interopDefault(_unionJs);
var _unionByJs = require("./unionBy.js");
var _unionByJsDefault = parcelHelpers.interopDefault(_unionByJs);
var _unionWithJs = require("./unionWith.js");
var _unionWithJsDefault = parcelHelpers.interopDefault(_unionWithJs);
var _uniqJs = require("./uniq.js");
var _uniqJsDefault = parcelHelpers.interopDefault(_uniqJs);
var _uniqByJs = require("./uniqBy.js");
var _uniqByJsDefault = parcelHelpers.interopDefault(_uniqByJs);
var _uniqWithJs = require("./uniqWith.js");
var _uniqWithJsDefault = parcelHelpers.interopDefault(_uniqWithJs);
var _uniqueIdJs = require("./uniqueId.js");
var _uniqueIdJsDefault = parcelHelpers.interopDefault(_uniqueIdJs);
var _unsetJs = require("./unset.js");
var _unsetJsDefault = parcelHelpers.interopDefault(_unsetJs);
var _unzipJs = require("./unzip.js");
var _unzipJsDefault = parcelHelpers.interopDefault(_unzipJs);
var _unzipWithJs = require("./unzipWith.js");
var _unzipWithJsDefault = parcelHelpers.interopDefault(_unzipWithJs);
var _updateJs = require("./update.js");
var _updateJsDefault = parcelHelpers.interopDefault(_updateJs);
var _updateWithJs = require("./updateWith.js");
var _updateWithJsDefault = parcelHelpers.interopDefault(_updateWithJs);
var _upperCaseJs = require("./upperCase.js");
var _upperCaseJsDefault = parcelHelpers.interopDefault(_upperCaseJs);
var _upperFirstJs = require("./upperFirst.js");
var _upperFirstJsDefault = parcelHelpers.interopDefault(_upperFirstJs);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
var _valueOfJs = require("./valueOf.js");
var _valueOfJsDefault = parcelHelpers.interopDefault(_valueOfJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
var _valuesInJs = require("./valuesIn.js");
var _valuesInJsDefault = parcelHelpers.interopDefault(_valuesInJs);
var _withoutJs = require("./without.js");
var _withoutJsDefault = parcelHelpers.interopDefault(_withoutJs);
var _wordsJs = require("./words.js");
var _wordsJsDefault = parcelHelpers.interopDefault(_wordsJs);
var _wrapJs = require("./wrap.js");
var _wrapJsDefault = parcelHelpers.interopDefault(_wrapJs);
var _wrapperAtJs = require("./wrapperAt.js");
var _wrapperAtJsDefault = parcelHelpers.interopDefault(_wrapperAtJs);
var _wrapperChainJs = require("./wrapperChain.js");
var _wrapperChainJsDefault = parcelHelpers.interopDefault(_wrapperChainJs);
var _wrapperReverseJs = require("./wrapperReverse.js");
var _wrapperReverseJsDefault = parcelHelpers.interopDefault(_wrapperReverseJs);
var _wrapperValueJs = require("./wrapperValue.js");
var _wrapperValueJsDefault = parcelHelpers.interopDefault(_wrapperValueJs);
var _xorJs = require("./xor.js");
var _xorJsDefault = parcelHelpers.interopDefault(_xorJs);
var _xorByJs = require("./xorBy.js");
var _xorByJsDefault = parcelHelpers.interopDefault(_xorByJs);
var _xorWithJs = require("./xorWith.js");
var _xorWithJsDefault = parcelHelpers.interopDefault(_xorWithJs);
var _zipJs = require("./zip.js");
var _zipJsDefault = parcelHelpers.interopDefault(_zipJs);
var _zipObjectJs = require("./zipObject.js");
var _zipObjectJsDefault = parcelHelpers.interopDefault(_zipObjectJs);
var _zipObjectDeepJs = require("./zipObjectDeep.js");
var _zipObjectDeepJsDefault = parcelHelpers.interopDefault(_zipObjectDeepJs);
var _zipWithJs = require("./zipWith.js");
var _zipWithJsDefault = parcelHelpers.interopDefault(_zipWithJs);
var _lodashDefaultJs = require("./lodash.default.js");
var _lodashDefaultJsDefault = parcelHelpers.interopDefault(_lodashDefaultJs);

},{"./add.js":"h2xoL","./after.js":"hDjR2","./ary.js":"buIy2","./assign.js":"lp4KX","./assignIn.js":"8GeoO","./assignInWith.js":"e4uIW","./assignWith.js":"1UrHD","./at.js":"7dHgP","./attempt.js":"cIrGS","./before.js":"12IeX","./bind.js":"41ULs","./bindAll.js":"d4mAG","./bindKey.js":"bhMDu","./camelCase.js":"1Ki56","./capitalize.js":"iD0PA","./castArray.js":"fYgXC","./ceil.js":"CLSpr","./chain.js":"gcLZ4","./chunk.js":"aah23","./clamp.js":"1BIUN","./clone.js":"cM6tT","./cloneDeep.js":"gqrPs","./cloneDeepWith.js":"6sZ5p","./cloneWith.js":"49X9q","./commit.js":"mifX9","./compact.js":"k48LX","./concat.js":"gl4B0","./cond.js":"lCwJ0","./conforms.js":"2mmY2","./conformsTo.js":"3cwvY","./constant.js":"izIhX","./countBy.js":"45iHO","./create.js":"g3pk5","./curry.js":"sHOcy","./curryRight.js":"cZ5bV","./debounce.js":"dgroW","./deburr.js":"4207h","./defaultTo.js":"iFguT","./defaults.js":"d3gia","./defaultsDeep.js":"i9k30","./defer.js":"9itZG","./delay.js":"lM266","./difference.js":"bCldF","./differenceBy.js":"gw2AS","./differenceWith.js":"3hQVe","./divide.js":"gvIlS","./drop.js":"5Sf8Z","./dropRight.js":"qlemU","./dropRightWhile.js":"2rwBJ","./dropWhile.js":"glm5L","./each.js":"mIhlP","./eachRight.js":"da27m","./endsWith.js":"7h2su","./entries.js":"j8uzz","./entriesIn.js":"7Roxa","./eq.js":"1PtGj","./escape.js":"9Kfvx","./escapeRegExp.js":"ilQiZ","./every.js":"a4oI7","./extend.js":"dmzZi","./extendWith.js":"2f1gj","./fill.js":"kfgEy","./filter.js":"a6Bax","./find.js":"53X6i","./findIndex.js":"YGDUB","./findKey.js":"1JJrl","./findLast.js":"lGU8L","./findLastIndex.js":"5alCm","./findLastKey.js":"hF3xZ","./first.js":"gkRo5","./flatMap.js":"9iEVp","./flatMapDeep.js":"bSuHQ","./flatMapDepth.js":"9Kt9L","./flatten.js":"01lll","./flattenDeep.js":"4JIPO","./flattenDepth.js":"6tDIj","./flip.js":"fyJZi","./floor.js":"dkukl","./flow.js":"axHzW","./flowRight.js":"3zLY6","./forEach.js":"bCmxz","./forEachRight.js":"e4t4U","./forIn.js":"bQtaB","./forInRight.js":"gtOyD","./forOwn.js":"fo8YY","./forOwnRight.js":"hHuwC","./fromPairs.js":"1jSmF","./functions.js":"3hupY","./functionsIn.js":"3mPM8","./get.js":"zh4Vj","./groupBy.js":"6j2ap","./gt.js":"k8AO5","./gte.js":"hjsUD","./has.js":"eMgo7","./hasIn.js":"kRN1R","./head.js":"dWVx1","./identity.js":"fqqWQ","./inRange.js":"eQg6n","./includes.js":"70WvX","./indexOf.js":"f1w5R","./initial.js":"8v8fG","./intersection.js":"6KnES","./intersectionBy.js":"k9SKv","./intersectionWith.js":"b2qne","./invert.js":"2KPOP","./invertBy.js":"jY6q1","./invoke.js":"g4wAP","./invokeMap.js":"gynst","./isArguments.js":"bCq5F","./isArray.js":"aM5De","./isArrayBuffer.js":"gyupv","./isArrayLike.js":"5oD0E","./isArrayLikeObject.js":"7pSqJ","./isBoolean.js":"efxLR","./isBuffer.js":"5zLdt","./isDate.js":"kKAeM","./isElement.js":"ioFiY","./isEmpty.js":"dL2SH","./isEqual.js":"eR5BF","./isEqualWith.js":"gow7r","./isError.js":"c9Nxf","./isFinite.js":"6Q6di","./isFunction.js":"flqKI","./isInteger.js":"19KFx","./isLength.js":"8LHjk","./isMap.js":"aTCvg","./isMatch.js":"624E0","./isMatchWith.js":"jOdji","./isNaN.js":"hFSO6","./isNative.js":"9xeht","./isNil.js":"hACpm","./isNull.js":"4OqX5","./isNumber.js":"5Ybx7","./isObject.js":"1IOOk","./isObjectLike.js":"KrkRc","./isPlainObject.js":"bA6mR","./isRegExp.js":"mkI2R","./isSafeInteger.js":"hsB1y","./isSet.js":"gu32A","./isString.js":"jLC5S","./isSymbol.js":"5Ijw9","./isTypedArray.js":"4zD9H","./isUndefined.js":"2mxpV","./isWeakMap.js":"fkEwZ","./isWeakSet.js":"fbaJM","./iteratee.js":"bBOpM","./join.js":"k8m3s","./kebabCase.js":"aUlYs","./keyBy.js":"pGTr8","./keys.js":"f9Mo9","./keysIn.js":"dwsZb","./last.js":"cAZFz","./lastIndexOf.js":"bwXQU","./wrapperLodash.js":"4HPB1","./lowerCase.js":"1r9dC","./lowerFirst.js":"cOtgl","./lt.js":"fFOPj","./lte.js":"2JrKG","./map.js":"2jjVU","./mapKeys.js":"fp9mD","./mapValues.js":"jXAEX","./matches.js":"dGEIs","./matchesProperty.js":"bDzEN","./max.js":"jpVbu","./maxBy.js":"7ilJg","./mean.js":"hv8hp","./meanBy.js":"kgCT8","./memoize.js":"1d29b","./merge.js":"iz6Iv","./mergeWith.js":"cVSbE","./method.js":"jhNNz","./methodOf.js":"ez29f","./min.js":"94N5R","./minBy.js":"159CG","./mixin.js":"hdMVM","./multiply.js":"fK88J","./negate.js":"7g9li","./next.js":"4eB5h","./noop.js":"fQpra","./now.js":"aHjJy","./nth.js":"1AwpH","./nthArg.js":"8W3Xb","./omit.js":"3N7DR","./omitBy.js":"9dpfL","./once.js":"7moj2","./orderBy.js":"gyxQe","./over.js":"fESBh","./overArgs.js":"2Q39E","./overEvery.js":"10sDM","./overSome.js":"jVMwj","./pad.js":"fM3n7","./padEnd.js":"g9SMd","./padStart.js":"hbBM7","./parseInt.js":"5TorV","./partial.js":"cUFQ0","./partialRight.js":"6mDsd","./partition.js":"8Ci7G","./pick.js":"j4dOW","./pickBy.js":"jAj8s","./plant.js":"aC9CN","./property.js":"8Doag","./propertyOf.js":"4RAwz","./pull.js":"h46Lz","./pullAll.js":"hfsh3","./pullAllBy.js":"8miuf","./pullAllWith.js":"1U40C","./pullAt.js":"m59fR","./random.js":"iHku7","./range.js":"hHEyI","./rangeRight.js":"g1XoZ","./rearg.js":"gIgPN","./reduce.js":"dYEXo","./reduceRight.js":"gwBXk","./reject.js":"9h1ez","./remove.js":"e0bSt","./repeat.js":"b8tN6","./replace.js":"7TcPA","./rest.js":"eLF2v","./result.js":"3UERD","./reverse.js":"g4G7I","./round.js":"m9KU4","./sample.js":"jEj1E","./sampleSize.js":"jj60k","./set.js":"7RnBM","./setWith.js":"hJ6lo","./shuffle.js":"geZjV","./size.js":"deADP","./slice.js":"8dFmQ","./snakeCase.js":"5RQq2","./some.js":"52iYS","./sortBy.js":"j1LMa","./sortedIndex.js":"1RrZA","./sortedIndexBy.js":"fM825","./sortedIndexOf.js":"lne1W","./sortedLastIndex.js":"bSQkU","./sortedLastIndexBy.js":"gnrPv","./sortedLastIndexOf.js":"iqcKK","./sortedUniq.js":"8aI7N","./sortedUniqBy.js":"c9p7V","./split.js":"8bJdK","./spread.js":"g2dsa","./startCase.js":"jr30l","./startsWith.js":"77WAQ","./stubArray.js":"a0dCJ","./stubFalse.js":"2zFwJ","./stubObject.js":"72wCy","./stubString.js":"kXZaJ","./stubTrue.js":"1QVGB","./subtract.js":"bkRtL","./sum.js":"lFod9","./sumBy.js":"fveXh","./tail.js":"3VhUc","./take.js":"1jAnF","./takeRight.js":"gNCaE","./takeRightWhile.js":"5EXP3","./takeWhile.js":"aNaWv","./tap.js":"2FfKw","./template.js":"dENJ7","./templateSettings.js":"bZAfI","./throttle.js":"d5icF","./thru.js":"hy1jT","./times.js":"ikpOD","./toArray.js":"9ylTH","./toFinite.js":"he24v","./toInteger.js":"69J4a","./toIterator.js":"dotvV","./toJSON.js":"l7j50","./toLength.js":"agxNV","./toLower.js":"lS55I","./toNumber.js":"laU14","./toPairs.js":"lKvG2","./toPairsIn.js":"9ITR9","./toPath.js":"61Rh0","./toPlainObject.js":"ZojMJ","./toSafeInteger.js":"74MCf","./toString.js":"fzVGZ","./toUpper.js":"4Bvdp","./transform.js":"96jPF","./trim.js":"ke4Ba","./trimEnd.js":"iU7QI","./trimStart.js":"52Seo","./truncate.js":"cv1a3","./unary.js":"9TV6B","./unescape.js":"1LMbJ","./union.js":"3KDyG","./unionBy.js":"fpkGI","./unionWith.js":"kq5Ay","./uniq.js":"8bgCK","./uniqBy.js":"13uh6","./uniqWith.js":"7OEJc","./uniqueId.js":"bIK1H","./unset.js":"l8xZg","./unzip.js":"7fsw4","./unzipWith.js":"erJvr","./update.js":"hp0Ki","./updateWith.js":"9USiB","./upperCase.js":"4dxE8","./upperFirst.js":"bubwY","./value.js":"lxPpk","./valueOf.js":"hhNpZ","./values.js":"abMLz","./valuesIn.js":"alC0f","./without.js":"7trOS","./words.js":"fp6cV","./wrap.js":"an6Ep","./wrapperAt.js":"3fNZ6","./wrapperChain.js":"fVQIr","./wrapperReverse.js":"jcPLi","./wrapperValue.js":"NZdLY","./xor.js":"dO8Bk","./xorBy.js":"6y0zh","./xorWith.js":"dEPfN","./zip.js":"lfegQ","./zipObject.js":"g8sfy","./zipObjectDeep.js":"5UIBl","./zipWith.js":"eCmbh","./lodash.default.js":"hCk7j","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h2xoL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createMathOperationJs = require("./_createMathOperation.js");
var _createMathOperationJsDefault = parcelHelpers.interopDefault(_createMathOperationJs);
/**
 * Adds two numbers.
 *
 * @static
 * @memberOf _
 * @since 3.4.0
 * @category Math
 * @param {number} augend The first number in an addition.
 * @param {number} addend The second number in an addition.
 * @returns {number} Returns the total.
 * @example
 *
 * _.add(6, 4);
 * // => 10
 */ var add = _createMathOperationJsDefault.default(function(augend, addend) {
    return augend + addend;
}, 0);
exports.default = add;

},{"./_createMathOperation.js":"aW9XE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aW9XE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToNumberJs = require("./_baseToNumber.js");
var _baseToNumberJsDefault = parcelHelpers.interopDefault(_baseToNumberJs);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
/**
 * Creates a function that performs a mathematical operation on two values.
 *
 * @private
 * @param {Function} operator The function to perform the operation.
 * @param {number} [defaultValue] The value used for `undefined` arguments.
 * @returns {Function} Returns the new mathematical operation function.
 */ function createMathOperation(operator, defaultValue) {
    return function(value, other) {
        var result;
        if (value === undefined && other === undefined) return defaultValue;
        if (value !== undefined) result = value;
        if (other !== undefined) {
            if (result === undefined) return other;
            if (typeof value == 'string' || typeof other == 'string') {
                value = _baseToStringJsDefault.default(value);
                other = _baseToStringJsDefault.default(other);
            } else {
                value = _baseToNumberJsDefault.default(value);
                other = _baseToNumberJsDefault.default(other);
            }
            result = operator(value, other);
        }
        return result;
    };
}
exports.default = createMathOperation;

},{"./_baseToNumber.js":"6TZMt","./_baseToString.js":"cWGOY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6TZMt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/**
 * The base implementation of `_.toNumber` which doesn't ensure correct
 * conversions of binary, hexadecimal, or octal string values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 */ function baseToNumber(value) {
    if (typeof value == 'number') return value;
    if (_isSymbolJsDefault.default(value)) return NAN;
    return +value;
}
exports.default = baseToNumber;

},{"./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Ijw9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == symbolTag;
}
exports.default = isSymbol;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aZJzp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _getRawTagJs = require("./_getRawTag.js");
var _getRawTagJsDefault = parcelHelpers.interopDefault(_getRawTagJs);
var _objectToStringJs = require("./_objectToString.js");
var _objectToStringJsDefault = parcelHelpers.interopDefault(_objectToStringJs);
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = _symbolJsDefault.default ? _symbolJsDefault.default.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? _getRawTagJsDefault.default(value) : _objectToStringJsDefault.default(value);
}
exports.default = baseGetTag;

},{"./_Symbol.js":"lUHHK","./_getRawTag.js":"7x3x3","./_objectToString.js":"bAUP7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lUHHK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Built-in value references. */ var Symbol1 = _rootJsDefault.default.Symbol;
exports.default = Symbol1;

},{"./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bVBU6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _freeGlobalJs = require("./_freeGlobal.js");
var _freeGlobalJsDefault = parcelHelpers.interopDefault(_freeGlobalJs);
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = _freeGlobalJsDefault.default || freeSelf || Function('return this')();
exports.default = root;

},{"./_freeGlobal.js":"bwA9E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bwA9E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
exports.default = freeGlobal;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7x3x3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = _symbolJsDefault.default ? _symbolJsDefault.default.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
exports.default = getRawTag;

},{"./_Symbol.js":"lUHHK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bAUP7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
exports.default = objectToString;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"KrkRc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
exports.default = isObjectLike;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cWGOY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var symbolProto = _symbolJsDefault.default ? _symbolJsDefault.default.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') return value;
    if (_isArrayJsDefault.default(value)) // Recursively convert values (susceptible to call stack limits).
    return _arrayMapJsDefault.default(value, baseToString) + '';
    if (_isSymbolJsDefault.default(value)) return symbolToString ? symbolToString.call(value) : '';
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
exports.default = baseToString;

},{"./_Symbol.js":"lUHHK","./_arrayMap.js":"jjvFU","./isArray.js":"aM5De","./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jjvFU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while((++index) < length)result[index] = iteratee(array[index], index, array);
    return result;
}
exports.default = arrayMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aM5De":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
exports.default = isArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hDjR2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * The opposite of `_.before`; this method creates a function that invokes
 * `func` once it's called `n` or more times.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {number} n The number of calls before `func` is invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var saves = ['profile', 'settings'];
 *
 * var done = _.after(saves.length, function() {
 *   console.log('done saving!');
 * });
 *
 * _.forEach(saves, function(type) {
 *   asyncSave({ 'type': type, 'complete': done });
 * });
 * // => Logs 'done saving!' after the two async saves have completed.
 */ function after(n, func) {
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    n = _toIntegerJsDefault.default(n);
    return function() {
        if ((--n) < 1) return func.apply(this, arguments);
    };
}
exports.default = after;

},{"./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"69J4a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toFiniteJs = require("./toFinite.js");
var _toFiniteJsDefault = parcelHelpers.interopDefault(_toFiniteJs);
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */ function toInteger(value) {
    var result = _toFiniteJsDefault.default(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
}
exports.default = toInteger;

},{"./toFinite.js":"he24v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"he24v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_INTEGER = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */ function toFinite(value) {
    if (!value) return value === 0 ? value : 0;
    value = _toNumberJsDefault.default(value);
    if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
}
exports.default = toFinite;

},{"./toNumber.js":"laU14","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"laU14":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseTrimJs = require("./_baseTrim.js");
var _baseTrimJsDefault = parcelHelpers.interopDefault(_baseTrimJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == 'number') return value;
    if (_isSymbolJsDefault.default(value)) return NAN;
    if (_isObjectJsDefault.default(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = _isObjectJsDefault.default(other) ? other + '' : other;
    }
    if (typeof value != 'string') return value === 0 ? value : +value;
    value = _baseTrimJsDefault.default(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
exports.default = toNumber;

},{"./_baseTrim.js":"5i34k","./isObject.js":"1IOOk","./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5i34k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _trimmedEndIndexJs = require("./_trimmedEndIndex.js");
var _trimmedEndIndexJsDefault = parcelHelpers.interopDefault(_trimmedEndIndexJs);
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */ function baseTrim(string) {
    return string ? string.slice(0, _trimmedEndIndexJsDefault.default(string) + 1).replace(reTrimStart, '') : string;
}
exports.default = baseTrim;

},{"./_trimmedEndIndex.js":"1JxdM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1JxdM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match a single whitespace character. */ var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */ function trimmedEndIndex(string) {
    var index = string.length;
    while((index--) && reWhitespace.test(string.charAt(index)));
    return index;
}
exports.default = trimmedEndIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1IOOk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
exports.default = isObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"buIy2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_ARY_FLAG = 128;
/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */ function ary(func, n, guard) {
    n = guard ? undefined : n;
    n = func && n == null ? func.length : n;
    return _createWrapJsDefault.default(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}
exports.default = ary;

},{"./_createWrap.js":"b7iE3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b7iE3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSetDataJs = require("./_baseSetData.js");
var _baseSetDataJsDefault = parcelHelpers.interopDefault(_baseSetDataJs);
var _createBindJs = require("./_createBind.js");
var _createBindJsDefault = parcelHelpers.interopDefault(_createBindJs);
var _createCurryJs = require("./_createCurry.js");
var _createCurryJsDefault = parcelHelpers.interopDefault(_createCurryJs);
var _createHybridJs = require("./_createHybrid.js");
var _createHybridJsDefault = parcelHelpers.interopDefault(_createHybridJs);
var _createPartialJs = require("./_createPartial.js");
var _createPartialJsDefault = parcelHelpers.interopDefault(_createPartialJs);
var _getDataJs = require("./_getData.js");
var _getDataJsDefault = parcelHelpers.interopDefault(_getDataJs);
var _mergeDataJs = require("./_mergeData.js");
var _mergeDataJsDefault = parcelHelpers.interopDefault(_mergeDataJs);
var _setDataJs = require("./_setData.js");
var _setDataJsDefault = parcelHelpers.interopDefault(_setDataJs);
var _setWrapToStringJs = require("./_setWrapToString.js");
var _setWrapToStringJsDefault = parcelHelpers.interopDefault(_setWrapToStringJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
    if (!isBindKey && typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    var length = partials ? partials.length : 0;
    if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
    }
    ary = ary === undefined ? ary : nativeMax(_toIntegerJsDefault.default(ary), 0);
    arity = arity === undefined ? arity : _toIntegerJsDefault.default(arity);
    length -= holders ? holders.length : 0;
    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials, holdersRight = holders;
        partials = holders = undefined;
    }
    var data = isBindKey ? undefined : _getDataJsDefault.default(func);
    var newData = [
        func,
        bitmask,
        thisArg,
        partials,
        holders,
        partialsRight,
        holdersRight,
        argPos,
        ary,
        arity
    ];
    if (data) _mergeDataJsDefault.default(newData, data);
    func = newData[0];
    bitmask = newData[1];
    thisArg = newData[2];
    partials = newData[3];
    holders = newData[4];
    arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
    if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = _createBindJsDefault.default(func, bitmask, thisArg);
    else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = _createCurryJsDefault.default(func, bitmask, arity);
    else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = _createPartialJsDefault.default(func, bitmask, thisArg, partials);
    else result = _createHybridJsDefault.default.apply(undefined, newData);
    var setter = data ? _baseSetDataJsDefault.default : _setDataJsDefault.default;
    return _setWrapToStringJsDefault.default(setter(result, newData), func, bitmask);
}
exports.default = createWrap;

},{"./_baseSetData.js":"bhvEs","./_createBind.js":"j8Xll","./_createCurry.js":"5TtKD","./_createHybrid.js":"b2Yu6","./_createPartial.js":"hG0BH","./_getData.js":"iFEWx","./_mergeData.js":"1IPmT","./_setData.js":"knN8i","./_setWrapToString.js":"8mU0k","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bhvEs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _metaMapJs = require("./_metaMap.js");
var _metaMapJsDefault = parcelHelpers.interopDefault(_metaMapJs);
/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */ var baseSetData = !_metaMapJsDefault.default ? _identityJsDefault.default : function(func, data) {
    _metaMapJsDefault.default.set(func, data);
    return func;
};
exports.default = baseSetData;

},{"./identity.js":"fqqWQ","./_metaMap.js":"2zOxx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fqqWQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
exports.default = identity;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2zOxx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _weakMapJs = require("./_WeakMap.js");
var _weakMapJsDefault = parcelHelpers.interopDefault(_weakMapJs);
/** Used to store function metadata. */ var metaMap = _weakMapJsDefault.default && new _weakMapJsDefault.default;
exports.default = metaMap;

},{"./_WeakMap.js":"67tUV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"67tUV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var WeakMap1 = _getNativeJsDefault.default(_rootJsDefault.default, 'WeakMap');
exports.default = WeakMap1;

},{"./_getNative.js":"9Rjmo","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9Rjmo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsNativeJs = require("./_baseIsNative.js");
var _baseIsNativeJsDefault = parcelHelpers.interopDefault(_baseIsNativeJs);
var _getValueJs = require("./_getValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = _getValueJsDefault.default(object, key);
    return _baseIsNativeJsDefault.default(value) ? value : undefined;
}
exports.default = getNative;

},{"./_baseIsNative.js":"loJwm","./_getValue.js":"bFVBd","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"loJwm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isMaskedJs = require("./_isMasked.js");
var _isMaskedJsDefault = parcelHelpers.interopDefault(_isMaskedJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _toSourceJs = require("./_toSource.js");
var _toSourceJsDefault = parcelHelpers.interopDefault(_toSourceJs);
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!_isObjectJsDefault.default(value) || _isMaskedJsDefault.default(value)) return false;
    var pattern = _isFunctionJsDefault.default(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSourceJsDefault.default(value));
}
exports.default = baseIsNative;

},{"./isFunction.js":"flqKI","./_isMasked.js":"kBpQ6","./isObject.js":"1IOOk","./_toSource.js":"jExaW","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"flqKI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!_isObjectJsDefault.default(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTagJsDefault.default(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
exports.default = isFunction;

},{"./_baseGetTag.js":"aZJzp","./isObject.js":"1IOOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kBpQ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _coreJsDataJs = require("./_coreJsData.js");
var _coreJsDataJsDefault = parcelHelpers.interopDefault(_coreJsDataJs);
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(_coreJsDataJsDefault.default && _coreJsDataJsDefault.default.keys && _coreJsDataJsDefault.default.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
exports.default = isMasked;

},{"./_coreJsData.js":"aSgeD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aSgeD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Used to detect overreaching core-js shims. */ var coreJsData = _rootJsDefault.default['__core-js_shared__'];
exports.default = coreJsData;

},{"./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jExaW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {
        }
        try {
            return func + '';
        } catch (e) {
        }
    }
    return '';
}
exports.default = toSource;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bFVBd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
exports.default = getValue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j8Xll":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCtorJs = require("./_createCtor.js");
var _createCtorJsDefault = parcelHelpers.interopDefault(_createCtorJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createBind(func, bitmask, thisArg) {
    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = _createCtorJsDefault.default(func);
    function wrapper() {
        var fn = this && this !== _rootJsDefault.default && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
    }
    return wrapper;
}
exports.default = createBind;

},{"./_createCtor.js":"f2riC","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f2riC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCreateJs = require("./_baseCreate.js");
var _baseCreateJsDefault = parcelHelpers.interopDefault(_baseCreateJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */ function createCtor(Ctor) {
    return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch(args.length){
            case 0:
                return new Ctor;
            case 1:
                return new Ctor(args[0]);
            case 2:
                return new Ctor(args[0], args[1]);
            case 3:
                return new Ctor(args[0], args[1], args[2]);
            case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = _baseCreateJsDefault.default(Ctor.prototype), result = Ctor.apply(thisBinding, args);
        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return _isObjectJsDefault.default(result) ? result : thisBinding;
    };
}
exports.default = createCtor;

},{"./_baseCreate.js":"kSR8L","./isObject.js":"1IOOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kSR8L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/** Built-in value references. */ var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {
    }
    return function(proto) {
        if (!_isObjectJsDefault.default(proto)) return {
        };
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
exports.default = baseCreate;

},{"./isObject.js":"1IOOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5TtKD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _createCtorJs = require("./_createCtor.js");
var _createCtorJsDefault = parcelHelpers.interopDefault(_createCtorJs);
var _createHybridJs = require("./_createHybrid.js");
var _createHybridJsDefault = parcelHelpers.interopDefault(_createHybridJs);
var _createRecurryJs = require("./_createRecurry.js");
var _createRecurryJsDefault = parcelHelpers.interopDefault(_createRecurryJs);
var _getHolderJs = require("./_getHolder.js");
var _getHolderJsDefault = parcelHelpers.interopDefault(_getHolderJs);
var _replaceHoldersJs = require("./_replaceHolders.js");
var _replaceHoldersJsDefault = parcelHelpers.interopDefault(_replaceHoldersJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createCurry(func, bitmask, arity) {
    var Ctor = _createCtorJsDefault.default(func);
    function wrapper() {
        var length = arguments.length, args = Array(length), index = length, placeholder = _getHolderJsDefault.default(wrapper);
        while(index--)args[index] = arguments[index];
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : _replaceHoldersJsDefault.default(args, placeholder);
        length -= holders.length;
        if (length < arity) return _createRecurryJsDefault.default(func, bitmask, _createHybridJsDefault.default, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        var fn = this && this !== _rootJsDefault.default && this instanceof wrapper ? Ctor : func;
        return _applyJsDefault.default(fn, this, args);
    }
    return wrapper;
}
exports.default = createCurry;

},{"./_apply.js":"jcowS","./_createCtor.js":"f2riC","./_createHybrid.js":"b2Yu6","./_createRecurry.js":"kP0YG","./_getHolder.js":"9cElI","./_replaceHolders.js":"i9cpa","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jcowS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
exports.default = apply;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b2Yu6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _composeArgsJs = require("./_composeArgs.js");
var _composeArgsJsDefault = parcelHelpers.interopDefault(_composeArgsJs);
var _composeArgsRightJs = require("./_composeArgsRight.js");
var _composeArgsRightJsDefault = parcelHelpers.interopDefault(_composeArgsRightJs);
var _countHoldersJs = require("./_countHolders.js");
var _countHoldersJsDefault = parcelHelpers.interopDefault(_countHoldersJs);
var _createCtorJs = require("./_createCtor.js");
var _createCtorJsDefault = parcelHelpers.interopDefault(_createCtorJs);
var _createRecurryJs = require("./_createRecurry.js");
var _createRecurryJsDefault = parcelHelpers.interopDefault(_createRecurryJs);
var _getHolderJs = require("./_getHolder.js");
var _getHolderJsDefault = parcelHelpers.interopDefault(_getHolderJs);
var _reorderJs = require("./_reorder.js");
var _reorderJsDefault = parcelHelpers.interopDefault(_reorderJs);
var _replaceHoldersJs = require("./_replaceHolders.js");
var _replaceHoldersJsDefault = parcelHelpers.interopDefault(_replaceHoldersJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_ARY_FLAG = 128, WRAP_FLIP_FLAG = 512;
/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : _createCtorJsDefault.default(func);
    function wrapper() {
        var length = arguments.length, args = Array(length), index = length;
        while(index--)args[index] = arguments[index];
        if (isCurried) var placeholder = _getHolderJsDefault.default(wrapper), holdersCount = _countHoldersJsDefault.default(args, placeholder);
        if (partials) args = _composeArgsJsDefault.default(args, partials, holders, isCurried);
        if (partialsRight) args = _composeArgsRightJsDefault.default(args, partialsRight, holdersRight, isCurried);
        length -= holdersCount;
        if (isCurried && length < arity) {
            var newHolders = _replaceHoldersJsDefault.default(args, placeholder);
            return _createRecurryJsDefault.default(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
        length = args.length;
        if (argPos) args = _reorderJsDefault.default(args, argPos);
        else if (isFlip && length > 1) args.reverse();
        if (isAry && ary < length) args.length = ary;
        if (this && this !== _rootJsDefault.default && this instanceof wrapper) fn = Ctor || _createCtorJsDefault.default(fn);
        return fn.apply(thisBinding, args);
    }
    return wrapper;
}
exports.default = createHybrid;

},{"./_composeArgs.js":"brlOv","./_composeArgsRight.js":"7syVm","./_countHolders.js":"k1ocd","./_createCtor.js":"f2riC","./_createRecurry.js":"kP0YG","./_getHolder.js":"9cElI","./_reorder.js":"31ulZ","./_replaceHolders.js":"i9cpa","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"brlOv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */ function composeArgs(args, partials, holders, isCurried) {
    var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
    while((++leftIndex) < leftLength)result[leftIndex] = partials[leftIndex];
    while((++argsIndex) < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
    while(rangeLength--)result[leftIndex++] = args[argsIndex++];
    return result;
}
exports.default = composeArgs;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7syVm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */ function composeArgsRight(args, partials, holders, isCurried) {
    var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
    while((++argsIndex) < rangeLength)result[argsIndex] = args[argsIndex];
    var offset = argsIndex;
    while((++rightIndex) < rightLength)result[offset + rightIndex] = partials[rightIndex];
    while((++holdersIndex) < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
    return result;
}
exports.default = composeArgsRight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k1ocd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */ function countHolders(array, placeholder) {
    var length = array.length, result = 0;
    while(length--)if (array[length] === placeholder) ++result;
    return result;
}
exports.default = countHolders;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kP0YG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isLaziableJs = require("./_isLaziable.js");
var _isLaziableJsDefault = parcelHelpers.interopDefault(_isLaziableJs);
var _setDataJs = require("./_setData.js");
var _setDataJsDefault = parcelHelpers.interopDefault(_setDataJs);
var _setWrapToStringJs = require("./_setWrapToString.js");
var _setWrapToStringJsDefault = parcelHelpers.interopDefault(_setWrapToStringJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64;
/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
    bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
    var newData = [
        func,
        bitmask,
        thisArg,
        newPartials,
        newHolders,
        newPartialsRight,
        newHoldersRight,
        argPos,
        ary,
        arity
    ];
    var result = wrapFunc.apply(undefined, newData);
    if (_isLaziableJsDefault.default(func)) _setDataJsDefault.default(result, newData);
    result.placeholder = placeholder;
    return _setWrapToStringJsDefault.default(result, func, bitmask);
}
exports.default = createRecurry;

},{"./_isLaziable.js":"juOL3","./_setData.js":"knN8i","./_setWrapToString.js":"8mU0k","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"juOL3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _getDataJs = require("./_getData.js");
var _getDataJsDefault = parcelHelpers.interopDefault(_getDataJs);
var _getFuncNameJs = require("./_getFuncName.js");
var _getFuncNameJsDefault = parcelHelpers.interopDefault(_getFuncNameJs);
var _wrapperLodashJs = require("./wrapperLodash.js");
var _wrapperLodashJsDefault = parcelHelpers.interopDefault(_wrapperLodashJs);
/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */ function isLaziable(func) {
    var funcName = _getFuncNameJsDefault.default(func), other = _wrapperLodashJsDefault.default[funcName];
    if (typeof other != 'function' || !(funcName in _lazyWrapperJsDefault.default.prototype)) return false;
    if (func === other) return true;
    var data = _getDataJsDefault.default(other);
    return !!data && func === data[0];
}
exports.default = isLaziable;

},{"./_LazyWrapper.js":"kpKkJ","./_getData.js":"iFEWx","./_getFuncName.js":"bIqUU","./wrapperLodash.js":"4HPB1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kpKkJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCreateJs = require("./_baseCreate.js");
var _baseCreateJsDefault = parcelHelpers.interopDefault(_baseCreateJs);
var _baseLodashJs = require("./_baseLodash.js");
var _baseLodashJsDefault = parcelHelpers.interopDefault(_baseLodashJs);
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */ function LazyWrapper(value) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__dir__ = 1;
    this.__filtered__ = false;
    this.__iteratees__ = [];
    this.__takeCount__ = MAX_ARRAY_LENGTH;
    this.__views__ = [];
}
// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = _baseCreateJsDefault.default(_baseLodashJsDefault.default.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;
exports.default = LazyWrapper;

},{"./_baseCreate.js":"kSR8L","./_baseLodash.js":"ggG4k","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ggG4k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */ function baseLodash() {
// No operation performed.
}
exports.default = baseLodash;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iFEWx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _metaMapJs = require("./_metaMap.js");
var _metaMapJsDefault = parcelHelpers.interopDefault(_metaMapJs);
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */ var getData = !_metaMapJsDefault.default ? _noopJsDefault.default : function(func) {
    return _metaMapJsDefault.default.get(func);
};
exports.default = getData;

},{"./_metaMap.js":"2zOxx","./noop.js":"fQpra","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fQpra":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */ function noop() {
// No operation performed.
}
exports.default = noop;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bIqUU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _realNamesJs = require("./_realNames.js");
var _realNamesJsDefault = parcelHelpers.interopDefault(_realNamesJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */ function getFuncName(func) {
    var result = func.name + '', array = _realNamesJsDefault.default[result], length = hasOwnProperty.call(_realNamesJsDefault.default, result) ? array.length : 0;
    while(length--){
        var data = array[length], otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) return data.name;
    }
    return result;
}
exports.default = getFuncName;

},{"./_realNames.js":"agJJS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"agJJS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to lookup unminified function names. */ var realNames = {
};
exports.default = realNames;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4HPB1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _lodashWrapperJs = require("./_LodashWrapper.js");
var _lodashWrapperJsDefault = parcelHelpers.interopDefault(_lodashWrapperJs);
var _baseLodashJs = require("./_baseLodash.js");
var _baseLodashJsDefault = parcelHelpers.interopDefault(_baseLodashJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
var _wrapperCloneJs = require("./_wrapperClone.js");
var _wrapperCloneJsDefault = parcelHelpers.interopDefault(_wrapperCloneJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */ function lodash(value) {
    if (_isObjectLikeJsDefault.default(value) && !_isArrayJsDefault.default(value) && !(value instanceof _lazyWrapperJsDefault.default)) {
        if (value instanceof _lodashWrapperJsDefault.default) return value;
        if (hasOwnProperty.call(value, '__wrapped__')) return _wrapperCloneJsDefault.default(value);
    }
    return new _lodashWrapperJsDefault.default(value);
}
// Ensure wrappers are instances of `baseLodash`.
lodash.prototype = _baseLodashJsDefault.default.prototype;
lodash.prototype.constructor = lodash;
exports.default = lodash;

},{"./_LazyWrapper.js":"kpKkJ","./_LodashWrapper.js":"6ZE49","./_baseLodash.js":"ggG4k","./isArray.js":"aM5De","./isObjectLike.js":"KrkRc","./_wrapperClone.js":"fVp2w","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6ZE49":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCreateJs = require("./_baseCreate.js");
var _baseCreateJsDefault = parcelHelpers.interopDefault(_baseCreateJs);
var _baseLodashJs = require("./_baseLodash.js");
var _baseLodashJsDefault = parcelHelpers.interopDefault(_baseLodashJs);
/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */ function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__chain__ = !!chainAll;
    this.__index__ = 0;
    this.__values__ = undefined;
}
LodashWrapper.prototype = _baseCreateJsDefault.default(_baseLodashJsDefault.default.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;
exports.default = LodashWrapper;

},{"./_baseCreate.js":"kSR8L","./_baseLodash.js":"ggG4k","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fVp2w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _lodashWrapperJs = require("./_LodashWrapper.js");
var _lodashWrapperJsDefault = parcelHelpers.interopDefault(_lodashWrapperJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */ function wrapperClone(wrapper) {
    if (wrapper instanceof _lazyWrapperJsDefault.default) return wrapper.clone();
    var result = new _lodashWrapperJsDefault.default(wrapper.__wrapped__, wrapper.__chain__);
    result.__actions__ = _copyArrayJsDefault.default(wrapper.__actions__);
    result.__index__ = wrapper.__index__;
    result.__values__ = wrapper.__values__;
    return result;
}
exports.default = wrapperClone;

},{"./_LazyWrapper.js":"kpKkJ","./_LodashWrapper.js":"6ZE49","./_copyArray.js":"aKKbc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aKKbc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while((++index) < length)array[index] = source[index];
    return array;
}
exports.default = copyArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"knN8i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSetDataJs = require("./_baseSetData.js");
var _baseSetDataJsDefault = parcelHelpers.interopDefault(_baseSetDataJs);
var _shortOutJs = require("./_shortOut.js");
var _shortOutJsDefault = parcelHelpers.interopDefault(_shortOutJs);
/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */ var setData = _shortOutJsDefault.default(_baseSetDataJsDefault.default);
exports.default = setData;

},{"./_baseSetData.js":"bhvEs","./_shortOut.js":"hZSxd","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hZSxd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */ function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if ((++count) >= HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
exports.default = shortOut;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8mU0k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWrapDetailsJs = require("./_getWrapDetails.js");
var _getWrapDetailsJsDefault = parcelHelpers.interopDefault(_getWrapDetailsJs);
var _insertWrapDetailsJs = require("./_insertWrapDetails.js");
var _insertWrapDetailsJsDefault = parcelHelpers.interopDefault(_insertWrapDetailsJs);
var _setToStringJs = require("./_setToString.js");
var _setToStringJsDefault = parcelHelpers.interopDefault(_setToStringJs);
var _updateWrapDetailsJs = require("./_updateWrapDetails.js");
var _updateWrapDetailsJsDefault = parcelHelpers.interopDefault(_updateWrapDetailsJs);
/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */ function setWrapToString(wrapper, reference, bitmask) {
    var source = reference + '';
    return _setToStringJsDefault.default(wrapper, _insertWrapDetailsJsDefault.default(source, _updateWrapDetailsJsDefault.default(_getWrapDetailsJsDefault.default(source), bitmask)));
}
exports.default = setWrapToString;

},{"./_getWrapDetails.js":"4WozI","./_insertWrapDetails.js":"eFEM3","./_setToString.js":"bTzcT","./_updateWrapDetails.js":"9iih8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4WozI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match wrap detail comments. */ var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */ function getWrapDetails(source) {
    var match = source.match(reWrapDetails);
    return match ? match[1].split(reSplitDetails) : [];
}
exports.default = getWrapDetails;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eFEM3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */ function insertWrapDetails(source, details) {
    var length = details.length;
    if (!length) return source;
    var lastIndex = length - 1;
    details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
    details = details.join(length > 2 ? ', ' : ' ');
    return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}
exports.default = insertWrapDetails;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bTzcT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSetToStringJs = require("./_baseSetToString.js");
var _baseSetToStringJsDefault = parcelHelpers.interopDefault(_baseSetToStringJs);
var _shortOutJs = require("./_shortOut.js");
var _shortOutJsDefault = parcelHelpers.interopDefault(_shortOutJs);
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var setToString = _shortOutJsDefault.default(_baseSetToStringJsDefault.default);
exports.default = setToString;

},{"./_baseSetToString.js":"9Be3d","./_shortOut.js":"hZSxd","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9Be3d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _definePropertyJs = require("./_defineProperty.js");
var _definePropertyJsDefault = parcelHelpers.interopDefault(_definePropertyJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var baseSetToString = !_definePropertyJsDefault.default ? _identityJsDefault.default : function(func, string) {
    return _definePropertyJsDefault.default(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': _constantJsDefault.default(string),
        'writable': true
    });
};
exports.default = baseSetToString;

},{"./constant.js":"izIhX","./_defineProperty.js":"88hUg","./identity.js":"fqqWQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"izIhX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */ function constant(value) {
    return function() {
        return value;
    };
}
exports.default = constant;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"88hUg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var defineProperty = function() {
    try {
        var func = _getNativeJsDefault.default(Object, 'defineProperty');
        func({
        }, '', {
        });
        return func;
    } catch (e) {
    }
}();
exports.default = defineProperty;

},{"./_getNative.js":"9Rjmo","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9iih8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _arrayIncludesJs = require("./_arrayIncludes.js");
var _arrayIncludesJsDefault = parcelHelpers.interopDefault(_arrayIncludesJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
/** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
    [
        'ary',
        WRAP_ARY_FLAG
    ],
    [
        'bind',
        WRAP_BIND_FLAG
    ],
    [
        'bindKey',
        WRAP_BIND_KEY_FLAG
    ],
    [
        'curry',
        WRAP_CURRY_FLAG
    ],
    [
        'curryRight',
        WRAP_CURRY_RIGHT_FLAG
    ],
    [
        'flip',
        WRAP_FLIP_FLAG
    ],
    [
        'partial',
        WRAP_PARTIAL_FLAG
    ],
    [
        'partialRight',
        WRAP_PARTIAL_RIGHT_FLAG
    ],
    [
        'rearg',
        WRAP_REARG_FLAG
    ]
];
/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */ function updateWrapDetails(details, bitmask) {
    _arrayEachJsDefault.default(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if (bitmask & pair[1] && !_arrayIncludesJsDefault.default(details, value)) details.push(value);
    });
    return details.sort();
}
exports.default = updateWrapDetails;

},{"./_arrayEach.js":"6ICgZ","./_arrayIncludes.js":"dNWOV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6ICgZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while((++index) < length){
        if (iteratee(array[index], index, array) === false) break;
    }
    return array;
}
exports.default = arrayEach;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dNWOV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIndexOfJs = require("./_baseIndexOf.js");
var _baseIndexOfJsDefault = parcelHelpers.interopDefault(_baseIndexOfJs);
/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && _baseIndexOfJsDefault.default(array, value, 0) > -1;
}
exports.default = arrayIncludes;

},{"./_baseIndexOf.js":"4m4vH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4m4vH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFindIndexJs = require("./_baseFindIndex.js");
var _baseFindIndexJsDefault = parcelHelpers.interopDefault(_baseFindIndexJs);
var _baseIsNaNJs = require("./_baseIsNaN.js");
var _baseIsNaNJsDefault = parcelHelpers.interopDefault(_baseIsNaNJs);
var _strictIndexOfJs = require("./_strictIndexOf.js");
var _strictIndexOfJsDefault = parcelHelpers.interopDefault(_strictIndexOfJs);
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseIndexOf(array, value, fromIndex) {
    return value === value ? _strictIndexOfJsDefault.default(array, value, fromIndex) : _baseFindIndexJsDefault.default(array, _baseIsNaNJsDefault.default, fromIndex);
}
exports.default = baseIndexOf;

},{"./_baseFindIndex.js":"21KN9","./_baseIsNaN.js":"65btk","./_strictIndexOf.js":"9JAVJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"21KN9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while(fromRight ? index-- : (++index) < length){
        if (predicate(array[index], index, array)) return index;
    }
    return -1;
}
exports.default = baseFindIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"65btk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */ function baseIsNaN(value) {
    return value !== value;
}
exports.default = baseIsNaN;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9JAVJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length = array.length;
    while((++index) < length){
        if (array[index] === value) return index;
    }
    return -1;
}
exports.default = strictIndexOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9cElI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */ function getHolder(func) {
    var object = func;
    return object.placeholder;
}
exports.default = getHolder;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"31ulZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */ function reorder(array, indexes) {
    var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = _copyArrayJsDefault.default(array);
    while(length--){
        var index = indexes[length];
        array[length] = _isIndexJsDefault.default(index, arrLength) ? oldArray[index] : undefined;
    }
    return array;
}
exports.default = reorder;

},{"./_copyArray.js":"aKKbc","./_isIndex.js":"gfLoM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gfLoM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
exports.default = isIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i9cpa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used as the internal argument placeholder. */ var PLACEHOLDER = '__lodash_placeholder__';
/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */ function replaceHolders(array, placeholder) {
    var index = -1, length = array.length, resIndex = 0, result = [];
    while((++index) < length){
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
        }
    }
    return result;
}
exports.default = replaceHolders;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hG0BH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _createCtorJs = require("./_createCtor.js");
var _createCtorJsDefault = parcelHelpers.interopDefault(_createCtorJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */ function createPartial(func, bitmask, thisArg, partials) {
    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = _createCtorJsDefault.default(func);
    function wrapper() {
        var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== _rootJsDefault.default && this instanceof wrapper ? Ctor : func;
        while((++leftIndex) < leftLength)args[leftIndex] = partials[leftIndex];
        while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
        return _applyJsDefault.default(fn, isBind ? thisArg : this, args);
    }
    return wrapper;
}
exports.default = createPartial;

},{"./_apply.js":"jcowS","./_createCtor.js":"f2riC","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1IPmT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _composeArgsJs = require("./_composeArgs.js");
var _composeArgsJsDefault = parcelHelpers.interopDefault(_composeArgsJs);
var _composeArgsRightJs = require("./_composeArgsRight.js");
var _composeArgsRightJsDefault = parcelHelpers.interopDefault(_composeArgsRightJs);
var _replaceHoldersJs = require("./_replaceHolders.js");
var _replaceHoldersJsDefault = parcelHelpers.interopDefault(_replaceHoldersJs);
/** Used as the internal argument placeholder. */ var PLACEHOLDER = '__lodash_placeholder__';
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */ function mergeData(data, source) {
    var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
    var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
    // Exit early if metadata can't be merged.
    if (!(isCommon || isCombo)) return data;
    // Use source `thisArg` if available.
    if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
    }
    // Compose partial arguments.
    var value = source[3];
    if (value) {
        var partials = data[3];
        data[3] = partials ? _composeArgsJsDefault.default(partials, value, source[4]) : value;
        data[4] = partials ? _replaceHoldersJsDefault.default(data[3], PLACEHOLDER) : source[4];
    }
    // Compose partial right arguments.
    value = source[5];
    if (value) {
        partials = data[5];
        data[5] = partials ? _composeArgsRightJsDefault.default(partials, value, source[6]) : value;
        data[6] = partials ? _replaceHoldersJsDefault.default(data[5], PLACEHOLDER) : source[6];
    }
    // Use source `argPos` if available.
    value = source[7];
    if (value) data[7] = value;
    // Use source `ary` if it's smaller.
    if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    // Use source `arity` if one is not provided.
    if (data[9] == null) data[9] = source[9];
    // Use source `func` and merge bitmasks.
    data[0] = source[0];
    data[1] = newBitmask;
    return data;
}
exports.default = mergeData;

},{"./_composeArgs.js":"brlOv","./_composeArgsRight.js":"7syVm","./_replaceHolders.js":"i9cpa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lp4KX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignValueJs = require("./_assignValue.js");
var _assignValueJsDefault = parcelHelpers.interopDefault(_assignValueJs);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _createAssignerJs = require("./_createAssigner.js");
var _createAssignerJsDefault = parcelHelpers.interopDefault(_createAssignerJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */ var assign = _createAssignerJsDefault.default(function(object, source) {
    if (_isPrototypeJsDefault.default(source) || _isArrayLikeJsDefault.default(source)) {
        _copyObjectJsDefault.default(source, _keysJsDefault.default(source), object);
        return;
    }
    for(var key in source)if (hasOwnProperty.call(source, key)) _assignValueJsDefault.default(object, key, source[key]);
});
exports.default = assign;

},{"./_assignValue.js":"1zOlb","./_copyObject.js":"iJJjY","./_createAssigner.js":"7JrYL","./isArrayLike.js":"5oD0E","./_isPrototype.js":"bP9GG","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1zOlb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && _eqJsDefault.default(objValue, value)) || value === undefined && !(key in object)) _baseAssignValueJsDefault.default(object, key, value);
}
exports.default = assignValue;

},{"./_baseAssignValue.js":"9nj6E","./eq.js":"1PtGj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9nj6E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _definePropertyJs = require("./_defineProperty.js");
var _definePropertyJsDefault = parcelHelpers.interopDefault(_definePropertyJs);
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _definePropertyJsDefault.default) _definePropertyJsDefault.default(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
    });
    else object[key] = value;
}
exports.default = baseAssignValue;

},{"./_defineProperty.js":"88hUg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1PtGj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
exports.default = eq;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iJJjY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignValueJs = require("./_assignValue.js");
var _assignValueJsDefault = parcelHelpers.interopDefault(_assignValueJs);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {
    });
    var index = -1, length = props.length;
    while((++index) < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) _baseAssignValueJsDefault.default(object, key, newValue);
        else _assignValueJsDefault.default(object, key, newValue);
    }
    return object;
}
exports.default = copyObject;

},{"./_assignValue.js":"1zOlb","./_baseAssignValue.js":"9nj6E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7JrYL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */ function createAssigner(assigner) {
    return _baseRestJsDefault.default(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && _isIterateeCallJsDefault.default(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
        }
        object = Object(object);
        while((++index) < length){
            var source = sources[index];
            if (source) assigner(object, source, index, customizer);
        }
        return object;
    });
}
exports.default = createAssigner;

},{"./_baseRest.js":"6GMnO","./_isIterateeCall.js":"aHCs0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6GMnO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _overRestJs = require("./_overRest.js");
var _overRestJsDefault = parcelHelpers.interopDefault(_overRestJs);
var _setToStringJs = require("./_setToString.js");
var _setToStringJsDefault = parcelHelpers.interopDefault(_setToStringJs);
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */ function baseRest(func, start) {
    return _setToStringJsDefault.default(_overRestJsDefault.default(func, start, _identityJsDefault.default), func + '');
}
exports.default = baseRest;

},{"./identity.js":"fqqWQ","./_overRest.js":"5o2Z1","./_setToString.js":"bTzcT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5o2Z1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */ function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while((++index) < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while((++index) < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return _applyJsDefault.default(func, this, otherArgs);
    };
}
exports.default = overRest;

},{"./_apply.js":"jcowS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aHCs0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */ function isIterateeCall(value, index, object) {
    if (!_isObjectJsDefault.default(object)) return false;
    var type = typeof index;
    if (type == 'number' ? _isArrayLikeJsDefault.default(object) && _isIndexJsDefault.default(index, object.length) : type == 'string' && index in object) return _eqJsDefault.default(object[index], value);
    return false;
}
exports.default = isIterateeCall;

},{"./eq.js":"1PtGj","./isArrayLike.js":"5oD0E","./_isIndex.js":"gfLoM","./isObject.js":"1IOOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5oD0E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && _isLengthJsDefault.default(value.length) && !_isFunctionJsDefault.default(value);
}
exports.default = isArrayLike;

},{"./isFunction.js":"flqKI","./isLength.js":"8LHjk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8LHjk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
exports.default = isLength;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bP9GG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
exports.default = isPrototype;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f9Mo9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeKeysJs = require("./_arrayLikeKeys.js");
var _arrayLikeKeysJsDefault = parcelHelpers.interopDefault(_arrayLikeKeysJs);
var _baseKeysJs = require("./_baseKeys.js");
var _baseKeysJsDefault = parcelHelpers.interopDefault(_baseKeysJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return _isArrayLikeJsDefault.default(object) ? _arrayLikeKeysJsDefault.default(object) : _baseKeysJsDefault.default(object);
}
exports.default = keys;

},{"./_arrayLikeKeys.js":"gIe4N","./_baseKeys.js":"1u7E7","./isArrayLike.js":"5oD0E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gIe4N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseTimesJs = require("./_baseTimes.js");
var _baseTimesJsDefault = parcelHelpers.interopDefault(_baseTimesJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = _isArrayJsDefault.default(value), isArg = !isArr && _isArgumentsJsDefault.default(value), isBuff = !isArr && !isArg && _isBufferJsDefault.default(value), isType = !isArr && !isArg && !isBuff && _isTypedArrayJsDefault.default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? _baseTimesJsDefault.default(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    _isIndexJsDefault.default(key, length)))) result.push(key);
    return result;
}
exports.default = arrayLikeKeys;

},{"./_baseTimes.js":"dPjSj","./isArguments.js":"bCq5F","./isArray.js":"aM5De","./isBuffer.js":"5zLdt","./_isIndex.js":"gfLoM","./isTypedArray.js":"4zD9H","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dPjSj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while((++index) < n)result[index] = iteratee(index);
    return result;
}
exports.default = baseTimes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bCq5F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsArgumentsJs = require("./_baseIsArguments.js");
var _baseIsArgumentsJsDefault = parcelHelpers.interopDefault(_baseIsArgumentsJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = _baseIsArgumentsJsDefault.default(function() {
    return arguments;
}()) ? _baseIsArgumentsJsDefault.default : function(value) {
    return _isObjectLikeJsDefault.default(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
exports.default = isArguments;

},{"./_baseIsArguments.js":"9uafU","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9uafU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == argsTag;
}
exports.default = baseIsArguments;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5zLdt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
var _stubFalseJs = require("./stubFalse.js");
var _stubFalseJsDefault = parcelHelpers.interopDefault(_stubFalseJs);
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? _rootJsDefault.default.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || _stubFalseJsDefault.default;
exports.default = isBuffer;

},{"./_root.js":"bVBU6","./stubFalse.js":"2zFwJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2zFwJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
exports.default = stubFalse;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4zD9H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsTypedArrayJs = require("./_baseIsTypedArray.js");
var _baseIsTypedArrayJsDefault = parcelHelpers.interopDefault(_baseIsTypedArrayJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsTypedArray = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? _baseUnaryJsDefault.default(nodeIsTypedArray) : _baseIsTypedArrayJsDefault.default;
exports.default = isTypedArray;

},{"./_baseIsTypedArray.js":"jJRTn","./_baseUnary.js":"3cdEI","./_nodeUtil.js":"cnNtI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jJRTn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return _isObjectLikeJsDefault.default(value) && _isLengthJsDefault.default(value.length) && !!typedArrayTags[_baseGetTagJsDefault.default(value)];
}
exports.default = baseIsTypedArray;

},{"./_baseGetTag.js":"aZJzp","./isLength.js":"8LHjk","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3cdEI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
exports.default = baseUnary;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cnNtI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _freeGlobalJs = require("./_freeGlobal.js");
var _freeGlobalJsDefault = parcelHelpers.interopDefault(_freeGlobalJs);
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && _freeGlobalJsDefault.default.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {
    }
}();
exports.default = nodeUtil;

},{"./_freeGlobal.js":"bwA9E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1u7E7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
var _nativeKeysJs = require("./_nativeKeys.js");
var _nativeKeysJsDefault = parcelHelpers.interopDefault(_nativeKeysJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!_isPrototypeJsDefault.default(object)) return _nativeKeysJsDefault.default(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
exports.default = baseKeys;

},{"./_isPrototype.js":"bP9GG","./_nativeKeys.js":"j38Dm","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j38Dm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overArgJs = require("./_overArg.js");
var _overArgJsDefault = parcelHelpers.interopDefault(_overArgJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = _overArgJsDefault.default(Object.keys, Object);
exports.default = nativeKeys;

},{"./_overArg.js":"4pfuD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4pfuD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
exports.default = overArg;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8GeoO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _createAssignerJs = require("./_createAssigner.js");
var _createAssignerJsDefault = parcelHelpers.interopDefault(_createAssignerJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */ var assignIn = _createAssignerJsDefault.default(function(object, source) {
    _copyObjectJsDefault.default(source, _keysInJsDefault.default(source), object);
});
exports.default = assignIn;

},{"./_copyObject.js":"iJJjY","./_createAssigner.js":"7JrYL","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dwsZb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeKeysJs = require("./_arrayLikeKeys.js");
var _arrayLikeKeysJsDefault = parcelHelpers.interopDefault(_arrayLikeKeysJs);
var _baseKeysInJs = require("./_baseKeysIn.js");
var _baseKeysInJsDefault = parcelHelpers.interopDefault(_baseKeysInJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return _isArrayLikeJsDefault.default(object) ? _arrayLikeKeysJsDefault.default(object, true) : _baseKeysInJsDefault.default(object);
}
exports.default = keysIn;

},{"./_arrayLikeKeys.js":"gIe4N","./_baseKeysIn.js":"73Lre","./isArrayLike.js":"5oD0E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"73Lre":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
var _nativeKeysInJs = require("./_nativeKeysIn.js");
var _nativeKeysInJsDefault = parcelHelpers.interopDefault(_nativeKeysInJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!_isObjectJsDefault.default(object)) return _nativeKeysInJsDefault.default(object);
    var isProto = _isPrototypeJsDefault.default(object), result = [];
    for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
exports.default = baseKeysIn;

},{"./isObject.js":"1IOOk","./_isPrototype.js":"bP9GG","./_nativeKeysIn.js":"fCN3u","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fCN3u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
exports.default = nativeKeysIn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e4uIW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _createAssignerJs = require("./_createAssigner.js");
var _createAssignerJsDefault = parcelHelpers.interopDefault(_createAssignerJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * This method is like `_.assignIn` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extendWith
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignInWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */ var assignInWith = _createAssignerJsDefault.default(function(object, source, srcIndex, customizer) {
    _copyObjectJsDefault.default(source, _keysInJsDefault.default(source), object, customizer);
});
exports.default = assignInWith;

},{"./_copyObject.js":"iJJjY","./_createAssigner.js":"7JrYL","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1UrHD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _createAssignerJs = require("./_createAssigner.js");
var _createAssignerJsDefault = parcelHelpers.interopDefault(_createAssignerJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * This method is like `_.assign` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignInWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */ var assignWith = _createAssignerJsDefault.default(function(object, source, srcIndex, customizer) {
    _copyObjectJsDefault.default(source, _keysJsDefault.default(source), object, customizer);
});
exports.default = assignWith;

},{"./_copyObject.js":"iJJjY","./_createAssigner.js":"7JrYL","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7dHgP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAtJs = require("./_baseAt.js");
var _baseAtJsDefault = parcelHelpers.interopDefault(_baseAtJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
/**
 * Creates an array of values corresponding to `paths` of `object`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Array} Returns the picked values.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
 *
 * _.at(object, ['a[0].b.c', 'a[1]']);
 * // => [3, 4]
 */ var at = _flatRestJsDefault.default(_baseAtJsDefault.default);
exports.default = at;

},{"./_baseAt.js":"aMz8r","./_flatRest.js":"iG3bQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aMz8r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getJs = require("./get.js");
var _getJsDefault = parcelHelpers.interopDefault(_getJs);
/**
 * The base implementation of `_.at` without support for individual paths.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {string[]} paths The property paths to pick.
 * @returns {Array} Returns the picked elements.
 */ function baseAt(object, paths) {
    var index = -1, length = paths.length, result = Array(length), skip = object == null;
    while((++index) < length)result[index] = skip ? undefined : _getJsDefault.default(object, paths[index]);
    return result;
}
exports.default = baseAt;

},{"./get.js":"zh4Vj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"zh4Vj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetJs = require("./_baseGet.js");
var _baseGetJsDefault = parcelHelpers.interopDefault(_baseGetJs);
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */ function get(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGetJsDefault.default(object, path);
    return result === undefined ? defaultValue : result;
}
exports.default = get;

},{"./_baseGet.js":"h5I8S","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h5I8S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */ function baseGet(object, path) {
    path = _castPathJsDefault.default(path, object);
    var index = 0, length = path.length;
    while(object != null && index < length)object = object[_toKeyJsDefault.default(path[index++])];
    return index && index == length ? object : undefined;
}
exports.default = baseGet;

},{"./_castPath.js":"jrUMT","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jrUMT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isKeyJs = require("./_isKey.js");
var _isKeyJsDefault = parcelHelpers.interopDefault(_isKeyJs);
var _stringToPathJs = require("./_stringToPath.js");
var _stringToPathJsDefault = parcelHelpers.interopDefault(_stringToPathJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */ function castPath(value, object) {
    if (_isArrayJsDefault.default(value)) return value;
    return _isKeyJsDefault.default(value, object) ? [
        value
    ] : _stringToPathJsDefault.default(_toStringJsDefault.default(value));
}
exports.default = castPath;

},{"./isArray.js":"aM5De","./_isKey.js":"1Dw0A","./_stringToPath.js":"jYeOe","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1Dw0A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */ function isKey(value, object) {
    if (_isArrayJsDefault.default(value)) return false;
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || _isSymbolJsDefault.default(value)) return true;
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
exports.default = isKey;

},{"./isArray.js":"aM5De","./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jYeOe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _memoizeCappedJs = require("./_memoizeCapped.js");
var _memoizeCappedJsDefault = parcelHelpers.interopDefault(_memoizeCappedJs);
/** Used to match property names within property paths. */ var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var stringToPath = _memoizeCappedJsDefault.default(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */ ) result.push('');
    string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
});
exports.default = stringToPath;

},{"./_memoizeCapped.js":"dnUiR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dnUiR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _memoizeJs = require("./memoize.js");
var _memoizeJsDefault = parcelHelpers.interopDefault(_memoizeJs);
/** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function memoizeCapped(func) {
    var result = _memoizeJsDefault.default(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
exports.default = memoizeCapped;

},{"./memoize.js":"1d29b","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1d29b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mapCacheJs = require("./_MapCache.js");
var _mapCacheJsDefault = parcelHelpers.interopDefault(_mapCacheJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new (memoize.Cache || _mapCacheJsDefault.default);
    return memoized;
}
// Expose `MapCache`.
memoize.Cache = _mapCacheJsDefault.default;
exports.default = memoize;

},{"./_MapCache.js":"kj55V","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kj55V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mapCacheClearJs = require("./_mapCacheClear.js");
var _mapCacheClearJsDefault = parcelHelpers.interopDefault(_mapCacheClearJs);
var _mapCacheDeleteJs = require("./_mapCacheDelete.js");
var _mapCacheDeleteJsDefault = parcelHelpers.interopDefault(_mapCacheDeleteJs);
var _mapCacheGetJs = require("./_mapCacheGet.js");
var _mapCacheGetJsDefault = parcelHelpers.interopDefault(_mapCacheGetJs);
var _mapCacheHasJs = require("./_mapCacheHas.js");
var _mapCacheHasJsDefault = parcelHelpers.interopDefault(_mapCacheHasJs);
var _mapCacheSetJs = require("./_mapCacheSet.js");
var _mapCacheSetJsDefault = parcelHelpers.interopDefault(_mapCacheSetJs);
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClearJsDefault.default;
MapCache.prototype['delete'] = _mapCacheDeleteJsDefault.default;
MapCache.prototype.get = _mapCacheGetJsDefault.default;
MapCache.prototype.has = _mapCacheHasJsDefault.default;
MapCache.prototype.set = _mapCacheSetJsDefault.default;
exports.default = MapCache;

},{"./_mapCacheClear.js":"8FFqL","./_mapCacheDelete.js":"hazkx","./_mapCacheGet.js":"ljBn1","./_mapCacheHas.js":"6W3ia","./_mapCacheSet.js":"3mIjP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8FFqL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hashJs = require("./_Hash.js");
var _hashJsDefault = parcelHelpers.interopDefault(_hashJs);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
var _mapJs = require("./_Map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new _hashJsDefault.default,
        'map': new (_mapJsDefault.default || _listCacheJsDefault.default),
        'string': new _hashJsDefault.default
    };
}
exports.default = mapCacheClear;

},{"./_Hash.js":"iemcg","./_ListCache.js":"dXWbg","./_Map.js":"exPzb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iemcg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hashClearJs = require("./_hashClear.js");
var _hashClearJsDefault = parcelHelpers.interopDefault(_hashClearJs);
var _hashDeleteJs = require("./_hashDelete.js");
var _hashDeleteJsDefault = parcelHelpers.interopDefault(_hashDeleteJs);
var _hashGetJs = require("./_hashGet.js");
var _hashGetJsDefault = parcelHelpers.interopDefault(_hashGetJs);
var _hashHasJs = require("./_hashHas.js");
var _hashHasJsDefault = parcelHelpers.interopDefault(_hashHasJs);
var _hashSetJs = require("./_hashSet.js");
var _hashSetJsDefault = parcelHelpers.interopDefault(_hashSetJs);
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = _hashClearJsDefault.default;
Hash.prototype['delete'] = _hashDeleteJsDefault.default;
Hash.prototype.get = _hashGetJsDefault.default;
Hash.prototype.has = _hashHasJsDefault.default;
Hash.prototype.set = _hashSetJsDefault.default;
exports.default = Hash;

},{"./_hashClear.js":"izzBG","./_hashDelete.js":"jH8Pc","./_hashGet.js":"14kaq","./_hashHas.js":"5sFqX","./_hashSet.js":"j069T","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"izzBG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = _nativeCreateJsDefault.default ? _nativeCreateJsDefault.default(null) : {
    };
    this.size = 0;
}
exports.default = hashClear;

},{"./_nativeCreate.js":"aTAQu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aTAQu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
/* Built-in method references that are verified to be native. */ var nativeCreate = _getNativeJsDefault.default(Object, 'create');
exports.default = nativeCreate;

},{"./_getNative.js":"9Rjmo","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jH8Pc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
exports.default = hashDelete;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"14kaq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreateJsDefault.default) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
exports.default = hashGet;

},{"./_nativeCreate.js":"aTAQu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5sFqX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return _nativeCreateJsDefault.default ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
exports.default = hashHas;

},{"./_nativeCreate.js":"aTAQu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j069T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeCreateJs = require("./_nativeCreate.js");
var _nativeCreateJsDefault = parcelHelpers.interopDefault(_nativeCreateJs);
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = _nativeCreateJsDefault.default && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
exports.default = hashSet;

},{"./_nativeCreate.js":"aTAQu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dXWbg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheClearJs = require("./_listCacheClear.js");
var _listCacheClearJsDefault = parcelHelpers.interopDefault(_listCacheClearJs);
var _listCacheDeleteJs = require("./_listCacheDelete.js");
var _listCacheDeleteJsDefault = parcelHelpers.interopDefault(_listCacheDeleteJs);
var _listCacheGetJs = require("./_listCacheGet.js");
var _listCacheGetJsDefault = parcelHelpers.interopDefault(_listCacheGetJs);
var _listCacheHasJs = require("./_listCacheHas.js");
var _listCacheHasJsDefault = parcelHelpers.interopDefault(_listCacheHasJs);
var _listCacheSetJs = require("./_listCacheSet.js");
var _listCacheSetJsDefault = parcelHelpers.interopDefault(_listCacheSetJs);
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while((++index) < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClearJsDefault.default;
ListCache.prototype['delete'] = _listCacheDeleteJsDefault.default;
ListCache.prototype.get = _listCacheGetJsDefault.default;
ListCache.prototype.has = _listCacheHasJsDefault.default;
ListCache.prototype.set = _listCacheSetJsDefault.default;
exports.default = ListCache;

},{"./_listCacheClear.js":"26TOp","./_listCacheDelete.js":"a0IC8","./_listCacheGet.js":"3xbq3","./_listCacheHas.js":"CpucY","./_listCacheSet.js":"1gm5g","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"26TOp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
exports.default = listCacheClear;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a0IC8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = _assocIndexOfJsDefault.default(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
exports.default = listCacheDelete;

},{"./_assocIndexOf.js":"dVWJY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dVWJY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (_eqJsDefault.default(array[length][0], key)) return length;
    }
    return -1;
}
exports.default = assocIndexOf;

},{"./eq.js":"1PtGj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3xbq3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = _assocIndexOfJsDefault.default(data, key);
    return index < 0 ? undefined : data[index][1];
}
exports.default = listCacheGet;

},{"./_assocIndexOf.js":"dVWJY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"CpucY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return _assocIndexOfJsDefault.default(this.__data__, key) > -1;
}
exports.default = listCacheHas;

},{"./_assocIndexOf.js":"dVWJY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1gm5g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assocIndexOfJs = require("./_assocIndexOf.js");
var _assocIndexOfJsDefault = parcelHelpers.interopDefault(_assocIndexOfJs);
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = _assocIndexOfJsDefault.default(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
exports.default = listCacheSet;

},{"./_assocIndexOf.js":"dVWJY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"exPzb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var Map1 = _getNativeJsDefault.default(_rootJsDefault.default, 'Map');
exports.default = Map1;

},{"./_getNative.js":"9Rjmo","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hazkx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = _getMapDataJsDefault.default(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
exports.default = mapCacheDelete;

},{"./_getMapData.js":"i3Dn0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i3Dn0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isKeyableJs = require("./_isKeyable.js");
var _isKeyableJsDefault = parcelHelpers.interopDefault(_isKeyableJs);
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyableJsDefault.default(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
exports.default = getMapData;

},{"./_isKeyable.js":"lHYqj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lHYqj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
exports.default = isKeyable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ljBn1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return _getMapDataJsDefault.default(this, key).get(key);
}
exports.default = mapCacheGet;

},{"./_getMapData.js":"i3Dn0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6W3ia":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return _getMapDataJsDefault.default(this, key).has(key);
}
exports.default = mapCacheHas;

},{"./_getMapData.js":"i3Dn0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3mIjP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getMapDataJs = require("./_getMapData.js");
var _getMapDataJsDefault = parcelHelpers.interopDefault(_getMapDataJs);
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = _getMapDataJsDefault.default(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
exports.default = mapCacheSet;

},{"./_getMapData.js":"i3Dn0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fzVGZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : _baseToStringJsDefault.default(value);
}
exports.default = toString;

},{"./_baseToString.js":"cWGOY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jqnP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == 'string' || _isSymbolJsDefault.default(value)) return value;
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
exports.default = toKey;

},{"./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iG3bQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _flattenJs = require("./flatten.js");
var _flattenJsDefault = parcelHelpers.interopDefault(_flattenJs);
var _overRestJs = require("./_overRest.js");
var _overRestJsDefault = parcelHelpers.interopDefault(_overRestJs);
var _setToStringJs = require("./_setToString.js");
var _setToStringJsDefault = parcelHelpers.interopDefault(_setToStringJs);
/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */ function flatRest(func) {
    return _setToStringJsDefault.default(_overRestJsDefault.default(func, undefined, _flattenJsDefault.default), func + '');
}
exports.default = flatRest;

},{"./flatten.js":"01lll","./_overRest.js":"5o2Z1","./_setToString.js":"bTzcT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"01lll":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */ function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseFlattenJsDefault.default(array, 1) : [];
}
exports.default = flatten;

},{"./_baseFlatten.js":"dXyiK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dXyiK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _isFlattenableJs = require("./_isFlattenable.js");
var _isFlattenableJsDefault = parcelHelpers.interopDefault(_isFlattenableJs);
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */ function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = _isFlattenableJsDefault.default);
    result || (result = []);
    while((++index) < length){
        var value = array[index];
        if (depth > 0 && predicate(value)) {
            if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
            else _arrayPushJsDefault.default(result, value);
        } else if (!isStrict) result[result.length] = value;
    }
    return result;
}
exports.default = baseFlatten;

},{"./_arrayPush.js":"t745A","./_isFlattenable.js":"8fnUn","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"t745A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while((++index) < length)array[offset + index] = values[index];
    return array;
}
exports.default = arrayPush;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8fnUn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/** Built-in value references. */ var spreadableSymbol = _symbolJsDefault.default ? _symbolJsDefault.default.isConcatSpreadable : undefined;
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */ function isFlattenable(value) {
    return _isArrayJsDefault.default(value) || _isArgumentsJsDefault.default(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
exports.default = isFlattenable;

},{"./_Symbol.js":"lUHHK","./isArguments.js":"bCq5F","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cIrGS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isErrorJs = require("./isError.js");
var _isErrorJsDefault = parcelHelpers.interopDefault(_isErrorJs);
/**
 * Attempts to invoke `func`, returning either the result or the caught error
 * object. Any additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Function} func The function to attempt.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {*} Returns the `func` result or error object.
 * @example
 *
 * // Avoid throwing errors for invalid selectors.
 * var elements = _.attempt(function(selector) {
 *   return document.querySelectorAll(selector);
 * }, '>_>');
 *
 * if (_.isError(elements)) {
 *   elements = [];
 * }
 */ var attempt = _baseRestJsDefault.default(function(func, args) {
    try {
        return _applyJsDefault.default(func, undefined, args);
    } catch (e) {
        return _isErrorJsDefault.default(e) ? e : new Error(e);
    }
});
exports.default = attempt;

},{"./_apply.js":"jcowS","./_baseRest.js":"6GMnO","./isError.js":"c9Nxf","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c9Nxf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
var _isPlainObjectJs = require("./isPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
/** `Object#toString` result references. */ var domExcTag = '[object DOMException]', errorTag = '[object Error]';
/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */ function isError(value) {
    if (!_isObjectLikeJsDefault.default(value)) return false;
    var tag = _baseGetTagJsDefault.default(value);
    return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !_isPlainObjectJsDefault.default(value);
}
exports.default = isError;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","./isPlainObject.js":"bA6mR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bA6mR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _getPrototypeJs = require("./_getPrototype.js");
var _getPrototypeJsDefault = parcelHelpers.interopDefault(_getPrototypeJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var objectTag = '[object Object]';
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!_isObjectLikeJsDefault.default(value) || _baseGetTagJsDefault.default(value) != objectTag) return false;
    var proto = _getPrototypeJsDefault.default(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
exports.default = isPlainObject;

},{"./_baseGetTag.js":"aZJzp","./_getPrototype.js":"bcSuK","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bcSuK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overArgJs = require("./_overArg.js");
var _overArgJsDefault = parcelHelpers.interopDefault(_overArgJs);
/** Built-in value references. */ var getPrototype = _overArgJsDefault.default(Object.getPrototypeOf, Object);
exports.default = getPrototype;

},{"./_overArg.js":"4pfuD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"12IeX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */ function before(n, func) {
    var result;
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    n = _toIntegerJsDefault.default(n);
    return function() {
        if ((--n) > 0) result = func.apply(this, arguments);
        if (n <= 1) func = undefined;
        return result;
    };
}
exports.default = before;

},{"./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"41ULs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
var _getHolderJs = require("./_getHolder.js");
var _getHolderJsDefault = parcelHelpers.interopDefault(_getHolderJs);
var _replaceHoldersJs = require("./_replaceHolders.js");
var _replaceHoldersJsDefault = parcelHelpers.interopDefault(_replaceHoldersJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_PARTIAL_FLAG = 32;
/**
 * Creates a function that invokes `func` with the `this` binding of `thisArg`
 * and `partials` prepended to the arguments it receives.
 *
 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for partially applied arguments.
 *
 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
 * property of bound functions.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * function greet(greeting, punctuation) {
 *   return greeting + ' ' + this.user + punctuation;
 * }
 *
 * var object = { 'user': 'fred' };
 *
 * var bound = _.bind(greet, object, 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * // Bound with placeholders.
 * var bound = _.bind(greet, object, _, '!');
 * bound('hi');
 * // => 'hi fred!'
 */ var bind = _baseRestJsDefault.default(function(func, thisArg, partials) {
    var bitmask = WRAP_BIND_FLAG;
    if (partials.length) {
        var holders = _replaceHoldersJsDefault.default(partials, _getHolderJsDefault.default(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
    }
    return _createWrapJsDefault.default(func, bitmask, thisArg, partials, holders);
});
// Assign default placeholders.
bind.placeholder = {
};
exports.default = bind;

},{"./_baseRest.js":"6GMnO","./_createWrap.js":"b7iE3","./_getHolder.js":"9cElI","./_replaceHolders.js":"i9cpa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"d4mAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _bindJs = require("./bind.js");
var _bindJsDefault = parcelHelpers.interopDefault(_bindJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * Binds methods of an object to the object itself, overwriting the existing
 * method.
 *
 * **Note:** This method doesn't set the "length" property of bound functions.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {Object} object The object to bind and assign the bound methods to.
 * @param {...(string|string[])} methodNames The object method names to bind.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var view = {
 *   'label': 'docs',
 *   'click': function() {
 *     console.log('clicked ' + this.label);
 *   }
 * };
 *
 * _.bindAll(view, ['click']);
 * jQuery(element).on('click', view.click);
 * // => Logs 'clicked docs' when clicked.
 */ var bindAll = _flatRestJsDefault.default(function(object, methodNames) {
    _arrayEachJsDefault.default(methodNames, function(key) {
        key = _toKeyJsDefault.default(key);
        _baseAssignValueJsDefault.default(object, key, _bindJsDefault.default(object[key], object));
    });
    return object;
});
exports.default = bindAll;

},{"./_arrayEach.js":"6ICgZ","./_baseAssignValue.js":"9nj6E","./bind.js":"41ULs","./_flatRest.js":"iG3bQ","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bhMDu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
var _getHolderJs = require("./_getHolder.js");
var _getHolderJsDefault = parcelHelpers.interopDefault(_getHolderJs);
var _replaceHoldersJs = require("./_replaceHolders.js");
var _replaceHoldersJsDefault = parcelHelpers.interopDefault(_replaceHoldersJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_PARTIAL_FLAG = 32;
/**
 * Creates a function that invokes the method at `object[key]` with `partials`
 * prepended to the arguments it receives.
 *
 * This method differs from `_.bind` by allowing bound functions to reference
 * methods that may be redefined or don't yet exist. See
 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
 * for more details.
 *
 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Function
 * @param {Object} object The object to invoke the method on.
 * @param {string} key The key of the method.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * var object = {
 *   'user': 'fred',
 *   'greet': function(greeting, punctuation) {
 *     return greeting + ' ' + this.user + punctuation;
 *   }
 * };
 *
 * var bound = _.bindKey(object, 'greet', 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * object.greet = function(greeting, punctuation) {
 *   return greeting + 'ya ' + this.user + punctuation;
 * };
 *
 * bound('!');
 * // => 'hiya fred!'
 *
 * // Bound with placeholders.
 * var bound = _.bindKey(object, 'greet', _, '!');
 * bound('hi');
 * // => 'hiya fred!'
 */ var bindKey = _baseRestJsDefault.default(function(object, key, partials) {
    var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
    if (partials.length) {
        var holders = _replaceHoldersJsDefault.default(partials, _getHolderJsDefault.default(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
    }
    return _createWrapJsDefault.default(key, bitmask, object, partials, holders);
});
// Assign default placeholders.
bindKey.placeholder = {
};
exports.default = bindKey;

},{"./_baseRest.js":"6GMnO","./_createWrap.js":"b7iE3","./_getHolder.js":"9cElI","./_replaceHolders.js":"i9cpa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1Ki56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _capitalizeJs = require("./capitalize.js");
var _capitalizeJsDefault = parcelHelpers.interopDefault(_capitalizeJs);
var _createCompounderJs = require("./_createCompounder.js");
var _createCompounderJsDefault = parcelHelpers.interopDefault(_createCompounderJs);
/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */ var camelCase = _createCompounderJsDefault.default(function(result, word, index) {
    word = word.toLowerCase();
    return result + (index ? _capitalizeJsDefault.default(word) : word);
});
exports.default = camelCase;

},{"./capitalize.js":"iD0PA","./_createCompounder.js":"5YHiY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iD0PA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
var _upperFirstJs = require("./upperFirst.js");
var _upperFirstJsDefault = parcelHelpers.interopDefault(_upperFirstJs);
/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */ function capitalize(string) {
    return _upperFirstJsDefault.default(_toStringJsDefault.default(string).toLowerCase());
}
exports.default = capitalize;

},{"./toString.js":"fzVGZ","./upperFirst.js":"bubwY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bubwY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCaseFirstJs = require("./_createCaseFirst.js");
var _createCaseFirstJsDefault = parcelHelpers.interopDefault(_createCaseFirstJs);
/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */ var upperFirst = _createCaseFirstJsDefault.default('toUpperCase');
exports.default = upperFirst;

},{"./_createCaseFirst.js":"9UCzl","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9UCzl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _hasUnicodeJs = require("./_hasUnicode.js");
var _hasUnicodeJsDefault = parcelHelpers.interopDefault(_hasUnicodeJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */ function createCaseFirst(methodName) {
    return function(string) {
        string = _toStringJsDefault.default(string);
        var strSymbols = _hasUnicodeJsDefault.default(string) ? _stringToArrayJsDefault.default(string) : undefined;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? _castSliceJsDefault.default(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
    };
}
exports.default = createCaseFirst;

},{"./_castSlice.js":"ak4IE","./_hasUnicode.js":"iVUcF","./_stringToArray.js":"gvihb","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ak4IE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */ function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : _baseSliceJsDefault.default(array, start, end);
}
exports.default = castSlice;

},{"./_baseSlice.js":"dOp4f","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dOp4f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */ function baseSlice(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) start = -start > length ? 0 : length + start;
    end = end > length ? length : end;
    if (end < 0) end += length;
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while((++index) < length)result[index] = array[index + start];
    return result;
}
exports.default = baseSlice;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iVUcF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */ var rsZWJ = '\\u200d';
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */ function hasUnicode(string) {
    return reHasUnicode.test(string);
}
exports.default = hasUnicode;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gvihb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _asciiToArrayJs = require("./_asciiToArray.js");
var _asciiToArrayJsDefault = parcelHelpers.interopDefault(_asciiToArrayJs);
var _hasUnicodeJs = require("./_hasUnicode.js");
var _hasUnicodeJsDefault = parcelHelpers.interopDefault(_hasUnicodeJs);
var _unicodeToArrayJs = require("./_unicodeToArray.js");
var _unicodeToArrayJsDefault = parcelHelpers.interopDefault(_unicodeToArrayJs);
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function stringToArray(string) {
    return _hasUnicodeJsDefault.default(string) ? _unicodeToArrayJsDefault.default(string) : _asciiToArrayJsDefault.default(string);
}
exports.default = stringToArray;

},{"./_asciiToArray.js":"hiSoi","./_hasUnicode.js":"iVUcF","./_unicodeToArray.js":"2WCV1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hiSoi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function asciiToArray(string) {
    return string.split('');
}
exports.default = asciiToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2WCV1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */ var rsAstral = '[' + rsAstralRange + ']', rsCombo = '[' + rsComboRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = '(?:' + [
    rsNonAstral + rsCombo + '?',
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function unicodeToArray(string) {
    return string.match(reUnicode) || [];
}
exports.default = unicodeToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5YHiY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayReduceJs = require("./_arrayReduce.js");
var _arrayReduceJsDefault = parcelHelpers.interopDefault(_arrayReduceJs);
var _deburrJs = require("./deburr.js");
var _deburrJsDefault = parcelHelpers.interopDefault(_deburrJs);
var _wordsJs = require("./words.js");
var _wordsJsDefault = parcelHelpers.interopDefault(_wordsJs);
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]";
/** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */ function createCompounder(callback) {
    return function(string) {
        return _arrayReduceJsDefault.default(_wordsJsDefault.default(_deburrJsDefault.default(string).replace(reApos, '')), callback, '');
    };
}
exports.default = createCompounder;

},{"./_arrayReduce.js":"ewCyc","./deburr.js":"4207h","./words.js":"fp6cV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ewCyc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */ function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array == null ? 0 : array.length;
    if (initAccum && length) accumulator = array[++index];
    while((++index) < length)accumulator = iteratee(accumulator, array[index], index, array);
    return accumulator;
}
exports.default = arrayReduce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4207h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deburrLetterJs = require("./_deburrLetter.js");
var _deburrLetterJsDefault = parcelHelpers.interopDefault(_deburrLetterJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to compose unicode character classes. */ var rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
/** Used to compose unicode capture groups. */ var rsCombo = '[' + rsComboRange + ']';
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */ var reComboMark = RegExp(rsCombo, 'g');
/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */ function deburr(string) {
    string = _toStringJsDefault.default(string);
    return string && string.replace(reLatin, _deburrLetterJsDefault.default).replace(reComboMark, '');
}
exports.default = deburr;

},{"./_deburrLetter.js":"8ffeE","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8ffeE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePropertyOfJs = require("./_basePropertyOf.js");
var _basePropertyOfJsDefault = parcelHelpers.interopDefault(_basePropertyOfJs);
/** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',
    '\u0102': 'A',
    '\u0104': 'A',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u0105': 'a',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010a': 'C',
    '\u010c': 'C',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010b': 'c',
    '\u010d': 'c',
    '\u010e': 'D',
    '\u0110': 'D',
    '\u010f': 'd',
    '\u0111': 'd',
    '\u0112': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u0118': 'E',
    '\u011a': 'E',
    '\u0113': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u0119': 'e',
    '\u011b': 'e',
    '\u011c': 'G',
    '\u011e': 'G',
    '\u0120': 'G',
    '\u0122': 'G',
    '\u011d': 'g',
    '\u011f': 'g',
    '\u0121': 'g',
    '\u0123': 'g',
    '\u0124': 'H',
    '\u0126': 'H',
    '\u0125': 'h',
    '\u0127': 'h',
    '\u0128': 'I',
    '\u012a': 'I',
    '\u012c': 'I',
    '\u012e': 'I',
    '\u0130': 'I',
    '\u0129': 'i',
    '\u012b': 'i',
    '\u012d': 'i',
    '\u012f': 'i',
    '\u0131': 'i',
    '\u0134': 'J',
    '\u0135': 'j',
    '\u0136': 'K',
    '\u0137': 'k',
    '\u0138': 'k',
    '\u0139': 'L',
    '\u013b': 'L',
    '\u013d': 'L',
    '\u013f': 'L',
    '\u0141': 'L',
    '\u013a': 'l',
    '\u013c': 'l',
    '\u013e': 'l',
    '\u0140': 'l',
    '\u0142': 'l',
    '\u0143': 'N',
    '\u0145': 'N',
    '\u0147': 'N',
    '\u014a': 'N',
    '\u0144': 'n',
    '\u0146': 'n',
    '\u0148': 'n',
    '\u014b': 'n',
    '\u014c': 'O',
    '\u014e': 'O',
    '\u0150': 'O',
    '\u014d': 'o',
    '\u014f': 'o',
    '\u0151': 'o',
    '\u0154': 'R',
    '\u0156': 'R',
    '\u0158': 'R',
    '\u0155': 'r',
    '\u0157': 'r',
    '\u0159': 'r',
    '\u015a': 'S',
    '\u015c': 'S',
    '\u015e': 'S',
    '\u0160': 'S',
    '\u015b': 's',
    '\u015d': 's',
    '\u015f': 's',
    '\u0161': 's',
    '\u0162': 'T',
    '\u0164': 'T',
    '\u0166': 'T',
    '\u0163': 't',
    '\u0165': 't',
    '\u0167': 't',
    '\u0168': 'U',
    '\u016a': 'U',
    '\u016c': 'U',
    '\u016e': 'U',
    '\u0170': 'U',
    '\u0172': 'U',
    '\u0169': 'u',
    '\u016b': 'u',
    '\u016d': 'u',
    '\u016f': 'u',
    '\u0171': 'u',
    '\u0173': 'u',
    '\u0174': 'W',
    '\u0175': 'w',
    '\u0176': 'Y',
    '\u0177': 'y',
    '\u0178': 'Y',
    '\u0179': 'Z',
    '\u017b': 'Z',
    '\u017d': 'Z',
    '\u017a': 'z',
    '\u017c': 'z',
    '\u017e': 'z',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0152': 'Oe',
    '\u0153': 'oe',
    '\u0149': "'n",
    '\u017f': 's'
};
/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */ var deburrLetter = _basePropertyOfJsDefault.default(deburredLetters);
exports.default = deburrLetter;

},{"./_basePropertyOf.js":"5Sf35","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Sf35":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyOf(object) {
    return function(key) {
        return object == null ? undefined : object[key];
    };
}
exports.default = basePropertyOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fp6cV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _asciiWordsJs = require("./_asciiWords.js");
var _asciiWordsJsDefault = parcelHelpers.interopDefault(_asciiWordsJs);
var _hasUnicodeWordJs = require("./_hasUnicodeWord.js");
var _hasUnicodeWordJsDefault = parcelHelpers.interopDefault(_hasUnicodeWordJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
var _unicodeWordsJs = require("./_unicodeWords.js");
var _unicodeWordsJsDefault = parcelHelpers.interopDefault(_unicodeWordsJs);
/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */ function words(string, pattern, guard) {
    string = _toStringJsDefault.default(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) return _hasUnicodeWordJsDefault.default(string) ? _unicodeWordsJsDefault.default(string) : _asciiWordsJsDefault.default(string);
    return string.match(pattern) || [];
}
exports.default = words;

},{"./_asciiWords.js":"iWjxX","./_hasUnicodeWord.js":"6XGjA","./toString.js":"fzVGZ","./_unicodeWords.js":"iPirS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iWjxX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function asciiWords(string) {
    return string.match(reAsciiWord) || [];
}
exports.default = asciiWords;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6XGjA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */ function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
}
exports.default = hasUnicodeWord;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iPirS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
    rsDingbat,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsSeq;
/** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
        rsBreak,
        rsUpper,
        '$'
    ].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
        rsBreak,
        rsUpper + rsMiscLower,
        '$'
    ].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
].join('|'), 'g');
/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */ function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
}
exports.default = unicodeWords;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fYgXC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Casts `value` as an array if it's not one.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Lang
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast array.
 * @example
 *
 * _.castArray(1);
 * // => [1]
 *
 * _.castArray({ 'a': 1 });
 * // => [{ 'a': 1 }]
 *
 * _.castArray('abc');
 * // => ['abc']
 *
 * _.castArray(null);
 * // => [null]
 *
 * _.castArray(undefined);
 * // => [undefined]
 *
 * _.castArray();
 * // => []
 *
 * var array = [1, 2, 3];
 * console.log(_.castArray(array) === array);
 * // => true
 */ function castArray() {
    if (!arguments.length) return [];
    var value = arguments[0];
    return _isArrayJsDefault.default(value) ? value : [
        value
    ];
}
exports.default = castArray;

},{"./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"CLSpr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRoundJs = require("./_createRound.js");
var _createRoundJsDefault = parcelHelpers.interopDefault(_createRoundJs);
/**
 * Computes `number` rounded up to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round up.
 * @param {number} [precision=0] The precision to round up to.
 * @returns {number} Returns the rounded up number.
 * @example
 *
 * _.ceil(4.006);
 * // => 5
 *
 * _.ceil(6.004, 2);
 * // => 6.01
 *
 * _.ceil(6040, -2);
 * // => 6100
 */ var ceil = _createRoundJsDefault.default('ceil');
exports.default = ceil;

},{"./_createRound.js":"bAEXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bAEXu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsFinite = _rootJsDefault.default.isFinite, nativeMin = Math.min;
/**
 * Creates a function like `_.round`.
 *
 * @private
 * @param {string} methodName The name of the `Math` method to use when rounding.
 * @returns {Function} Returns the new round function.
 */ function createRound(methodName) {
    var func = Math[methodName];
    return function(number, precision) {
        number = _toNumberJsDefault.default(number);
        precision = precision == null ? 0 : nativeMin(_toIntegerJsDefault.default(precision), 292);
        if (precision && nativeIsFinite(number)) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (_toStringJsDefault.default(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (_toStringJsDefault.default(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
    };
}
exports.default = createRound;

},{"./_root.js":"bVBU6","./toInteger.js":"69J4a","./toNumber.js":"laU14","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gcLZ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _wrapperLodashJs = require("./wrapperLodash.js");
var _wrapperLodashJsDefault = parcelHelpers.interopDefault(_wrapperLodashJs);
/**
 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
 * chain sequences enabled. The result of such sequences must be unwrapped
 * with `_#value`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Seq
 * @param {*} value The value to wrap.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36 },
 *   { 'user': 'fred',    'age': 40 },
 *   { 'user': 'pebbles', 'age': 1 }
 * ];
 *
 * var youngest = _
 *   .chain(users)
 *   .sortBy('age')
 *   .map(function(o) {
 *     return o.user + ' is ' + o.age;
 *   })
 *   .head()
 *   .value();
 * // => 'pebbles is 1'
 */ function chain(value) {
    var result = _wrapperLodashJsDefault.default(value);
    result.__chain__ = true;
    return result;
}
exports.default = chain;

},{"./wrapperLodash.js":"4HPB1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aah23":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeMax = Math.max;
/**
 * Creates an array of elements split into groups the length of `size`.
 * If `array` can't be split evenly, the final chunk will be the remaining
 * elements.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to process.
 * @param {number} [size=1] The length of each chunk
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the new array of chunks.
 * @example
 *
 * _.chunk(['a', 'b', 'c', 'd'], 2);
 * // => [['a', 'b'], ['c', 'd']]
 *
 * _.chunk(['a', 'b', 'c', 'd'], 3);
 * // => [['a', 'b', 'c'], ['d']]
 */ function chunk(array, size, guard) {
    if (guard ? _isIterateeCallJsDefault.default(array, size, guard) : size === undefined) size = 1;
    else size = nativeMax(_toIntegerJsDefault.default(size), 0);
    var length = array == null ? 0 : array.length;
    if (!length || size < 1) return [];
    var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
    while(index < length)result[resIndex++] = _baseSliceJsDefault.default(array, index, index += size);
    return result;
}
exports.default = chunk;

},{"./_baseSlice.js":"dOp4f","./_isIterateeCall.js":"aHCs0","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1BIUN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClampJs = require("./_baseClamp.js");
var _baseClampJsDefault = parcelHelpers.interopDefault(_baseClampJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
/**
 * Clamps `number` within the inclusive `lower` and `upper` bounds.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Number
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 * @example
 *
 * _.clamp(-10, -5, 5);
 * // => -5
 *
 * _.clamp(10, -5, 5);
 * // => 5
 */ function clamp(number, lower, upper) {
    if (upper === undefined) {
        upper = lower;
        lower = undefined;
    }
    if (upper !== undefined) {
        upper = _toNumberJsDefault.default(upper);
        upper = upper === upper ? upper : 0;
    }
    if (lower !== undefined) {
        lower = _toNumberJsDefault.default(lower);
        lower = lower === lower ? lower : 0;
    }
    return _baseClampJsDefault.default(_toNumberJsDefault.default(number), lower, upper);
}
exports.default = clamp;

},{"./_baseClamp.js":"04c2V","./toNumber.js":"laU14","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"04c2V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.clamp` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 */ function baseClamp(number, lower, upper) {
    if (number === number) {
        if (upper !== undefined) number = number <= upper ? number : upper;
        if (lower !== undefined) number = number >= lower ? number : lower;
    }
    return number;
}
exports.default = baseClamp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cM6tT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
/** Used to compose bitmasks for cloning. */ var CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */ function clone(value) {
    return _baseCloneJsDefault.default(value, CLONE_SYMBOLS_FLAG);
}
exports.default = clone;

},{"./_baseClone.js":"aFXJr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aFXJr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _stackJs = require("./_Stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _assignValueJs = require("./_assignValue.js");
var _assignValueJsDefault = parcelHelpers.interopDefault(_assignValueJs);
var _baseAssignJs = require("./_baseAssign.js");
var _baseAssignJsDefault = parcelHelpers.interopDefault(_baseAssignJs);
var _baseAssignInJs = require("./_baseAssignIn.js");
var _baseAssignInJsDefault = parcelHelpers.interopDefault(_baseAssignInJs);
var _cloneBufferJs = require("./_cloneBuffer.js");
var _cloneBufferJsDefault = parcelHelpers.interopDefault(_cloneBufferJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _copySymbolsJs = require("./_copySymbols.js");
var _copySymbolsJsDefault = parcelHelpers.interopDefault(_copySymbolsJs);
var _copySymbolsInJs = require("./_copySymbolsIn.js");
var _copySymbolsInJsDefault = parcelHelpers.interopDefault(_copySymbolsInJs);
var _getAllKeysJs = require("./_getAllKeys.js");
var _getAllKeysJsDefault = parcelHelpers.interopDefault(_getAllKeysJs);
var _getAllKeysInJs = require("./_getAllKeysIn.js");
var _getAllKeysInJsDefault = parcelHelpers.interopDefault(_getAllKeysInJs);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _initCloneArrayJs = require("./_initCloneArray.js");
var _initCloneArrayJsDefault = parcelHelpers.interopDefault(_initCloneArrayJs);
var _initCloneByTagJs = require("./_initCloneByTag.js");
var _initCloneByTagJsDefault = parcelHelpers.interopDefault(_initCloneByTagJs);
var _initCloneObjectJs = require("./_initCloneObject.js");
var _initCloneObjectJsDefault = parcelHelpers.interopDefault(_initCloneObjectJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isMapJs = require("./isMap.js");
var _isMapJsDefault = parcelHelpers.interopDefault(_isMapJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isSetJs = require("./isSet.js");
var _isSetJsDefault = parcelHelpers.interopDefault(_isSetJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {
};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */ function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
    if (result !== undefined) return result;
    if (!_isObjectJsDefault.default(value)) return value;
    var isArr = _isArrayJsDefault.default(value);
    if (isArr) {
        result = _initCloneArrayJsDefault.default(value);
        if (!isDeep) return _copyArrayJsDefault.default(value, result);
    } else {
        var tag = _getTagJsDefault.default(value), isFunc = tag == funcTag || tag == genTag;
        if (_isBufferJsDefault.default(value)) return _cloneBufferJsDefault.default(value, isDeep);
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {
            } : _initCloneObjectJsDefault.default(value);
            if (!isDeep) return isFlat ? _copySymbolsInJsDefault.default(value, _baseAssignInJsDefault.default(result, value)) : _copySymbolsJsDefault.default(value, _baseAssignJsDefault.default(result, value));
        } else {
            if (!cloneableTags[tag]) return object ? value : {
            };
            result = _initCloneByTagJsDefault.default(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _stackJsDefault.default);
    var stacked = stack.get(value);
    if (stacked) return stacked;
    stack.set(value, result);
    if (_isSetJsDefault.default(value)) value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    else if (_isMapJsDefault.default(value)) value.forEach(function(subValue, key1) {
        result.set(key1, baseClone(subValue, bitmask, customizer, key1, value, stack));
    });
    var keysFunc = isFull ? isFlat ? _getAllKeysInJsDefault.default : _getAllKeysJsDefault.default : isFlat ? _keysInJsDefault.default : _keysJsDefault.default;
    var props = isArr ? undefined : keysFunc(value);
    _arrayEachJsDefault.default(props || value, function(subValue, key1) {
        if (props) {
            key1 = subValue;
            subValue = value[key1];
        }
        // Recursively populate clone (susceptible to call stack limits).
        _assignValueJsDefault.default(result, key1, baseClone(subValue, bitmask, customizer, key1, value, stack));
    });
    return result;
}
exports.default = baseClone;

},{"./_Stack.js":"7pz2h","./_arrayEach.js":"6ICgZ","./_assignValue.js":"1zOlb","./_baseAssign.js":"80087","./_baseAssignIn.js":"b4wRx","./_cloneBuffer.js":"jENnq","./_copyArray.js":"aKKbc","./_copySymbols.js":"lm030","./_copySymbolsIn.js":"kZWb9","./_getAllKeys.js":"7SR14","./_getAllKeysIn.js":"1CJOX","./_getTag.js":"l96z0","./_initCloneArray.js":"7ksz5","./_initCloneByTag.js":"lfEVB","./_initCloneObject.js":"gkIZ8","./isArray.js":"aM5De","./isBuffer.js":"5zLdt","./isMap.js":"aTCvg","./isObject.js":"1IOOk","./isSet.js":"gu32A","./keys.js":"f9Mo9","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7pz2h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
var _stackClearJs = require("./_stackClear.js");
var _stackClearJsDefault = parcelHelpers.interopDefault(_stackClearJs);
var _stackDeleteJs = require("./_stackDelete.js");
var _stackDeleteJsDefault = parcelHelpers.interopDefault(_stackDeleteJs);
var _stackGetJs = require("./_stackGet.js");
var _stackGetJsDefault = parcelHelpers.interopDefault(_stackGetJs);
var _stackHasJs = require("./_stackHas.js");
var _stackHasJsDefault = parcelHelpers.interopDefault(_stackHasJs);
var _stackSetJs = require("./_stackSet.js");
var _stackSetJsDefault = parcelHelpers.interopDefault(_stackSetJs);
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new _listCacheJsDefault.default(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = _stackClearJsDefault.default;
Stack.prototype['delete'] = _stackDeleteJsDefault.default;
Stack.prototype.get = _stackGetJsDefault.default;
Stack.prototype.has = _stackHasJsDefault.default;
Stack.prototype.set = _stackSetJsDefault.default;
exports.default = Stack;

},{"./_ListCache.js":"dXWbg","./_stackClear.js":"9v2HY","./_stackDelete.js":"hJg9a","./_stackGet.js":"cxo6K","./_stackHas.js":"20VP9","./_stackSet.js":"6h13B","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9v2HY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new _listCacheJsDefault.default;
    this.size = 0;
}
exports.default = stackClear;

},{"./_ListCache.js":"dXWbg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hJg9a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
exports.default = stackDelete;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cxo6K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
exports.default = stackGet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"20VP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
exports.default = stackHas;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6h13B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listCacheJs = require("./_ListCache.js");
var _listCacheJsDefault = parcelHelpers.interopDefault(_listCacheJs);
var _mapJs = require("./_Map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _mapCacheJs = require("./_MapCache.js");
var _mapCacheJsDefault = parcelHelpers.interopDefault(_mapCacheJs);
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _listCacheJsDefault.default) {
        var pairs = data.__data__;
        if (!_mapJsDefault.default || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new _mapCacheJsDefault.default(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
exports.default = stackSet;

},{"./_ListCache.js":"dXWbg","./_Map.js":"exPzb","./_MapCache.js":"kj55V","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"80087":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssign(object, source) {
    return object && _copyObjectJsDefault.default(source, _keysJsDefault.default(source), object);
}
exports.default = baseAssign;

},{"./_copyObject.js":"iJJjY","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b4wRx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssignIn(object, source) {
    return object && _copyObjectJsDefault.default(source, _keysInJsDefault.default(source), object);
}
exports.default = baseAssignIn;

},{"./_copyObject.js":"iJJjY","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jENnq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? _rootJsDefault.default.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
exports.default = cloneBuffer;

},{"./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lm030":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _getSymbolsJs = require("./_getSymbols.js");
var _getSymbolsJsDefault = parcelHelpers.interopDefault(_getSymbolsJs);
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbols(source, object) {
    return _copyObjectJsDefault.default(source, _getSymbolsJsDefault.default(source), object);
}
exports.default = copySymbols;

},{"./_copyObject.js":"iJJjY","./_getSymbols.js":"e0AfS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e0AfS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _stubArrayJs = require("./stubArray.js");
var _stubArrayJsDefault = parcelHelpers.interopDefault(_stubArrayJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? _stubArrayJsDefault.default : function(object) {
    if (object == null) return [];
    object = Object(object);
    return _arrayFilterJsDefault.default(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
exports.default = getSymbols;

},{"./_arrayFilter.js":"aSstn","./stubArray.js":"a0dCJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aSstn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while((++index) < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
exports.default = arrayFilter;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a0dCJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
exports.default = stubArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kZWb9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _getSymbolsInJs = require("./_getSymbolsIn.js");
var _getSymbolsInJsDefault = parcelHelpers.interopDefault(_getSymbolsInJs);
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbolsIn(source, object) {
    return _copyObjectJsDefault.default(source, _getSymbolsInJsDefault.default(source), object);
}
exports.default = copySymbolsIn;

},{"./_copyObject.js":"iJJjY","./_getSymbolsIn.js":"69AEV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"69AEV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _getPrototypeJs = require("./_getPrototype.js");
var _getPrototypeJsDefault = parcelHelpers.interopDefault(_getPrototypeJs);
var _getSymbolsJs = require("./_getSymbols.js");
var _getSymbolsJsDefault = parcelHelpers.interopDefault(_getSymbolsJs);
var _stubArrayJs = require("./stubArray.js");
var _stubArrayJsDefault = parcelHelpers.interopDefault(_stubArrayJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbolsIn = !nativeGetSymbols ? _stubArrayJsDefault.default : function(object) {
    var result = [];
    while(object){
        _arrayPushJsDefault.default(result, _getSymbolsJsDefault.default(object));
        object = _getPrototypeJsDefault.default(object);
    }
    return result;
};
exports.default = getSymbolsIn;

},{"./_arrayPush.js":"t745A","./_getPrototype.js":"bcSuK","./_getSymbols.js":"e0AfS","./stubArray.js":"a0dCJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7SR14":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetAllKeysJs = require("./_baseGetAllKeys.js");
var _baseGetAllKeysJsDefault = parcelHelpers.interopDefault(_baseGetAllKeysJs);
var _getSymbolsJs = require("./_getSymbols.js");
var _getSymbolsJsDefault = parcelHelpers.interopDefault(_getSymbolsJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return _baseGetAllKeysJsDefault.default(object, _keysJsDefault.default, _getSymbolsJsDefault.default);
}
exports.default = getAllKeys;

},{"./_baseGetAllKeys.js":"hdTm5","./_getSymbols.js":"e0AfS","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hdTm5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return _isArrayJsDefault.default(object) ? result : _arrayPushJsDefault.default(result, symbolsFunc(object));
}
exports.default = baseGetAllKeys;

},{"./_arrayPush.js":"t745A","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1CJOX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetAllKeysJs = require("./_baseGetAllKeys.js");
var _baseGetAllKeysJsDefault = parcelHelpers.interopDefault(_baseGetAllKeysJs);
var _getSymbolsInJs = require("./_getSymbolsIn.js");
var _getSymbolsInJsDefault = parcelHelpers.interopDefault(_getSymbolsInJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeysIn(object) {
    return _baseGetAllKeysJsDefault.default(object, _keysInJsDefault.default, _getSymbolsInJsDefault.default);
}
exports.default = getAllKeysIn;

},{"./_baseGetAllKeys.js":"hdTm5","./_getSymbolsIn.js":"69AEV","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l96z0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dataViewJs = require("./_DataView.js");
var _dataViewJsDefault = parcelHelpers.interopDefault(_dataViewJs);
var _mapJs = require("./_Map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _promiseJs = require("./_Promise.js");
var _promiseJsDefault = parcelHelpers.interopDefault(_promiseJs);
var _setJs = require("./_Set.js");
var _setJsDefault = parcelHelpers.interopDefault(_setJs);
var _weakMapJs = require("./_WeakMap.js");
var _weakMapJsDefault = parcelHelpers.interopDefault(_weakMapJs);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _toSourceJs = require("./_toSource.js");
var _toSourceJsDefault = parcelHelpers.interopDefault(_toSourceJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = _toSourceJsDefault.default(_dataViewJsDefault.default), mapCtorString = _toSourceJsDefault.default(_mapJsDefault.default), promiseCtorString = _toSourceJsDefault.default(_promiseJsDefault.default), setCtorString = _toSourceJsDefault.default(_setJsDefault.default), weakMapCtorString = _toSourceJsDefault.default(_weakMapJsDefault.default);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = _baseGetTagJsDefault.default;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (_dataViewJsDefault.default && getTag(new _dataViewJsDefault.default(new ArrayBuffer(1))) != dataViewTag || _mapJsDefault.default && getTag(new _mapJsDefault.default) != mapTag || _promiseJsDefault.default && getTag(_promiseJsDefault.default.resolve()) != promiseTag || _setJsDefault.default && getTag(new _setJsDefault.default) != setTag || _weakMapJsDefault.default && getTag(new _weakMapJsDefault.default) != weakMapTag) getTag = function(value) {
    var result = _baseGetTagJsDefault.default(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? _toSourceJsDefault.default(Ctor) : '';
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
exports.default = getTag;

},{"./_DataView.js":"2nxmC","./_Map.js":"exPzb","./_Promise.js":"9qe58","./_Set.js":"kiwU7","./_WeakMap.js":"67tUV","./_baseGetTag.js":"aZJzp","./_toSource.js":"jExaW","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2nxmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var DataView1 = _getNativeJsDefault.default(_rootJsDefault.default, 'DataView');
exports.default = DataView1;

},{"./_getNative.js":"9Rjmo","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9qe58":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var Promise1 = _getNativeJsDefault.default(_rootJsDefault.default, 'Promise');
exports.default = Promise1;

},{"./_getNative.js":"9Rjmo","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kiwU7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNativeJs = require("./_getNative.js");
var _getNativeJsDefault = parcelHelpers.interopDefault(_getNativeJs);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references that are verified to be native. */ var Set1 = _getNativeJsDefault.default(_rootJsDefault.default, 'Set');
exports.default = Set1;

},{"./_getNative.js":"9Rjmo","./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7ksz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */ function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
exports.default = initCloneArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lfEVB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cloneArrayBufferJs = require("./_cloneArrayBuffer.js");
var _cloneArrayBufferJsDefault = parcelHelpers.interopDefault(_cloneArrayBufferJs);
var _cloneDataViewJs = require("./_cloneDataView.js");
var _cloneDataViewJsDefault = parcelHelpers.interopDefault(_cloneDataViewJs);
var _cloneRegExpJs = require("./_cloneRegExp.js");
var _cloneRegExpJsDefault = parcelHelpers.interopDefault(_cloneRegExpJs);
var _cloneSymbolJs = require("./_cloneSymbol.js");
var _cloneSymbolJsDefault = parcelHelpers.interopDefault(_cloneSymbolJs);
var _cloneTypedArrayJs = require("./_cloneTypedArray.js");
var _cloneTypedArrayJsDefault = parcelHelpers.interopDefault(_cloneTypedArrayJs);
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch(tag){
        case arrayBufferTag:
            return _cloneArrayBufferJsDefault.default(object);
        case boolTag:
        case dateTag:
            return new Ctor(+object);
        case dataViewTag:
            return _cloneDataViewJsDefault.default(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
            return _cloneTypedArrayJsDefault.default(object, isDeep);
        case mapTag:
            return new Ctor;
        case numberTag:
        case stringTag:
            return new Ctor(object);
        case regexpTag:
            return _cloneRegExpJsDefault.default(object);
        case setTag:
            return new Ctor;
        case symbolTag:
            return _cloneSymbolJsDefault.default(object);
    }
}
exports.default = initCloneByTag;

},{"./_cloneArrayBuffer.js":"hABTB","./_cloneDataView.js":"gpNE5","./_cloneRegExp.js":"ls6LF","./_cloneSymbol.js":"5iMYu","./_cloneTypedArray.js":"jsHea","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hABTB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _uint8ArrayJs = require("./_Uint8Array.js");
var _uint8ArrayJsDefault = parcelHelpers.interopDefault(_uint8ArrayJs);
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _uint8ArrayJsDefault.default(result).set(new _uint8ArrayJsDefault.default(arrayBuffer));
    return result;
}
exports.default = cloneArrayBuffer;

},{"./_Uint8Array.js":"9CrNg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9CrNg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/** Built-in value references. */ var Uint8Array1 = _rootJsDefault.default.Uint8Array;
exports.default = Uint8Array1;

},{"./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gpNE5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cloneArrayBufferJs = require("./_cloneArrayBuffer.js");
var _cloneArrayBufferJsDefault = parcelHelpers.interopDefault(_cloneArrayBufferJs);
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */ function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBufferJsDefault.default(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
exports.default = cloneDataView;

},{"./_cloneArrayBuffer.js":"hABTB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ls6LF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */ function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
exports.default = cloneRegExp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5iMYu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
/** Used to convert symbols to primitives and strings. */ var symbolProto = _symbolJsDefault.default ? _symbolJsDefault.default.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */ function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {
    };
}
exports.default = cloneSymbol;

},{"./_Symbol.js":"lUHHK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jsHea":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cloneArrayBufferJs = require("./_cloneArrayBuffer.js");
var _cloneArrayBufferJsDefault = parcelHelpers.interopDefault(_cloneArrayBufferJs);
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBufferJsDefault.default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
exports.default = cloneTypedArray;

},{"./_cloneArrayBuffer.js":"hABTB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gkIZ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCreateJs = require("./_baseCreate.js");
var _baseCreateJsDefault = parcelHelpers.interopDefault(_baseCreateJs);
var _getPrototypeJs = require("./_getPrototype.js");
var _getPrototypeJsDefault = parcelHelpers.interopDefault(_getPrototypeJs);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == 'function' && !_isPrototypeJsDefault.default(object) ? _baseCreateJsDefault.default(_getPrototypeJsDefault.default(object)) : {
    };
}
exports.default = initCloneObject;

},{"./_baseCreate.js":"kSR8L","./_getPrototype.js":"bcSuK","./_isPrototype.js":"bP9GG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aTCvg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsMapJs = require("./_baseIsMap.js");
var _baseIsMapJsDefault = parcelHelpers.interopDefault(_baseIsMapJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsMap = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */ var isMap = nodeIsMap ? _baseUnaryJsDefault.default(nodeIsMap) : _baseIsMapJsDefault.default;
exports.default = isMap;

},{"./_baseIsMap.js":"f5avy","./_baseUnary.js":"3cdEI","./_nodeUtil.js":"cnNtI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f5avy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */ function baseIsMap(value) {
    return _isObjectLikeJsDefault.default(value) && _getTagJsDefault.default(value) == mapTag;
}
exports.default = baseIsMap;

},{"./_getTag.js":"l96z0","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gu32A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsSetJs = require("./_baseIsSet.js");
var _baseIsSetJsDefault = parcelHelpers.interopDefault(_baseIsSetJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsSet = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */ var isSet = nodeIsSet ? _baseUnaryJsDefault.default(nodeIsSet) : _baseIsSetJsDefault.default;
exports.default = isSet;

},{"./_baseIsSet.js":"2gVGW","./_baseUnary.js":"3cdEI","./_nodeUtil.js":"cnNtI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2gVGW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */ function baseIsSet(value) {
    return _isObjectLikeJsDefault.default(value) && _getTagJsDefault.default(value) == setTag;
}
exports.default = baseIsSet;

},{"./_getTag.js":"l96z0","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gqrPs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */ function cloneDeep(value) {
    return _baseCloneJsDefault.default(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}
exports.default = cloneDeep;

},{"./_baseClone.js":"aFXJr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6sZ5p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.cloneWith` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the deep cloned value.
 * @see _.cloneWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(true);
 *   }
 * }
 *
 * var el = _.cloneDeepWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 20
 */ function cloneDeepWith(value, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return _baseCloneJsDefault.default(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
}
exports.default = cloneDeepWith;

},{"./_baseClone.js":"aFXJr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"49X9q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
/** Used to compose bitmasks for cloning. */ var CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it accepts `customizer` which
 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
 * cloning is handled by the method instead. The `customizer` is invoked with
 * up to four arguments; (value [, index|key, object, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeepWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(false);
 *   }
 * }
 *
 * var el = _.cloneWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 0
 */ function cloneWith(value, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return _baseCloneJsDefault.default(value, CLONE_SYMBOLS_FLAG, customizer);
}
exports.default = cloneWith;

},{"./_baseClone.js":"aFXJr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"mifX9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lodashWrapperJs = require("./_LodashWrapper.js");
var _lodashWrapperJsDefault = parcelHelpers.interopDefault(_lodashWrapperJs);
/**
 * Executes the chain sequence and returns the wrapped result.
 *
 * @name commit
 * @memberOf _
 * @since 3.2.0
 * @category Seq
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var array = [1, 2];
 * var wrapped = _(array).push(3);
 *
 * console.log(array);
 * // => [1, 2]
 *
 * wrapped = wrapped.commit();
 * console.log(array);
 * // => [1, 2, 3]
 *
 * wrapped.last();
 * // => 3
 *
 * console.log(array);
 * // => [1, 2, 3]
 */ function wrapperCommit() {
    return new _lodashWrapperJsDefault.default(this.value(), this.__chain__);
}
exports.default = wrapperCommit;

},{"./_LodashWrapper.js":"6ZE49","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k48LX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */ function compact(array) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while((++index) < length){
        var value = array[index];
        if (value) result[resIndex++] = value;
    }
    return result;
}
exports.default = compact;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gl4B0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Creates a new array concatenating `array` with any additional arrays
 * and/or values.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to concatenate.
 * @param {...*} [values] The values to concatenate.
 * @returns {Array} Returns the new concatenated array.
 * @example
 *
 * var array = [1];
 * var other = _.concat(array, 2, [3], [[4]]);
 *
 * console.log(other);
 * // => [1, 2, 3, [4]]
 *
 * console.log(array);
 * // => [1]
 */ function concat() {
    var length = arguments.length;
    if (!length) return [];
    var args = Array(length - 1), array = arguments[0], index = length;
    while(index--)args[index - 1] = arguments[index];
    return _arrayPushJsDefault.default(_isArrayJsDefault.default(array) ? _copyArrayJsDefault.default(array) : [
        array
    ], _baseFlattenJsDefault.default(args, 1));
}
exports.default = concat;

},{"./_arrayPush.js":"t745A","./_baseFlatten.js":"dXyiK","./_copyArray.js":"aKKbc","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lCwJ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that iterates over `pairs` and invokes the corresponding
 * function of the first predicate to return truthy. The predicate-function
 * pairs are invoked with the `this` binding and arguments of the created
 * function.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {Array} pairs The predicate-function pairs.
 * @returns {Function} Returns the new composite function.
 * @example
 *
 * var func = _.cond([
 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
 *   [_.stubTrue,                      _.constant('no match')]
 * ]);
 *
 * func({ 'a': 1, 'b': 2 });
 * // => 'matches A'
 *
 * func({ 'a': 0, 'b': 1 });
 * // => 'matches B'
 *
 * func({ 'a': '1', 'b': '2' });
 * // => 'no match'
 */ function cond(pairs) {
    var length = pairs == null ? 0 : pairs.length, toIteratee = _baseIterateeJsDefault.default;
    pairs = !length ? [] : _arrayMapJsDefault.default(pairs, function(pair) {
        if (typeof pair[1] != 'function') throw new TypeError(FUNC_ERROR_TEXT);
        return [
            toIteratee(pair[0]),
            pair[1]
        ];
    });
    return _baseRestJsDefault.default(function(args) {
        var index = -1;
        while((++index) < length){
            var pair = pairs[index];
            if (_applyJsDefault.default(pair[0], this, args)) return _applyJsDefault.default(pair[1], this, args);
        }
    });
}
exports.default = cond;

},{"./_apply.js":"jcowS","./_arrayMap.js":"jjvFU","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6ue66":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseMatchesJs = require("./_baseMatches.js");
var _baseMatchesJsDefault = parcelHelpers.interopDefault(_baseMatchesJs);
var _baseMatchesPropertyJs = require("./_baseMatchesProperty.js");
var _baseMatchesPropertyJsDefault = parcelHelpers.interopDefault(_baseMatchesPropertyJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _propertyJs = require("./property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */ function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') return value;
    if (value == null) return _identityJsDefault.default;
    if (typeof value == 'object') return _isArrayJsDefault.default(value) ? _baseMatchesPropertyJsDefault.default(value[0], value[1]) : _baseMatchesJsDefault.default(value);
    return _propertyJsDefault.default(value);
}
exports.default = baseIteratee;

},{"./_baseMatches.js":"eWJev","./_baseMatchesProperty.js":"WjPNl","./identity.js":"fqqWQ","./isArray.js":"aM5De","./property.js":"8Doag","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eWJev":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsMatchJs = require("./_baseIsMatch.js");
var _baseIsMatchJsDefault = parcelHelpers.interopDefault(_baseIsMatchJs);
var _getMatchDataJs = require("./_getMatchData.js");
var _getMatchDataJsDefault = parcelHelpers.interopDefault(_getMatchDataJs);
var _matchesStrictComparableJs = require("./_matchesStrictComparable.js");
var _matchesStrictComparableJsDefault = parcelHelpers.interopDefault(_matchesStrictComparableJs);
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatches(source) {
    var matchData = _getMatchDataJsDefault.default(source);
    if (matchData.length == 1 && matchData[0][2]) return _matchesStrictComparableJsDefault.default(matchData[0][0], matchData[0][1]);
    return function(object) {
        return object === source || _baseIsMatchJsDefault.default(object, source, matchData);
    };
}
exports.default = baseMatches;

},{"./_baseIsMatch.js":"DHl6P","./_getMatchData.js":"1UE7R","./_matchesStrictComparable.js":"kJIrG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"DHl6P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _stackJs = require("./_Stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _baseIsEqualJs = require("./_baseIsEqual.js");
var _baseIsEqualJsDefault = parcelHelpers.interopDefault(_baseIsEqualJs);
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */ function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) return !length;
    object = Object(object);
    while(index--){
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
    }
    while((++index) < length){
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) return false;
        } else {
            var stack = new _stackJsDefault.default;
            if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
            if (!(result === undefined ? _baseIsEqualJsDefault.default(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
        }
    }
    return true;
}
exports.default = baseIsMatch;

},{"./_Stack.js":"7pz2h","./_baseIsEqual.js":"9h4Ty","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9h4Ty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsEqualDeepJs = require("./_baseIsEqualDeep.js");
var _baseIsEqualDeepJsDefault = parcelHelpers.interopDefault(_baseIsEqualDeepJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !_isObjectLikeJsDefault.default(value) && !_isObjectLikeJsDefault.default(other)) return value !== value && other !== other;
    return _baseIsEqualDeepJsDefault.default(value, other, bitmask, customizer, baseIsEqual, stack);
}
exports.default = baseIsEqual;

},{"./_baseIsEqualDeep.js":"cZ2eO","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cZ2eO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _stackJs = require("./_Stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _equalArraysJs = require("./_equalArrays.js");
var _equalArraysJsDefault = parcelHelpers.interopDefault(_equalArraysJs);
var _equalByTagJs = require("./_equalByTag.js");
var _equalByTagJsDefault = parcelHelpers.interopDefault(_equalByTagJs);
var _equalObjectsJs = require("./_equalObjects.js");
var _equalObjectsJsDefault = parcelHelpers.interopDefault(_equalObjectsJs);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', objectTag = '[object Object]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = _isArrayJsDefault.default(object), othIsArr = _isArrayJsDefault.default(other), objTag = objIsArr ? arrayTag : _getTagJsDefault.default(object), othTag = othIsArr ? arrayTag : _getTagJsDefault.default(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && _isBufferJsDefault.default(object)) {
        if (!_isBufferJsDefault.default(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new _stackJsDefault.default);
        return objIsArr || _isTypedArrayJsDefault.default(object) ? _equalArraysJsDefault.default(object, other, bitmask, customizer, equalFunc, stack) : _equalByTagJsDefault.default(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new _stackJsDefault.default);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new _stackJsDefault.default);
    return _equalObjectsJsDefault.default(object, other, bitmask, customizer, equalFunc, stack);
}
exports.default = baseIsEqualDeep;

},{"./_Stack.js":"7pz2h","./_equalArrays.js":"dtPzU","./_equalByTag.js":"aTsKN","./_equalObjects.js":"5vBoY","./_getTag.js":"l96z0","./isArray.js":"aM5De","./isBuffer.js":"5zLdt","./isTypedArray.js":"4zD9H","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dtPzU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setCacheJs = require("./_SetCache.js");
var _setCacheJsDefault = parcelHelpers.interopDefault(_setCacheJs);
var _arraySomeJs = require("./_arraySome.js");
var _arraySomeJsDefault = parcelHelpers.interopDefault(_arraySomeJs);
var _cacheHasJs = require("./_cacheHas.js");
var _cacheHasJsDefault = parcelHelpers.interopDefault(_cacheHasJs);
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new _setCacheJsDefault.default : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while((++index) < arrLength){
        var arrValue = array[index], othValue = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!_arraySomeJsDefault.default(other, function(othValue1, othIndex) {
                if (!_cacheHasJsDefault.default(seen, othIndex) && (arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
}
exports.default = equalArrays;

},{"./_SetCache.js":"cojUc","./_arraySome.js":"j3nyJ","./_cacheHas.js":"9Bp52","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cojUc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mapCacheJs = require("./_MapCache.js");
var _mapCacheJsDefault = parcelHelpers.interopDefault(_mapCacheJs);
var _setCacheAddJs = require("./_setCacheAdd.js");
var _setCacheAddJsDefault = parcelHelpers.interopDefault(_setCacheAddJs);
var _setCacheHasJs = require("./_setCacheHas.js");
var _setCacheHasJsDefault = parcelHelpers.interopDefault(_setCacheHasJs);
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new _mapCacheJsDefault.default;
    while((++index) < length)this.add(values[index]);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = _setCacheAddJsDefault.default;
SetCache.prototype.has = _setCacheHasJsDefault.default;
exports.default = SetCache;

},{"./_MapCache.js":"kj55V","./_setCacheAdd.js":"26pMQ","./_setCacheHas.js":"6NqeG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"26pMQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
exports.default = setCacheAdd;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6NqeG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
exports.default = setCacheHas;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j3nyJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while((++index) < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
exports.default = arraySome;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9Bp52":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
exports.default = cacheHas;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aTsKN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _uint8ArrayJs = require("./_Uint8Array.js");
var _uint8ArrayJsDefault = parcelHelpers.interopDefault(_uint8ArrayJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
var _equalArraysJs = require("./_equalArrays.js");
var _equalArraysJsDefault = parcelHelpers.interopDefault(_equalArraysJs);
var _mapToArrayJs = require("./_mapToArray.js");
var _mapToArrayJsDefault = parcelHelpers.interopDefault(_mapToArrayJs);
var _setToArrayJs = require("./_setToArray.js");
var _setToArrayJsDefault = parcelHelpers.interopDefault(_setToArrayJs);
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */ var symbolProto = _symbolJsDefault.default ? _symbolJsDefault.default.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new _uint8ArrayJsDefault.default(object), new _uint8ArrayJsDefault.default(other))) return false;
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return _eqJsDefault.default(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';
        case mapTag:
            var convert = _mapToArrayJsDefault.default;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = _setToArrayJsDefault.default);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = _equalArraysJsDefault.default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
        case symbolTag:
            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
}
exports.default = equalByTag;

},{"./_Symbol.js":"lUHHK","./_Uint8Array.js":"9CrNg","./eq.js":"1PtGj","./_equalArrays.js":"dtPzU","./_mapToArray.js":"8pcjC","./_setToArray.js":"hb3ta","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8pcjC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
exports.default = mapToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hb3ta":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
exports.default = setToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5vBoY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getAllKeysJs = require("./_getAllKeys.js");
var _getAllKeysJsDefault = parcelHelpers.interopDefault(_getAllKeysJs);
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = _getAllKeysJsDefault.default(object), objLength = objProps.length, othProps = _getAllKeysJsDefault.default(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while((++index) < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
}
exports.default = equalObjects;

},{"./_getAllKeys.js":"7SR14","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1UE7R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isStrictComparableJs = require("./_isStrictComparable.js");
var _isStrictComparableJsDefault = parcelHelpers.interopDefault(_isStrictComparableJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */ function getMatchData(object) {
    var result = _keysJsDefault.default(object), length = result.length;
    while(length--){
        var key = result[length], value = object[key];
        result[length] = [
            key,
            value,
            _isStrictComparableJsDefault.default(value)
        ];
    }
    return result;
}
exports.default = getMatchData;

},{"./_isStrictComparable.js":"auVlv","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"auVlv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */ function isStrictComparable(value) {
    return value === value && !_isObjectJsDefault.default(value);
}
exports.default = isStrictComparable;

},{"./isObject.js":"1IOOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kJIrG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function matchesStrictComparable(key, srcValue) {
    return function(object) {
        if (object == null) return false;
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
}
exports.default = matchesStrictComparable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"WjPNl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsEqualJs = require("./_baseIsEqual.js");
var _baseIsEqualJsDefault = parcelHelpers.interopDefault(_baseIsEqualJs);
var _getJs = require("./get.js");
var _getJsDefault = parcelHelpers.interopDefault(_getJs);
var _hasInJs = require("./hasIn.js");
var _hasInJsDefault = parcelHelpers.interopDefault(_hasInJs);
var _isKeyJs = require("./_isKey.js");
var _isKeyJsDefault = parcelHelpers.interopDefault(_isKeyJs);
var _isStrictComparableJs = require("./_isStrictComparable.js");
var _isStrictComparableJsDefault = parcelHelpers.interopDefault(_isStrictComparableJs);
var _matchesStrictComparableJs = require("./_matchesStrictComparable.js");
var _matchesStrictComparableJsDefault = parcelHelpers.interopDefault(_matchesStrictComparableJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatchesProperty(path, srcValue) {
    if (_isKeyJsDefault.default(path) && _isStrictComparableJsDefault.default(srcValue)) return _matchesStrictComparableJsDefault.default(_toKeyJsDefault.default(path), srcValue);
    return function(object) {
        var objValue = _getJsDefault.default(object, path);
        return objValue === undefined && objValue === srcValue ? _hasInJsDefault.default(object, path) : _baseIsEqualJsDefault.default(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
}
exports.default = baseMatchesProperty;

},{"./_baseIsEqual.js":"9h4Ty","./get.js":"zh4Vj","./hasIn.js":"kRN1R","./_isKey.js":"1Dw0A","./_isStrictComparable.js":"auVlv","./_matchesStrictComparable.js":"kJIrG","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kRN1R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseHasInJs = require("./_baseHasIn.js");
var _baseHasInJsDefault = parcelHelpers.interopDefault(_baseHasInJs);
var _hasPathJs = require("./_hasPath.js");
var _hasPathJsDefault = parcelHelpers.interopDefault(_hasPathJs);
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */ function hasIn(object, path) {
    return object != null && _hasPathJsDefault.default(object, path, _baseHasInJsDefault.default);
}
exports.default = hasIn;

},{"./_baseHasIn.js":"Lm3iJ","./_hasPath.js":"kJfto","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"Lm3iJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHasIn(object, key) {
    return object != null && key in Object(object);
}
exports.default = baseHasIn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kJfto":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */ function hasPath(object, path, hasFunc) {
    path = _castPathJsDefault.default(path, object);
    var index = -1, length = path.length, result = false;
    while((++index) < length){
        var key = _toKeyJsDefault.default(path[index]);
        if (!(result = object != null && hasFunc(object, key))) break;
        object = object[key];
    }
    if (result || (++index) != length) return result;
    length = object == null ? 0 : object.length;
    return !!length && _isLengthJsDefault.default(length) && _isIndexJsDefault.default(key, length) && (_isArrayJsDefault.default(object) || _isArgumentsJsDefault.default(object));
}
exports.default = hasPath;

},{"./_castPath.js":"jrUMT","./isArguments.js":"bCq5F","./isArray.js":"aM5De","./_isIndex.js":"gfLoM","./isLength.js":"8LHjk","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8Doag":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePropertyJs = require("./_baseProperty.js");
var _basePropertyJsDefault = parcelHelpers.interopDefault(_basePropertyJs);
var _basePropertyDeepJs = require("./_basePropertyDeep.js");
var _basePropertyDeepJsDefault = parcelHelpers.interopDefault(_basePropertyDeepJs);
var _isKeyJs = require("./_isKey.js");
var _isKeyJsDefault = parcelHelpers.interopDefault(_isKeyJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */ function property(path) {
    return _isKeyJsDefault.default(path) ? _basePropertyJsDefault.default(_toKeyJsDefault.default(path)) : _basePropertyDeepJsDefault.default(path);
}
exports.default = property;

},{"./_baseProperty.js":"3ekfC","./_basePropertyDeep.js":"eaajX","./_isKey.js":"1Dw0A","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3ekfC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function baseProperty(key) {
    return function(object) {
        return object == null ? undefined : object[key];
    };
}
exports.default = baseProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eaajX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetJs = require("./_baseGet.js");
var _baseGetJsDefault = parcelHelpers.interopDefault(_baseGetJs);
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyDeep(path) {
    return function(object) {
        return _baseGetJsDefault.default(object, path);
    };
}
exports.default = basePropertyDeep;

},{"./_baseGet.js":"h5I8S","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2mmY2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
var _baseConformsJs = require("./_baseConforms.js");
var _baseConformsJsDefault = parcelHelpers.interopDefault(_baseConformsJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1;
/**
 * Creates a function that invokes the predicate properties of `source` with
 * the corresponding property values of a given object, returning `true` if
 * all predicates return truthy, else `false`.
 *
 * **Note:** The created function is equivalent to `_.conformsTo` with
 * `source` partially applied.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {Object} source The object of property predicates to conform to.
 * @returns {Function} Returns the new spec function.
 * @example
 *
 * var objects = [
 *   { 'a': 2, 'b': 1 },
 *   { 'a': 1, 'b': 2 }
 * ];
 *
 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
 * // => [{ 'a': 1, 'b': 2 }]
 */ function conforms(source) {
    return _baseConformsJsDefault.default(_baseCloneJsDefault.default(source, CLONE_DEEP_FLAG));
}
exports.default = conforms;

},{"./_baseClone.js":"aFXJr","./_baseConforms.js":"6EY56","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6EY56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseConformsToJs = require("./_baseConformsTo.js");
var _baseConformsToJsDefault = parcelHelpers.interopDefault(_baseConformsToJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * The base implementation of `_.conforms` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property predicates to conform to.
 * @returns {Function} Returns the new spec function.
 */ function baseConforms(source) {
    var props = _keysJsDefault.default(source);
    return function(object) {
        return _baseConformsToJsDefault.default(object, source, props);
    };
}
exports.default = baseConforms;

},{"./_baseConformsTo.js":"2uo6j","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2uo6j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.conformsTo` which accepts `props` to check.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property predicates to conform to.
 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
 */ function baseConformsTo(object, source, props) {
    var length = props.length;
    if (object == null) return !length;
    object = Object(object);
    while(length--){
        var key = props[length], predicate = source[key], value = object[key];
        if (value === undefined && !(key in object) || !predicate(value)) return false;
    }
    return true;
}
exports.default = baseConformsTo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3cwvY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseConformsToJs = require("./_baseConformsTo.js");
var _baseConformsToJsDefault = parcelHelpers.interopDefault(_baseConformsToJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Checks if `object` conforms to `source` by invoking the predicate
 * properties of `source` with the corresponding property values of `object`.
 *
 * **Note:** This method is equivalent to `_.conforms` when `source` is
 * partially applied.
 *
 * @static
 * @memberOf _
 * @since 4.14.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property predicates to conform to.
 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 *
 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
 * // => true
 *
 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
 * // => false
 */ function conformsTo(object, source) {
    return source == null || _baseConformsToJsDefault.default(object, source, _keysJsDefault.default(source));
}
exports.default = conformsTo;

},{"./_baseConformsTo.js":"2uo6j","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"45iHO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _createAggregatorJs = require("./_createAggregator.js");
var _createAggregatorJsDefault = parcelHelpers.interopDefault(_createAggregatorJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the number of times the key was returned by `iteratee`. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.countBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': 1, '6': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.countBy(['one', 'two', 'three'], 'length');
 * // => { '3': 2, '5': 1 }
 */ var countBy = _createAggregatorJsDefault.default(function(result, value, key) {
    if (hasOwnProperty.call(result, key)) ++result[key];
    else _baseAssignValueJsDefault.default(result, key, 1);
});
exports.default = countBy;

},{"./_baseAssignValue.js":"9nj6E","./_createAggregator.js":"8ewQK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8ewQK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayAggregatorJs = require("./_arrayAggregator.js");
var _arrayAggregatorJsDefault = parcelHelpers.interopDefault(_arrayAggregatorJs);
var _baseAggregatorJs = require("./_baseAggregator.js");
var _baseAggregatorJsDefault = parcelHelpers.interopDefault(_baseAggregatorJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */ function createAggregator(setter, initializer) {
    return function(collection, iteratee) {
        var func = _isArrayJsDefault.default(collection) ? _arrayAggregatorJsDefault.default : _baseAggregatorJsDefault.default, accumulator = initializer ? initializer() : {
        };
        return func(collection, setter, _baseIterateeJsDefault.default(iteratee, 2), accumulator);
    };
}
exports.default = createAggregator;

},{"./_arrayAggregator.js":"7OlNn","./_baseAggregator.js":"2zZd3","./_baseIteratee.js":"6ue66","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7OlNn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */ function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1, length = array == null ? 0 : array.length;
    while((++index) < length){
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
}
exports.default = arrayAggregator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2zZd3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */ function baseAggregator(collection, setter, iteratee, accumulator) {
    _baseEachJsDefault.default(collection, function(value, key, collection1) {
        setter(accumulator, value, iteratee(value), collection1);
    });
    return accumulator;
}
exports.default = baseAggregator;

},{"./_baseEach.js":"dpsE1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dpsE1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
var _createBaseEachJs = require("./_createBaseEach.js");
var _createBaseEachJsDefault = parcelHelpers.interopDefault(_createBaseEachJs);
/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */ var baseEach = _createBaseEachJsDefault.default(_baseForOwnJsDefault.default);
exports.default = baseEach;

},{"./_baseForOwn.js":"17EGa","./_createBaseEach.js":"aQDPh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"17EGa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForJs = require("./_baseFor.js");
var _baseForJsDefault = parcelHelpers.interopDefault(_baseForJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */ function baseForOwn(object, iteratee) {
    return object && _baseForJsDefault.default(object, iteratee, _keysJsDefault.default);
}
exports.default = baseForOwn;

},{"./_baseFor.js":"jifrz","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jifrz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createBaseForJs = require("./_createBaseFor.js");
var _createBaseForJsDefault = parcelHelpers.interopDefault(_createBaseForJs);
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = _createBaseForJsDefault.default();
exports.default = baseFor;

},{"./_createBaseFor.js":"7ZEh2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7ZEh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
exports.default = createBaseFor;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aQDPh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
        if (collection == null) return collection;
        if (!_isArrayLikeJsDefault.default(collection)) return eachFunc(collection, iteratee);
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while(fromRight ? index-- : (++index) < length){
            if (iteratee(iterable[index], index, iterable) === false) break;
        }
        return collection;
    };
}
exports.default = createBaseEach;

},{"./isArrayLike.js":"5oD0E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g3pk5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignJs = require("./_baseAssign.js");
var _baseAssignJsDefault = parcelHelpers.interopDefault(_baseAssignJs);
var _baseCreateJs = require("./_baseCreate.js");
var _baseCreateJsDefault = parcelHelpers.interopDefault(_baseCreateJs);
/**
 * Creates an object that inherits from the `prototype` object. If a
 * `properties` object is given, its own enumerable string keyed properties
 * are assigned to the created object.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */ function create(prototype, properties) {
    var result = _baseCreateJsDefault.default(prototype);
    return properties == null ? result : _baseAssignJsDefault.default(result, properties);
}
exports.default = create;

},{"./_baseAssign.js":"80087","./_baseCreate.js":"kSR8L","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"sHOcy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_CURRY_FLAG = 8;
/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */ function curry(func, arity, guard) {
    arity = guard ? undefined : arity;
    var result = _createWrapJsDefault.default(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
    result.placeholder = curry.placeholder;
    return result;
}
// Assign default placeholders.
curry.placeholder = {
};
exports.default = curry;

},{"./_createWrap.js":"b7iE3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cZ5bV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_CURRY_RIGHT_FLAG = 16;
/**
 * This method is like `_.curry` except that arguments are applied to `func`
 * in the manner of `_.partialRight` instead of `_.partial`.
 *
 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curryRight(abc);
 *
 * curried(3)(2)(1);
 * // => [1, 2, 3]
 *
 * curried(2, 3)(1);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(3)(1, _)(2);
 * // => [1, 2, 3]
 */ function curryRight(func, arity, guard) {
    arity = guard ? undefined : arity;
    var result = _createWrapJsDefault.default(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
    result.placeholder = curryRight.placeholder;
    return result;
}
// Assign default placeholders.
curryRight.placeholder = {
};
exports.default = curryRight;

},{"./_createWrap.js":"b7iE3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dgroW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _nowJs = require("./now.js");
var _nowJsDefault = parcelHelpers.interopDefault(_nowJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */ function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    wait = _toNumberJsDefault.default(wait) || 0;
    if (_isObjectJsDefault.default(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(_toNumberJsDefault.default(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
        var time = _nowJsDefault.default();
        if (shouldInvoke(time)) return trailingEdge(time);
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) return invokeFunc(time);
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) clearTimeout(timerId);
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(_nowJsDefault.default());
    }
    function debounced() {
        var time = _nowJsDefault.default(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) return leadingEdge(lastCallTime);
            if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
exports.default = debounce;

},{"./isObject.js":"1IOOk","./now.js":"aHjJy","./toNumber.js":"laU14","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aHjJy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */ var now = function() {
    return _rootJsDefault.default.Date.now();
};
exports.default = now;

},{"./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iFguT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks `value` to determine whether a default value should be returned in
 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
 * or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.14.0
 * @category Util
 * @param {*} value The value to check.
 * @param {*} defaultValue The default value.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * _.defaultTo(1, 10);
 * // => 1
 *
 * _.defaultTo(undefined, 10);
 * // => 10
 */ function defaultTo(value, defaultValue) {
    return value == null || value !== value ? defaultValue : value;
}
exports.default = defaultTo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"d3gia":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */ var defaults = _baseRestJsDefault.default(function(object, sources) {
    object = Object(object);
    var index = -1;
    var length = sources.length;
    var guard = length > 2 ? sources[2] : undefined;
    if (guard && _isIterateeCallJsDefault.default(sources[0], sources[1], guard)) length = 1;
    while((++index) < length){
        var source = sources[index];
        var props = _keysInJsDefault.default(source);
        var propsIndex = -1;
        var propsLength = props.length;
        while((++propsIndex) < propsLength){
            var key = props[propsIndex];
            var value = object[key];
            if (value === undefined || _eqJsDefault.default(value, objectProto[key]) && !hasOwnProperty.call(object, key)) object[key] = source[key];
        }
    }
    return object;
});
exports.default = defaults;

},{"./_baseRest.js":"6GMnO","./eq.js":"1PtGj","./_isIterateeCall.js":"aHCs0","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i9k30":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _customDefaultsMergeJs = require("./_customDefaultsMerge.js");
var _customDefaultsMergeJsDefault = parcelHelpers.interopDefault(_customDefaultsMergeJs);
var _mergeWithJs = require("./mergeWith.js");
var _mergeWithJsDefault = parcelHelpers.interopDefault(_mergeWithJs);
/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */ var defaultsDeep = _baseRestJsDefault.default(function(args) {
    args.push(undefined, _customDefaultsMergeJsDefault.default);
    return _applyJsDefault.default(_mergeWithJsDefault.default, undefined, args);
});
exports.default = defaultsDeep;

},{"./_apply.js":"jcowS","./_baseRest.js":"6GMnO","./_customDefaultsMerge.js":"9JB5I","./mergeWith.js":"cVSbE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9JB5I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseMergeJs = require("./_baseMerge.js");
var _baseMergeJsDefault = parcelHelpers.interopDefault(_baseMergeJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    if (_isObjectJsDefault.default(objValue) && _isObjectJsDefault.default(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        _baseMergeJsDefault.default(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
    }
    return objValue;
}
exports.default = customDefaultsMerge;

},{"./_baseMerge.js":"laHT4","./isObject.js":"1IOOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"laHT4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _stackJs = require("./_Stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _assignMergeValueJs = require("./_assignMergeValue.js");
var _assignMergeValueJsDefault = parcelHelpers.interopDefault(_assignMergeValueJs);
var _baseForJs = require("./_baseFor.js");
var _baseForJsDefault = parcelHelpers.interopDefault(_baseForJs);
var _baseMergeDeepJs = require("./_baseMergeDeep.js");
var _baseMergeDeepJsDefault = parcelHelpers.interopDefault(_baseMergeDeepJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
var _safeGetJs = require("./_safeGet.js");
var _safeGetJsDefault = parcelHelpers.interopDefault(_safeGetJs);
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) return;
    _baseForJsDefault.default(source, function(srcValue, key) {
        stack || (stack = new _stackJsDefault.default);
        if (_isObjectJsDefault.default(srcValue)) _baseMergeDeepJsDefault.default(object, source, key, srcIndex, baseMerge, customizer, stack);
        else {
            var newValue = customizer ? customizer(_safeGetJsDefault.default(object, key), srcValue, key + '', object, source, stack) : undefined;
            if (newValue === undefined) newValue = srcValue;
            _assignMergeValueJsDefault.default(object, key, newValue);
        }
    }, _keysInJsDefault.default);
}
exports.default = baseMerge;

},{"./_Stack.js":"7pz2h","./_assignMergeValue.js":"c7cJs","./_baseFor.js":"jifrz","./_baseMergeDeep.js":"7PNwx","./isObject.js":"1IOOk","./keysIn.js":"dwsZb","./_safeGet.js":"lQqhi","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c7cJs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignMergeValue(object, key, value) {
    if (value !== undefined && !_eqJsDefault.default(object[key], value) || value === undefined && !(key in object)) _baseAssignValueJsDefault.default(object, key, value);
}
exports.default = assignMergeValue;

},{"./_baseAssignValue.js":"9nj6E","./eq.js":"1PtGj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7PNwx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignMergeValueJs = require("./_assignMergeValue.js");
var _assignMergeValueJsDefault = parcelHelpers.interopDefault(_assignMergeValueJs);
var _cloneBufferJs = require("./_cloneBuffer.js");
var _cloneBufferJsDefault = parcelHelpers.interopDefault(_cloneBufferJs);
var _cloneTypedArrayJs = require("./_cloneTypedArray.js");
var _cloneTypedArrayJsDefault = parcelHelpers.interopDefault(_cloneTypedArrayJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _initCloneObjectJs = require("./_initCloneObject.js");
var _initCloneObjectJsDefault = parcelHelpers.interopDefault(_initCloneObjectJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isPlainObjectJs = require("./isPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
var _safeGetJs = require("./_safeGet.js");
var _safeGetJsDefault = parcelHelpers.interopDefault(_safeGetJs);
var _toPlainObjectJs = require("./toPlainObject.js");
var _toPlainObjectJsDefault = parcelHelpers.interopDefault(_toPlainObjectJs);
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = _safeGetJsDefault.default(object, key), srcValue = _safeGetJsDefault.default(source, key), stacked = stack.get(srcValue);
    if (stacked) {
        _assignMergeValueJsDefault.default(object, key, stacked);
        return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
        var isArr = _isArrayJsDefault.default(srcValue), isBuff = !isArr && _isBufferJsDefault.default(srcValue), isTyped = !isArr && !isBuff && _isTypedArrayJsDefault.default(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
            if (_isArrayJsDefault.default(objValue)) newValue = objValue;
            else if (_isArrayLikeObjectJsDefault.default(objValue)) newValue = _copyArrayJsDefault.default(objValue);
            else if (isBuff) {
                isCommon = false;
                newValue = _cloneBufferJsDefault.default(srcValue, true);
            } else if (isTyped) {
                isCommon = false;
                newValue = _cloneTypedArrayJsDefault.default(srcValue, true);
            } else newValue = [];
        } else if (_isPlainObjectJsDefault.default(srcValue) || _isArgumentsJsDefault.default(srcValue)) {
            newValue = objValue;
            if (_isArgumentsJsDefault.default(objValue)) newValue = _toPlainObjectJsDefault.default(objValue);
            else if (!_isObjectJsDefault.default(objValue) || _isFunctionJsDefault.default(objValue)) newValue = _initCloneObjectJsDefault.default(srcValue);
        } else isCommon = false;
    }
    if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
    }
    _assignMergeValueJsDefault.default(object, key, newValue);
}
exports.default = baseMergeDeep;

},{"./_assignMergeValue.js":"c7cJs","./_cloneBuffer.js":"jENnq","./_cloneTypedArray.js":"jsHea","./_copyArray.js":"aKKbc","./_initCloneObject.js":"gkIZ8","./isArguments.js":"bCq5F","./isArray.js":"aM5De","./isArrayLikeObject.js":"7pSqJ","./isBuffer.js":"5zLdt","./isFunction.js":"flqKI","./isObject.js":"1IOOk","./isPlainObject.js":"bA6mR","./isTypedArray.js":"4zD9H","./_safeGet.js":"lQqhi","./toPlainObject.js":"ZojMJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7pSqJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return _isObjectLikeJsDefault.default(value) && _isArrayLikeJsDefault.default(value);
}
exports.default = isArrayLikeObject;

},{"./isArrayLike.js":"5oD0E","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lQqhi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') return;
    if (key == '__proto__') return;
    return object[key];
}
exports.default = safeGet;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ZojMJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */ function toPlainObject(value) {
    return _copyObjectJsDefault.default(value, _keysInJsDefault.default(value));
}
exports.default = toPlainObject;

},{"./_copyObject.js":"iJJjY","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cVSbE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseMergeJs = require("./_baseMerge.js");
var _baseMergeJsDefault = parcelHelpers.interopDefault(_baseMergeJs);
var _createAssignerJs = require("./_createAssigner.js");
var _createAssignerJsDefault = parcelHelpers.interopDefault(_createAssignerJs);
/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */ var mergeWith = _createAssignerJsDefault.default(function(object, source, srcIndex, customizer) {
    _baseMergeJsDefault.default(object, source, srcIndex, customizer);
});
exports.default = mergeWith;

},{"./_baseMerge.js":"laHT4","./_createAssigner.js":"7JrYL","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9itZG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseDelayJs = require("./_baseDelay.js");
var _baseDelayJsDefault = parcelHelpers.interopDefault(_baseDelayJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
/**
 * Defers invoking the `func` until the current call stack has cleared. Any
 * additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to defer.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.defer(function(text) {
 *   console.log(text);
 * }, 'deferred');
 * // => Logs 'deferred' after one millisecond.
 */ var defer = _baseRestJsDefault.default(function(func, args) {
    return _baseDelayJsDefault.default(func, 1, args);
});
exports.default = defer;

},{"./_baseDelay.js":"ltdhD","./_baseRest.js":"6GMnO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ltdhD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * The base implementation of `_.delay` and `_.defer` which accepts `args`
 * to provide to `func`.
 *
 * @private
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {Array} args The arguments to provide to `func`.
 * @returns {number|Object} Returns the timer id or timeout object.
 */ function baseDelay(func, wait, args) {
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    return setTimeout(function() {
        func.apply(undefined, args);
    }, wait);
}
exports.default = baseDelay;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lM266":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseDelayJs = require("./_baseDelay.js");
var _baseDelayJsDefault = parcelHelpers.interopDefault(_baseDelayJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
/**
 * Invokes `func` after `wait` milliseconds. Any additional arguments are
 * provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.delay(function(text) {
 *   console.log(text);
 * }, 1000, 'later');
 * // => Logs 'later' after one second.
 */ var delay = _baseRestJsDefault.default(function(func, wait, args) {
    return _baseDelayJsDefault.default(func, _toNumberJsDefault.default(wait) || 0, args);
});
exports.default = delay;

},{"./_baseDelay.js":"ltdhD","./_baseRest.js":"6GMnO","./toNumber.js":"laU14","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bCldF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseDifferenceJs = require("./_baseDifference.js");
var _baseDifferenceJsDefault = parcelHelpers.interopDefault(_baseDifferenceJs);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */ var difference = _baseRestJsDefault.default(function(array, values) {
    return _isArrayLikeObjectJsDefault.default(array) ? _baseDifferenceJsDefault.default(array, _baseFlattenJsDefault.default(values, 1, _isArrayLikeObjectJsDefault.default, true)) : [];
});
exports.default = difference;

},{"./_baseDifference.js":"7M3du","./_baseFlatten.js":"dXyiK","./_baseRest.js":"6GMnO","./isArrayLikeObject.js":"7pSqJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7M3du":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setCacheJs = require("./_SetCache.js");
var _setCacheJsDefault = parcelHelpers.interopDefault(_setCacheJs);
var _arrayIncludesJs = require("./_arrayIncludes.js");
var _arrayIncludesJsDefault = parcelHelpers.interopDefault(_arrayIncludesJs);
var _arrayIncludesWithJs = require("./_arrayIncludesWith.js");
var _arrayIncludesWithJsDefault = parcelHelpers.interopDefault(_arrayIncludesWithJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _cacheHasJs = require("./_cacheHas.js");
var _cacheHasJsDefault = parcelHelpers.interopDefault(_cacheHasJs);
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */ function baseDifference(array, values, iteratee, comparator) {
    var index = -1, includes = _arrayIncludesJsDefault.default, isCommon = true, length = array.length, result = [], valuesLength = values.length;
    if (!length) return result;
    if (iteratee) values = _arrayMapJsDefault.default(values, _baseUnaryJsDefault.default(iteratee));
    if (comparator) {
        includes = _arrayIncludesWithJsDefault.default;
        isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = _cacheHasJsDefault.default;
        isCommon = false;
        values = new _setCacheJsDefault.default(values);
    }
    outer: while((++index) < length){
        var value = array[index], computed = iteratee == null ? value : iteratee(value);
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while(valuesIndex--){
                if (values[valuesIndex] === computed) continue outer;
            }
            result.push(value);
        } else if (!includes(values, computed, comparator)) result.push(value);
    }
    return result;
}
exports.default = baseDifference;

},{"./_SetCache.js":"cojUc","./_arrayIncludes.js":"dNWOV","./_arrayIncludesWith.js":"eqsLX","./_arrayMap.js":"jjvFU","./_baseUnary.js":"3cdEI","./_cacheHas.js":"9Bp52","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eqsLX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array == null ? 0 : array.length;
    while((++index) < length){
        if (comparator(value, array[index])) return true;
    }
    return false;
}
exports.default = arrayIncludesWith;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gw2AS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseDifferenceJs = require("./_baseDifference.js");
var _baseDifferenceJsDefault = parcelHelpers.interopDefault(_baseDifferenceJs);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.difference` except that it accepts `iteratee` which
 * is invoked for each element of `array` and `values` to generate the criterion
 * by which they're compared. The order and references of result values are
 * determined by the first array. The iteratee is invoked with one argument:
 * (value).
 *
 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
 * // => [{ 'x': 2 }]
 */ var differenceBy = _baseRestJsDefault.default(function(array, values) {
    var iteratee = _lastJsDefault.default(values);
    if (_isArrayLikeObjectJsDefault.default(iteratee)) iteratee = undefined;
    return _isArrayLikeObjectJsDefault.default(array) ? _baseDifferenceJsDefault.default(array, _baseFlattenJsDefault.default(values, 1, _isArrayLikeObjectJsDefault.default, true), _baseIterateeJsDefault.default(iteratee, 2)) : [];
});
exports.default = differenceBy;

},{"./_baseDifference.js":"7M3du","./_baseFlatten.js":"dXyiK","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","./isArrayLikeObject.js":"7pSqJ","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cAZFz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */ function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
}
exports.default = last;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3hQVe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseDifferenceJs = require("./_baseDifference.js");
var _baseDifferenceJsDefault = parcelHelpers.interopDefault(_baseDifferenceJs);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.difference` except that it accepts `comparator`
 * which is invoked to compare elements of `array` to `values`. The order and
 * references of result values are determined by the first array. The comparator
 * is invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 *
 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }]
 */ var differenceWith = _baseRestJsDefault.default(function(array, values) {
    var comparator = _lastJsDefault.default(values);
    if (_isArrayLikeObjectJsDefault.default(comparator)) comparator = undefined;
    return _isArrayLikeObjectJsDefault.default(array) ? _baseDifferenceJsDefault.default(array, _baseFlattenJsDefault.default(values, 1, _isArrayLikeObjectJsDefault.default, true), undefined, comparator) : [];
});
exports.default = differenceWith;

},{"./_baseDifference.js":"7M3du","./_baseFlatten.js":"dXyiK","./_baseRest.js":"6GMnO","./isArrayLikeObject.js":"7pSqJ","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gvIlS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createMathOperationJs = require("./_createMathOperation.js");
var _createMathOperationJsDefault = parcelHelpers.interopDefault(_createMathOperationJs);
/**
 * Divide two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {number} dividend The first number in a division.
 * @param {number} divisor The second number in a division.
 * @returns {number} Returns the quotient.
 * @example
 *
 * _.divide(6, 4);
 * // => 1.5
 */ var divide = _createMathOperationJsDefault.default(function(dividend, divisor) {
    return dividend / divisor;
}, 1);
exports.default = divide;

},{"./_createMathOperation.js":"aW9XE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Sf8Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Creates a slice of `array` with `n` elements dropped from the beginning.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to drop.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.drop([1, 2, 3]);
 * // => [2, 3]
 *
 * _.drop([1, 2, 3], 2);
 * // => [3]
 *
 * _.drop([1, 2, 3], 5);
 * // => []
 *
 * _.drop([1, 2, 3], 0);
 * // => [1, 2, 3]
 */ function drop(array, n, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) return [];
    n = guard || n === undefined ? 1 : _toIntegerJsDefault.default(n);
    return _baseSliceJsDefault.default(array, n < 0 ? 0 : n, length);
}
exports.default = drop;

},{"./_baseSlice.js":"dOp4f","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"qlemU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Creates a slice of `array` with `n` elements dropped from the end.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to drop.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.dropRight([1, 2, 3]);
 * // => [1, 2]
 *
 * _.dropRight([1, 2, 3], 2);
 * // => [1]
 *
 * _.dropRight([1, 2, 3], 5);
 * // => []
 *
 * _.dropRight([1, 2, 3], 0);
 * // => [1, 2, 3]
 */ function dropRight(array, n, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) return [];
    n = guard || n === undefined ? 1 : _toIntegerJsDefault.default(n);
    n = length - n;
    return _baseSliceJsDefault.default(array, 0, n < 0 ? 0 : n);
}
exports.default = dropRight;

},{"./_baseSlice.js":"dOp4f","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2rwBJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseWhileJs = require("./_baseWhile.js");
var _baseWhileJsDefault = parcelHelpers.interopDefault(_baseWhileJs);
/**
 * Creates a slice of `array` excluding elements dropped from the end.
 * Elements are dropped until `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.dropRightWhile(users, function(o) { return !o.active; });
 * // => objects for ['barney']
 *
 * // The `_.matches` iteratee shorthand.
 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
 * // => objects for ['barney', 'fred']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.dropRightWhile(users, ['active', false]);
 * // => objects for ['barney']
 *
 * // The `_.property` iteratee shorthand.
 * _.dropRightWhile(users, 'active');
 * // => objects for ['barney', 'fred', 'pebbles']
 */ function dropRightWhile(array, predicate) {
    return array && array.length ? _baseWhileJsDefault.default(array, _baseIterateeJsDefault.default(predicate, 3), true, true) : [];
}
exports.default = dropRightWhile;

},{"./_baseIteratee.js":"6ue66","./_baseWhile.js":"b7XmE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b7XmE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
/**
 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
 * without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {Function} predicate The function invoked per iteration.
 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the slice of `array`.
 */ function baseWhile(array, predicate, isDrop, fromRight) {
    var length = array.length, index = fromRight ? length : -1;
    while((fromRight ? index-- : (++index) < length) && predicate(array[index], index, array));
    return isDrop ? _baseSliceJsDefault.default(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : _baseSliceJsDefault.default(array, fromRight ? index + 1 : 0, fromRight ? length : index);
}
exports.default = baseWhile;

},{"./_baseSlice.js":"dOp4f","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"glm5L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseWhileJs = require("./_baseWhile.js");
var _baseWhileJsDefault = parcelHelpers.interopDefault(_baseWhileJs);
/**
 * Creates a slice of `array` excluding elements dropped from the beginning.
 * Elements are dropped until `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.dropWhile(users, function(o) { return !o.active; });
 * // => objects for ['pebbles']
 *
 * // The `_.matches` iteratee shorthand.
 * _.dropWhile(users, { 'user': 'barney', 'active': false });
 * // => objects for ['fred', 'pebbles']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.dropWhile(users, ['active', false]);
 * // => objects for ['pebbles']
 *
 * // The `_.property` iteratee shorthand.
 * _.dropWhile(users, 'active');
 * // => objects for ['barney', 'fred', 'pebbles']
 */ function dropWhile(array, predicate) {
    return array && array.length ? _baseWhileJsDefault.default(array, _baseIterateeJsDefault.default(predicate, 3), true) : [];
}
exports.default = dropWhile;

},{"./_baseIteratee.js":"6ue66","./_baseWhile.js":"b7XmE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"mIhlP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_forEachJsDefault.default
);
var _forEachJs = require("./forEach.js");
var _forEachJsDefault = parcelHelpers.interopDefault(_forEachJs);

},{"./forEach.js":"bCmxz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bCmxz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */ function forEach(collection, iteratee) {
    var func = _isArrayJsDefault.default(collection) ? _arrayEachJsDefault.default : _baseEachJsDefault.default;
    return func(collection, _castFunctionJsDefault.default(iteratee));
}
exports.default = forEach;

},{"./_arrayEach.js":"6ICgZ","./_baseEach.js":"dpsE1","./_castFunction.js":"6ccaN","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6ccaN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */ function castFunction(value) {
    return typeof value == 'function' ? value : _identityJsDefault.default;
}
exports.default = castFunction;

},{"./identity.js":"fqqWQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"da27m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_forEachRightJsDefault.default
);
var _forEachRightJs = require("./forEachRight.js");
var _forEachRightJsDefault = parcelHelpers.interopDefault(_forEachRightJs);

},{"./forEachRight.js":"e4t4U","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e4t4U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEachRightJs = require("./_arrayEachRight.js");
var _arrayEachRightJsDefault = parcelHelpers.interopDefault(_arrayEachRightJs);
var _baseEachRightJs = require("./_baseEachRight.js");
var _baseEachRightJsDefault = parcelHelpers.interopDefault(_baseEachRightJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * This method is like `_.forEach` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @alias eachRight
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEach
 * @example
 *
 * _.forEachRight([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `2` then `1`.
 */ function forEachRight(collection, iteratee) {
    var func = _isArrayJsDefault.default(collection) ? _arrayEachRightJsDefault.default : _baseEachRightJsDefault.default;
    return func(collection, _castFunctionJsDefault.default(iteratee));
}
exports.default = forEachRight;

},{"./_arrayEachRight.js":"hz41m","./_baseEachRight.js":"gYvMD","./_castFunction.js":"6ccaN","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hz41m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.forEachRight` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;
    while(length--){
        if (iteratee(array[length], length, array) === false) break;
    }
    return array;
}
exports.default = arrayEachRight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gYvMD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForOwnRightJs = require("./_baseForOwnRight.js");
var _baseForOwnRightJsDefault = parcelHelpers.interopDefault(_baseForOwnRightJs);
var _createBaseEachJs = require("./_createBaseEach.js");
var _createBaseEachJsDefault = parcelHelpers.interopDefault(_createBaseEachJs);
/**
 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */ var baseEachRight = _createBaseEachJsDefault.default(_baseForOwnRightJsDefault.default, true);
exports.default = baseEachRight;

},{"./_baseForOwnRight.js":"68dFX","./_createBaseEach.js":"aQDPh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"68dFX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForRightJs = require("./_baseForRight.js");
var _baseForRightJsDefault = parcelHelpers.interopDefault(_baseForRightJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */ function baseForOwnRight(object, iteratee) {
    return object && _baseForRightJsDefault.default(object, iteratee, _keysJsDefault.default);
}
exports.default = baseForOwnRight;

},{"./_baseForRight.js":"2bBKI","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2bBKI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createBaseForJs = require("./_createBaseFor.js");
var _createBaseForJsDefault = parcelHelpers.interopDefault(_createBaseForJs);
/**
 * This function is like `baseFor` except that it iterates over properties
 * in the opposite order.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseForRight = _createBaseForJsDefault.default(true);
exports.default = baseForRight;

},{"./_createBaseFor.js":"7ZEh2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7h2su":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClampJs = require("./_baseClamp.js");
var _baseClampJsDefault = parcelHelpers.interopDefault(_baseClampJs);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Checks if `string` ends with the given target string.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {string} [target] The string to search for.
 * @param {number} [position=string.length] The position to search up to.
 * @returns {boolean} Returns `true` if `string` ends with `target`,
 *  else `false`.
 * @example
 *
 * _.endsWith('abc', 'c');
 * // => true
 *
 * _.endsWith('abc', 'b');
 * // => false
 *
 * _.endsWith('abc', 'b', 2);
 * // => true
 */ function endsWith(string, target, position) {
    string = _toStringJsDefault.default(string);
    target = _baseToStringJsDefault.default(target);
    var length = string.length;
    position = position === undefined ? length : _baseClampJsDefault.default(_toIntegerJsDefault.default(position), 0, length);
    var end = position;
    position -= target.length;
    return position >= 0 && string.slice(position, end) == target;
}
exports.default = endsWith;

},{"./_baseClamp.js":"04c2V","./_baseToString.js":"cWGOY","./toInteger.js":"69J4a","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j8uzz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_toPairsJsDefault.default
);
var _toPairsJs = require("./toPairs.js");
var _toPairsJsDefault = parcelHelpers.interopDefault(_toPairsJs);

},{"./toPairs.js":"lKvG2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lKvG2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createToPairsJs = require("./_createToPairs.js");
var _createToPairsJsDefault = parcelHelpers.interopDefault(_createToPairsJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Creates an array of own enumerable string keyed-value pairs for `object`
 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
 * entries are returned.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias entries
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the key-value pairs.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.toPairs(new Foo);
 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
 */ var toPairs = _createToPairsJsDefault.default(_keysJsDefault.default);
exports.default = toPairs;

},{"./_createToPairs.js":"bLm8t","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bLm8t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToPairsJs = require("./_baseToPairs.js");
var _baseToPairsJsDefault = parcelHelpers.interopDefault(_baseToPairsJs);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _mapToArrayJs = require("./_mapToArray.js");
var _mapToArrayJsDefault = parcelHelpers.interopDefault(_mapToArrayJs);
var _setToPairsJs = require("./_setToPairs.js");
var _setToPairsJsDefault = parcelHelpers.interopDefault(_setToPairsJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]', setTag = '[object Set]';
/**
 * Creates a `_.toPairs` or `_.toPairsIn` function.
 *
 * @private
 * @param {Function} keysFunc The function to get the keys of a given object.
 * @returns {Function} Returns the new pairs function.
 */ function createToPairs(keysFunc) {
    return function(object) {
        var tag = _getTagJsDefault.default(object);
        if (tag == mapTag) return _mapToArrayJsDefault.default(object);
        if (tag == setTag) return _setToPairsJsDefault.default(object);
        return _baseToPairsJsDefault.default(object, keysFunc(object));
    };
}
exports.default = createToPairs;

},{"./_baseToPairs.js":"hvsBU","./_getTag.js":"l96z0","./_mapToArray.js":"8pcjC","./_setToPairs.js":"1zWgr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hvsBU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
/**
 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
 * of key-value pairs for `object` corresponding to the property names of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the key-value pairs.
 */ function baseToPairs(object, props) {
    return _arrayMapJsDefault.default(props, function(key) {
        return [
            key,
            object[key]
        ];
    });
}
exports.default = baseToPairs;

},{"./_arrayMap.js":"jjvFU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1zWgr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts `set` to its value-value pairs.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the value-value pairs.
 */ function setToPairs(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = [
            value,
            value
        ];
    });
    return result;
}
exports.default = setToPairs;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7Roxa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_toPairsInJsDefault.default
);
var _toPairsInJs = require("./toPairsIn.js");
var _toPairsInJsDefault = parcelHelpers.interopDefault(_toPairsInJs);

},{"./toPairsIn.js":"9ITR9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9ITR9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createToPairsJs = require("./_createToPairs.js");
var _createToPairsJsDefault = parcelHelpers.interopDefault(_createToPairsJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * Creates an array of own and inherited enumerable string keyed-value pairs
 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
 * or set, its entries are returned.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias entriesIn
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the key-value pairs.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.toPairsIn(new Foo);
 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
 */ var toPairsIn = _createToPairsJsDefault.default(_keysInJsDefault.default);
exports.default = toPairsIn;

},{"./_createToPairs.js":"bLm8t","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9Kfvx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _escapeHtmlCharJs = require("./_escapeHtmlChar.js");
var _escapeHtmlCharJsDefault = parcelHelpers.interopDefault(_escapeHtmlCharJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Used to match HTML entities and HTML characters. */ var reUnescapedHtml = /[&<>"']/g, reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
/**
 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
 * corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */ function escape(string) {
    string = _toStringJsDefault.default(string);
    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, _escapeHtmlCharJsDefault.default) : string;
}
exports.default = escape;

},{"./_escapeHtmlChar.js":"l1rPx","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l1rPx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePropertyOfJs = require("./_basePropertyOf.js");
var _basePropertyOfJsDefault = parcelHelpers.interopDefault(_basePropertyOfJs);
/** Used to map characters to HTML entities. */ var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
};
/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */ var escapeHtmlChar = _basePropertyOfJsDefault.default(htmlEscapes);
exports.default = escapeHtmlChar;

},{"./_basePropertyOf.js":"5Sf35","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ilQiZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
/**
 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escapeRegExp('[lodash](https://lodash.com/)');
 * // => '\[lodash\]\(https://lodash\.com/\)'
 */ function escapeRegExp(string) {
    string = _toStringJsDefault.default(string);
    return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
}
exports.default = escapeRegExp;

},{"./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a4oI7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEveryJs = require("./_arrayEvery.js");
var _arrayEveryJsDefault = parcelHelpers.interopDefault(_arrayEveryJs);
var _baseEveryJs = require("./_baseEvery.js");
var _baseEveryJsDefault = parcelHelpers.interopDefault(_baseEveryJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */ function every(collection, predicate, guard) {
    var func = _isArrayJsDefault.default(collection) ? _arrayEveryJsDefault.default : _baseEveryJsDefault.default;
    if (guard && _isIterateeCallJsDefault.default(collection, predicate, guard)) predicate = undefined;
    return func(collection, _baseIterateeJsDefault.default(predicate, 3));
}
exports.default = every;

},{"./_arrayEvery.js":"4orbJ","./_baseEvery.js":"f3wFb","./_baseIteratee.js":"6ue66","./isArray.js":"aM5De","./_isIterateeCall.js":"aHCs0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4orbJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */ function arrayEvery(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while((++index) < length){
        if (!predicate(array[index], index, array)) return false;
    }
    return true;
}
exports.default = arrayEvery;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f3wFb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */ function baseEvery(collection, predicate) {
    var result = true;
    _baseEachJsDefault.default(collection, function(value, index, collection1) {
        result = !!predicate(value, index, collection1);
        return result;
    });
    return result;
}
exports.default = baseEvery;

},{"./_baseEach.js":"dpsE1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dmzZi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_assignInJsDefault.default
);
var _assignInJs = require("./assignIn.js");
var _assignInJsDefault = parcelHelpers.interopDefault(_assignInJs);

},{"./assignIn.js":"8GeoO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2f1gj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_assignInWithJsDefault.default
);
var _assignInWithJs = require("./assignInWith.js");
var _assignInWithJsDefault = parcelHelpers.interopDefault(_assignInWithJs);

},{"./assignInWith.js":"e4uIW","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kfgEy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFillJs = require("./_baseFill.js");
var _baseFillJsDefault = parcelHelpers.interopDefault(_baseFillJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
/**
 * Fills elements of `array` with `value` from `start` up to, but not
 * including, `end`.
 *
 * **Note:** This method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Array
 * @param {Array} array The array to fill.
 * @param {*} value The value to fill `array` with.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _.fill(array, 'a');
 * console.log(array);
 * // => ['a', 'a', 'a']
 *
 * _.fill(Array(3), 2);
 * // => [2, 2, 2]
 *
 * _.fill([4, 6, 8, 10], '*', 1, 3);
 * // => [4, '*', '*', 10]
 */ function fill(array, value, start, end) {
    var length = array == null ? 0 : array.length;
    if (!length) return [];
    if (start && typeof start != 'number' && _isIterateeCallJsDefault.default(array, value, start)) {
        start = 0;
        end = length;
    }
    return _baseFillJsDefault.default(array, value, start, end);
}
exports.default = fill;

},{"./_baseFill.js":"c7HUZ","./_isIterateeCall.js":"aHCs0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c7HUZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toLengthJs = require("./toLength.js");
var _toLengthJsDefault = parcelHelpers.interopDefault(_toLengthJs);
/**
 * The base implementation of `_.fill` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to fill.
 * @param {*} value The value to fill `array` with.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns `array`.
 */ function baseFill(array, value, start, end) {
    var length = array.length;
    start = _toIntegerJsDefault.default(start);
    if (start < 0) start = -start > length ? 0 : length + start;
    end = end === undefined || end > length ? length : _toIntegerJsDefault.default(end);
    if (end < 0) end += length;
    end = start > end ? 0 : _toLengthJsDefault.default(end);
    while(start < end)array[start++] = value;
    return array;
}
exports.default = baseFill;

},{"./toInteger.js":"69J4a","./toLength.js":"agxNV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"agxNV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClampJs = require("./_baseClamp.js");
var _baseClampJsDefault = parcelHelpers.interopDefault(_baseClampJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/**
 * Converts `value` to an integer suitable for use as the length of an
 * array-like object.
 *
 * **Note:** This method is based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toLength(3.2);
 * // => 3
 *
 * _.toLength(Number.MIN_VALUE);
 * // => 0
 *
 * _.toLength(Infinity);
 * // => 4294967295
 *
 * _.toLength('3.2');
 * // => 3
 */ function toLength(value) {
    return value ? _baseClampJsDefault.default(_toIntegerJsDefault.default(value), 0, MAX_ARRAY_LENGTH) : 0;
}
exports.default = toLength;

},{"./_baseClamp.js":"04c2V","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a6Bax":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _baseFilterJs = require("./_baseFilter.js");
var _baseFilterJsDefault = parcelHelpers.interopDefault(_baseFilterJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 *
 * // Combining several predicates using `_.overEvery` or `_.overSome`.
 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
 * // => objects for ['fred', 'barney']
 */ function filter(collection, predicate) {
    var func = _isArrayJsDefault.default(collection) ? _arrayFilterJsDefault.default : _baseFilterJsDefault.default;
    return func(collection, _baseIterateeJsDefault.default(predicate, 3));
}
exports.default = filter;

},{"./_arrayFilter.js":"aSstn","./_baseFilter.js":"6rMeT","./_baseIteratee.js":"6ue66","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6rMeT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function baseFilter(collection, predicate) {
    var result = [];
    _baseEachJsDefault.default(collection, function(value, index, collection1) {
        if (predicate(value, index, collection1)) result.push(value);
    });
    return result;
}
exports.default = baseFilter;

},{"./_baseEach.js":"dpsE1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"53X6i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createFindJs = require("./_createFind.js");
var _createFindJsDefault = parcelHelpers.interopDefault(_createFindJs);
var _findIndexJs = require("./findIndex.js");
var _findIndexJsDefault = parcelHelpers.interopDefault(_findIndexJs);
/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */ var find = _createFindJsDefault.default(_findIndexJsDefault.default);
exports.default = find;

},{"./_createFind.js":"4PRu5","./findIndex.js":"YGDUB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4PRu5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */ function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!_isArrayLikeJsDefault.default(collection)) {
            var iteratee = _baseIterateeJsDefault.default(predicate, 3);
            collection = _keysJsDefault.default(collection);
            predicate = function(key) {
                return iteratee(iterable[key], key, iterable);
            };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
}
exports.default = createFind;

},{"./_baseIteratee.js":"6ue66","./isArrayLike.js":"5oD0E","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"YGDUB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFindIndexJs = require("./_baseFindIndex.js");
var _baseFindIndexJsDefault = parcelHelpers.interopDefault(_baseFindIndexJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */ function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) return -1;
    var index = fromIndex == null ? 0 : _toIntegerJsDefault.default(fromIndex);
    if (index < 0) index = nativeMax(length + index, 0);
    return _baseFindIndexJsDefault.default(array, _baseIterateeJsDefault.default(predicate, 3), index);
}
exports.default = findIndex;

},{"./_baseFindIndex.js":"21KN9","./_baseIteratee.js":"6ue66","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1JJrl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFindKeyJs = require("./_baseFindKey.js");
var _baseFindKeyJsDefault = parcelHelpers.interopDefault(_baseFindKeyJs);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
/**
 * This method is like `_.find` except that it returns the key of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Object
 * @param {Object} object The object to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {string|undefined} Returns the key of the matched element,
 *  else `undefined`.
 * @example
 *
 * var users = {
 *   'barney':  { 'age': 36, 'active': true },
 *   'fred':    { 'age': 40, 'active': false },
 *   'pebbles': { 'age': 1,  'active': true }
 * };
 *
 * _.findKey(users, function(o) { return o.age < 40; });
 * // => 'barney' (iteration order is not guaranteed)
 *
 * // The `_.matches` iteratee shorthand.
 * _.findKey(users, { 'age': 1, 'active': true });
 * // => 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findKey(users, ['active', false]);
 * // => 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.findKey(users, 'active');
 * // => 'barney'
 */ function findKey(object, predicate) {
    return _baseFindKeyJsDefault.default(object, _baseIterateeJsDefault.default(predicate, 3), _baseForOwnJsDefault.default);
}
exports.default = findKey;

},{"./_baseFindKey.js":"kTOaV","./_baseForOwn.js":"17EGa","./_baseIteratee.js":"6ue66","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kTOaV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
 * without support for iteratee shorthands, which iterates over `collection`
 * using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the found element or its key, else `undefined`.
 */ function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection1) {
        if (predicate(value, key, collection1)) {
            result = key;
            return false;
        }
    });
    return result;
}
exports.default = baseFindKey;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lGU8L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createFindJs = require("./_createFind.js");
var _createFindJsDefault = parcelHelpers.interopDefault(_createFindJs);
var _findLastIndexJs = require("./findLastIndex.js");
var _findLastIndexJsDefault = parcelHelpers.interopDefault(_findLastIndexJs);
/**
 * This method is like `_.find` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=collection.length-1] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * _.findLast([1, 2, 3, 4], function(n) {
 *   return n % 2 == 1;
 * });
 * // => 3
 */ var findLast = _createFindJsDefault.default(_findLastIndexJsDefault.default);
exports.default = findLast;

},{"./_createFind.js":"4PRu5","./findLastIndex.js":"5alCm","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5alCm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFindIndexJs = require("./_baseFindIndex.js");
var _baseFindIndexJsDefault = parcelHelpers.interopDefault(_baseFindIndexJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * This method is like `_.findIndex` except that it iterates over elements
 * of `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
 * // => 2
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
 * // => 0
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastIndex(users, ['active', false]);
 * // => 2
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastIndex(users, 'active');
 * // => 0
 */ function findLastIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) return -1;
    var index = length - 1;
    if (fromIndex !== undefined) {
        index = _toIntegerJsDefault.default(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
    }
    return _baseFindIndexJsDefault.default(array, _baseIterateeJsDefault.default(predicate, 3), index, true);
}
exports.default = findLastIndex;

},{"./_baseFindIndex.js":"21KN9","./_baseIteratee.js":"6ue66","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hF3xZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFindKeyJs = require("./_baseFindKey.js");
var _baseFindKeyJsDefault = parcelHelpers.interopDefault(_baseFindKeyJs);
var _baseForOwnRightJs = require("./_baseForOwnRight.js");
var _baseForOwnRightJsDefault = parcelHelpers.interopDefault(_baseForOwnRightJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
/**
 * This method is like `_.findKey` except that it iterates over elements of
 * a collection in the opposite order.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Object
 * @param {Object} object The object to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {string|undefined} Returns the key of the matched element,
 *  else `undefined`.
 * @example
 *
 * var users = {
 *   'barney':  { 'age': 36, 'active': true },
 *   'fred':    { 'age': 40, 'active': false },
 *   'pebbles': { 'age': 1,  'active': true }
 * };
 *
 * _.findLastKey(users, function(o) { return o.age < 40; });
 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastKey(users, { 'age': 36, 'active': true });
 * // => 'barney'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastKey(users, ['active', false]);
 * // => 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastKey(users, 'active');
 * // => 'pebbles'
 */ function findLastKey(object, predicate) {
    return _baseFindKeyJsDefault.default(object, _baseIterateeJsDefault.default(predicate, 3), _baseForOwnRightJsDefault.default);
}
exports.default = findLastKey;

},{"./_baseFindKey.js":"kTOaV","./_baseForOwnRight.js":"68dFX","./_baseIteratee.js":"6ue66","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gkRo5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_headJsDefault.default
);
var _headJs = require("./head.js");
var _headJsDefault = parcelHelpers.interopDefault(_headJs);

},{"./head.js":"dWVx1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dWVx1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias first
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the first element of `array`.
 * @example
 *
 * _.head([1, 2, 3]);
 * // => 1
 *
 * _.head([]);
 * // => undefined
 */ function head(array) {
    return array && array.length ? array[0] : undefined;
}
exports.default = head;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9iEVp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */ function flatMap(collection, iteratee) {
    return _baseFlattenJsDefault.default(_mapJsDefault.default(collection, iteratee), 1);
}
exports.default = flatMap;

},{"./_baseFlatten.js":"dXyiK","./map.js":"2jjVU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2jjVU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseMapJs = require("./_baseMap.js");
var _baseMapJsDefault = parcelHelpers.interopDefault(_baseMapJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */ function map(collection, iteratee) {
    var func = _isArrayJsDefault.default(collection) ? _arrayMapJsDefault.default : _baseMapJsDefault.default;
    return func(collection, _baseIterateeJsDefault.default(iteratee, 3));
}
exports.default = map;

},{"./_arrayMap.js":"jjvFU","./_baseIteratee.js":"6ue66","./_baseMap.js":"9csav","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9csav":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function baseMap(collection, iteratee) {
    var index = -1, result = _isArrayLikeJsDefault.default(collection) ? Array(collection.length) : [];
    _baseEachJsDefault.default(collection, function(value, key, collection1) {
        result[++index] = iteratee(value, key, collection1);
    });
    return result;
}
exports.default = baseMap;

},{"./_baseEach.js":"dpsE1","./isArrayLike.js":"5oD0E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bSuHQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * This method is like `_.flatMap` except that it recursively flattens the
 * mapped results.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [[[n, n]]];
 * }
 *
 * _.flatMapDeep([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */ function flatMapDeep(collection, iteratee) {
    return _baseFlattenJsDefault.default(_mapJsDefault.default(collection, iteratee), INFINITY);
}
exports.default = flatMapDeep;

},{"./_baseFlatten.js":"dXyiK","./map.js":"2jjVU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9Kt9L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * This method is like `_.flatMap` except that it recursively flattens the
 * mapped results up to `depth` times.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {number} [depth=1] The maximum recursion depth.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [[[n, n]]];
 * }
 *
 * _.flatMapDepth([1, 2], duplicate, 2);
 * // => [[1, 1], [2, 2]]
 */ function flatMapDepth(collection, iteratee, depth) {
    depth = depth === undefined ? 1 : _toIntegerJsDefault.default(depth);
    return _baseFlattenJsDefault.default(_mapJsDefault.default(collection, iteratee), depth);
}
exports.default = flatMapDepth;

},{"./_baseFlatten.js":"dXyiK","./map.js":"2jjVU","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4JIPO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Recursively flattens `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flattenDeep([1, [2, [3, [4]], 5]]);
 * // => [1, 2, 3, 4, 5]
 */ function flattenDeep(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseFlattenJsDefault.default(array, INFINITY) : [];
}
exports.default = flattenDeep;

},{"./_baseFlatten.js":"dXyiK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6tDIj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Recursively flatten `array` up to `depth` times.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @param {number} [depth=1] The maximum recursion depth.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * var array = [1, [2, [3, [4]], 5]];
 *
 * _.flattenDepth(array, 1);
 * // => [1, 2, [3, [4]], 5]
 *
 * _.flattenDepth(array, 2);
 * // => [1, 2, 3, [4], 5]
 */ function flattenDepth(array, depth) {
    var length = array == null ? 0 : array.length;
    if (!length) return [];
    depth = depth === undefined ? 1 : _toIntegerJsDefault.default(depth);
    return _baseFlattenJsDefault.default(array, depth);
}
exports.default = flattenDepth;

},{"./_baseFlatten.js":"dXyiK","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fyJZi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_FLIP_FLAG = 512;
/**
 * Creates a function that invokes `func` with arguments reversed.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to flip arguments for.
 * @returns {Function} Returns the new flipped function.
 * @example
 *
 * var flipped = _.flip(function() {
 *   return _.toArray(arguments);
 * });
 *
 * flipped('a', 'b', 'c', 'd');
 * // => ['d', 'c', 'b', 'a']
 */ function flip(func) {
    return _createWrapJsDefault.default(func, WRAP_FLIP_FLAG);
}
exports.default = flip;

},{"./_createWrap.js":"b7iE3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dkukl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRoundJs = require("./_createRound.js");
var _createRoundJsDefault = parcelHelpers.interopDefault(_createRoundJs);
/**
 * Computes `number` rounded down to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round down.
 * @param {number} [precision=0] The precision to round down to.
 * @returns {number} Returns the rounded down number.
 * @example
 *
 * _.floor(4.006);
 * // => 4
 *
 * _.floor(0.046, 2);
 * // => 0.04
 *
 * _.floor(4060, -2);
 * // => 4000
 */ var floor = _createRoundJsDefault.default('floor');
exports.default = floor;

},{"./_createRound.js":"bAEXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"axHzW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createFlowJs = require("./_createFlow.js");
var _createFlowJsDefault = parcelHelpers.interopDefault(_createFlowJs);
/**
 * Creates a function that returns the result of invoking the given functions
 * with the `this` binding of the created function, where each successive
 * invocation is supplied the return value of the previous.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flowRight
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flow([_.add, square]);
 * addSquare(1, 2);
 * // => 9
 */ var flow = _createFlowJsDefault.default();
exports.default = flow;

},{"./_createFlow.js":"kyGAD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kyGAD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lodashWrapperJs = require("./_LodashWrapper.js");
var _lodashWrapperJsDefault = parcelHelpers.interopDefault(_lodashWrapperJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
var _getDataJs = require("./_getData.js");
var _getDataJsDefault = parcelHelpers.interopDefault(_getDataJs);
var _getFuncNameJs = require("./_getFuncName.js");
var _getFuncNameJsDefault = parcelHelpers.interopDefault(_getFuncNameJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isLaziableJs = require("./_isLaziable.js");
var _isLaziableJsDefault = parcelHelpers.interopDefault(_isLaziableJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to compose bitmasks for function metadata. */ var WRAP_CURRY_FLAG = 8, WRAP_PARTIAL_FLAG = 32, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256;
/**
 * Creates a `_.flow` or `_.flowRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new flow function.
 */ function createFlow(fromRight) {
    return _flatRestJsDefault.default(function(funcs) {
        var length = funcs.length, index = length, prereq = _lodashWrapperJsDefault.default.prototype.thru;
        if (fromRight) funcs.reverse();
        while(index--){
            var func = funcs[index];
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            if (prereq && !wrapper && _getFuncNameJsDefault.default(func) == 'wrapper') var wrapper = new _lodashWrapperJsDefault.default([], true);
        }
        index = wrapper ? index : length;
        while((++index) < length){
            func = funcs[index];
            var funcName = _getFuncNameJsDefault.default(func), data = funcName == 'wrapper' ? _getDataJsDefault.default(func) : undefined;
            if (data && _isLaziableJsDefault.default(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) wrapper = wrapper[_getFuncNameJsDefault.default(data[0])].apply(wrapper, data[3]);
            else wrapper = func.length == 1 && _isLaziableJsDefault.default(func) ? wrapper[funcName]() : wrapper.thru(func);
        }
        return function() {
            var args = arguments, value = args[0];
            if (wrapper && args.length == 1 && _isArrayJsDefault.default(value)) return wrapper.plant(value).value();
            var index1 = 0, result = length ? funcs[index1].apply(this, args) : value;
            while((++index1) < length)result = funcs[index1].call(this, result);
            return result;
        };
    });
}
exports.default = createFlow;

},{"./_LodashWrapper.js":"6ZE49","./_flatRest.js":"iG3bQ","./_getData.js":"iFEWx","./_getFuncName.js":"bIqUU","./isArray.js":"aM5De","./_isLaziable.js":"juOL3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3zLY6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createFlowJs = require("./_createFlow.js");
var _createFlowJsDefault = parcelHelpers.interopDefault(_createFlowJs);
/**
 * This method is like `_.flow` except that it creates a function that
 * invokes the given functions from right to left.
 *
 * @static
 * @since 3.0.0
 * @memberOf _
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flow
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flowRight([square, _.add]);
 * addSquare(1, 2);
 * // => 9
 */ var flowRight = _createFlowJsDefault.default(true);
exports.default = flowRight;

},{"./_createFlow.js":"kyGAD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bQtaB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForJs = require("./_baseFor.js");
var _baseForJsDefault = parcelHelpers.interopDefault(_baseForJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * Iterates over own and inherited enumerable string keyed properties of an
 * object and invokes `iteratee` for each property. The iteratee is invoked
 * with three arguments: (value, key, object). Iteratee functions may exit
 * iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forInRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forIn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
 */ function forIn(object, iteratee) {
    return object == null ? object : _baseForJsDefault.default(object, _castFunctionJsDefault.default(iteratee), _keysInJsDefault.default);
}
exports.default = forIn;

},{"./_baseFor.js":"jifrz","./_castFunction.js":"6ccaN","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gtOyD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForRightJs = require("./_baseForRight.js");
var _baseForRightJsDefault = parcelHelpers.interopDefault(_baseForRightJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * This method is like `_.forIn` except that it iterates over properties of
 * `object` in the opposite order.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forInRight(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
 */ function forInRight(object, iteratee) {
    return object == null ? object : _baseForRightJsDefault.default(object, _castFunctionJsDefault.default(iteratee), _keysInJsDefault.default);
}
exports.default = forInRight;

},{"./_baseForRight.js":"2bBKI","./_castFunction.js":"6ccaN","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fo8YY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */ function forOwn(object, iteratee) {
    return object && _baseForOwnJsDefault.default(object, _castFunctionJsDefault.default(iteratee));
}
exports.default = forOwn;

},{"./_baseForOwn.js":"17EGa","./_castFunction.js":"6ccaN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hHuwC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForOwnRightJs = require("./_baseForOwnRight.js");
var _baseForOwnRightJsDefault = parcelHelpers.interopDefault(_baseForOwnRightJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
/**
 * This method is like `_.forOwn` except that it iterates over properties of
 * `object` in the opposite order.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwnRight(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
 */ function forOwnRight(object, iteratee) {
    return object && _baseForOwnRightJsDefault.default(object, _castFunctionJsDefault.default(iteratee));
}
exports.default = forOwnRight;

},{"./_baseForOwnRight.js":"68dFX","./_castFunction.js":"6ccaN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1jSmF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The inverse of `_.toPairs`; this method returns an object composed
 * from key-value `pairs`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} pairs The key-value pairs.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.fromPairs([['a', 1], ['b', 2]]);
 * // => { 'a': 1, 'b': 2 }
 */ function fromPairs(pairs) {
    var index = -1, length = pairs == null ? 0 : pairs.length, result = {
    };
    while((++index) < length){
        var pair = pairs[index];
        result[pair[0]] = pair[1];
    }
    return result;
}
exports.default = fromPairs;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3hupY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFunctionsJs = require("./_baseFunctions.js");
var _baseFunctionsJsDefault = parcelHelpers.interopDefault(_baseFunctionsJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Creates an array of function property names from own enumerable properties
 * of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns the function names.
 * @see _.functionsIn
 * @example
 *
 * function Foo() {
 *   this.a = _.constant('a');
 *   this.b = _.constant('b');
 * }
 *
 * Foo.prototype.c = _.constant('c');
 *
 * _.functions(new Foo);
 * // => ['a', 'b']
 */ function functions(object) {
    return object == null ? [] : _baseFunctionsJsDefault.default(object, _keysJsDefault.default(object));
}
exports.default = functions;

},{"./_baseFunctions.js":"5UufQ","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5UufQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
/**
 * The base implementation of `_.functions` which creates an array of
 * `object` function property names filtered from `props`.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Array} props The property names to filter.
 * @returns {Array} Returns the function names.
 */ function baseFunctions(object, props) {
    return _arrayFilterJsDefault.default(props, function(key) {
        return _isFunctionJsDefault.default(object[key]);
    });
}
exports.default = baseFunctions;

},{"./_arrayFilter.js":"aSstn","./isFunction.js":"flqKI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3mPM8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFunctionsJs = require("./_baseFunctions.js");
var _baseFunctionsJsDefault = parcelHelpers.interopDefault(_baseFunctionsJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * Creates an array of function property names from own and inherited
 * enumerable properties of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns the function names.
 * @see _.functions
 * @example
 *
 * function Foo() {
 *   this.a = _.constant('a');
 *   this.b = _.constant('b');
 * }
 *
 * Foo.prototype.c = _.constant('c');
 *
 * _.functionsIn(new Foo);
 * // => ['a', 'b', 'c']
 */ function functionsIn(object) {
    return object == null ? [] : _baseFunctionsJsDefault.default(object, _keysInJsDefault.default(object));
}
exports.default = functionsIn;

},{"./_baseFunctions.js":"5UufQ","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6j2ap":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _createAggregatorJs = require("./_createAggregator.js");
var _createAggregatorJsDefault = parcelHelpers.interopDefault(_createAggregatorJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The order of grouped values
 * is determined by the order they occur in `collection`. The corresponding
 * value of each key is an array of elements responsible for generating the
 * key. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2], '6': [6.1, 6.3] }
 *
 * // The `_.property` iteratee shorthand.
 * _.groupBy(['one', 'two', 'three'], 'length');
 * // => { '3': ['one', 'two'], '5': ['three'] }
 */ var groupBy = _createAggregatorJsDefault.default(function(result, value, key) {
    if (hasOwnProperty.call(result, key)) result[key].push(value);
    else _baseAssignValueJsDefault.default(result, key, [
        value
    ]);
});
exports.default = groupBy;

},{"./_baseAssignValue.js":"9nj6E","./_createAggregator.js":"8ewQK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k8AO5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGtJs = require("./_baseGt.js");
var _baseGtJsDefault = parcelHelpers.interopDefault(_baseGtJs);
var _createRelationalOperationJs = require("./_createRelationalOperation.js");
var _createRelationalOperationJsDefault = parcelHelpers.interopDefault(_createRelationalOperationJs);
/**
 * Checks if `value` is greater than `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 * @see _.lt
 * @example
 *
 * _.gt(3, 1);
 * // => true
 *
 * _.gt(3, 3);
 * // => false
 *
 * _.gt(1, 3);
 * // => false
 */ var gt = _createRelationalOperationJsDefault.default(_baseGtJsDefault.default);
exports.default = gt;

},{"./_baseGt.js":"ln7BX","./_createRelationalOperation.js":"4jvOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ln7BX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */ function baseGt(value, other) {
    return value > other;
}
exports.default = baseGt;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4jvOk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
/**
 * Creates a function that performs a relational operation on two values.
 *
 * @private
 * @param {Function} operator The function to perform the operation.
 * @returns {Function} Returns the new relational operation function.
 */ function createRelationalOperation(operator) {
    return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
            value = _toNumberJsDefault.default(value);
            other = _toNumberJsDefault.default(other);
        }
        return operator(value, other);
    };
}
exports.default = createRelationalOperation;

},{"./toNumber.js":"laU14","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hjsUD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRelationalOperationJs = require("./_createRelationalOperation.js");
var _createRelationalOperationJsDefault = parcelHelpers.interopDefault(_createRelationalOperationJs);
/**
 * Checks if `value` is greater than or equal to `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than or equal to
 *  `other`, else `false`.
 * @see _.lte
 * @example
 *
 * _.gte(3, 1);
 * // => true
 *
 * _.gte(3, 3);
 * // => true
 *
 * _.gte(1, 3);
 * // => false
 */ var gte = _createRelationalOperationJsDefault.default(function(value, other) {
    return value >= other;
});
exports.default = gte;

},{"./_createRelationalOperation.js":"4jvOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eMgo7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseHasJs = require("./_baseHas.js");
var _baseHasJsDefault = parcelHelpers.interopDefault(_baseHasJs);
var _hasPathJs = require("./_hasPath.js");
var _hasPathJsDefault = parcelHelpers.interopDefault(_hasPathJs);
/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */ function has(object, path) {
    return object != null && _hasPathJsDefault.default(object, path, _baseHasJsDefault.default);
}
exports.default = has;

},{"./_baseHas.js":"k0YDY","./_hasPath.js":"kJfto","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k0YDY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHas(object, key) {
    return object != null && hasOwnProperty.call(object, key);
}
exports.default = baseHas;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eQg6n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseInRangeJs = require("./_baseInRange.js");
var _baseInRangeJsDefault = parcelHelpers.interopDefault(_baseInRangeJs);
var _toFiniteJs = require("./toFinite.js");
var _toFiniteJsDefault = parcelHelpers.interopDefault(_toFiniteJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
/**
 * Checks if `n` is between `start` and up to, but not including, `end`. If
 * `end` is not specified, it's set to `start` with `start` then set to `0`.
 * If `start` is greater than `end` the params are swapped to support
 * negative ranges.
 *
 * @static
 * @memberOf _
 * @since 3.3.0
 * @category Number
 * @param {number} number The number to check.
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 * @see _.range, _.rangeRight
 * @example
 *
 * _.inRange(3, 2, 4);
 * // => true
 *
 * _.inRange(4, 8);
 * // => true
 *
 * _.inRange(4, 2);
 * // => false
 *
 * _.inRange(2, 2);
 * // => false
 *
 * _.inRange(1.2, 2);
 * // => true
 *
 * _.inRange(5.2, 4);
 * // => false
 *
 * _.inRange(-3, -2, -6);
 * // => true
 */ function inRange(number, start, end) {
    start = _toFiniteJsDefault.default(start);
    if (end === undefined) {
        end = start;
        start = 0;
    } else end = _toFiniteJsDefault.default(end);
    number = _toNumberJsDefault.default(number);
    return _baseInRangeJsDefault.default(number, start, end);
}
exports.default = inRange;

},{"./_baseInRange.js":"e8MCQ","./toFinite.js":"he24v","./toNumber.js":"laU14","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e8MCQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * The base implementation of `_.inRange` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */ function baseInRange(number, start, end) {
    return number >= nativeMin(start, end) && number < nativeMax(start, end);
}
exports.default = baseInRange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"70WvX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIndexOfJs = require("./_baseIndexOf.js");
var _baseIndexOfJsDefault = parcelHelpers.interopDefault(_baseIndexOfJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isStringJs = require("./isString.js");
var _isStringJsDefault = parcelHelpers.interopDefault(_isStringJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */ function includes(collection, value, fromIndex, guard) {
    collection = _isArrayLikeJsDefault.default(collection) ? collection : _valuesJsDefault.default(collection);
    fromIndex = fromIndex && !guard ? _toIntegerJsDefault.default(fromIndex) : 0;
    var length = collection.length;
    if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
    return _isStringJsDefault.default(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && _baseIndexOfJsDefault.default(collection, value, fromIndex) > -1;
}
exports.default = includes;

},{"./_baseIndexOf.js":"4m4vH","./isArrayLike.js":"5oD0E","./isString.js":"jLC5S","./toInteger.js":"69J4a","./values.js":"abMLz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jLC5S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var stringTag = '[object String]';
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */ function isString(value) {
    return typeof value == 'string' || !_isArrayJsDefault.default(value) && _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == stringTag;
}
exports.default = isString;

},{"./_baseGetTag.js":"aZJzp","./isArray.js":"aM5De","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"abMLz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseValuesJs = require("./_baseValues.js");
var _baseValuesJsDefault = parcelHelpers.interopDefault(_baseValuesJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */ function values(object) {
    return object == null ? [] : _baseValuesJsDefault.default(object, _keysJsDefault.default(object));
}
exports.default = values;

},{"./_baseValues.js":"88gxA","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"88gxA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */ function baseValues(object, props) {
    return _arrayMapJsDefault.default(props, function(key) {
        return object[key];
    });
}
exports.default = baseValues;

},{"./_arrayMap.js":"jjvFU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f1w5R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIndexOfJs = require("./_baseIndexOf.js");
var _baseIndexOfJsDefault = parcelHelpers.interopDefault(_baseIndexOfJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Gets the index at which the first occurrence of `value` is found in `array`
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. If `fromIndex` is negative, it's used as the
 * offset from the end of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.indexOf([1, 2, 1, 2], 2);
 * // => 1
 *
 * // Search from the `fromIndex`.
 * _.indexOf([1, 2, 1, 2], 2, 2);
 * // => 3
 */ function indexOf(array, value, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) return -1;
    var index = fromIndex == null ? 0 : _toIntegerJsDefault.default(fromIndex);
    if (index < 0) index = nativeMax(length + index, 0);
    return _baseIndexOfJsDefault.default(array, value, index);
}
exports.default = indexOf;

},{"./_baseIndexOf.js":"4m4vH","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8v8fG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
/**
 * Gets all but the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.initial([1, 2, 3]);
 * // => [1, 2]
 */ function initial(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseSliceJsDefault.default(array, 0, -1) : [];
}
exports.default = initial;

},{"./_baseSlice.js":"dOp4f","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6KnES":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIntersectionJs = require("./_baseIntersection.js");
var _baseIntersectionJsDefault = parcelHelpers.interopDefault(_baseIntersectionJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _castArrayLikeObjectJs = require("./_castArrayLikeObject.js");
var _castArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_castArrayLikeObjectJs);
/**
 * Creates an array of unique values that are included in all given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersection([2, 1], [2, 3]);
 * // => [2]
 */ var intersection = _baseRestJsDefault.default(function(arrays) {
    var mapped = _arrayMapJsDefault.default(arrays, _castArrayLikeObjectJsDefault.default);
    return mapped.length && mapped[0] === arrays[0] ? _baseIntersectionJsDefault.default(mapped) : [];
});
exports.default = intersection;

},{"./_arrayMap.js":"jjvFU","./_baseIntersection.js":"d6kAv","./_baseRest.js":"6GMnO","./_castArrayLikeObject.js":"5Tidq","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"d6kAv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setCacheJs = require("./_SetCache.js");
var _setCacheJsDefault = parcelHelpers.interopDefault(_setCacheJs);
var _arrayIncludesJs = require("./_arrayIncludes.js");
var _arrayIncludesJsDefault = parcelHelpers.interopDefault(_arrayIncludesJs);
var _arrayIncludesWithJs = require("./_arrayIncludesWith.js");
var _arrayIncludesWithJsDefault = parcelHelpers.interopDefault(_arrayIncludesWithJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _cacheHasJs = require("./_cacheHas.js");
var _cacheHasJsDefault = parcelHelpers.interopDefault(_cacheHasJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * The base implementation of methods like `_.intersection`, without support
 * for iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of shared values.
 */ function baseIntersection(arrays, iteratee, comparator) {
    var includes = comparator ? _arrayIncludesWithJsDefault.default : _arrayIncludesJsDefault.default, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
    while(othIndex--){
        var array = arrays[othIndex];
        if (othIndex && iteratee) array = _arrayMapJsDefault.default(array, _baseUnaryJsDefault.default(iteratee));
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new _setCacheJsDefault.default(othIndex && array) : undefined;
    }
    array = arrays[0];
    var index = -1, seen = caches[0];
    outer: while((++index) < length && result.length < maxLength){
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (!(seen ? _cacheHasJsDefault.default(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;
            while(--othIndex){
                var cache = caches[othIndex];
                if (!(cache ? _cacheHasJsDefault.default(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
            }
            if (seen) seen.push(computed);
            result.push(value);
        }
    }
    return result;
}
exports.default = baseIntersection;

},{"./_SetCache.js":"cojUc","./_arrayIncludes.js":"dNWOV","./_arrayIncludesWith.js":"eqsLX","./_arrayMap.js":"jjvFU","./_baseUnary.js":"3cdEI","./_cacheHas.js":"9Bp52","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Tidq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
/**
 * Casts `value` to an empty array if it's not an array like object.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array|Object} Returns the cast array-like object.
 */ function castArrayLikeObject(value) {
    return _isArrayLikeObjectJsDefault.default(value) ? value : [];
}
exports.default = castArrayLikeObject;

},{"./isArrayLikeObject.js":"7pSqJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k9SKv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIntersectionJs = require("./_baseIntersection.js");
var _baseIntersectionJsDefault = parcelHelpers.interopDefault(_baseIntersectionJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _castArrayLikeObjectJs = require("./_castArrayLikeObject.js");
var _castArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_castArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.intersection` except that it accepts `iteratee`
 * which is invoked for each element of each `arrays` to generate the criterion
 * by which they're compared. The order and references of result values are
 * determined by the first array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [2.1]
 *
 * // The `_.property` iteratee shorthand.
 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }]
 */ var intersectionBy = _baseRestJsDefault.default(function(arrays) {
    var iteratee = _lastJsDefault.default(arrays), mapped = _arrayMapJsDefault.default(arrays, _castArrayLikeObjectJsDefault.default);
    if (iteratee === _lastJsDefault.default(mapped)) iteratee = undefined;
    else mapped.pop();
    return mapped.length && mapped[0] === arrays[0] ? _baseIntersectionJsDefault.default(mapped, _baseIterateeJsDefault.default(iteratee, 2)) : [];
});
exports.default = intersectionBy;

},{"./_arrayMap.js":"jjvFU","./_baseIntersection.js":"d6kAv","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","./_castArrayLikeObject.js":"5Tidq","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b2qne":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIntersectionJs = require("./_baseIntersection.js");
var _baseIntersectionJsDefault = parcelHelpers.interopDefault(_baseIntersectionJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _castArrayLikeObjectJs = require("./_castArrayLikeObject.js");
var _castArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_castArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.intersection` except that it accepts `comparator`
 * which is invoked to compare elements of `arrays`. The order and references
 * of result values are determined by the first array. The comparator is
 * invoked with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.intersectionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }]
 */ var intersectionWith = _baseRestJsDefault.default(function(arrays) {
    var comparator = _lastJsDefault.default(arrays), mapped = _arrayMapJsDefault.default(arrays, _castArrayLikeObjectJsDefault.default);
    comparator = typeof comparator == 'function' ? comparator : undefined;
    if (comparator) mapped.pop();
    return mapped.length && mapped[0] === arrays[0] ? _baseIntersectionJsDefault.default(mapped, undefined, comparator) : [];
});
exports.default = intersectionWith;

},{"./_arrayMap.js":"jjvFU","./_baseIntersection.js":"d6kAv","./_baseRest.js":"6GMnO","./_castArrayLikeObject.js":"5Tidq","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2KPOP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _createInverterJs = require("./_createInverter.js");
var _createInverterJsDefault = parcelHelpers.interopDefault(_createInverterJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Creates an object composed of the inverted keys and values of `object`.
 * If `object` contains duplicate values, subsequent values overwrite
 * property assignments of previous values.
 *
 * @static
 * @memberOf _
 * @since 0.7.0
 * @category Object
 * @param {Object} object The object to invert.
 * @returns {Object} Returns the new inverted object.
 * @example
 *
 * var object = { 'a': 1, 'b': 2, 'c': 1 };
 *
 * _.invert(object);
 * // => { '1': 'c', '2': 'b' }
 */ var invert = _createInverterJsDefault.default(function(result, value, key) {
    if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
    result[value] = key;
}, _constantJsDefault.default(_identityJsDefault.default));
exports.default = invert;

},{"./constant.js":"izIhX","./_createInverter.js":"kNXtU","./identity.js":"fqqWQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kNXtU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseInverterJs = require("./_baseInverter.js");
var _baseInverterJsDefault = parcelHelpers.interopDefault(_baseInverterJs);
/**
 * Creates a function like `_.invertBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} toIteratee The function to resolve iteratees.
 * @returns {Function} Returns the new inverter function.
 */ function createInverter(setter, toIteratee) {
    return function(object, iteratee) {
        return _baseInverterJsDefault.default(object, setter, toIteratee(iteratee), {
        });
    };
}
exports.default = createInverter;

},{"./_baseInverter.js":"d8TaR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"d8TaR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
/**
 * The base implementation of `_.invert` and `_.invertBy` which inverts
 * `object` with values transformed by `iteratee` and set by `setter`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform values.
 * @param {Object} accumulator The initial inverted object.
 * @returns {Function} Returns `accumulator`.
 */ function baseInverter(object, setter, iteratee, accumulator) {
    _baseForOwnJsDefault.default(object, function(value, key, object1) {
        setter(accumulator, iteratee(value), key, object1);
    });
    return accumulator;
}
exports.default = baseInverter;

},{"./_baseForOwn.js":"17EGa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jY6q1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _createInverterJs = require("./_createInverter.js");
var _createInverterJsDefault = parcelHelpers.interopDefault(_createInverterJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * This method is like `_.invert` except that the inverted object is generated
 * from the results of running each element of `object` thru `iteratee`. The
 * corresponding inverted value of each inverted key is an array of keys
 * responsible for generating the inverted value. The iteratee is invoked
 * with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.1.0
 * @category Object
 * @param {Object} object The object to invert.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Object} Returns the new inverted object.
 * @example
 *
 * var object = { 'a': 1, 'b': 2, 'c': 1 };
 *
 * _.invertBy(object);
 * // => { '1': ['a', 'c'], '2': ['b'] }
 *
 * _.invertBy(object, function(value) {
 *   return 'group' + value;
 * });
 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
 */ var invertBy = _createInverterJsDefault.default(function(result, value, key) {
    if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
    if (hasOwnProperty.call(result, value)) result[value].push(key);
    else result[value] = [
        key
    ];
}, _baseIterateeJsDefault.default);
exports.default = invertBy;

},{"./_baseIteratee.js":"6ue66","./_createInverter.js":"kNXtU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g4wAP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseInvokeJs = require("./_baseInvoke.js");
var _baseInvokeJsDefault = parcelHelpers.interopDefault(_baseInvokeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
/**
 * Invokes the method at `path` of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
 *
 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
 * // => [2, 3]
 */ var invoke = _baseRestJsDefault.default(_baseInvokeJsDefault.default);
exports.default = invoke;

},{"./_baseInvoke.js":"bZh6J","./_baseRest.js":"6GMnO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bZh6J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
var _parentJs = require("./_parent.js");
var _parentJsDefault = parcelHelpers.interopDefault(_parentJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * The base implementation of `_.invoke` without support for individual
 * method arguments.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {Array} args The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 */ function baseInvoke(object, path, args) {
    path = _castPathJsDefault.default(path, object);
    object = _parentJsDefault.default(object, path);
    var func = object == null ? object : object[_toKeyJsDefault.default(_lastJsDefault.default(path))];
    return func == null ? undefined : _applyJsDefault.default(func, object, args);
}
exports.default = baseInvoke;

},{"./_apply.js":"jcowS","./_castPath.js":"jrUMT","./last.js":"cAZFz","./_parent.js":"9awzd","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9awzd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetJs = require("./_baseGet.js");
var _baseGetJsDefault = parcelHelpers.interopDefault(_baseGetJs);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */ function parent(object, path) {
    return path.length < 2 ? object : _baseGetJsDefault.default(object, _baseSliceJsDefault.default(path, 0, -1));
}
exports.default = parent;

},{"./_baseGet.js":"h5I8S","./_baseSlice.js":"dOp4f","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gynst":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
var _baseInvokeJs = require("./_baseInvoke.js");
var _baseInvokeJsDefault = parcelHelpers.interopDefault(_baseInvokeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
/**
 * Invokes the method at `path` of each element in `collection`, returning
 * an array of the results of each invoked method. Any additional arguments
 * are provided to each invoked method. If `path` is a function, it's invoked
 * for, and `this` bound to, each element in `collection`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Array|Function|string} path The path of the method to invoke or
 *  the function invoked per iteration.
 * @param {...*} [args] The arguments to invoke each method with.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
 * // => [[1, 5, 7], [1, 2, 3]]
 *
 * _.invokeMap([123, 456], String.prototype.split, '');
 * // => [['1', '2', '3'], ['4', '5', '6']]
 */ var invokeMap = _baseRestJsDefault.default(function(collection, path, args) {
    var index = -1, isFunc = typeof path == 'function', result = _isArrayLikeJsDefault.default(collection) ? Array(collection.length) : [];
    _baseEachJsDefault.default(collection, function(value) {
        result[++index] = isFunc ? _applyJsDefault.default(path, value, args) : _baseInvokeJsDefault.default(value, path, args);
    });
    return result;
});
exports.default = invokeMap;

},{"./_apply.js":"jcowS","./_baseEach.js":"dpsE1","./_baseInvoke.js":"bZh6J","./_baseRest.js":"6GMnO","./isArrayLike.js":"5oD0E","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gyupv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsArrayBufferJs = require("./_baseIsArrayBuffer.js");
var _baseIsArrayBufferJsDefault = parcelHelpers.interopDefault(_baseIsArrayBufferJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsArrayBuffer = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isArrayBuffer;
/**
 * Checks if `value` is classified as an `ArrayBuffer` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
 * @example
 *
 * _.isArrayBuffer(new ArrayBuffer(2));
 * // => true
 *
 * _.isArrayBuffer(new Array(2));
 * // => false
 */ var isArrayBuffer = nodeIsArrayBuffer ? _baseUnaryJsDefault.default(nodeIsArrayBuffer) : _baseIsArrayBufferJsDefault.default;
exports.default = isArrayBuffer;

},{"./_baseIsArrayBuffer.js":"5SbEg","./_baseUnary.js":"3cdEI","./_nodeUtil.js":"cnNtI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5SbEg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
var arrayBufferTag = '[object ArrayBuffer]';
/**
 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
 */ function baseIsArrayBuffer(value) {
    return _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == arrayBufferTag;
}
exports.default = baseIsArrayBuffer;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"efxLR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var boolTag = '[object Boolean]';
/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */ function isBoolean(value) {
    return value === true || value === false || _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == boolTag;
}
exports.default = isBoolean;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kKAeM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsDateJs = require("./_baseIsDate.js");
var _baseIsDateJsDefault = parcelHelpers.interopDefault(_baseIsDateJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsDate = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isDate;
/**
 * Checks if `value` is classified as a `Date` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 * @example
 *
 * _.isDate(new Date);
 * // => true
 *
 * _.isDate('Mon April 23 2012');
 * // => false
 */ var isDate = nodeIsDate ? _baseUnaryJsDefault.default(nodeIsDate) : _baseIsDateJsDefault.default;
exports.default = isDate;

},{"./_baseIsDate.js":"dDC5Q","./_baseUnary.js":"3cdEI","./_nodeUtil.js":"cnNtI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dDC5Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var dateTag = '[object Date]';
/**
 * The base implementation of `_.isDate` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 */ function baseIsDate(value) {
    return _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == dateTag;
}
exports.default = baseIsDate;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ioFiY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
var _isPlainObjectJs = require("./isPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
/**
 * Checks if `value` is likely a DOM element.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
 * @example
 *
 * _.isElement(document.body);
 * // => true
 *
 * _.isElement('<body>');
 * // => false
 */ function isElement(value) {
    return _isObjectLikeJsDefault.default(value) && value.nodeType === 1 && !_isPlainObjectJsDefault.default(value);
}
exports.default = isElement;

},{"./isObjectLike.js":"KrkRc","./isPlainObject.js":"bA6mR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dL2SH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseKeysJs = require("./_baseKeys.js");
var _baseKeysJsDefault = parcelHelpers.interopDefault(_baseKeysJs);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isPrototypeJs = require("./_isPrototype.js");
var _isPrototypeJsDefault = parcelHelpers.interopDefault(_isPrototypeJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]', setTag = '[object Set]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */ function isEmpty(value) {
    if (value == null) return true;
    if (_isArrayLikeJsDefault.default(value) && (_isArrayJsDefault.default(value) || typeof value == 'string' || typeof value.splice == 'function' || _isBufferJsDefault.default(value) || _isTypedArrayJsDefault.default(value) || _isArgumentsJsDefault.default(value))) return !value.length;
    var tag = _getTagJsDefault.default(value);
    if (tag == mapTag || tag == setTag) return !value.size;
    if (_isPrototypeJsDefault.default(value)) return !_baseKeysJsDefault.default(value).length;
    for(var key in value){
        if (hasOwnProperty.call(value, key)) return false;
    }
    return true;
}
exports.default = isEmpty;

},{"./_baseKeys.js":"1u7E7","./_getTag.js":"l96z0","./isArguments.js":"bCq5F","./isArray.js":"aM5De","./isArrayLike.js":"5oD0E","./isBuffer.js":"5zLdt","./_isPrototype.js":"bP9GG","./isTypedArray.js":"4zD9H","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eR5BF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsEqualJs = require("./_baseIsEqual.js");
var _baseIsEqualJsDefault = parcelHelpers.interopDefault(_baseIsEqualJs);
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */ function isEqual(value, other) {
    return _baseIsEqualJsDefault.default(value, other);
}
exports.default = isEqual;

},{"./_baseIsEqual.js":"9h4Ty","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gow7r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsEqualJs = require("./_baseIsEqual.js");
var _baseIsEqualJsDefault = parcelHelpers.interopDefault(_baseIsEqualJs);
/**
 * This method is like `_.isEqual` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with up to
 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, othValue) {
 *   if (isGreeting(objValue) && isGreeting(othValue)) {
 *     return true;
 *   }
 * }
 *
 * var array = ['hello', 'goodbye'];
 * var other = ['hi', 'goodbye'];
 *
 * _.isEqualWith(array, other, customizer);
 * // => true
 */ function isEqualWith(value, other, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    var result = customizer ? customizer(value, other) : undefined;
    return result === undefined ? _baseIsEqualJsDefault.default(value, other, undefined, customizer) : !!result;
}
exports.default = isEqualWith;

},{"./_baseIsEqual.js":"9h4Ty","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6Q6di":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsFinite = _rootJsDefault.default.isFinite;
/**
 * Checks if `value` is a finite primitive number.
 *
 * **Note:** This method is based on
 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
 * @example
 *
 * _.isFinite(3);
 * // => true
 *
 * _.isFinite(Number.MIN_VALUE);
 * // => true
 *
 * _.isFinite(Infinity);
 * // => false
 *
 * _.isFinite('3');
 * // => false
 */ function isFinite(value) {
    return typeof value == 'number' && nativeIsFinite(value);
}
exports.default = isFinite;

},{"./_root.js":"bVBU6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"19KFx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Checks if `value` is an integer.
 *
 * **Note:** This method is based on
 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
 * @example
 *
 * _.isInteger(3);
 * // => true
 *
 * _.isInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isInteger(Infinity);
 * // => false
 *
 * _.isInteger('3');
 * // => false
 */ function isInteger(value) {
    return typeof value == 'number' && value == _toIntegerJsDefault.default(value);
}
exports.default = isInteger;

},{"./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"624E0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsMatchJs = require("./_baseIsMatch.js");
var _baseIsMatchJsDefault = parcelHelpers.interopDefault(_baseIsMatchJs);
var _getMatchDataJs = require("./_getMatchData.js");
var _getMatchDataJsDefault = parcelHelpers.interopDefault(_getMatchDataJs);
/**
 * Performs a partial deep comparison between `object` and `source` to
 * determine if `object` contains equivalent property values.
 *
 * **Note:** This method is equivalent to `_.matches` when `source` is
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 *
 * _.isMatch(object, { 'b': 2 });
 * // => true
 *
 * _.isMatch(object, { 'b': 1 });
 * // => false
 */ function isMatch(object, source) {
    return object === source || _baseIsMatchJsDefault.default(object, source, _getMatchDataJsDefault.default(source));
}
exports.default = isMatch;

},{"./_baseIsMatch.js":"DHl6P","./_getMatchData.js":"1UE7R","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jOdji":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsMatchJs = require("./_baseIsMatch.js");
var _baseIsMatchJsDefault = parcelHelpers.interopDefault(_baseIsMatchJs);
var _getMatchDataJs = require("./_getMatchData.js");
var _getMatchDataJsDefault = parcelHelpers.interopDefault(_getMatchDataJs);
/**
 * This method is like `_.isMatch` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with five
 * arguments: (objValue, srcValue, index|key, object, source).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, srcValue) {
 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
 *     return true;
 *   }
 * }
 *
 * var object = { 'greeting': 'hello' };
 * var source = { 'greeting': 'hi' };
 *
 * _.isMatchWith(object, source, customizer);
 * // => true
 */ function isMatchWith(object, source, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return _baseIsMatchJsDefault.default(object, source, _getMatchDataJsDefault.default(source), customizer);
}
exports.default = isMatchWith;

},{"./_baseIsMatch.js":"DHl6P","./_getMatchData.js":"1UE7R","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hFSO6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isNumberJs = require("./isNumber.js");
var _isNumberJsDefault = parcelHelpers.interopDefault(_isNumberJs);
/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */ function isNaN(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return _isNumberJsDefault.default(value) && value != +value;
}
exports.default = isNaN;

},{"./isNumber.js":"5Ybx7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Ybx7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var numberTag = '[object Number]';
/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */ function isNumber(value) {
    return typeof value == 'number' || _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == numberTag;
}
exports.default = isNumber;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9xeht":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsNativeJs = require("./_baseIsNative.js");
var _baseIsNativeJsDefault = parcelHelpers.interopDefault(_baseIsNativeJs);
var _isMaskableJs = require("./_isMaskable.js");
var _isMaskableJsDefault = parcelHelpers.interopDefault(_isMaskableJs);
/** Error message constants. */ var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.';
/**
 * Checks if `value` is a pristine native function.
 *
 * **Note:** This method can't reliably detect native functions in the presence
 * of the core-js package because core-js circumvents this kind of detection.
 * Despite multiple requests, the core-js maintainer has made it clear: any
 * attempt to fix the detection will be obstructed. As a result, we're left
 * with little choice but to throw an error. Unfortunately, this also affects
 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
 * which rely on core-js.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */ function isNative(value) {
    if (_isMaskableJsDefault.default(value)) throw new Error(CORE_ERROR_TEXT);
    return _baseIsNativeJsDefault.default(value);
}
exports.default = isNative;

},{"./_baseIsNative.js":"loJwm","./_isMaskable.js":"HwlrB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"HwlrB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _coreJsDataJs = require("./_coreJsData.js");
var _coreJsDataJsDefault = parcelHelpers.interopDefault(_coreJsDataJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _stubFalseJs = require("./stubFalse.js");
var _stubFalseJsDefault = parcelHelpers.interopDefault(_stubFalseJs);
/**
 * Checks if `func` is capable of being masked.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
 */ var isMaskable = _coreJsDataJsDefault.default ? _isFunctionJsDefault.default : _stubFalseJsDefault.default;
exports.default = isMaskable;

},{"./_coreJsData.js":"aSgeD","./isFunction.js":"flqKI","./stubFalse.js":"2zFwJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hACpm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */ function isNil(value) {
    return value == null;
}
exports.default = isNil;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4OqX5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */ function isNull(value) {
    return value === null;
}
exports.default = isNull;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"mkI2R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIsRegExpJs = require("./_baseIsRegExp.js");
var _baseIsRegExpJsDefault = parcelHelpers.interopDefault(_baseIsRegExpJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _nodeUtilJs = require("./_nodeUtil.js");
var _nodeUtilJsDefault = parcelHelpers.interopDefault(_nodeUtilJs);
/* Node.js helper references. */ var nodeIsRegExp = _nodeUtilJsDefault.default && _nodeUtilJsDefault.default.isRegExp;
/**
 * Checks if `value` is classified as a `RegExp` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 * @example
 *
 * _.isRegExp(/abc/);
 * // => true
 *
 * _.isRegExp('/abc/');
 * // => false
 */ var isRegExp = nodeIsRegExp ? _baseUnaryJsDefault.default(nodeIsRegExp) : _baseIsRegExpJsDefault.default;
exports.default = isRegExp;

},{"./_baseIsRegExp.js":"cMPDW","./_baseUnary.js":"3cdEI","./_nodeUtil.js":"cnNtI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cMPDW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var regexpTag = '[object RegExp]';
/**
 * The base implementation of `_.isRegExp` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 */ function baseIsRegExp(value) {
    return _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == regexpTag;
}
exports.default = baseIsRegExp;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hsB1y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isIntegerJs = require("./isInteger.js");
var _isIntegerJsDefault = parcelHelpers.interopDefault(_isIntegerJs);
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
 * double precision number which isn't the result of a rounded unsafe integer.
 *
 * **Note:** This method is based on
 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
 * @example
 *
 * _.isSafeInteger(3);
 * // => true
 *
 * _.isSafeInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isSafeInteger(Infinity);
 * // => false
 *
 * _.isSafeInteger('3');
 * // => false
 */ function isSafeInteger(value) {
    return _isIntegerJsDefault.default(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
}
exports.default = isSafeInteger;

},{"./isInteger.js":"19KFx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2mxpV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */ function isUndefined(value) {
    return value === undefined;
}
exports.default = isUndefined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fkEwZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var weakMapTag = '[object WeakMap]';
/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */ function isWeakMap(value) {
    return _isObjectLikeJsDefault.default(value) && _getTagJsDefault.default(value) == weakMapTag;
}
exports.default = isWeakMap;

},{"./_getTag.js":"l96z0","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fbaJM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require("./_baseGetTag.js");
var _baseGetTagJsDefault = parcelHelpers.interopDefault(_baseGetTagJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references. */ var weakSetTag = '[object WeakSet]';
/**
 * Checks if `value` is classified as a `WeakSet` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
 * @example
 *
 * _.isWeakSet(new WeakSet);
 * // => true
 *
 * _.isWeakSet(new Set);
 * // => false
 */ function isWeakSet(value) {
    return _isObjectLikeJsDefault.default(value) && _baseGetTagJsDefault.default(value) == weakSetTag;
}
exports.default = isWeakSet;

},{"./_baseGetTag.js":"aZJzp","./isObjectLike.js":"KrkRc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bBOpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1;
/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */ function iteratee(func) {
    return _baseIterateeJsDefault.default(typeof func == 'function' ? func : _baseCloneJsDefault.default(func, CLONE_DEEP_FLAG));
}
exports.default = iteratee;

},{"./_baseClone.js":"aFXJr","./_baseIteratee.js":"6ue66","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"k8m3s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeJoin = arrayProto.join;
/**
 * Converts all elements in `array` into a string separated by `separator`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to convert.
 * @param {string} [separator=','] The element separator.
 * @returns {string} Returns the joined string.
 * @example
 *
 * _.join(['a', 'b', 'c'], '~');
 * // => 'a~b~c'
 */ function join(array, separator) {
    return array == null ? '' : nativeJoin.call(array, separator);
}
exports.default = join;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aUlYs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCompounderJs = require("./_createCompounder.js");
var _createCompounderJsDefault = parcelHelpers.interopDefault(_createCompounderJs);
/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */ var kebabCase = _createCompounderJsDefault.default(function(result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
});
exports.default = kebabCase;

},{"./_createCompounder.js":"5YHiY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"pGTr8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _createAggregatorJs = require("./_createAggregator.js");
var _createAggregatorJsDefault = parcelHelpers.interopDefault(_createAggregatorJs);
/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */ var keyBy = _createAggregatorJsDefault.default(function(result, value, key) {
    _baseAssignValueJsDefault.default(result, key, value);
});
exports.default = keyBy;

},{"./_baseAssignValue.js":"9nj6E","./_createAggregator.js":"8ewQK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bwXQU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFindIndexJs = require("./_baseFindIndex.js");
var _baseFindIndexJsDefault = parcelHelpers.interopDefault(_baseFindIndexJs);
var _baseIsNaNJs = require("./_baseIsNaN.js");
var _baseIsNaNJsDefault = parcelHelpers.interopDefault(_baseIsNaNJs);
var _strictLastIndexOfJs = require("./_strictLastIndexOf.js");
var _strictLastIndexOfJsDefault = parcelHelpers.interopDefault(_strictLastIndexOfJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * This method is like `_.indexOf` except that it iterates over elements of
 * `array` from right to left.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.lastIndexOf([1, 2, 1, 2], 2);
 * // => 3
 *
 * // Search from the `fromIndex`.
 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
 * // => 1
 */ function lastIndexOf(array, value, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) return -1;
    var index = length;
    if (fromIndex !== undefined) {
        index = _toIntegerJsDefault.default(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
    }
    return value === value ? _strictLastIndexOfJsDefault.default(array, value, index) : _baseFindIndexJsDefault.default(array, _baseIsNaNJsDefault.default, index, true);
}
exports.default = lastIndexOf;

},{"./_baseFindIndex.js":"21KN9","./_baseIsNaN.js":"65btk","./_strictLastIndexOf.js":"jSGSz","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jSGSz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.lastIndexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while(index--){
        if (array[index] === value) return index;
    }
    return index;
}
exports.default = strictLastIndexOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1r9dC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCompounderJs = require("./_createCompounder.js");
var _createCompounderJsDefault = parcelHelpers.interopDefault(_createCompounderJs);
/**
 * Converts `string`, as space separated words, to lower case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the lower cased string.
 * @example
 *
 * _.lowerCase('--Foo-Bar--');
 * // => 'foo bar'
 *
 * _.lowerCase('fooBar');
 * // => 'foo bar'
 *
 * _.lowerCase('__FOO_BAR__');
 * // => 'foo bar'
 */ var lowerCase = _createCompounderJsDefault.default(function(result, word, index) {
    return result + (index ? ' ' : '') + word.toLowerCase();
});
exports.default = lowerCase;

},{"./_createCompounder.js":"5YHiY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cOtgl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCaseFirstJs = require("./_createCaseFirst.js");
var _createCaseFirstJsDefault = parcelHelpers.interopDefault(_createCaseFirstJs);
/**
 * Converts the first character of `string` to lower case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.lowerFirst('Fred');
 * // => 'fred'
 *
 * _.lowerFirst('FRED');
 * // => 'fRED'
 */ var lowerFirst = _createCaseFirstJsDefault.default('toLowerCase');
exports.default = lowerFirst;

},{"./_createCaseFirst.js":"9UCzl","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fFOPj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseLtJs = require("./_baseLt.js");
var _baseLtJsDefault = parcelHelpers.interopDefault(_baseLtJs);
var _createRelationalOperationJs = require("./_createRelationalOperation.js");
var _createRelationalOperationJsDefault = parcelHelpers.interopDefault(_createRelationalOperationJs);
/**
 * Checks if `value` is less than `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 * @see _.gt
 * @example
 *
 * _.lt(1, 3);
 * // => true
 *
 * _.lt(3, 3);
 * // => false
 *
 * _.lt(3, 1);
 * // => false
 */ var lt = _createRelationalOperationJsDefault.default(_baseLtJsDefault.default);
exports.default = lt;

},{"./_baseLt.js":"1UBTp","./_createRelationalOperation.js":"4jvOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1UBTp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */ function baseLt(value, other) {
    return value < other;
}
exports.default = baseLt;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2JrKG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRelationalOperationJs = require("./_createRelationalOperation.js");
var _createRelationalOperationJsDefault = parcelHelpers.interopDefault(_createRelationalOperationJs);
/**
 * Checks if `value` is less than or equal to `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than or equal to
 *  `other`, else `false`.
 * @see _.gte
 * @example
 *
 * _.lte(1, 3);
 * // => true
 *
 * _.lte(3, 3);
 * // => true
 *
 * _.lte(3, 1);
 * // => false
 */ var lte = _createRelationalOperationJsDefault.default(function(value, other) {
    return value <= other;
});
exports.default = lte;

},{"./_createRelationalOperation.js":"4jvOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fp9mD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */ function mapKeys(object, iteratee) {
    var result = {
    };
    iteratee = _baseIterateeJsDefault.default(iteratee, 3);
    _baseForOwnJsDefault.default(object, function(value, key, object1) {
        _baseAssignValueJsDefault.default(result, iteratee(value, key, object1), value);
    });
    return result;
}
exports.default = mapKeys;

},{"./_baseAssignValue.js":"9nj6E","./_baseForOwn.js":"17EGa","./_baseIteratee.js":"6ue66","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jXAEX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require("./_baseAssignValue.js");
var _baseAssignValueJsDefault = parcelHelpers.interopDefault(_baseAssignValueJs);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */ function mapValues(object, iteratee) {
    var result = {
    };
    iteratee = _baseIterateeJsDefault.default(iteratee, 3);
    _baseForOwnJsDefault.default(object, function(value, key, object1) {
        _baseAssignValueJsDefault.default(result, key, iteratee(value, key, object1));
    });
    return result;
}
exports.default = mapValues;

},{"./_baseAssignValue.js":"9nj6E","./_baseForOwn.js":"17EGa","./_baseIteratee.js":"6ue66","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dGEIs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
var _baseMatchesJs = require("./_baseMatches.js");
var _baseMatchesJsDefault = parcelHelpers.interopDefault(_baseMatchesJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1;
/**
 * Creates a function that performs a partial deep comparison between a given
 * object and `source`, returning `true` if the given object has equivalent
 * property values, else `false`.
 *
 * **Note:** The created function is equivalent to `_.isMatch` with `source`
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * **Note:** Multiple values can be checked by combining several matchers
 * using `_.overSome`
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 * @example
 *
 * var objects = [
 *   { 'a': 1, 'b': 2, 'c': 3 },
 *   { 'a': 4, 'b': 5, 'c': 6 }
 * ];
 *
 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
 *
 * // Checking for several possible values
 * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
 */ function matches(source) {
    return _baseMatchesJsDefault.default(_baseCloneJsDefault.default(source, CLONE_DEEP_FLAG));
}
exports.default = matches;

},{"./_baseClone.js":"aFXJr","./_baseMatches.js":"eWJev","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bDzEN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
var _baseMatchesPropertyJs = require("./_baseMatchesProperty.js");
var _baseMatchesPropertyJsDefault = parcelHelpers.interopDefault(_baseMatchesPropertyJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1;
/**
 * Creates a function that performs a partial deep comparison between the
 * value at `path` of a given object to `srcValue`, returning `true` if the
 * object value is equivalent, else `false`.
 *
 * **Note:** Partial comparisons will match empty array and empty object
 * `srcValue` values against any array or object value, respectively. See
 * `_.isEqual` for a list of supported value comparisons.
 *
 * **Note:** Multiple values can be checked by combining several matchers
 * using `_.overSome`
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 * @example
 *
 * var objects = [
 *   { 'a': 1, 'b': 2, 'c': 3 },
 *   { 'a': 4, 'b': 5, 'c': 6 }
 * ];
 *
 * _.find(objects, _.matchesProperty('a', 4));
 * // => { 'a': 4, 'b': 5, 'c': 6 }
 *
 * // Checking for several possible values
 * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
 */ function matchesProperty(path, srcValue) {
    return _baseMatchesPropertyJsDefault.default(path, _baseCloneJsDefault.default(srcValue, CLONE_DEEP_FLAG));
}
exports.default = matchesProperty;

},{"./_baseClone.js":"aFXJr","./_baseMatchesProperty.js":"WjPNl","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jpVbu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseExtremumJs = require("./_baseExtremum.js");
var _baseExtremumJsDefault = parcelHelpers.interopDefault(_baseExtremumJs);
var _baseGtJs = require("./_baseGt.js");
var _baseGtJsDefault = parcelHelpers.interopDefault(_baseGtJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */ function max(array) {
    return array && array.length ? _baseExtremumJsDefault.default(array, _identityJsDefault.default, _baseGtJsDefault.default) : undefined;
}
exports.default = max;

},{"./_baseExtremum.js":"6CFg9","./_baseGt.js":"ln7BX","./identity.js":"fqqWQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6CFg9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */ function baseExtremum(array, iteratee, comparator) {
    var index = -1, length = array.length;
    while((++index) < length){
        var value = array[index], current = iteratee(value);
        if (current != null && (computed === undefined ? current === current && !_isSymbolJsDefault.default(current) : comparator(current, computed))) var computed = current, result = value;
    }
    return result;
}
exports.default = baseExtremum;

},{"./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7ilJg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseExtremumJs = require("./_baseExtremum.js");
var _baseExtremumJsDefault = parcelHelpers.interopDefault(_baseExtremumJs);
var _baseGtJs = require("./_baseGt.js");
var _baseGtJsDefault = parcelHelpers.interopDefault(_baseGtJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
/**
 * This method is like `_.max` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.maxBy(objects, function(o) { return o.n; });
 * // => { 'n': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.maxBy(objects, 'n');
 * // => { 'n': 2 }
 */ function maxBy(array, iteratee) {
    return array && array.length ? _baseExtremumJsDefault.default(array, _baseIterateeJsDefault.default(iteratee, 2), _baseGtJsDefault.default) : undefined;
}
exports.default = maxBy;

},{"./_baseExtremum.js":"6CFg9","./_baseGt.js":"ln7BX","./_baseIteratee.js":"6ue66","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hv8hp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseMeanJs = require("./_baseMean.js");
var _baseMeanJsDefault = parcelHelpers.interopDefault(_baseMeanJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
/**
 * Computes the mean of the values in `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {number} Returns the mean.
 * @example
 *
 * _.mean([4, 2, 8, 6]);
 * // => 5
 */ function mean(array) {
    return _baseMeanJsDefault.default(array, _identityJsDefault.default);
}
exports.default = mean;

},{"./_baseMean.js":"kWHC7","./identity.js":"fqqWQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kWHC7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSumJs = require("./_baseSum.js");
var _baseSumJsDefault = parcelHelpers.interopDefault(_baseSumJs);
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/**
 * The base implementation of `_.mean` and `_.meanBy` without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the mean.
 */ function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? _baseSumJsDefault.default(array, iteratee) / length : NAN;
}
exports.default = baseMean;

},{"./_baseSum.js":"iyaNJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iyaNJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.sum` and `_.sumBy` without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the sum.
 */ function baseSum(array, iteratee) {
    var result, index = -1, length = array.length;
    while((++index) < length){
        var current = iteratee(array[index]);
        if (current !== undefined) result = result === undefined ? current : result + current;
    }
    return result;
}
exports.default = baseSum;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kgCT8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseMeanJs = require("./_baseMean.js");
var _baseMeanJsDefault = parcelHelpers.interopDefault(_baseMeanJs);
/**
 * This method is like `_.mean` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the value to be averaged.
 * The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the mean.
 * @example
 *
 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
 *
 * _.meanBy(objects, function(o) { return o.n; });
 * // => 5
 *
 * // The `_.property` iteratee shorthand.
 * _.meanBy(objects, 'n');
 * // => 5
 */ function meanBy(array, iteratee) {
    return _baseMeanJsDefault.default(array, _baseIterateeJsDefault.default(iteratee, 2));
}
exports.default = meanBy;

},{"./_baseIteratee.js":"6ue66","./_baseMean.js":"kWHC7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iz6Iv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseMergeJs = require("./_baseMerge.js");
var _baseMergeJsDefault = parcelHelpers.interopDefault(_baseMergeJs);
var _createAssignerJs = require("./_createAssigner.js");
var _createAssignerJsDefault = parcelHelpers.interopDefault(_createAssignerJs);
/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */ var merge = _createAssignerJsDefault.default(function(object, source, srcIndex) {
    _baseMergeJsDefault.default(object, source, srcIndex);
});
exports.default = merge;

},{"./_baseMerge.js":"laHT4","./_createAssigner.js":"7JrYL","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jhNNz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseInvokeJs = require("./_baseInvoke.js");
var _baseInvokeJsDefault = parcelHelpers.interopDefault(_baseInvokeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
/**
 * Creates a function that invokes the method at `path` of a given object.
 * Any additional arguments are provided to the invoked method.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Util
 * @param {Array|string} path The path of the method to invoke.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {Function} Returns the new invoker function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': _.constant(2) } },
 *   { 'a': { 'b': _.constant(1) } }
 * ];
 *
 * _.map(objects, _.method('a.b'));
 * // => [2, 1]
 *
 * _.map(objects, _.method(['a', 'b']));
 * // => [2, 1]
 */ var method = _baseRestJsDefault.default(function(path, args) {
    return function(object) {
        return _baseInvokeJsDefault.default(object, path, args);
    };
});
exports.default = method;

},{"./_baseInvoke.js":"bZh6J","./_baseRest.js":"6GMnO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ez29f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseInvokeJs = require("./_baseInvoke.js");
var _baseInvokeJsDefault = parcelHelpers.interopDefault(_baseInvokeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
/**
 * The opposite of `_.method`; this method creates a function that invokes
 * the method at a given path of `object`. Any additional arguments are
 * provided to the invoked method.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Util
 * @param {Object} object The object to query.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {Function} Returns the new invoker function.
 * @example
 *
 * var array = _.times(3, _.constant),
 *     object = { 'a': array, 'b': array, 'c': array };
 *
 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
 * // => [2, 0]
 *
 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
 * // => [2, 0]
 */ var methodOf = _baseRestJsDefault.default(function(object, args) {
    return function(path) {
        return _baseInvokeJsDefault.default(object, path, args);
    };
});
exports.default = methodOf;

},{"./_baseInvoke.js":"bZh6J","./_baseRest.js":"6GMnO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"94N5R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseExtremumJs = require("./_baseExtremum.js");
var _baseExtremumJsDefault = parcelHelpers.interopDefault(_baseExtremumJs);
var _baseLtJs = require("./_baseLt.js");
var _baseLtJsDefault = parcelHelpers.interopDefault(_baseLtJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
/**
 * Computes the minimum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * _.min([4, 2, 8, 6]);
 * // => 2
 *
 * _.min([]);
 * // => undefined
 */ function min(array) {
    return array && array.length ? _baseExtremumJsDefault.default(array, _identityJsDefault.default, _baseLtJsDefault.default) : undefined;
}
exports.default = min;

},{"./_baseExtremum.js":"6CFg9","./_baseLt.js":"1UBTp","./identity.js":"fqqWQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"159CG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseExtremumJs = require("./_baseExtremum.js");
var _baseExtremumJsDefault = parcelHelpers.interopDefault(_baseExtremumJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseLtJs = require("./_baseLt.js");
var _baseLtJsDefault = parcelHelpers.interopDefault(_baseLtJs);
/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.minBy(objects, function(o) { return o.n; });
 * // => { 'n': 1 }
 *
 * // The `_.property` iteratee shorthand.
 * _.minBy(objects, 'n');
 * // => { 'n': 1 }
 */ function minBy(array, iteratee) {
    return array && array.length ? _baseExtremumJsDefault.default(array, _baseIterateeJsDefault.default(iteratee, 2), _baseLtJsDefault.default) : undefined;
}
exports.default = minBy;

},{"./_baseExtremum.js":"6CFg9","./_baseIteratee.js":"6ue66","./_baseLt.js":"1UBTp","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hdMVM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _baseFunctionsJs = require("./_baseFunctions.js");
var _baseFunctionsJsDefault = parcelHelpers.interopDefault(_baseFunctionsJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
/**
 * Adds all own enumerable string keyed function properties of a source
 * object to the destination object. If `object` is a function, then methods
 * are added to its prototype as well.
 *
 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 * avoid conflicts caused by modifying the original.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {Function|Object} [object=lodash] The destination object.
 * @param {Object} source The object of functions to add.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
 * @returns {Function|Object} Returns `object`.
 * @example
 *
 * function vowels(string) {
 *   return _.filter(string, function(v) {
 *     return /[aeiou]/i.test(v);
 *   });
 * }
 *
 * _.mixin({ 'vowels': vowels });
 * _.vowels('fred');
 * // => ['e']
 *
 * _('fred').vowels().value();
 * // => ['e']
 *
 * _.mixin({ 'vowels': vowels }, { 'chain': false });
 * _('fred').vowels();
 * // => ['e']
 */ function mixin(object, source, options) {
    var props = _keysJsDefault.default(source), methodNames = _baseFunctionsJsDefault.default(source, props);
    var chain = !(_isObjectJsDefault.default(options) && 'chain' in options) || !!options.chain, isFunc = _isFunctionJsDefault.default(object);
    _arrayEachJsDefault.default(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
                var result = object(this.__wrapped__), actions = result.__actions__ = _copyArrayJsDefault.default(this.__actions__);
                actions.push({
                    'func': func,
                    'args': arguments,
                    'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
            }
            return func.apply(object, _arrayPushJsDefault.default([
                this.value()
            ], arguments));
        };
    });
    return object;
}
exports.default = mixin;

},{"./_arrayEach.js":"6ICgZ","./_arrayPush.js":"t745A","./_baseFunctions.js":"5UufQ","./_copyArray.js":"aKKbc","./isFunction.js":"flqKI","./isObject.js":"1IOOk","./keys.js":"f9Mo9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fK88J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createMathOperationJs = require("./_createMathOperation.js");
var _createMathOperationJsDefault = parcelHelpers.interopDefault(_createMathOperationJs);
/**
 * Multiply two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {number} multiplier The first number in a multiplication.
 * @param {number} multiplicand The second number in a multiplication.
 * @returns {number} Returns the product.
 * @example
 *
 * _.multiply(6, 4);
 * // => 24
 */ var multiply = _createMathOperationJsDefault.default(function(multiplier, multiplicand) {
    return multiplier * multiplicand;
}, 1);
exports.default = multiply;

},{"./_createMathOperation.js":"aW9XE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7g9li":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */ function negate(predicate) {
    if (typeof predicate != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    return function() {
        var args = arguments;
        switch(args.length){
            case 0:
                return !predicate.call(this);
            case 1:
                return !predicate.call(this, args[0]);
            case 2:
                return !predicate.call(this, args[0], args[1]);
            case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
    };
}
exports.default = negate;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4eB5h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toArrayJs = require("./toArray.js");
var _toArrayJsDefault = parcelHelpers.interopDefault(_toArrayJs);
/**
 * Gets the next value on a wrapped object following the
 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
 *
 * @name next
 * @memberOf _
 * @since 4.0.0
 * @category Seq
 * @returns {Object} Returns the next iterator value.
 * @example
 *
 * var wrapped = _([1, 2]);
 *
 * wrapped.next();
 * // => { 'done': false, 'value': 1 }
 *
 * wrapped.next();
 * // => { 'done': false, 'value': 2 }
 *
 * wrapped.next();
 * // => { 'done': true, 'value': undefined }
 */ function wrapperNext() {
    if (this.__values__ === undefined) this.__values__ = _toArrayJsDefault.default(this.value());
    var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
    return {
        'done': done,
        'value': value
    };
}
exports.default = wrapperNext;

},{"./toArray.js":"9ylTH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9ylTH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isStringJs = require("./isString.js");
var _isStringJsDefault = parcelHelpers.interopDefault(_isStringJs);
var _iteratorToArrayJs = require("./_iteratorToArray.js");
var _iteratorToArrayJsDefault = parcelHelpers.interopDefault(_iteratorToArrayJs);
var _mapToArrayJs = require("./_mapToArray.js");
var _mapToArrayJsDefault = parcelHelpers.interopDefault(_mapToArrayJs);
var _setToArrayJs = require("./_setToArray.js");
var _setToArrayJsDefault = parcelHelpers.interopDefault(_setToArrayJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]', setTag = '[object Set]';
/** Built-in value references. */ var symIterator = _symbolJsDefault.default ? _symbolJsDefault.default.iterator : undefined;
/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */ function toArray(value) {
    if (!value) return [];
    if (_isArrayLikeJsDefault.default(value)) return _isStringJsDefault.default(value) ? _stringToArrayJsDefault.default(value) : _copyArrayJsDefault.default(value);
    if (symIterator && value[symIterator]) return _iteratorToArrayJsDefault.default(value[symIterator]());
    var tag = _getTagJsDefault.default(value), func = tag == mapTag ? _mapToArrayJsDefault.default : tag == setTag ? _setToArrayJsDefault.default : _valuesJsDefault.default;
    return func(value);
}
exports.default = toArray;

},{"./_Symbol.js":"lUHHK","./_copyArray.js":"aKKbc","./_getTag.js":"l96z0","./isArrayLike.js":"5oD0E","./isString.js":"jLC5S","./_iteratorToArray.js":"3JNJS","./_mapToArray.js":"8pcjC","./_setToArray.js":"hb3ta","./_stringToArray.js":"gvihb","./values.js":"abMLz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3JNJS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts `iterator` to an array.
 *
 * @private
 * @param {Object} iterator The iterator to convert.
 * @returns {Array} Returns the converted array.
 */ function iteratorToArray(iterator) {
    var data, result = [];
    while(!(data = iterator.next()).done)result.push(data.value);
    return result;
}
exports.default = iteratorToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1AwpH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseNthJs = require("./_baseNth.js");
var _baseNthJsDefault = parcelHelpers.interopDefault(_baseNthJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Gets the element at index `n` of `array`. If `n` is negative, the nth
 * element from the end is returned.
 *
 * @static
 * @memberOf _
 * @since 4.11.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=0] The index of the element to return.
 * @returns {*} Returns the nth element of `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'd'];
 *
 * _.nth(array, 1);
 * // => 'b'
 *
 * _.nth(array, -2);
 * // => 'c';
 */ function nth(array, n) {
    return array && array.length ? _baseNthJsDefault.default(array, _toIntegerJsDefault.default(n)) : undefined;
}
exports.default = nth;

},{"./_baseNth.js":"jsDlF","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jsDlF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
/**
 * The base implementation of `_.nth` which doesn't coerce arguments.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {number} n The index of the element to return.
 * @returns {*} Returns the nth element of `array`.
 */ function baseNth(array, n) {
    var length = array.length;
    if (!length) return;
    n += n < 0 ? length : 0;
    return _isIndexJsDefault.default(n, length) ? array[n] : undefined;
}
exports.default = baseNth;

},{"./_isIndex.js":"gfLoM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8W3Xb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseNthJs = require("./_baseNth.js");
var _baseNthJsDefault = parcelHelpers.interopDefault(_baseNthJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Creates a function that gets the argument at index `n`. If `n` is negative,
 * the nth argument from the end is returned.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {number} [n=0] The index of the argument to return.
 * @returns {Function} Returns the new pass-thru function.
 * @example
 *
 * var func = _.nthArg(1);
 * func('a', 'b', 'c', 'd');
 * // => 'b'
 *
 * var func = _.nthArg(-2);
 * func('a', 'b', 'c', 'd');
 * // => 'c'
 */ function nthArg(n) {
    n = _toIntegerJsDefault.default(n);
    return _baseRestJsDefault.default(function(args) {
        return _baseNthJsDefault.default(args, n);
    });
}
exports.default = nthArg;

},{"./_baseNth.js":"jsDlF","./_baseRest.js":"6GMnO","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3N7DR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseCloneJs = require("./_baseClone.js");
var _baseCloneJsDefault = parcelHelpers.interopDefault(_baseCloneJs);
var _baseUnsetJs = require("./_baseUnset.js");
var _baseUnsetJsDefault = parcelHelpers.interopDefault(_baseUnsetJs);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
var _copyObjectJs = require("./_copyObject.js");
var _copyObjectJsDefault = parcelHelpers.interopDefault(_copyObjectJs);
var _customOmitCloneJs = require("./_customOmitClone.js");
var _customOmitCloneJsDefault = parcelHelpers.interopDefault(_customOmitCloneJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
var _getAllKeysInJs = require("./_getAllKeysIn.js");
var _getAllKeysInJsDefault = parcelHelpers.interopDefault(_getAllKeysInJs);
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */ var omit = _flatRestJsDefault.default(function(object, paths) {
    var result = {
    };
    if (object == null) return result;
    var isDeep = false;
    paths = _arrayMapJsDefault.default(paths, function(path) {
        path = _castPathJsDefault.default(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
    });
    _copyObjectJsDefault.default(object, _getAllKeysInJsDefault.default(object), result);
    if (isDeep) result = _baseCloneJsDefault.default(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, _customOmitCloneJsDefault.default);
    var length = paths.length;
    while(length--)_baseUnsetJsDefault.default(result, paths[length]);
    return result;
});
exports.default = omit;

},{"./_arrayMap.js":"jjvFU","./_baseClone.js":"aFXJr","./_baseUnset.js":"laAQR","./_castPath.js":"jrUMT","./_copyObject.js":"iJJjY","./_customOmitClone.js":"eUGPH","./_flatRest.js":"iG3bQ","./_getAllKeysIn.js":"1CJOX","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"laAQR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
var _parentJs = require("./_parent.js");
var _parentJsDefault = parcelHelpers.interopDefault(_parentJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */ function baseUnset(object, path) {
    path = _castPathJsDefault.default(path, object);
    object = _parentJsDefault.default(object, path);
    return object == null || delete object[_toKeyJsDefault.default(_lastJsDefault.default(path))];
}
exports.default = baseUnset;

},{"./_castPath.js":"jrUMT","./last.js":"cAZFz","./_parent.js":"9awzd","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eUGPH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPlainObjectJs = require("./isPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */ function customOmitClone(value) {
    return _isPlainObjectJsDefault.default(value) ? undefined : value;
}
exports.default = customOmitClone;

},{"./isPlainObject.js":"bA6mR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9dpfL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _negateJs = require("./negate.js");
var _negateJsDefault = parcelHelpers.interopDefault(_negateJs);
var _pickByJs = require("./pickBy.js");
var _pickByJsDefault = parcelHelpers.interopDefault(_pickByJs);
/**
 * The opposite of `_.pickBy`; this method creates an object composed of
 * the own and inherited enumerable string keyed properties of `object` that
 * `predicate` doesn't return truthy for. The predicate is invoked with two
 * arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omitBy(object, _.isNumber);
 * // => { 'b': '2' }
 */ function omitBy(object, predicate) {
    return _pickByJsDefault.default(object, _negateJsDefault.default(_baseIterateeJsDefault.default(predicate)));
}
exports.default = omitBy;

},{"./_baseIteratee.js":"6ue66","./negate.js":"7g9li","./pickBy.js":"jAj8s","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jAj8s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _basePickByJs = require("./_basePickBy.js");
var _basePickByJsDefault = parcelHelpers.interopDefault(_basePickByJs);
var _getAllKeysInJs = require("./_getAllKeysIn.js");
var _getAllKeysInJsDefault = parcelHelpers.interopDefault(_getAllKeysInJs);
/**
 * Creates an object composed of the `object` properties `predicate` returns
 * truthy for. The predicate is invoked with two arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pickBy(object, _.isNumber);
 * // => { 'a': 1, 'c': 3 }
 */ function pickBy(object, predicate) {
    if (object == null) return {
    };
    var props = _arrayMapJsDefault.default(_getAllKeysInJsDefault.default(object), function(prop) {
        return [
            prop
        ];
    });
    predicate = _baseIterateeJsDefault.default(predicate);
    return _basePickByJsDefault.default(object, props, function(value, path) {
        return predicate(value, path[0]);
    });
}
exports.default = pickBy;

},{"./_arrayMap.js":"jjvFU","./_baseIteratee.js":"6ue66","./_basePickBy.js":"hFqfY","./_getAllKeysIn.js":"1CJOX","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hFqfY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetJs = require("./_baseGet.js");
var _baseGetJsDefault = parcelHelpers.interopDefault(_baseGetJs);
var _baseSetJs = require("./_baseSet.js");
var _baseSetJsDefault = parcelHelpers.interopDefault(_baseSetJs);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */ function basePickBy(object, paths, predicate) {
    var index = -1, length = paths.length, result = {
    };
    while((++index) < length){
        var path = paths[index], value = _baseGetJsDefault.default(object, path);
        if (predicate(value, path)) _baseSetJsDefault.default(result, _castPathJsDefault.default(path, object), value);
    }
    return result;
}
exports.default = basePickBy;

},{"./_baseGet.js":"h5I8S","./_baseSet.js":"eyFmh","./_castPath.js":"jrUMT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eyFmh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignValueJs = require("./_assignValue.js");
var _assignValueJsDefault = parcelHelpers.interopDefault(_assignValueJs);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */ function baseSet(object, path, value, customizer) {
    if (!_isObjectJsDefault.default(object)) return object;
    path = _castPathJsDefault.default(path, object);
    var index = -1, length = path.length, lastIndex = length - 1, nested = object;
    while(nested != null && (++index) < length){
        var key = _toKeyJsDefault.default(path[index]), newValue = value;
        if (key === '__proto__' || key === 'constructor' || key === 'prototype') return object;
        if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) newValue = _isObjectJsDefault.default(objValue) ? objValue : _isIndexJsDefault.default(path[index + 1]) ? [] : {
            };
        }
        _assignValueJsDefault.default(nested, key, newValue);
        nested = nested[key];
    }
    return object;
}
exports.default = baseSet;

},{"./_assignValue.js":"1zOlb","./_castPath.js":"jrUMT","./_isIndex.js":"gfLoM","./isObject.js":"1IOOk","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7moj2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _beforeJs = require("./before.js");
var _beforeJsDefault = parcelHelpers.interopDefault(_beforeJs);
/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */ function once(func) {
    return _beforeJsDefault.default(2, func);
}
exports.default = once;

},{"./before.js":"12IeX","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gyxQe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseOrderByJs = require("./_baseOrderBy.js");
var _baseOrderByJsDefault = parcelHelpers.interopDefault(_baseOrderByJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * This method is like `_.sortBy` except that it allows specifying the sort
 * orders of the iteratees to sort by. If `orders` is unspecified, all values
 * are sorted in ascending order. Otherwise, specify an order of "desc" for
 * descending or "asc" for ascending sort order of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @param {string[]} [orders] The sort orders of `iteratees`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 34 },
 *   { 'user': 'fred',   'age': 40 },
 *   { 'user': 'barney', 'age': 36 }
 * ];
 *
 * // Sort by `user` in ascending order and by `age` in descending order.
 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
 */ function orderBy(collection, iteratees, orders, guard) {
    if (collection == null) return [];
    if (!_isArrayJsDefault.default(iteratees)) iteratees = iteratees == null ? [] : [
        iteratees
    ];
    orders = guard ? undefined : orders;
    if (!_isArrayJsDefault.default(orders)) orders = orders == null ? [] : [
        orders
    ];
    return _baseOrderByJsDefault.default(collection, iteratees, orders);
}
exports.default = orderBy;

},{"./_baseOrderBy.js":"lvTsA","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lvTsA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseGetJs = require("./_baseGet.js");
var _baseGetJsDefault = parcelHelpers.interopDefault(_baseGetJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseMapJs = require("./_baseMap.js");
var _baseMapJsDefault = parcelHelpers.interopDefault(_baseMapJs);
var _baseSortByJs = require("./_baseSortBy.js");
var _baseSortByJsDefault = parcelHelpers.interopDefault(_baseSortByJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _compareMultipleJs = require("./_compareMultiple.js");
var _compareMultipleJsDefault = parcelHelpers.interopDefault(_compareMultipleJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */ function baseOrderBy(collection, iteratees, orders) {
    if (iteratees.length) iteratees = _arrayMapJsDefault.default(iteratees, function(iteratee) {
        if (_isArrayJsDefault.default(iteratee)) return function(value) {
            return _baseGetJsDefault.default(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        };
        return iteratee;
    });
    else iteratees = [_identityJsDefault.default];
    var index = -1;
    iteratees = _arrayMapJsDefault.default(iteratees, _baseUnaryJsDefault.default(_baseIterateeJsDefault.default));
    var result = _baseMapJsDefault.default(collection, function(value, key, collection1) {
        var criteria = _arrayMapJsDefault.default(iteratees, function(iteratee) {
            return iteratee(value);
        });
        return {
            'criteria': criteria,
            'index': ++index,
            'value': value
        };
    });
    return _baseSortByJsDefault.default(result, function(object, other) {
        return _compareMultipleJsDefault.default(object, other, orders);
    });
}
exports.default = baseOrderBy;

},{"./_arrayMap.js":"jjvFU","./_baseGet.js":"h5I8S","./_baseIteratee.js":"6ue66","./_baseMap.js":"9csav","./_baseSortBy.js":"5x3DX","./_baseUnary.js":"3cdEI","./_compareMultiple.js":"fvLEG","./identity.js":"fqqWQ","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5x3DX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */ function baseSortBy(array, comparer) {
    var length = array.length;
    array.sort(comparer);
    while(length--)array[length] = array[length].value;
    return array;
}
exports.default = baseSortBy;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fvLEG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _compareAscendingJs = require("./_compareAscending.js");
var _compareAscendingJsDefault = parcelHelpers.interopDefault(_compareAscendingJs);
/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */ function compareMultiple(object, other, orders) {
    var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
    while((++index) < length){
        var result = _compareAscendingJsDefault.default(objCriteria[index], othCriteria[index]);
        if (result) {
            if (index >= ordersLength) return result;
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
        }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
}
exports.default = compareMultiple;

},{"./_compareAscending.js":"2WdYg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2WdYg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */ function compareAscending(value, other) {
    if (value !== other) {
        var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = _isSymbolJsDefault.default(value);
        var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = _isSymbolJsDefault.default(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
    }
    return 0;
}
exports.default = compareAscending;

},{"./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fESBh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _createOverJs = require("./_createOver.js");
var _createOverJsDefault = parcelHelpers.interopDefault(_createOverJs);
/**
 * Creates a function that invokes `iteratees` with the arguments it receives
 * and returns their results.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to invoke.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var func = _.over([Math.max, Math.min]);
 *
 * func(1, 2, 3, 4);
 * // => [4, 1]
 */ var over = _createOverJsDefault.default(_arrayMapJsDefault.default);
exports.default = over;

},{"./_arrayMap.js":"jjvFU","./_createOver.js":"dVK2P","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dVK2P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
/**
 * Creates a function like `_.over`.
 *
 * @private
 * @param {Function} arrayFunc The function to iterate over iteratees.
 * @returns {Function} Returns the new over function.
 */ function createOver(arrayFunc) {
    return _flatRestJsDefault.default(function(iteratees) {
        iteratees = _arrayMapJsDefault.default(iteratees, _baseUnaryJsDefault.default(_baseIterateeJsDefault.default));
        return _baseRestJsDefault.default(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee) {
                return _applyJsDefault.default(iteratee, thisArg, args);
            });
        });
    });
}
exports.default = createOver;

},{"./_apply.js":"jcowS","./_arrayMap.js":"jjvFU","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","./_baseUnary.js":"3cdEI","./_flatRest.js":"iG3bQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2Q39E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _castRestJs = require("./_castRest.js");
var _castRestJsDefault = parcelHelpers.interopDefault(_castRestJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Creates a function that invokes `func` with its arguments transformed.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Function
 * @param {Function} func The function to wrap.
 * @param {...(Function|Function[])} [transforms=[_.identity]]
 *  The argument transforms.
 * @returns {Function} Returns the new function.
 * @example
 *
 * function doubled(n) {
 *   return n * 2;
 * }
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var func = _.overArgs(function(x, y) {
 *   return [x, y];
 * }, [square, doubled]);
 *
 * func(9, 3);
 * // => [81, 6]
 *
 * func(10, 5);
 * // => [100, 10]
 */ var overArgs = _castRestJsDefault.default(function(func, transforms) {
    transforms = transforms.length == 1 && _isArrayJsDefault.default(transforms[0]) ? _arrayMapJsDefault.default(transforms[0], _baseUnaryJsDefault.default(_baseIterateeJsDefault.default)) : _arrayMapJsDefault.default(_baseFlattenJsDefault.default(transforms, 1), _baseUnaryJsDefault.default(_baseIterateeJsDefault.default));
    var funcsLength = transforms.length;
    return _baseRestJsDefault.default(function(args) {
        var index = -1, length = nativeMin(args.length, funcsLength);
        while((++index) < length)args[index] = transforms[index].call(this, args[index]);
        return _applyJsDefault.default(func, this, args);
    });
});
exports.default = overArgs;

},{"./_apply.js":"jcowS","./_arrayMap.js":"jjvFU","./_baseFlatten.js":"dXyiK","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","./_baseUnary.js":"3cdEI","./_castRest.js":"aPbQe","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aPbQe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
/**
 * A `baseRest` alias which can be replaced with `identity` by module
 * replacement plugins.
 *
 * @private
 * @type {Function}
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */ var castRest = _baseRestJsDefault.default;
exports.default = castRest;

},{"./_baseRest.js":"6GMnO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"10sDM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEveryJs = require("./_arrayEvery.js");
var _arrayEveryJsDefault = parcelHelpers.interopDefault(_arrayEveryJs);
var _createOverJs = require("./_createOver.js");
var _createOverJsDefault = parcelHelpers.interopDefault(_createOverJs);
/**
 * Creates a function that checks if **all** of the `predicates` return
 * truthy when invoked with the arguments it receives.
 *
 * Following shorthands are possible for providing predicates.
 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {...(Function|Function[])} [predicates=[_.identity]]
 *  The predicates to check.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var func = _.overEvery([Boolean, isFinite]);
 *
 * func('1');
 * // => true
 *
 * func(null);
 * // => false
 *
 * func(NaN);
 * // => false
 */ var overEvery = _createOverJsDefault.default(_arrayEveryJsDefault.default);
exports.default = overEvery;

},{"./_arrayEvery.js":"4orbJ","./_createOver.js":"dVK2P","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jVMwj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arraySomeJs = require("./_arraySome.js");
var _arraySomeJsDefault = parcelHelpers.interopDefault(_arraySomeJs);
var _createOverJs = require("./_createOver.js");
var _createOverJsDefault = parcelHelpers.interopDefault(_createOverJs);
/**
 * Creates a function that checks if **any** of the `predicates` return
 * truthy when invoked with the arguments it receives.
 *
 * Following shorthands are possible for providing predicates.
 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {...(Function|Function[])} [predicates=[_.identity]]
 *  The predicates to check.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var func = _.overSome([Boolean, isFinite]);
 *
 * func('1');
 * // => true
 *
 * func(null);
 * // => true
 *
 * func(NaN);
 * // => false
 *
 * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
 * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
 */ var overSome = _createOverJsDefault.default(_arraySomeJsDefault.default);
exports.default = overSome;

},{"./_arraySome.js":"j3nyJ","./_createOver.js":"dVK2P","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fM3n7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createPaddingJs = require("./_createPadding.js");
var _createPaddingJsDefault = parcelHelpers.interopDefault(_createPaddingJs);
var _stringSizeJs = require("./_stringSize.js");
var _stringSizeJsDefault = parcelHelpers.interopDefault(_stringSizeJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeFloor = Math.floor;
/**
 * Pads `string` on the left and right sides if it's shorter than `length`.
 * Padding characters are truncated if they can't be evenly divided by `length`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.pad('abc', 8);
 * // => '  abc   '
 *
 * _.pad('abc', 8, '_-');
 * // => '_-abc_-_'
 *
 * _.pad('abc', 3);
 * // => 'abc'
 */ function pad(string, length, chars) {
    string = _toStringJsDefault.default(string);
    length = _toIntegerJsDefault.default(length);
    var strLength = length ? _stringSizeJsDefault.default(string) : 0;
    if (!length || strLength >= length) return string;
    var mid = (length - strLength) / 2;
    return _createPaddingJsDefault.default(nativeFloor(mid), chars) + string + _createPaddingJsDefault.default(nativeCeil(mid), chars);
}
exports.default = pad;

},{"./_createPadding.js":"q9tme","./_stringSize.js":"b9Vh6","./toInteger.js":"69J4a","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"q9tme":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRepeatJs = require("./_baseRepeat.js");
var _baseRepeatJsDefault = parcelHelpers.interopDefault(_baseRepeatJs);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _hasUnicodeJs = require("./_hasUnicode.js");
var _hasUnicodeJsDefault = parcelHelpers.interopDefault(_hasUnicodeJs);
var _stringSizeJs = require("./_stringSize.js");
var _stringSizeJsDefault = parcelHelpers.interopDefault(_stringSizeJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil;
/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */ function createPadding(length, chars) {
    chars = chars === undefined ? ' ' : _baseToStringJsDefault.default(chars);
    var charsLength = chars.length;
    if (charsLength < 2) return charsLength ? _baseRepeatJsDefault.default(chars, length) : chars;
    var result = _baseRepeatJsDefault.default(chars, nativeCeil(length / _stringSizeJsDefault.default(chars)));
    return _hasUnicodeJsDefault.default(chars) ? _castSliceJsDefault.default(_stringToArrayJsDefault.default(result), 0, length).join('') : result.slice(0, length);
}
exports.default = createPadding;

},{"./_baseRepeat.js":"c8udy","./_baseToString.js":"cWGOY","./_castSlice.js":"ak4IE","./_hasUnicode.js":"iVUcF","./_stringSize.js":"b9Vh6","./_stringToArray.js":"gvihb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c8udy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeFloor = Math.floor;
/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */ function baseRepeat(string, n) {
    var result = '';
    if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
        if (n % 2) result += string;
        n = nativeFloor(n / 2);
        if (n) string += string;
    }while (n)
    return result;
}
exports.default = baseRepeat;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b9Vh6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _asciiSizeJs = require("./_asciiSize.js");
var _asciiSizeJsDefault = parcelHelpers.interopDefault(_asciiSizeJs);
var _hasUnicodeJs = require("./_hasUnicode.js");
var _hasUnicodeJsDefault = parcelHelpers.interopDefault(_hasUnicodeJs);
var _unicodeSizeJs = require("./_unicodeSize.js");
var _unicodeSizeJsDefault = parcelHelpers.interopDefault(_unicodeSizeJs);
/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */ function stringSize(string) {
    return _hasUnicodeJsDefault.default(string) ? _unicodeSizeJsDefault.default(string) : _asciiSizeJsDefault.default(string);
}
exports.default = stringSize;

},{"./_asciiSize.js":"hvJml","./_hasUnicode.js":"iVUcF","./_unicodeSize.js":"a6JFl","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hvJml":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePropertyJs = require("./_baseProperty.js");
var _basePropertyJsDefault = parcelHelpers.interopDefault(_basePropertyJs);
/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */ var asciiSize = _basePropertyJsDefault.default('length');
exports.default = asciiSize;

},{"./_baseProperty.js":"3ekfC","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a6JFl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */ var rsAstral = '[' + rsAstralRange + ']', rsCombo = '[' + rsComboRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */ var reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = '(?:' + [
    rsNonAstral + rsCombo + '?',
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */ function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while(reUnicode.test(string))++result;
    return result;
}
exports.default = unicodeSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g9SMd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createPaddingJs = require("./_createPadding.js");
var _createPaddingJsDefault = parcelHelpers.interopDefault(_createPaddingJs);
var _stringSizeJs = require("./_stringSize.js");
var _stringSizeJsDefault = parcelHelpers.interopDefault(_stringSizeJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Pads `string` on the right side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padEnd('abc', 6);
 * // => 'abc   '
 *
 * _.padEnd('abc', 6, '_-');
 * // => 'abc_-_'
 *
 * _.padEnd('abc', 3);
 * // => 'abc'
 */ function padEnd(string, length, chars) {
    string = _toStringJsDefault.default(string);
    length = _toIntegerJsDefault.default(length);
    var strLength = length ? _stringSizeJsDefault.default(string) : 0;
    return length && strLength < length ? string + _createPaddingJsDefault.default(length - strLength, chars) : string;
}
exports.default = padEnd;

},{"./_createPadding.js":"q9tme","./_stringSize.js":"b9Vh6","./toInteger.js":"69J4a","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hbBM7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createPaddingJs = require("./_createPadding.js");
var _createPaddingJsDefault = parcelHelpers.interopDefault(_createPaddingJs);
var _stringSizeJs = require("./_stringSize.js");
var _stringSizeJsDefault = parcelHelpers.interopDefault(_stringSizeJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Pads `string` on the left side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padStart('abc', 6);
 * // => '   abc'
 *
 * _.padStart('abc', 6, '_-');
 * // => '_-_abc'
 *
 * _.padStart('abc', 3);
 * // => 'abc'
 */ function padStart(string, length, chars) {
    string = _toStringJsDefault.default(string);
    length = _toIntegerJsDefault.default(length);
    var strLength = length ? _stringSizeJsDefault.default(string) : 0;
    return length && strLength < length ? _createPaddingJsDefault.default(length - strLength, chars) + string : string;
}
exports.default = padStart;

},{"./_createPadding.js":"q9tme","./_stringSize.js":"b9Vh6","./toInteger.js":"69J4a","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5TorV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rootJs = require("./_root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeParseInt = _rootJsDefault.default.parseInt;
/**
 * Converts `string` to an integer of the specified radix. If `radix` is
 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
 * hexadecimal, in which case a `radix` of `16` is used.
 *
 * **Note:** This method aligns with the
 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category String
 * @param {string} string The string to convert.
 * @param {number} [radix=10] The radix to interpret `value` by.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.parseInt('08');
 * // => 8
 *
 * _.map(['6', '08', '10'], _.parseInt);
 * // => [6, 8, 10]
 */ function parseInt(string, radix, guard) {
    if (guard || radix == null) radix = 0;
    else if (radix) radix = +radix;
    return nativeParseInt(_toStringJsDefault.default(string).replace(reTrimStart, ''), radix || 0);
}
exports.default = parseInt;

},{"./_root.js":"bVBU6","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cUFQ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
var _getHolderJs = require("./_getHolder.js");
var _getHolderJsDefault = parcelHelpers.interopDefault(_getHolderJs);
var _replaceHoldersJs = require("./_replaceHolders.js");
var _replaceHoldersJsDefault = parcelHelpers.interopDefault(_replaceHoldersJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_PARTIAL_FLAG = 32;
/**
 * Creates a function that invokes `func` with `partials` prepended to the
 * arguments it receives. This method is like `_.bind` except it does **not**
 * alter the `this` binding.
 *
 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * **Note:** This method doesn't set the "length" property of partially
 * applied functions.
 *
 * @static
 * @memberOf _
 * @since 0.2.0
 * @category Function
 * @param {Function} func The function to partially apply arguments to.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new partially applied function.
 * @example
 *
 * function greet(greeting, name) {
 *   return greeting + ' ' + name;
 * }
 *
 * var sayHelloTo = _.partial(greet, 'hello');
 * sayHelloTo('fred');
 * // => 'hello fred'
 *
 * // Partially applied with placeholders.
 * var greetFred = _.partial(greet, _, 'fred');
 * greetFred('hi');
 * // => 'hi fred'
 */ var partial = _baseRestJsDefault.default(function(func, partials) {
    var holders = _replaceHoldersJsDefault.default(partials, _getHolderJsDefault.default(partial));
    return _createWrapJsDefault.default(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
});
// Assign default placeholders.
partial.placeholder = {
};
exports.default = partial;

},{"./_baseRest.js":"6GMnO","./_createWrap.js":"b7iE3","./_getHolder.js":"9cElI","./_replaceHolders.js":"i9cpa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6mDsd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
var _getHolderJs = require("./_getHolder.js");
var _getHolderJsDefault = parcelHelpers.interopDefault(_getHolderJs);
var _replaceHoldersJs = require("./_replaceHolders.js");
var _replaceHoldersJsDefault = parcelHelpers.interopDefault(_replaceHoldersJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_PARTIAL_RIGHT_FLAG = 64;
/**
 * This method is like `_.partial` except that partially applied arguments
 * are appended to the arguments it receives.
 *
 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * **Note:** This method doesn't set the "length" property of partially
 * applied functions.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Function
 * @param {Function} func The function to partially apply arguments to.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new partially applied function.
 * @example
 *
 * function greet(greeting, name) {
 *   return greeting + ' ' + name;
 * }
 *
 * var greetFred = _.partialRight(greet, 'fred');
 * greetFred('hi');
 * // => 'hi fred'
 *
 * // Partially applied with placeholders.
 * var sayHelloTo = _.partialRight(greet, 'hello', _);
 * sayHelloTo('fred');
 * // => 'hello fred'
 */ var partialRight = _baseRestJsDefault.default(function(func, partials) {
    var holders = _replaceHoldersJsDefault.default(partials, _getHolderJsDefault.default(partialRight));
    return _createWrapJsDefault.default(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
});
// Assign default placeholders.
partialRight.placeholder = {
};
exports.default = partialRight;

},{"./_baseRest.js":"6GMnO","./_createWrap.js":"b7iE3","./_getHolder.js":"9cElI","./_replaceHolders.js":"i9cpa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8Ci7G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createAggregatorJs = require("./_createAggregator.js");
var _createAggregatorJsDefault = parcelHelpers.interopDefault(_createAggregatorJs);
/**
 * Creates an array of elements split into two groups, the first of which
 * contains elements `predicate` returns truthy for, the second of which
 * contains elements `predicate` returns falsey for. The predicate is
 * invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of grouped elements.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': false },
 *   { 'user': 'fred',    'age': 40, 'active': true },
 *   { 'user': 'pebbles', 'age': 1,  'active': false }
 * ];
 *
 * _.partition(users, function(o) { return o.active; });
 * // => objects for [['fred'], ['barney', 'pebbles']]
 *
 * // The `_.matches` iteratee shorthand.
 * _.partition(users, { 'age': 1, 'active': false });
 * // => objects for [['pebbles'], ['barney', 'fred']]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.partition(users, ['active', false]);
 * // => objects for [['barney', 'pebbles'], ['fred']]
 *
 * // The `_.property` iteratee shorthand.
 * _.partition(users, 'active');
 * // => objects for [['fred'], ['barney', 'pebbles']]
 */ var partition = _createAggregatorJsDefault.default(function(result, value, key) {
    result[key ? 0 : 1].push(value);
}, function() {
    return [
        [],
        []
    ];
});
exports.default = partition;

},{"./_createAggregator.js":"8ewQK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j4dOW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePickJs = require("./_basePick.js");
var _basePickJsDefault = parcelHelpers.interopDefault(_basePickJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */ var pick = _flatRestJsDefault.default(function(object, paths) {
    return object == null ? {
    } : _basePickJsDefault.default(object, paths);
});
exports.default = pick;

},{"./_basePick.js":"eJtRt","./_flatRest.js":"iG3bQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eJtRt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePickByJs = require("./_basePickBy.js");
var _basePickByJsDefault = parcelHelpers.interopDefault(_basePickByJs);
var _hasInJs = require("./hasIn.js");
var _hasInJsDefault = parcelHelpers.interopDefault(_hasInJs);
/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */ function basePick(object, paths) {
    return _basePickByJsDefault.default(object, paths, function(value, path) {
        return _hasInJsDefault.default(object, path);
    });
}
exports.default = basePick;

},{"./_basePickBy.js":"hFqfY","./hasIn.js":"kRN1R","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aC9CN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseLodashJs = require("./_baseLodash.js");
var _baseLodashJsDefault = parcelHelpers.interopDefault(_baseLodashJs);
var _wrapperCloneJs = require("./_wrapperClone.js");
var _wrapperCloneJsDefault = parcelHelpers.interopDefault(_wrapperCloneJs);
/**
 * Creates a clone of the chain sequence planting `value` as the wrapped value.
 *
 * @name plant
 * @memberOf _
 * @since 3.2.0
 * @category Seq
 * @param {*} value The value to plant.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2]).map(square);
 * var other = wrapped.plant([3, 4]);
 *
 * other.value();
 * // => [9, 16]
 *
 * wrapped.value();
 * // => [1, 4]
 */ function wrapperPlant(value) {
    var result, parent = this;
    while(parent instanceof _baseLodashJsDefault.default){
        var clone = _wrapperCloneJsDefault.default(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) previous.__wrapped__ = clone;
        else result = clone;
        var previous = clone;
        parent = parent.__wrapped__;
    }
    previous.__wrapped__ = value;
    return result;
}
exports.default = wrapperPlant;

},{"./_baseLodash.js":"ggG4k","./_wrapperClone.js":"fVp2w","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4RAwz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetJs = require("./_baseGet.js");
var _baseGetJsDefault = parcelHelpers.interopDefault(_baseGetJs);
/**
 * The opposite of `_.property`; this method creates a function that returns
 * the value at a given path of `object`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var array = [0, 1, 2],
 *     object = { 'a': array, 'b': array, 'c': array };
 *
 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
 * // => [2, 0]
 *
 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
 * // => [2, 0]
 */ function propertyOf(object) {
    return function(path) {
        return object == null ? undefined : _baseGetJsDefault.default(object, path);
    };
}
exports.default = propertyOf;

},{"./_baseGet.js":"h5I8S","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h46Lz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _pullAllJs = require("./pullAll.js");
var _pullAllJsDefault = parcelHelpers.interopDefault(_pullAllJs);
/**
 * Removes all given values from `array` using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
 * to remove elements from an array by predicate.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {...*} [values] The values to remove.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * _.pull(array, 'a', 'c');
 * console.log(array);
 * // => ['b', 'b']
 */ var pull = _baseRestJsDefault.default(_pullAllJsDefault.default);
exports.default = pull;

},{"./_baseRest.js":"6GMnO","./pullAll.js":"hfsh3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hfsh3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePullAllJs = require("./_basePullAll.js");
var _basePullAllJsDefault = parcelHelpers.interopDefault(_basePullAllJs);
/**
 * This method is like `_.pull` except that it accepts an array of values to remove.
 *
 * **Note:** Unlike `_.difference`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * _.pullAll(array, ['a', 'c']);
 * console.log(array);
 * // => ['b', 'b']
 */ function pullAll(array, values) {
    return array && array.length && values && values.length ? _basePullAllJsDefault.default(array, values) : array;
}
exports.default = pullAll;

},{"./_basePullAll.js":"3g9o0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3g9o0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseIndexOfJs = require("./_baseIndexOf.js");
var _baseIndexOfJsDefault = parcelHelpers.interopDefault(_baseIndexOfJs);
var _baseIndexOfWithJs = require("./_baseIndexOfWith.js");
var _baseIndexOfWithJsDefault = parcelHelpers.interopDefault(_baseIndexOfWithJs);
var _baseUnaryJs = require("./_baseUnary.js");
var _baseUnaryJsDefault = parcelHelpers.interopDefault(_baseUnaryJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * The base implementation of `_.pullAllBy` without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 */ function basePullAll(array, values, iteratee, comparator) {
    var indexOf = comparator ? _baseIndexOfWithJsDefault.default : _baseIndexOfJsDefault.default, index = -1, length = values.length, seen = array;
    if (array === values) values = _copyArrayJsDefault.default(values);
    if (iteratee) seen = _arrayMapJsDefault.default(array, _baseUnaryJsDefault.default(iteratee));
    while((++index) < length){
        var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
        while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){
            if (seen !== array) splice.call(seen, fromIndex, 1);
            splice.call(array, fromIndex, 1);
        }
    }
    return array;
}
exports.default = basePullAll;

},{"./_arrayMap.js":"jjvFU","./_baseIndexOf.js":"4m4vH","./_baseIndexOfWith.js":"dmipd","./_baseUnary.js":"3cdEI","./_copyArray.js":"aKKbc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dmipd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function is like `baseIndexOf` except that it accepts a comparator.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1, length = array.length;
    while((++index) < length){
        if (comparator(array[index], value)) return index;
    }
    return -1;
}
exports.default = baseIndexOfWith;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8miuf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _basePullAllJs = require("./_basePullAll.js");
var _basePullAllJsDefault = parcelHelpers.interopDefault(_basePullAllJs);
/**
 * This method is like `_.pullAll` except that it accepts `iteratee` which is
 * invoked for each element of `array` and `values` to generate the criterion
 * by which they're compared. The iteratee is invoked with one argument: (value).
 *
 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
 *
 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
 * console.log(array);
 * // => [{ 'x': 2 }]
 */ function pullAllBy(array, values, iteratee) {
    return array && array.length && values && values.length ? _basePullAllJsDefault.default(array, values, _baseIterateeJsDefault.default(iteratee, 2)) : array;
}
exports.default = pullAllBy;

},{"./_baseIteratee.js":"6ue66","./_basePullAll.js":"3g9o0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1U40C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePullAllJs = require("./_basePullAll.js");
var _basePullAllJsDefault = parcelHelpers.interopDefault(_basePullAllJs);
/**
 * This method is like `_.pullAll` except that it accepts `comparator` which
 * is invoked to compare elements of `array` to `values`. The comparator is
 * invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
 *
 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
 * console.log(array);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
 */ function pullAllWith(array, values, comparator) {
    return array && array.length && values && values.length ? _basePullAllJsDefault.default(array, values, undefined, comparator) : array;
}
exports.default = pullAllWith;

},{"./_basePullAll.js":"3g9o0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"m59fR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _baseAtJs = require("./_baseAt.js");
var _baseAtJsDefault = parcelHelpers.interopDefault(_baseAtJs);
var _basePullAtJs = require("./_basePullAt.js");
var _basePullAtJsDefault = parcelHelpers.interopDefault(_basePullAtJs);
var _compareAscendingJs = require("./_compareAscending.js");
var _compareAscendingJsDefault = parcelHelpers.interopDefault(_compareAscendingJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
/**
 * Removes elements from `array` corresponding to `indexes` and returns an
 * array of removed elements.
 *
 * **Note:** Unlike `_.at`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = ['a', 'b', 'c', 'd'];
 * var pulled = _.pullAt(array, [1, 3]);
 *
 * console.log(array);
 * // => ['a', 'c']
 *
 * console.log(pulled);
 * // => ['b', 'd']
 */ var pullAt = _flatRestJsDefault.default(function(array, indexes) {
    var length = array == null ? 0 : array.length, result = _baseAtJsDefault.default(array, indexes);
    _basePullAtJsDefault.default(array, _arrayMapJsDefault.default(indexes, function(index) {
        return _isIndexJsDefault.default(index, length) ? +index : index;
    }).sort(_compareAscendingJsDefault.default));
    return result;
});
exports.default = pullAt;

},{"./_arrayMap.js":"jjvFU","./_baseAt.js":"aMz8r","./_basePullAt.js":"gBLXV","./_compareAscending.js":"2WdYg","./_flatRest.js":"iG3bQ","./_isIndex.js":"gfLoM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gBLXV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseUnsetJs = require("./_baseUnset.js");
var _baseUnsetJsDefault = parcelHelpers.interopDefault(_baseUnsetJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */ function basePullAt(array, indexes) {
    var length = array ? indexes.length : 0, lastIndex = length - 1;
    while(length--){
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
            var previous = index;
            if (_isIndexJsDefault.default(index)) splice.call(array, index, 1);
            else _baseUnsetJsDefault.default(array, index);
        }
    }
    return array;
}
exports.default = basePullAt;

},{"./_baseUnset.js":"laAQR","./_isIndex.js":"gfLoM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iHku7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRandomJs = require("./_baseRandom.js");
var _baseRandomJsDefault = parcelHelpers.interopDefault(_baseRandomJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _toFiniteJs = require("./toFinite.js");
var _toFiniteJsDefault = parcelHelpers.interopDefault(_toFiniteJs);
/** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min, nativeRandom = Math.random;
/**
 * Produces a random number between the inclusive `lower` and `upper` bounds.
 * If only one argument is provided a number between `0` and the given number
 * is returned. If `floating` is `true`, or either `lower` or `upper` are
 * floats, a floating-point number is returned instead of an integer.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @memberOf _
 * @since 0.7.0
 * @category Number
 * @param {number} [lower=0] The lower bound.
 * @param {number} [upper=1] The upper bound.
 * @param {boolean} [floating] Specify returning a floating-point number.
 * @returns {number} Returns the random number.
 * @example
 *
 * _.random(0, 5);
 * // => an integer between 0 and 5
 *
 * _.random(5);
 * // => also an integer between 0 and 5
 *
 * _.random(5, true);
 * // => a floating-point number between 0 and 5
 *
 * _.random(1.2, 5.2);
 * // => a floating-point number between 1.2 and 5.2
 */ function random(lower, upper, floating) {
    if (floating && typeof floating != 'boolean' && _isIterateeCallJsDefault.default(lower, upper, floating)) upper = floating = undefined;
    if (floating === undefined) {
        if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
        } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
        }
    }
    if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
    } else {
        lower = _toFiniteJsDefault.default(lower);
        if (upper === undefined) {
            upper = lower;
            lower = 0;
        } else upper = _toFiniteJsDefault.default(upper);
    }
    if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
    }
    if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
    }
    return _baseRandomJsDefault.default(lower, upper);
}
exports.default = random;

},{"./_baseRandom.js":"aoiHG","./_isIterateeCall.js":"aHCs0","./toFinite.js":"he24v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aoiHG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeFloor = Math.floor, nativeRandom = Math.random;
/**
 * The base implementation of `_.random` without support for returning
 * floating-point numbers.
 *
 * @private
 * @param {number} lower The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the random number.
 */ function baseRandom(lower, upper) {
    return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
}
exports.default = baseRandom;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hHEyI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRangeJs = require("./_createRange.js");
var _createRangeJsDefault = parcelHelpers.interopDefault(_createRangeJs);
/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */ var range = _createRangeJsDefault.default();
exports.default = range;

},{"./_createRange.js":"jYatY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jYatY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRangeJs = require("./_baseRange.js");
var _baseRangeJsDefault = parcelHelpers.interopDefault(_baseRangeJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _toFiniteJs = require("./toFinite.js");
var _toFiniteJsDefault = parcelHelpers.interopDefault(_toFiniteJs);
/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */ function createRange(fromRight) {
    return function(start, end, step) {
        if (step && typeof step != 'number' && _isIterateeCallJsDefault.default(start, end, step)) end = step = undefined;
        // Ensure the sign of `-0` is preserved.
        start = _toFiniteJsDefault.default(start);
        if (end === undefined) {
            end = start;
            start = 0;
        } else end = _toFiniteJsDefault.default(end);
        step = step === undefined ? start < end ? 1 : -1 : _toFiniteJsDefault.default(step);
        return _baseRangeJsDefault.default(start, end, step, fromRight);
    };
}
exports.default = createRange;

},{"./_baseRange.js":"at2hC","./_isIterateeCall.js":"aHCs0","./toFinite.js":"he24v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"at2hC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeMax = Math.max;
/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */ function baseRange(start, end, step, fromRight) {
    var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
    while(length--){
        result[fromRight ? length : ++index] = start;
        start += step;
    }
    return result;
}
exports.default = baseRange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g1XoZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRangeJs = require("./_createRange.js");
var _createRangeJsDefault = parcelHelpers.interopDefault(_createRangeJs);
/**
 * This method is like `_.range` except that it populates values in
 * descending order.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.range
 * @example
 *
 * _.rangeRight(4);
 * // => [3, 2, 1, 0]
 *
 * _.rangeRight(-4);
 * // => [-3, -2, -1, 0]
 *
 * _.rangeRight(1, 5);
 * // => [4, 3, 2, 1]
 *
 * _.rangeRight(0, 20, 5);
 * // => [15, 10, 5, 0]
 *
 * _.rangeRight(0, -4, -1);
 * // => [-3, -2, -1, 0]
 *
 * _.rangeRight(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.rangeRight(0);
 * // => []
 */ var rangeRight = _createRangeJsDefault.default(true);
exports.default = rangeRight;

},{"./_createRange.js":"jYatY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gIgPN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWrapJs = require("./_createWrap.js");
var _createWrapJsDefault = parcelHelpers.interopDefault(_createWrapJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
/** Used to compose bitmasks for function metadata. */ var WRAP_REARG_FLAG = 256;
/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */ var rearg = _flatRestJsDefault.default(function(func, indexes) {
    return _createWrapJsDefault.default(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});
exports.default = rearg;

},{"./_createWrap.js":"b7iE3","./_flatRest.js":"iG3bQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dYEXo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayReduceJs = require("./_arrayReduce.js");
var _arrayReduceJsDefault = parcelHelpers.interopDefault(_arrayReduceJs);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseReduceJs = require("./_baseReduce.js");
var _baseReduceJsDefault = parcelHelpers.interopDefault(_baseReduceJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */ function reduce(collection, iteratee, accumulator) {
    var func = _isArrayJsDefault.default(collection) ? _arrayReduceJsDefault.default : _baseReduceJsDefault.default, initAccum = arguments.length < 3;
    return func(collection, _baseIterateeJsDefault.default(iteratee, 4), accumulator, initAccum, _baseEachJsDefault.default);
}
exports.default = reduce;

},{"./_arrayReduce.js":"ewCyc","./_baseEach.js":"dpsE1","./_baseIteratee.js":"6ue66","./_baseReduce.js":"gr3zo","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gr3zo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */ function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection1) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection1);
    });
    return accumulator;
}
exports.default = baseReduce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gwBXk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayReduceRightJs = require("./_arrayReduceRight.js");
var _arrayReduceRightJsDefault = parcelHelpers.interopDefault(_arrayReduceRightJs);
var _baseEachRightJs = require("./_baseEachRight.js");
var _baseEachRightJsDefault = parcelHelpers.interopDefault(_baseEachRightJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseReduceJs = require("./_baseReduce.js");
var _baseReduceJsDefault = parcelHelpers.interopDefault(_baseReduceJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * This method is like `_.reduce` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduce
 * @example
 *
 * var array = [[0, 1], [2, 3], [4, 5]];
 *
 * _.reduceRight(array, function(flattened, other) {
 *   return flattened.concat(other);
 * }, []);
 * // => [4, 5, 2, 3, 0, 1]
 */ function reduceRight(collection, iteratee, accumulator) {
    var func = _isArrayJsDefault.default(collection) ? _arrayReduceRightJsDefault.default : _baseReduceJsDefault.default, initAccum = arguments.length < 3;
    return func(collection, _baseIterateeJsDefault.default(iteratee, 4), accumulator, initAccum, _baseEachRightJsDefault.default);
}
exports.default = reduceRight;

},{"./_arrayReduceRight.js":"38UoS","./_baseEachRight.js":"gYvMD","./_baseIteratee.js":"6ue66","./_baseReduce.js":"gr3zo","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"38UoS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A specialized version of `_.reduceRight` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the last element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) accumulator = array[--length];
    while(length--)accumulator = iteratee(accumulator, array[length], length, array);
    return accumulator;
}
exports.default = arrayReduceRight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9h1ez":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _baseFilterJs = require("./_baseFilter.js");
var _baseFilterJsDefault = parcelHelpers.interopDefault(_baseFilterJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _negateJs = require("./negate.js");
var _negateJsDefault = parcelHelpers.interopDefault(_negateJs);
/**
 * The opposite of `_.filter`; this method returns the elements of `collection`
 * that `predicate` does **not** return truthy for.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.filter
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': true }
 * ];
 *
 * _.reject(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.reject(users, { 'age': 40, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.reject(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.reject(users, 'active');
 * // => objects for ['barney']
 */ function reject(collection, predicate) {
    var func = _isArrayJsDefault.default(collection) ? _arrayFilterJsDefault.default : _baseFilterJsDefault.default;
    return func(collection, _negateJsDefault.default(_baseIterateeJsDefault.default(predicate, 3)));
}
exports.default = reject;

},{"./_arrayFilter.js":"aSstn","./_baseFilter.js":"6rMeT","./_baseIteratee.js":"6ue66","./isArray.js":"aM5De","./negate.js":"7g9li","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e0bSt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _basePullAtJs = require("./_basePullAt.js");
var _basePullAtJsDefault = parcelHelpers.interopDefault(_basePullAtJs);
/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */ function remove(array, predicate) {
    var result = [];
    if (!(array && array.length)) return result;
    var index = -1, indexes = [], length = array.length;
    predicate = _baseIterateeJsDefault.default(predicate, 3);
    while((++index) < length){
        var value = array[index];
        if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
        }
    }
    _basePullAtJsDefault.default(array, indexes);
    return result;
}
exports.default = remove;

},{"./_baseIteratee.js":"6ue66","./_basePullAt.js":"gBLXV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b8tN6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRepeatJs = require("./_baseRepeat.js");
var _baseRepeatJsDefault = parcelHelpers.interopDefault(_baseRepeatJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Repeats the given string `n` times.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to repeat.
 * @param {number} [n=1] The number of times to repeat the string.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the repeated string.
 * @example
 *
 * _.repeat('*', 3);
 * // => '***'
 *
 * _.repeat('abc', 2);
 * // => 'abcabc'
 *
 * _.repeat('abc', 0);
 * // => ''
 */ function repeat(string, n, guard) {
    if (guard ? _isIterateeCallJsDefault.default(string, n, guard) : n === undefined) n = 1;
    else n = _toIntegerJsDefault.default(n);
    return _baseRepeatJsDefault.default(_toStringJsDefault.default(string), n);
}
exports.default = repeat;

},{"./_baseRepeat.js":"c8udy","./_isIterateeCall.js":"aHCs0","./toInteger.js":"69J4a","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7TcPA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Replaces matches for `pattern` in `string` with `replacement`.
 *
 * **Note:** This method is based on
 * [`String#replace`](https://mdn.io/String/replace).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to modify.
 * @param {RegExp|string} pattern The pattern to replace.
 * @param {Function|string} replacement The match replacement.
 * @returns {string} Returns the modified string.
 * @example
 *
 * _.replace('Hi Fred', 'Fred', 'Barney');
 * // => 'Hi Barney'
 */ function replace() {
    var args = arguments, string = _toStringJsDefault.default(args[0]);
    return args.length < 3 ? string : string.replace(args[1], args[2]);
}
exports.default = replace;

},{"./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eLF2v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as
 * an array.
 *
 * **Note:** This method is based on the
 * [rest parameter](https://mdn.io/rest_parameters).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */ function rest(func, start) {
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    start = start === undefined ? start : _toIntegerJsDefault.default(start);
    return _baseRestJsDefault.default(func, start);
}
exports.default = rest;

},{"./_baseRest.js":"6GMnO","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3UERD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _castPathJs = require("./_castPath.js");
var _castPathJsDefault = parcelHelpers.interopDefault(_castPathJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
/**
 * This method is like `_.get` except that if the resolved value is a
 * function it's invoked with the `this` binding of its parent object and
 * its result is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to resolve.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
 *
 * _.result(object, 'a[0].b.c1');
 * // => 3
 *
 * _.result(object, 'a[0].b.c2');
 * // => 4
 *
 * _.result(object, 'a[0].b.c3', 'default');
 * // => 'default'
 *
 * _.result(object, 'a[0].b.c3', _.constant('default'));
 * // => 'default'
 */ function result(object, path, defaultValue) {
    path = _castPathJsDefault.default(path, object);
    var index = -1, length = path.length;
    // Ensure the loop is entered when path is empty.
    if (!length) {
        length = 1;
        object = undefined;
    }
    while((++index) < length){
        var value = object == null ? undefined : object[_toKeyJsDefault.default(path[index])];
        if (value === undefined) {
            index = length;
            value = defaultValue;
        }
        object = _isFunctionJsDefault.default(value) ? value.call(object) : value;
    }
    return object;
}
exports.default = result;

},{"./_castPath.js":"jrUMT","./isFunction.js":"flqKI","./_toKey.js":"jqnP9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g4G7I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeReverse = arrayProto.reverse;
/**
 * Reverses `array` so that the first element becomes the last, the second
 * element becomes the second to last, and so on.
 *
 * **Note:** This method mutates `array` and is based on
 * [`Array#reverse`](https://mdn.io/Array/reverse).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _.reverse(array);
 * // => [3, 2, 1]
 *
 * console.log(array);
 * // => [3, 2, 1]
 */ function reverse(array) {
    return array == null ? array : nativeReverse.call(array);
}
exports.default = reverse;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"m9KU4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRoundJs = require("./_createRound.js");
var _createRoundJsDefault = parcelHelpers.interopDefault(_createRoundJs);
/**
 * Computes `number` rounded to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round.
 * @param {number} [precision=0] The precision to round to.
 * @returns {number} Returns the rounded number.
 * @example
 *
 * _.round(4.006);
 * // => 4
 *
 * _.round(4.006, 2);
 * // => 4.01
 *
 * _.round(4060, -2);
 * // => 4100
 */ var round = _createRoundJsDefault.default('round');
exports.default = round;

},{"./_createRound.js":"bAEXu","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jEj1E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arraySampleJs = require("./_arraySample.js");
var _arraySampleJsDefault = parcelHelpers.interopDefault(_arraySampleJs);
var _baseSampleJs = require("./_baseSample.js");
var _baseSampleJsDefault = parcelHelpers.interopDefault(_baseSampleJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Gets a random element from `collection`.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to sample.
 * @returns {*} Returns the random element.
 * @example
 *
 * _.sample([1, 2, 3, 4]);
 * // => 2
 */ function sample(collection) {
    var func = _isArrayJsDefault.default(collection) ? _arraySampleJsDefault.default : _baseSampleJsDefault.default;
    return func(collection);
}
exports.default = sample;

},{"./_arraySample.js":"G3tvH","./_baseSample.js":"7nASX","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"G3tvH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRandomJs = require("./_baseRandom.js");
var _baseRandomJsDefault = parcelHelpers.interopDefault(_baseRandomJs);
/**
 * A specialized version of `_.sample` for arrays.
 *
 * @private
 * @param {Array} array The array to sample.
 * @returns {*} Returns the random element.
 */ function arraySample(array) {
    var length = array.length;
    return length ? array[_baseRandomJsDefault.default(0, length - 1)] : undefined;
}
exports.default = arraySample;

},{"./_baseRandom.js":"aoiHG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7nASX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arraySampleJs = require("./_arraySample.js");
var _arraySampleJsDefault = parcelHelpers.interopDefault(_arraySampleJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
/**
 * The base implementation of `_.sample`.
 *
 * @private
 * @param {Array|Object} collection The collection to sample.
 * @returns {*} Returns the random element.
 */ function baseSample(collection) {
    return _arraySampleJsDefault.default(_valuesJsDefault.default(collection));
}
exports.default = baseSample;

},{"./_arraySample.js":"G3tvH","./values.js":"abMLz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jj60k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arraySampleSizeJs = require("./_arraySampleSize.js");
var _arraySampleSizeJsDefault = parcelHelpers.interopDefault(_arraySampleSizeJs);
var _baseSampleSizeJs = require("./_baseSampleSize.js");
var _baseSampleSizeJsDefault = parcelHelpers.interopDefault(_baseSampleSizeJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Gets `n` random elements at unique keys from `collection` up to the
 * size of `collection`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to sample.
 * @param {number} [n=1] The number of elements to sample.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the random elements.
 * @example
 *
 * _.sampleSize([1, 2, 3], 2);
 * // => [3, 1]
 *
 * _.sampleSize([1, 2, 3], 4);
 * // => [2, 3, 1]
 */ function sampleSize(collection, n, guard) {
    if (guard ? _isIterateeCallJsDefault.default(collection, n, guard) : n === undefined) n = 1;
    else n = _toIntegerJsDefault.default(n);
    var func = _isArrayJsDefault.default(collection) ? _arraySampleSizeJsDefault.default : _baseSampleSizeJsDefault.default;
    return func(collection, n);
}
exports.default = sampleSize;

},{"./_arraySampleSize.js":"dCbO2","./_baseSampleSize.js":"2vyJD","./isArray.js":"aM5De","./_isIterateeCall.js":"aHCs0","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dCbO2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClampJs = require("./_baseClamp.js");
var _baseClampJsDefault = parcelHelpers.interopDefault(_baseClampJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _shuffleSelfJs = require("./_shuffleSelf.js");
var _shuffleSelfJsDefault = parcelHelpers.interopDefault(_shuffleSelfJs);
/**
 * A specialized version of `_.sampleSize` for arrays.
 *
 * @private
 * @param {Array} array The array to sample.
 * @param {number} n The number of elements to sample.
 * @returns {Array} Returns the random elements.
 */ function arraySampleSize(array, n) {
    return _shuffleSelfJsDefault.default(_copyArrayJsDefault.default(array), _baseClampJsDefault.default(n, 0, array.length));
}
exports.default = arraySampleSize;

},{"./_baseClamp.js":"04c2V","./_copyArray.js":"aKKbc","./_shuffleSelf.js":"i7uRU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i7uRU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRandomJs = require("./_baseRandom.js");
var _baseRandomJsDefault = parcelHelpers.interopDefault(_baseRandomJs);
/**
 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
 *
 * @private
 * @param {Array} array The array to shuffle.
 * @param {number} [size=array.length] The size of `array`.
 * @returns {Array} Returns `array`.
 */ function shuffleSelf(array, size) {
    var index = -1, length = array.length, lastIndex = length - 1;
    size = size === undefined ? length : size;
    while((++index) < size){
        var rand = _baseRandomJsDefault.default(index, lastIndex), value = array[rand];
        array[rand] = array[index];
        array[index] = value;
    }
    array.length = size;
    return array;
}
exports.default = shuffleSelf;

},{"./_baseRandom.js":"aoiHG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2vyJD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClampJs = require("./_baseClamp.js");
var _baseClampJsDefault = parcelHelpers.interopDefault(_baseClampJs);
var _shuffleSelfJs = require("./_shuffleSelf.js");
var _shuffleSelfJsDefault = parcelHelpers.interopDefault(_shuffleSelfJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
/**
 * The base implementation of `_.sampleSize` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to sample.
 * @param {number} n The number of elements to sample.
 * @returns {Array} Returns the random elements.
 */ function baseSampleSize(collection, n) {
    var array = _valuesJsDefault.default(collection);
    return _shuffleSelfJsDefault.default(array, _baseClampJsDefault.default(n, 0, array.length));
}
exports.default = baseSampleSize;

},{"./_baseClamp.js":"04c2V","./_shuffleSelf.js":"i7uRU","./values.js":"abMLz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7RnBM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSetJs = require("./_baseSet.js");
var _baseSetJsDefault = parcelHelpers.interopDefault(_baseSetJs);
/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */ function set(object, path, value) {
    return object == null ? object : _baseSetJsDefault.default(object, path, value);
}
exports.default = set;

},{"./_baseSet.js":"eyFmh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hJ6lo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSetJs = require("./_baseSet.js");
var _baseSetJsDefault = parcelHelpers.interopDefault(_baseSetJs);
/**
 * This method is like `_.set` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.setWith(object, '[0][1]', 'a', Object);
 * // => { '0': { '1': 'a' } }
 */ function setWith(object, path, value, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return object == null ? object : _baseSetJsDefault.default(object, path, value, customizer);
}
exports.default = setWith;

},{"./_baseSet.js":"eyFmh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"geZjV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayShuffleJs = require("./_arrayShuffle.js");
var _arrayShuffleJsDefault = parcelHelpers.interopDefault(_arrayShuffleJs);
var _baseShuffleJs = require("./_baseShuffle.js");
var _baseShuffleJsDefault = parcelHelpers.interopDefault(_baseShuffleJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/**
 * Creates an array of shuffled values, using a version of the
 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to shuffle.
 * @returns {Array} Returns the new shuffled array.
 * @example
 *
 * _.shuffle([1, 2, 3, 4]);
 * // => [4, 1, 3, 2]
 */ function shuffle(collection) {
    var func = _isArrayJsDefault.default(collection) ? _arrayShuffleJsDefault.default : _baseShuffleJsDefault.default;
    return func(collection);
}
exports.default = shuffle;

},{"./_arrayShuffle.js":"8XGYH","./_baseShuffle.js":"3Ny2g","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8XGYH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _shuffleSelfJs = require("./_shuffleSelf.js");
var _shuffleSelfJsDefault = parcelHelpers.interopDefault(_shuffleSelfJs);
/**
 * A specialized version of `_.shuffle` for arrays.
 *
 * @private
 * @param {Array} array The array to shuffle.
 * @returns {Array} Returns the new shuffled array.
 */ function arrayShuffle(array) {
    return _shuffleSelfJsDefault.default(_copyArrayJsDefault.default(array));
}
exports.default = arrayShuffle;

},{"./_copyArray.js":"aKKbc","./_shuffleSelf.js":"i7uRU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3Ny2g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _shuffleSelfJs = require("./_shuffleSelf.js");
var _shuffleSelfJsDefault = parcelHelpers.interopDefault(_shuffleSelfJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
/**
 * The base implementation of `_.shuffle`.
 *
 * @private
 * @param {Array|Object} collection The collection to shuffle.
 * @returns {Array} Returns the new shuffled array.
 */ function baseShuffle(collection) {
    return _shuffleSelfJsDefault.default(_valuesJsDefault.default(collection));
}
exports.default = baseShuffle;

},{"./_shuffleSelf.js":"i7uRU","./values.js":"abMLz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"deADP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseKeysJs = require("./_baseKeys.js");
var _baseKeysJsDefault = parcelHelpers.interopDefault(_baseKeysJs);
var _getTagJs = require("./_getTag.js");
var _getTagJsDefault = parcelHelpers.interopDefault(_getTagJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isStringJs = require("./isString.js");
var _isStringJsDefault = parcelHelpers.interopDefault(_isStringJs);
var _stringSizeJs = require("./_stringSize.js");
var _stringSizeJsDefault = parcelHelpers.interopDefault(_stringSizeJs);
/** `Object#toString` result references. */ var mapTag = '[object Map]', setTag = '[object Set]';
/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */ function size(collection) {
    if (collection == null) return 0;
    if (_isArrayLikeJsDefault.default(collection)) return _isStringJsDefault.default(collection) ? _stringSizeJsDefault.default(collection) : collection.length;
    var tag = _getTagJsDefault.default(collection);
    if (tag == mapTag || tag == setTag) return collection.size;
    return _baseKeysJsDefault.default(collection).length;
}
exports.default = size;

},{"./_baseKeys.js":"1u7E7","./_getTag.js":"l96z0","./isArrayLike.js":"5oD0E","./isString.js":"jLC5S","./_stringSize.js":"b9Vh6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8dFmQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Creates a slice of `array` from `start` up to, but not including, `end`.
 *
 * **Note:** This method is used instead of
 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
 * returned.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */ function slice(array, start, end) {
    var length = array == null ? 0 : array.length;
    if (!length) return [];
    if (end && typeof end != 'number' && _isIterateeCallJsDefault.default(array, start, end)) {
        start = 0;
        end = length;
    } else {
        start = start == null ? 0 : _toIntegerJsDefault.default(start);
        end = end === undefined ? length : _toIntegerJsDefault.default(end);
    }
    return _baseSliceJsDefault.default(array, start, end);
}
exports.default = slice;

},{"./_baseSlice.js":"dOp4f","./_isIterateeCall.js":"aHCs0","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5RQq2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCompounderJs = require("./_createCompounder.js");
var _createCompounderJsDefault = parcelHelpers.interopDefault(_createCompounderJs);
/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */ var snakeCase = _createCompounderJsDefault.default(function(result, word, index) {
    return result + (index ? '_' : '') + word.toLowerCase();
});
exports.default = snakeCase;

},{"./_createCompounder.js":"5YHiY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"52iYS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arraySomeJs = require("./_arraySome.js");
var _arraySomeJsDefault = parcelHelpers.interopDefault(_arraySomeJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseSomeJs = require("./_baseSome.js");
var _baseSomeJsDefault = parcelHelpers.interopDefault(_baseSomeJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */ function some(collection, predicate, guard) {
    var func = _isArrayJsDefault.default(collection) ? _arraySomeJsDefault.default : _baseSomeJsDefault.default;
    if (guard && _isIterateeCallJsDefault.default(collection, predicate, guard)) predicate = undefined;
    return func(collection, _baseIterateeJsDefault.default(predicate, 3));
}
exports.default = some;

},{"./_arraySome.js":"j3nyJ","./_baseIteratee.js":"6ue66","./_baseSome.js":"jm0Cp","./isArray.js":"aM5De","./_isIterateeCall.js":"aHCs0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jm0Cp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseEachJs = require("./_baseEach.js");
var _baseEachJsDefault = parcelHelpers.interopDefault(_baseEachJs);
/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function baseSome(collection, predicate) {
    var result;
    _baseEachJsDefault.default(collection, function(value, index, collection1) {
        result = predicate(value, index, collection1);
        return !result;
    });
    return !!result;
}
exports.default = baseSome;

},{"./_baseEach.js":"dpsE1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"j1LMa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseOrderByJs = require("./_baseOrderBy.js");
var _baseOrderByJsDefault = parcelHelpers.interopDefault(_baseOrderByJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */ var sortBy = _baseRestJsDefault.default(function(collection, iteratees) {
    if (collection == null) return [];
    var length = iteratees.length;
    if (length > 1 && _isIterateeCallJsDefault.default(collection, iteratees[0], iteratees[1])) iteratees = [];
    else if (length > 2 && _isIterateeCallJsDefault.default(iteratees[0], iteratees[1], iteratees[2])) iteratees = [
        iteratees[0]
    ];
    return _baseOrderByJsDefault.default(collection, _baseFlattenJsDefault.default(iteratees, 1), []);
});
exports.default = sortBy;

},{"./_baseFlatten.js":"dXyiK","./_baseOrderBy.js":"lvTsA","./_baseRest.js":"6GMnO","./_isIterateeCall.js":"aHCs0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1RrZA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSortedIndexJs = require("./_baseSortedIndex.js");
var _baseSortedIndexJsDefault = parcelHelpers.interopDefault(_baseSortedIndexJs);
/**
 * Uses a binary search to determine the lowest index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * _.sortedIndex([30, 50], 40);
 * // => 1
 */ function sortedIndex(array, value) {
    return _baseSortedIndexJsDefault.default(array, value);
}
exports.default = sortedIndex;

},{"./_baseSortedIndex.js":"ikE5o","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ikE5o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSortedIndexByJs = require("./_baseSortedIndexBy.js");
var _baseSortedIndexByJsDefault = parcelHelpers.interopDefault(_baseSortedIndexByJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
/**
 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
 * performs a binary search of `array` to determine the index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */ function baseSortedIndex(array, value, retHighest) {
    var low = 0, high = array == null ? low : array.length;
    if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while(low < high){
            var mid = low + high >>> 1, computed = array[mid];
            if (computed !== null && !_isSymbolJsDefault.default(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
            else high = mid;
        }
        return high;
    }
    return _baseSortedIndexByJsDefault.default(array, value, _identityJsDefault.default, retHighest);
}
exports.default = baseSortedIndex;

},{"./_baseSortedIndexBy.js":"7q0JS","./identity.js":"fqqWQ","./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7q0JS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeFloor = Math.floor, nativeMin = Math.min;
/**
 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
 * which invokes `iteratee` for `value` and each element of `array` to compute
 * their sort ranking. The iteratee is invoked with one argument; (value).
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} iteratee The iteratee invoked per element.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */ function baseSortedIndexBy(array, value, iteratee, retHighest) {
    var low = 0, high = array == null ? 0 : array.length;
    if (high === 0) return 0;
    value = iteratee(value);
    var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = _isSymbolJsDefault.default(value), valIsUndefined = value === undefined;
    while(low < high){
        var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = _isSymbolJsDefault.default(computed);
        if (valIsNaN) var setLow = retHighest || othIsReflexive;
        else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
        else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        else if (othIsNull || othIsSymbol) setLow = false;
        else setLow = retHighest ? computed <= value : computed < value;
        if (setLow) low = mid + 1;
        else high = mid;
    }
    return nativeMin(high, MAX_ARRAY_INDEX);
}
exports.default = baseSortedIndexBy;

},{"./isSymbol.js":"5Ijw9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fM825":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseSortedIndexByJs = require("./_baseSortedIndexBy.js");
var _baseSortedIndexByJsDefault = parcelHelpers.interopDefault(_baseSortedIndexByJs);
/**
 * This method is like `_.sortedIndex` except that it accepts `iteratee`
 * which is invoked for `value` and each element of `array` to compute their
 * sort ranking. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * var objects = [{ 'x': 4 }, { 'x': 5 }];
 *
 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
 * // => 0
 */ function sortedIndexBy(array, value, iteratee) {
    return _baseSortedIndexByJsDefault.default(array, value, _baseIterateeJsDefault.default(iteratee, 2));
}
exports.default = sortedIndexBy;

},{"./_baseIteratee.js":"6ue66","./_baseSortedIndexBy.js":"7q0JS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lne1W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSortedIndexJs = require("./_baseSortedIndex.js");
var _baseSortedIndexJsDefault = parcelHelpers.interopDefault(_baseSortedIndexJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/**
 * This method is like `_.indexOf` except that it performs a binary
 * search on a sorted `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
 * // => 1
 */ function sortedIndexOf(array, value) {
    var length = array == null ? 0 : array.length;
    if (length) {
        var index = _baseSortedIndexJsDefault.default(array, value);
        if (index < length && _eqJsDefault.default(array[index], value)) return index;
    }
    return -1;
}
exports.default = sortedIndexOf;

},{"./_baseSortedIndex.js":"ikE5o","./eq.js":"1PtGj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bSQkU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSortedIndexJs = require("./_baseSortedIndex.js");
var _baseSortedIndexJsDefault = parcelHelpers.interopDefault(_baseSortedIndexJs);
/**
 * This method is like `_.sortedIndex` except that it returns the highest
 * index at which `value` should be inserted into `array` in order to
 * maintain its sort order.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
 * // => 4
 */ function sortedLastIndex(array, value) {
    return _baseSortedIndexJsDefault.default(array, value, true);
}
exports.default = sortedLastIndex;

},{"./_baseSortedIndex.js":"ikE5o","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gnrPv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseSortedIndexByJs = require("./_baseSortedIndexBy.js");
var _baseSortedIndexByJsDefault = parcelHelpers.interopDefault(_baseSortedIndexByJs);
/**
 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
 * which is invoked for `value` and each element of `array` to compute their
 * sort ranking. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * var objects = [{ 'x': 4 }, { 'x': 5 }];
 *
 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
 * // => 1
 *
 * // The `_.property` iteratee shorthand.
 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
 * // => 1
 */ function sortedLastIndexBy(array, value, iteratee) {
    return _baseSortedIndexByJsDefault.default(array, value, _baseIterateeJsDefault.default(iteratee, 2), true);
}
exports.default = sortedLastIndexBy;

},{"./_baseIteratee.js":"6ue66","./_baseSortedIndexBy.js":"7q0JS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iqcKK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSortedIndexJs = require("./_baseSortedIndex.js");
var _baseSortedIndexJsDefault = parcelHelpers.interopDefault(_baseSortedIndexJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/**
 * This method is like `_.lastIndexOf` except that it performs a binary
 * search on a sorted `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
 * // => 3
 */ function sortedLastIndexOf(array, value) {
    var length = array == null ? 0 : array.length;
    if (length) {
        var index = _baseSortedIndexJsDefault.default(array, value, true) - 1;
        if (_eqJsDefault.default(array[index], value)) return index;
    }
    return -1;
}
exports.default = sortedLastIndexOf;

},{"./_baseSortedIndex.js":"ikE5o","./eq.js":"1PtGj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8aI7N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSortedUniqJs = require("./_baseSortedUniq.js");
var _baseSortedUniqJsDefault = parcelHelpers.interopDefault(_baseSortedUniqJs);
/**
 * This method is like `_.uniq` except that it's designed and optimized
 * for sorted arrays.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.sortedUniq([1, 1, 2]);
 * // => [1, 2]
 */ function sortedUniq(array) {
    return array && array.length ? _baseSortedUniqJsDefault.default(array) : [];
}
exports.default = sortedUniq;

},{"./_baseSortedUniq.js":"askpw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"askpw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/**
 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */ function baseSortedUniq(array, iteratee) {
    var index = -1, length = array.length, resIndex = 0, result = [];
    while((++index) < length){
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        if (!index || !_eqJsDefault.default(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
        }
    }
    return result;
}
exports.default = baseSortedUniq;

},{"./eq.js":"1PtGj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c9p7V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseSortedUniqJs = require("./_baseSortedUniq.js");
var _baseSortedUniqJsDefault = parcelHelpers.interopDefault(_baseSortedUniqJs);
/**
 * This method is like `_.uniqBy` except that it's designed and optimized
 * for sorted arrays.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
 * // => [1.1, 2.3]
 */ function sortedUniqBy(array, iteratee) {
    return array && array.length ? _baseSortedUniqJsDefault.default(array, _baseIterateeJsDefault.default(iteratee, 2)) : [];
}
exports.default = sortedUniqBy;

},{"./_baseIteratee.js":"6ue66","./_baseSortedUniq.js":"askpw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8bJdK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _hasUnicodeJs = require("./_hasUnicode.js");
var _hasUnicodeJsDefault = parcelHelpers.interopDefault(_hasUnicodeJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _isRegExpJs = require("./isRegExp.js");
var _isRegExpJsDefault = parcelHelpers.interopDefault(_isRegExpJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/**
 * Splits `string` by `separator`.
 *
 * **Note:** This method is based on
 * [`String#split`](https://mdn.io/String/split).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to split.
 * @param {RegExp|string} separator The separator pattern to split by.
 * @param {number} [limit] The length to truncate results to.
 * @returns {Array} Returns the string segments.
 * @example
 *
 * _.split('a-b-c', '-', 2);
 * // => ['a', 'b']
 */ function split(string, separator, limit) {
    if (limit && typeof limit != 'number' && _isIterateeCallJsDefault.default(string, separator, limit)) separator = limit = undefined;
    limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
    if (!limit) return [];
    string = _toStringJsDefault.default(string);
    if (string && (typeof separator == 'string' || separator != null && !_isRegExpJsDefault.default(separator))) {
        separator = _baseToStringJsDefault.default(separator);
        if (!separator && _hasUnicodeJsDefault.default(string)) return _castSliceJsDefault.default(_stringToArrayJsDefault.default(string), 0, limit);
    }
    return string.split(separator, limit);
}
exports.default = split;

},{"./_baseToString.js":"cWGOY","./_castSlice.js":"ak4IE","./_hasUnicode.js":"iVUcF","./_isIterateeCall.js":"aHCs0","./isRegExp.js":"mkI2R","./_stringToArray.js":"gvihb","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g2dsa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Creates a function that invokes `func` with the `this` binding of the
 * create function and an array of arguments much like
 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
 *
 * **Note:** This method is based on the
 * [spread operator](https://mdn.io/spread_operator).
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Function
 * @param {Function} func The function to spread arguments over.
 * @param {number} [start=0] The start position of the spread.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.spread(function(who, what) {
 *   return who + ' says ' + what;
 * });
 *
 * say(['fred', 'hello']);
 * // => 'fred says hello'
 *
 * var numbers = Promise.all([
 *   Promise.resolve(40),
 *   Promise.resolve(36)
 * ]);
 *
 * numbers.then(_.spread(function(x, y) {
 *   return x + y;
 * }));
 * // => a Promise of 76
 */ function spread(func, start) {
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    start = start == null ? 0 : nativeMax(_toIntegerJsDefault.default(start), 0);
    return _baseRestJsDefault.default(function(args) {
        var array = args[start], otherArgs = _castSliceJsDefault.default(args, 0, start);
        if (array) _arrayPushJsDefault.default(otherArgs, array);
        return _applyJsDefault.default(func, this, otherArgs);
    });
}
exports.default = spread;

},{"./_apply.js":"jcowS","./_arrayPush.js":"t745A","./_baseRest.js":"6GMnO","./_castSlice.js":"ak4IE","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jr30l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCompounderJs = require("./_createCompounder.js");
var _createCompounderJsDefault = parcelHelpers.interopDefault(_createCompounderJs);
var _upperFirstJs = require("./upperFirst.js");
var _upperFirstJsDefault = parcelHelpers.interopDefault(_upperFirstJs);
/**
 * Converts `string` to
 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
 *
 * @static
 * @memberOf _
 * @since 3.1.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the start cased string.
 * @example
 *
 * _.startCase('--foo-bar--');
 * // => 'Foo Bar'
 *
 * _.startCase('fooBar');
 * // => 'Foo Bar'
 *
 * _.startCase('__FOO_BAR__');
 * // => 'FOO BAR'
 */ var startCase = _createCompounderJsDefault.default(function(result, word, index) {
    return result + (index ? ' ' : '') + _upperFirstJsDefault.default(word);
});
exports.default = startCase;

},{"./_createCompounder.js":"5YHiY","./upperFirst.js":"bubwY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"77WAQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClampJs = require("./_baseClamp.js");
var _baseClampJsDefault = parcelHelpers.interopDefault(_baseClampJs);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Checks if `string` starts with the given target string.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {string} [target] The string to search for.
 * @param {number} [position=0] The position to search from.
 * @returns {boolean} Returns `true` if `string` starts with `target`,
 *  else `false`.
 * @example
 *
 * _.startsWith('abc', 'a');
 * // => true
 *
 * _.startsWith('abc', 'b');
 * // => false
 *
 * _.startsWith('abc', 'b', 1);
 * // => true
 */ function startsWith(string, target, position) {
    string = _toStringJsDefault.default(string);
    position = position == null ? 0 : _baseClampJsDefault.default(_toIntegerJsDefault.default(position), 0, string.length);
    target = _baseToStringJsDefault.default(target);
    return string.slice(position, position + target.length) == target;
}
exports.default = startsWith;

},{"./_baseClamp.js":"04c2V","./_baseToString.js":"cWGOY","./toInteger.js":"69J4a","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"72wCy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns a new empty object.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Object} Returns the new empty object.
 * @example
 *
 * var objects = _.times(2, _.stubObject);
 *
 * console.log(objects);
 * // => [{}, {}]
 *
 * console.log(objects[0] === objects[1]);
 * // => false
 */ function stubObject() {
    return {
    };
}
exports.default = stubObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kXZaJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns an empty string.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {string} Returns the empty string.
 * @example
 *
 * _.times(2, _.stubString);
 * // => ['', '']
 */ function stubString() {
    return '';
}
exports.default = stubString;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1QVGB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method returns `true`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `true`.
 * @example
 *
 * _.times(2, _.stubTrue);
 * // => [true, true]
 */ function stubTrue() {
    return true;
}
exports.default = stubTrue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bkRtL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createMathOperationJs = require("./_createMathOperation.js");
var _createMathOperationJsDefault = parcelHelpers.interopDefault(_createMathOperationJs);
/**
 * Subtract two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {number} minuend The first number in a subtraction.
 * @param {number} subtrahend The second number in a subtraction.
 * @returns {number} Returns the difference.
 * @example
 *
 * _.subtract(6, 4);
 * // => 2
 */ var subtract = _createMathOperationJsDefault.default(function(minuend, subtrahend) {
    return minuend - subtrahend;
}, 0);
exports.default = subtract;

},{"./_createMathOperation.js":"aW9XE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lFod9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSumJs = require("./_baseSum.js");
var _baseSumJsDefault = parcelHelpers.interopDefault(_baseSumJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
/**
 * Computes the sum of the values in `array`.
 *
 * @static
 * @memberOf _
 * @since 3.4.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {number} Returns the sum.
 * @example
 *
 * _.sum([4, 2, 8, 6]);
 * // => 20
 */ function sum(array) {
    return array && array.length ? _baseSumJsDefault.default(array, _identityJsDefault.default) : 0;
}
exports.default = sum;

},{"./_baseSum.js":"iyaNJ","./identity.js":"fqqWQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fveXh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseSumJs = require("./_baseSum.js");
var _baseSumJsDefault = parcelHelpers.interopDefault(_baseSumJs);
/**
 * This method is like `_.sum` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the value to be summed.
 * The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the sum.
 * @example
 *
 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
 *
 * _.sumBy(objects, function(o) { return o.n; });
 * // => 20
 *
 * // The `_.property` iteratee shorthand.
 * _.sumBy(objects, 'n');
 * // => 20
 */ function sumBy(array, iteratee) {
    return array && array.length ? _baseSumJsDefault.default(array, _baseIterateeJsDefault.default(iteratee, 2)) : 0;
}
exports.default = sumBy;

},{"./_baseIteratee.js":"6ue66","./_baseSum.js":"iyaNJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3VhUc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
/**
 * Gets all but the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.tail([1, 2, 3]);
 * // => [2, 3]
 */ function tail(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseSliceJsDefault.default(array, 1, length) : [];
}
exports.default = tail;

},{"./_baseSlice.js":"dOp4f","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1jAnF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Creates a slice of `array` with `n` elements taken from the beginning.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to take.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.take([1, 2, 3]);
 * // => [1]
 *
 * _.take([1, 2, 3], 2);
 * // => [1, 2]
 *
 * _.take([1, 2, 3], 5);
 * // => [1, 2, 3]
 *
 * _.take([1, 2, 3], 0);
 * // => []
 */ function take(array, n, guard) {
    if (!(array && array.length)) return [];
    n = guard || n === undefined ? 1 : _toIntegerJsDefault.default(n);
    return _baseSliceJsDefault.default(array, 0, n < 0 ? 0 : n);
}
exports.default = take;

},{"./_baseSlice.js":"dOp4f","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gNCaE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSliceJs = require("./_baseSlice.js");
var _baseSliceJsDefault = parcelHelpers.interopDefault(_baseSliceJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/**
 * Creates a slice of `array` with `n` elements taken from the end.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to take.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.takeRight([1, 2, 3]);
 * // => [3]
 *
 * _.takeRight([1, 2, 3], 2);
 * // => [2, 3]
 *
 * _.takeRight([1, 2, 3], 5);
 * // => [1, 2, 3]
 *
 * _.takeRight([1, 2, 3], 0);
 * // => []
 */ function takeRight(array, n, guard) {
    var length = array == null ? 0 : array.length;
    if (!length) return [];
    n = guard || n === undefined ? 1 : _toIntegerJsDefault.default(n);
    n = length - n;
    return _baseSliceJsDefault.default(array, n < 0 ? 0 : n, length);
}
exports.default = takeRight;

},{"./_baseSlice.js":"dOp4f","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5EXP3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseWhileJs = require("./_baseWhile.js");
var _baseWhileJsDefault = parcelHelpers.interopDefault(_baseWhileJs);
/**
 * Creates a slice of `array` with elements taken from the end. Elements are
 * taken until `predicate` returns falsey. The predicate is invoked with
 * three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.takeRightWhile(users, function(o) { return !o.active; });
 * // => objects for ['fred', 'pebbles']
 *
 * // The `_.matches` iteratee shorthand.
 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
 * // => objects for ['pebbles']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.takeRightWhile(users, ['active', false]);
 * // => objects for ['fred', 'pebbles']
 *
 * // The `_.property` iteratee shorthand.
 * _.takeRightWhile(users, 'active');
 * // => []
 */ function takeRightWhile(array, predicate) {
    return array && array.length ? _baseWhileJsDefault.default(array, _baseIterateeJsDefault.default(predicate, 3), false, true) : [];
}
exports.default = takeRightWhile;

},{"./_baseIteratee.js":"6ue66","./_baseWhile.js":"b7XmE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aNaWv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseWhileJs = require("./_baseWhile.js");
var _baseWhileJsDefault = parcelHelpers.interopDefault(_baseWhileJs);
/**
 * Creates a slice of `array` with elements taken from the beginning. Elements
 * are taken until `predicate` returns falsey. The predicate is invoked with
 * three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.takeWhile(users, function(o) { return !o.active; });
 * // => objects for ['barney', 'fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.takeWhile(users, { 'user': 'barney', 'active': false });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.takeWhile(users, ['active', false]);
 * // => objects for ['barney', 'fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.takeWhile(users, 'active');
 * // => []
 */ function takeWhile(array, predicate) {
    return array && array.length ? _baseWhileJsDefault.default(array, _baseIterateeJsDefault.default(predicate, 3)) : [];
}
exports.default = takeWhile;

},{"./_baseIteratee.js":"6ue66","./_baseWhile.js":"b7XmE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2FfKw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method invokes `interceptor` and returns `value`. The interceptor
 * is invoked with one argument; (value). The purpose of this method is to
 * "tap into" a method chain sequence in order to modify intermediate results.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Seq
 * @param {*} value The value to provide to `interceptor`.
 * @param {Function} interceptor The function to invoke.
 * @returns {*} Returns `value`.
 * @example
 *
 * _([1, 2, 3])
 *  .tap(function(array) {
 *    // Mutate input array.
 *    array.pop();
 *  })
 *  .reverse()
 *  .value();
 * // => [2, 1]
 */ function tap(value, interceptor) {
    interceptor(value);
    return value;
}
exports.default = tap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dENJ7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignInWithJs = require("./assignInWith.js");
var _assignInWithJsDefault = parcelHelpers.interopDefault(_assignInWithJs);
var _attemptJs = require("./attempt.js");
var _attemptJsDefault = parcelHelpers.interopDefault(_attemptJs);
var _baseValuesJs = require("./_baseValues.js");
var _baseValuesJsDefault = parcelHelpers.interopDefault(_baseValuesJs);
var _customDefaultsAssignInJs = require("./_customDefaultsAssignIn.js");
var _customDefaultsAssignInJsDefault = parcelHelpers.interopDefault(_customDefaultsAssignInJs);
var _escapeStringCharJs = require("./_escapeStringChar.js");
var _escapeStringCharJsDefault = parcelHelpers.interopDefault(_escapeStringCharJs);
var _isErrorJs = require("./isError.js");
var _isErrorJsDefault = parcelHelpers.interopDefault(_isErrorJs);
var _isIterateeCallJs = require("./_isIterateeCall.js");
var _isIterateeCallJsDefault = parcelHelpers.interopDefault(_isIterateeCallJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
var _reInterpolateJs = require("./_reInterpolate.js");
var _reInterpolateJsDefault = parcelHelpers.interopDefault(_reInterpolateJs);
var _templateSettingsJs = require("./templateSettings.js");
var _templateSettingsJsDefault = parcelHelpers.interopDefault(_templateSettingsJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Error message constants. */ var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
/** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
/**
 * Used to validate the `validate` option in `_.template` variable.
 *
 * Forbids characters which could potentially change the meaning of the function argument definition:
 * - "()," (modification of function parameters)
 * - "=" (default value)
 * - "[]{}" (destructuring of function parameters)
 * - "/" (beginning of a comment)
 * - whitespace
 */ var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
/**
 * Used to match
 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
 */ var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
/** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;
/** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates a compiled template function that can interpolate data properties
 * in "interpolate" delimiters, HTML-escape interpolated data properties in
 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
 * properties may be accessed as free variables in the template. If a setting
 * object is given, it takes precedence over `_.templateSettings` values.
 *
 * **Note:** In the development build `_.template` utilizes
 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
 * for easier debugging.
 *
 * For more information on precompiling templates see
 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
 *
 * For more information on Chrome extension sandboxes see
 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The template string.
 * @param {Object} [options={}] The options object.
 * @param {RegExp} [options.escape=_.templateSettings.escape]
 *  The HTML "escape" delimiter.
 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
 *  The "evaluate" delimiter.
 * @param {Object} [options.imports=_.templateSettings.imports]
 *  An object to import into the template as free variables.
 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
 *  The "interpolate" delimiter.
 * @param {string} [options.sourceURL='templateSources[n]']
 *  The sourceURL of the compiled template.
 * @param {string} [options.variable='obj']
 *  The data object variable name.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the compiled template function.
 * @example
 *
 * // Use the "interpolate" delimiter to create a compiled template.
 * var compiled = _.template('hello <%= user %>!');
 * compiled({ 'user': 'fred' });
 * // => 'hello fred!'
 *
 * // Use the HTML "escape" delimiter to escape data property values.
 * var compiled = _.template('<b><%- value %></b>');
 * compiled({ 'value': '<script>' });
 * // => '<b>&lt;script&gt;</b>'
 *
 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the internal `print` function in "evaluate" delimiters.
 * var compiled = _.template('<% print("hello " + user); %>!');
 * compiled({ 'user': 'barney' });
 * // => 'hello barney!'
 *
 * // Use the ES template literal delimiter as an "interpolate" delimiter.
 * // Disable support by replacing the "interpolate" delimiter.
 * var compiled = _.template('hello ${ user }!');
 * compiled({ 'user': 'pebbles' });
 * // => 'hello pebbles!'
 *
 * // Use backslashes to treat delimiters as plain text.
 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
 * compiled({ 'value': 'ignored' });
 * // => '<%- value %>'
 *
 * // Use the `imports` option to import `jQuery` as `jq`.
 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
 * compiled(data);
 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
 *
 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
 * compiled.source;
 * // => function(data) {
 * //   var __t, __p = '';
 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
 * //   return __p;
 * // }
 *
 * // Use custom template delimiters.
 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
 * var compiled = _.template('hello {{ user }}!');
 * compiled({ 'user': 'mustache' });
 * // => 'hello mustache!'
 *
 * // Use the `source` property to inline compiled templates for meaningful
 * // line numbers in error messages and stack traces.
 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
 *   var JST = {\
 *     "main": ' + _.template(mainText).source + '\
 *   };\
 * ');
 */ function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = _templateSettingsJsDefault.default.imports._.templateSettings || _templateSettingsJsDefault.default;
    if (guard && _isIterateeCallJsDefault.default(string, options, guard)) options = undefined;
    string = _toStringJsDefault.default(string);
    options = _assignInWithJsDefault.default({
    }, options, settings, _customDefaultsAssignInJsDefault.default);
    var imports = _assignInWithJsDefault.default({
    }, options.imports, settings.imports, _customDefaultsAssignInJsDefault.default), importsKeys = _keysJsDefault.default(imports), importsValues = _baseValuesJsDefault.default(imports, importsKeys);
    var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
    // Compile the regexp to match each delimiter.
    var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === _reInterpolateJsDefault.default ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
    // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    // and escape the comment, thus injecting code that gets evaled.
    var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
    string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);
        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, _escapeStringCharJsDefault.default);
        // Replace delimiters with snippets.
        if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        index = offset + match.length;
        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
    });
    source += "';\n";
    // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.
    var variable = hasOwnProperty.call(options, 'variable') && options.variable;
    if (!variable) source = 'with (obj) {\n' + source + '\n}\n';
    else if (reForbiddenIdentifierChars.test(variable)) throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    // Cleanup code by stripping empty strings.
    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
    // Frame code as the function body.
    source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
    var result = _attemptJsDefault.default(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
    });
    // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.
    result.source = source;
    if (_isErrorJsDefault.default(result)) throw result;
    return result;
}
exports.default = template;

},{"./assignInWith.js":"e4uIW","./attempt.js":"cIrGS","./_baseValues.js":"88gxA","./_customDefaultsAssignIn.js":"etBcf","./_escapeStringChar.js":"aYgJL","./isError.js":"c9Nxf","./_isIterateeCall.js":"aHCs0","./keys.js":"f9Mo9","./_reInterpolate.js":"3jAkv","./templateSettings.js":"bZAfI","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"etBcf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
 * of source objects to the destination object for all destination properties
 * that resolve to `undefined`.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to assign.
 * @param {Object} object The parent object of `objValue`.
 * @returns {*} Returns the value to assign.
 */ function customDefaultsAssignIn(objValue, srcValue, key, object) {
    if (objValue === undefined || _eqJsDefault.default(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) return srcValue;
    return objValue;
}
exports.default = customDefaultsAssignIn;

},{"./eq.js":"1PtGj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aYgJL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
};
/**
 * Used by `_.template` to escape characters for inclusion in compiled string literals.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */ function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
}
exports.default = escapeStringChar;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3jAkv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match template delimiters. */ var reInterpolate = /<%=([\s\S]+?)%>/g;
exports.default = reInterpolate;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bZAfI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _escapeJs = require("./escape.js");
var _escapeJsDefault = parcelHelpers.interopDefault(_escapeJs);
var _reEscapeJs = require("./_reEscape.js");
var _reEscapeJsDefault = parcelHelpers.interopDefault(_reEscapeJs);
var _reEvaluateJs = require("./_reEvaluate.js");
var _reEvaluateJsDefault = parcelHelpers.interopDefault(_reEvaluateJs);
var _reInterpolateJs = require("./_reInterpolate.js");
var _reInterpolateJsDefault = parcelHelpers.interopDefault(_reInterpolateJs);
/**
 * By default, the template delimiters used by lodash are like those in
 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
 * following template settings to use alternative delimiters.
 *
 * @static
 * @memberOf _
 * @type {Object}
 */ var templateSettings = {
    /**
   * Used to detect `data` property values to be HTML-escaped.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */ 'escape': _reEscapeJsDefault.default,
    /**
   * Used to detect code to be evaluated.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */ 'evaluate': _reEvaluateJsDefault.default,
    /**
   * Used to detect `data` property values to inject.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */ 'interpolate': _reInterpolateJsDefault.default,
    /**
   * Used to reference the data object in the template text.
   *
   * @memberOf _.templateSettings
   * @type {string}
   */ 'variable': '',
    /**
   * Used to import variables into the compiled template.
   *
   * @memberOf _.templateSettings
   * @type {Object}
   */ 'imports': {
        /**
     * A reference to the `lodash` function.
     *
     * @memberOf _.templateSettings.imports
     * @type {Function}
     */ '_': {
            'escape': _escapeJsDefault.default
        }
    }
};
exports.default = templateSettings;

},{"./escape.js":"9Kfvx","./_reEscape.js":"a8N3d","./_reEvaluate.js":"eceVF","./_reInterpolate.js":"3jAkv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a8N3d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match template delimiters. */ var reEscape = /<%-([\s\S]+?)%>/g;
exports.default = reEscape;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eceVF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Used to match template delimiters. */ var reEvaluate = /<%([\s\S]+?)%>/g;
exports.default = reEvaluate;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"d5icF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _debounceJs = require("./debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */ function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    if (_isObjectJsDefault.default(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return _debounceJsDefault.default(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
    });
}
exports.default = throttle;

},{"./debounce.js":"dgroW","./isObject.js":"1IOOk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hy1jT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This method is like `_.tap` except that it returns the result of `interceptor`.
 * The purpose of this method is to "pass thru" values replacing intermediate
 * results in a method chain sequence.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Seq
 * @param {*} value The value to provide to `interceptor`.
 * @param {Function} interceptor The function to invoke.
 * @returns {*} Returns the result of `interceptor`.
 * @example
 *
 * _('  abc  ')
 *  .chain()
 *  .trim()
 *  .thru(function(value) {
 *    return [value];
 *  })
 *  .value();
 * // => ['abc']
 */ function thru(value, interceptor) {
    return interceptor(value);
}
exports.default = thru;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ikpOD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseTimesJs = require("./_baseTimes.js");
var _baseTimesJsDefault = parcelHelpers.interopDefault(_baseTimesJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */ function times(n, iteratee) {
    n = _toIntegerJsDefault.default(n);
    if (n < 1 || n > MAX_SAFE_INTEGER) return [];
    var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
    iteratee = _castFunctionJsDefault.default(iteratee);
    n -= MAX_ARRAY_LENGTH;
    var result = _baseTimesJsDefault.default(length, iteratee);
    while((++index) < n)iteratee(index);
    return result;
}
exports.default = times;

},{"./_baseTimes.js":"dPjSj","./_castFunction.js":"6ccaN","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dotvV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Enables the wrapper to be iterable.
 *
 * @name Symbol.iterator
 * @memberOf _
 * @since 4.0.0
 * @category Seq
 * @returns {Object} Returns the wrapper object.
 * @example
 *
 * var wrapped = _([1, 2]);
 *
 * wrapped[Symbol.iterator]() === wrapped;
 * // => true
 *
 * Array.from(wrapped);
 * // => [1, 2]
 */ function wrapperToIterator() {
    return this;
}
exports.default = wrapperToIterator;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l7j50":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_wrapperValueJsDefault.default
);
var _wrapperValueJs = require("./wrapperValue.js");
var _wrapperValueJsDefault = parcelHelpers.interopDefault(_wrapperValueJs);

},{"./wrapperValue.js":"NZdLY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"NZdLY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseWrapperValueJs = require("./_baseWrapperValue.js");
var _baseWrapperValueJsDefault = parcelHelpers.interopDefault(_baseWrapperValueJs);
/**
 * Executes the chain sequence to resolve the unwrapped value.
 *
 * @name value
 * @memberOf _
 * @since 0.1.0
 * @alias toJSON, valueOf
 * @category Seq
 * @returns {*} Returns the resolved unwrapped value.
 * @example
 *
 * _([1, 2, 3]).value();
 * // => [1, 2, 3]
 */ function wrapperValue() {
    return _baseWrapperValueJsDefault.default(this.__wrapped__, this.__actions__);
}
exports.default = wrapperValue;

},{"./_baseWrapperValue.js":"hnxcw","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hnxcw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _arrayReduceJs = require("./_arrayReduce.js");
var _arrayReduceJsDefault = parcelHelpers.interopDefault(_arrayReduceJs);
/**
 * The base implementation of `wrapperValue` which returns the result of
 * performing a sequence of actions on the unwrapped `value`, where each
 * successive action is supplied the return value of the previous.
 *
 * @private
 * @param {*} value The unwrapped value.
 * @param {Array} actions Actions to perform to resolve the unwrapped value.
 * @returns {*} Returns the resolved value.
 */ function baseWrapperValue(value, actions) {
    var result = value;
    if (result instanceof _lazyWrapperJsDefault.default) result = result.value();
    return _arrayReduceJsDefault.default(actions, function(result1, action) {
        return action.func.apply(action.thisArg, _arrayPushJsDefault.default([
            result1
        ], action.args));
    }, result);
}
exports.default = baseWrapperValue;

},{"./_LazyWrapper.js":"kpKkJ","./_arrayPush.js":"t745A","./_arrayReduce.js":"ewCyc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lS55I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Converts `string`, as a whole, to lower case just like
 * [String#toLowerCase](https://mdn.io/toLowerCase).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the lower cased string.
 * @example
 *
 * _.toLower('--Foo-Bar--');
 * // => '--foo-bar--'
 *
 * _.toLower('fooBar');
 * // => 'foobar'
 *
 * _.toLower('__FOO_BAR__');
 * // => '__foo_bar__'
 */ function toLower(value) {
    return _toStringJsDefault.default(value).toLowerCase();
}
exports.default = toLower;

},{"./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"61Rh0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
var _stringToPathJs = require("./_stringToPath.js");
var _stringToPathJsDefault = parcelHelpers.interopDefault(_stringToPathJs);
var _toKeyJs = require("./_toKey.js");
var _toKeyJsDefault = parcelHelpers.interopDefault(_toKeyJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */ function toPath(value) {
    if (_isArrayJsDefault.default(value)) return _arrayMapJsDefault.default(value, _toKeyJsDefault.default);
    return _isSymbolJsDefault.default(value) ? [
        value
    ] : _copyArrayJsDefault.default(_stringToPathJsDefault.default(_toStringJsDefault.default(value)));
}
exports.default = toPath;

},{"./_arrayMap.js":"jjvFU","./_copyArray.js":"aKKbc","./isArray.js":"aM5De","./isSymbol.js":"5Ijw9","./_stringToPath.js":"jYeOe","./_toKey.js":"jqnP9","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"74MCf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClampJs = require("./_baseClamp.js");
var _baseClampJsDefault = parcelHelpers.interopDefault(_baseClampJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Converts `value` to a safe integer. A safe integer can be compared and
 * represented correctly.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toSafeInteger(3.2);
 * // => 3
 *
 * _.toSafeInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toSafeInteger(Infinity);
 * // => 9007199254740991
 *
 * _.toSafeInteger('3.2');
 * // => 3
 */ function toSafeInteger(value) {
    return value ? _baseClampJsDefault.default(_toIntegerJsDefault.default(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
}
exports.default = toSafeInteger;

},{"./_baseClamp.js":"04c2V","./toInteger.js":"69J4a","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4Bvdp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Converts `string`, as a whole, to upper case just like
 * [String#toUpperCase](https://mdn.io/toUpperCase).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the upper cased string.
 * @example
 *
 * _.toUpper('--foo-bar--');
 * // => '--FOO-BAR--'
 *
 * _.toUpper('fooBar');
 * // => 'FOOBAR'
 *
 * _.toUpper('__foo_bar__');
 * // => '__FOO_BAR__'
 */ function toUpper(value) {
    return _toStringJsDefault.default(value).toUpperCase();
}
exports.default = toUpper;

},{"./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"96jPF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _baseCreateJs = require("./_baseCreate.js");
var _baseCreateJsDefault = parcelHelpers.interopDefault(_baseCreateJs);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _getPrototypeJs = require("./_getPrototype.js");
var _getPrototypeJsDefault = parcelHelpers.interopDefault(_getPrototypeJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
/**
 * An alternative to `_.reduce`; this method transforms `object` to a new
 * `accumulator` object which is the result of running each of its own
 * enumerable string keyed properties thru `iteratee`, with each invocation
 * potentially mutating the `accumulator` object. If `accumulator` is not
 * provided, a new object with the same `[[Prototype]]` will be used. The
 * iteratee is invoked with four arguments: (accumulator, value, key, object).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The custom accumulator value.
 * @returns {*} Returns the accumulated value.
 * @example
 *
 * _.transform([2, 3, 4], function(result, n) {
 *   result.push(n *= n);
 *   return n % 2 == 0;
 * }, []);
 * // => [4, 9]
 *
 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] }
 */ function transform(object, iteratee, accumulator) {
    var isArr = _isArrayJsDefault.default(object), isArrLike = isArr || _isBufferJsDefault.default(object) || _isTypedArrayJsDefault.default(object);
    iteratee = _baseIterateeJsDefault.default(iteratee, 4);
    if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) accumulator = isArr ? new Ctor : [];
        else if (_isObjectJsDefault.default(object)) accumulator = _isFunctionJsDefault.default(Ctor) ? _baseCreateJsDefault.default(_getPrototypeJsDefault.default(object)) : {
        };
        else accumulator = {
        };
    }
    (isArrLike ? _arrayEachJsDefault.default : _baseForOwnJsDefault.default)(object, function(value, index, object1) {
        return iteratee(accumulator, value, index, object1);
    });
    return accumulator;
}
exports.default = transform;

},{"./_arrayEach.js":"6ICgZ","./_baseCreate.js":"kSR8L","./_baseForOwn.js":"17EGa","./_baseIteratee.js":"6ue66","./_getPrototype.js":"bcSuK","./isArray.js":"aM5De","./isBuffer.js":"5zLdt","./isFunction.js":"flqKI","./isObject.js":"1IOOk","./isTypedArray.js":"4zD9H","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ke4Ba":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _baseTrimJs = require("./_baseTrim.js");
var _baseTrimJsDefault = parcelHelpers.interopDefault(_baseTrimJs);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _charsEndIndexJs = require("./_charsEndIndex.js");
var _charsEndIndexJsDefault = parcelHelpers.interopDefault(_charsEndIndexJs);
var _charsStartIndexJs = require("./_charsStartIndex.js");
var _charsStartIndexJsDefault = parcelHelpers.interopDefault(_charsStartIndexJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */ function trim(string, chars, guard) {
    string = _toStringJsDefault.default(string);
    if (string && (guard || chars === undefined)) return _baseTrimJsDefault.default(string);
    if (!string || !(chars = _baseToStringJsDefault.default(chars))) return string;
    var strSymbols = _stringToArrayJsDefault.default(string), chrSymbols = _stringToArrayJsDefault.default(chars), start = _charsStartIndexJsDefault.default(strSymbols, chrSymbols), end = _charsEndIndexJsDefault.default(strSymbols, chrSymbols) + 1;
    return _castSliceJsDefault.default(strSymbols, start, end).join('');
}
exports.default = trim;

},{"./_baseToString.js":"cWGOY","./_baseTrim.js":"5i34k","./_castSlice.js":"ak4IE","./_charsEndIndex.js":"7Z02E","./_charsStartIndex.js":"53Hso","./_stringToArray.js":"gvihb","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7Z02E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIndexOfJs = require("./_baseIndexOf.js");
var _baseIndexOfJsDefault = parcelHelpers.interopDefault(_baseIndexOfJs);
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */ function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;
    while((index--) && _baseIndexOfJsDefault.default(chrSymbols, strSymbols[index], 0) > -1);
    return index;
}
exports.default = charsEndIndex;

},{"./_baseIndexOf.js":"4m4vH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"53Hso":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIndexOfJs = require("./_baseIndexOf.js");
var _baseIndexOfJsDefault = parcelHelpers.interopDefault(_baseIndexOfJs);
/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */ function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1, length = strSymbols.length;
    while((++index) < length && _baseIndexOfJsDefault.default(chrSymbols, strSymbols[index], 0) > -1);
    return index;
}
exports.default = charsStartIndex;

},{"./_baseIndexOf.js":"4m4vH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iU7QI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _charsEndIndexJs = require("./_charsEndIndex.js");
var _charsEndIndexJsDefault = parcelHelpers.interopDefault(_charsEndIndexJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
var _trimmedEndIndexJs = require("./_trimmedEndIndex.js");
var _trimmedEndIndexJsDefault = parcelHelpers.interopDefault(_trimmedEndIndexJs);
/**
 * Removes trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimEnd('  abc  ');
 * // => '  abc'
 *
 * _.trimEnd('-_-abc-_-', '_-');
 * // => '-_-abc'
 */ function trimEnd(string, chars, guard) {
    string = _toStringJsDefault.default(string);
    if (string && (guard || chars === undefined)) return string.slice(0, _trimmedEndIndexJsDefault.default(string) + 1);
    if (!string || !(chars = _baseToStringJsDefault.default(chars))) return string;
    var strSymbols = _stringToArrayJsDefault.default(string), end = _charsEndIndexJsDefault.default(strSymbols, _stringToArrayJsDefault.default(chars)) + 1;
    return _castSliceJsDefault.default(strSymbols, 0, end).join('');
}
exports.default = trimEnd;

},{"./_baseToString.js":"cWGOY","./_castSlice.js":"ak4IE","./_charsEndIndex.js":"7Z02E","./_stringToArray.js":"gvihb","./toString.js":"fzVGZ","./_trimmedEndIndex.js":"1JxdM","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"52Seo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _charsStartIndexJs = require("./_charsStartIndex.js");
var _charsStartIndexJsDefault = parcelHelpers.interopDefault(_charsStartIndexJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/**
 * Removes leading whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimStart('  abc  ');
 * // => 'abc  '
 *
 * _.trimStart('-_-abc-_-', '_-');
 * // => 'abc-_-'
 */ function trimStart(string, chars, guard) {
    string = _toStringJsDefault.default(string);
    if (string && (guard || chars === undefined)) return string.replace(reTrimStart, '');
    if (!string || !(chars = _baseToStringJsDefault.default(chars))) return string;
    var strSymbols = _stringToArrayJsDefault.default(string), start = _charsStartIndexJsDefault.default(strSymbols, _stringToArrayJsDefault.default(chars));
    return _castSliceJsDefault.default(strSymbols, start).join('');
}
exports.default = trimStart;

},{"./_baseToString.js":"cWGOY","./_castSlice.js":"ak4IE","./_charsStartIndex.js":"53Hso","./_stringToArray.js":"gvihb","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cv1a3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require("./_baseToString.js");
var _baseToStringJsDefault = parcelHelpers.interopDefault(_baseToStringJs);
var _castSliceJs = require("./_castSlice.js");
var _castSliceJsDefault = parcelHelpers.interopDefault(_castSliceJs);
var _hasUnicodeJs = require("./_hasUnicode.js");
var _hasUnicodeJsDefault = parcelHelpers.interopDefault(_hasUnicodeJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isRegExpJs = require("./isRegExp.js");
var _isRegExpJsDefault = parcelHelpers.interopDefault(_isRegExpJs);
var _stringSizeJs = require("./_stringSize.js");
var _stringSizeJsDefault = parcelHelpers.interopDefault(_stringSizeJs);
var _stringToArrayJs = require("./_stringToArray.js");
var _stringToArrayJsDefault = parcelHelpers.interopDefault(_stringToArrayJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
/** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
/**
 * Truncates `string` if it's longer than the given maximum string length.
 * The last characters of the truncated string are replaced with the omission
 * string which defaults to "...".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to truncate.
 * @param {Object} [options={}] The options object.
 * @param {number} [options.length=30] The maximum string length.
 * @param {string} [options.omission='...'] The string to indicate text is omitted.
 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
 * @returns {string} Returns the truncated string.
 * @example
 *
 * _.truncate('hi-diddly-ho there, neighborino');
 * // => 'hi-diddly-ho there, neighbo...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'length': 24,
 *   'separator': ' '
 * });
 * // => 'hi-diddly-ho there,...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'length': 24,
 *   'separator': /,? +/
 * });
 * // => 'hi-diddly-ho there...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'omission': ' [...]'
 * });
 * // => 'hi-diddly-ho there, neig [...]'
 */ function truncate(string, options) {
    var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
    if (_isObjectJsDefault.default(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? _toIntegerJsDefault.default(options.length) : length;
        omission = 'omission' in options ? _baseToStringJsDefault.default(options.omission) : omission;
    }
    string = _toStringJsDefault.default(string);
    var strLength = string.length;
    if (_hasUnicodeJsDefault.default(string)) {
        var strSymbols = _stringToArrayJsDefault.default(string);
        strLength = strSymbols.length;
    }
    if (length >= strLength) return string;
    var end = length - _stringSizeJsDefault.default(omission);
    if (end < 1) return omission;
    var result = strSymbols ? _castSliceJsDefault.default(strSymbols, 0, end).join('') : string.slice(0, end);
    if (separator === undefined) return result + omission;
    if (strSymbols) end += result.length - end;
    if (_isRegExpJsDefault.default(separator)) {
        if (string.slice(end).search(separator)) {
            var match, substring = result;
            if (!separator.global) separator = RegExp(separator.source, _toStringJsDefault.default(reFlags.exec(separator)) + 'g');
            separator.lastIndex = 0;
            while(match = separator.exec(substring))var newEnd = match.index;
            result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
    } else if (string.indexOf(_baseToStringJsDefault.default(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) result = result.slice(0, index);
    }
    return result + omission;
}
exports.default = truncate;

},{"./_baseToString.js":"cWGOY","./_castSlice.js":"ak4IE","./_hasUnicode.js":"iVUcF","./isObject.js":"1IOOk","./isRegExp.js":"mkI2R","./_stringSize.js":"b9Vh6","./_stringToArray.js":"gvihb","./toInteger.js":"69J4a","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9TV6B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _aryJs = require("./ary.js");
var _aryJsDefault = parcelHelpers.interopDefault(_aryJs);
/**
 * Creates a function that accepts up to one argument, ignoring any
 * additional arguments.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.unary(parseInt));
 * // => [6, 8, 10]
 */ function unary(func) {
    return _aryJsDefault.default(func, 1);
}
exports.default = unary;

},{"./ary.js":"buIy2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1LMbJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
var _unescapeHtmlCharJs = require("./_unescapeHtmlChar.js");
var _unescapeHtmlCharJsDefault = parcelHelpers.interopDefault(_unescapeHtmlCharJs);
/** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reHasEscapedHtml = RegExp(reEscapedHtml.source);
/**
 * The inverse of `_.escape`; this method converts the HTML entities
 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
 * their corresponding characters.
 *
 * **Note:** No other HTML entities are unescaped. To unescape additional
 * HTML entities use a third-party library like [_he_](https://mths.be/he).
 *
 * @static
 * @memberOf _
 * @since 0.6.0
 * @category String
 * @param {string} [string=''] The string to unescape.
 * @returns {string} Returns the unescaped string.
 * @example
 *
 * _.unescape('fred, barney, &amp; pebbles');
 * // => 'fred, barney, & pebbles'
 */ function unescape(string) {
    string = _toStringJsDefault.default(string);
    return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, _unescapeHtmlCharJsDefault.default) : string;
}
exports.default = unescape;

},{"./toString.js":"fzVGZ","./_unescapeHtmlChar.js":"7rEWP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7rEWP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basePropertyOfJs = require("./_basePropertyOf.js");
var _basePropertyOfJsDefault = parcelHelpers.interopDefault(_basePropertyOfJs);
/** Used to map HTML entities to characters. */ var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
};
/**
 * Used by `_.unescape` to convert HTML entities to characters.
 *
 * @private
 * @param {string} chr The matched character to unescape.
 * @returns {string} Returns the unescaped character.
 */ var unescapeHtmlChar = _basePropertyOfJsDefault.default(htmlUnescapes);
exports.default = unescapeHtmlChar;

},{"./_basePropertyOf.js":"5Sf35","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3KDyG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseUniqJs = require("./_baseUniq.js");
var _baseUniqJsDefault = parcelHelpers.interopDefault(_baseUniqJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */ var union = _baseRestJsDefault.default(function(arrays) {
    return _baseUniqJsDefault.default(_baseFlattenJsDefault.default(arrays, 1, _isArrayLikeObjectJsDefault.default, true));
});
exports.default = union;

},{"./_baseFlatten.js":"dXyiK","./_baseRest.js":"6GMnO","./_baseUniq.js":"c02RT","./isArrayLikeObject.js":"7pSqJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c02RT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setCacheJs = require("./_SetCache.js");
var _setCacheJsDefault = parcelHelpers.interopDefault(_setCacheJs);
var _arrayIncludesJs = require("./_arrayIncludes.js");
var _arrayIncludesJsDefault = parcelHelpers.interopDefault(_arrayIncludesJs);
var _arrayIncludesWithJs = require("./_arrayIncludesWith.js");
var _arrayIncludesWithJsDefault = parcelHelpers.interopDefault(_arrayIncludesWithJs);
var _cacheHasJs = require("./_cacheHas.js");
var _cacheHasJsDefault = parcelHelpers.interopDefault(_cacheHasJs);
var _createSetJs = require("./_createSet.js");
var _createSetJsDefault = parcelHelpers.interopDefault(_createSetJs);
var _setToArrayJs = require("./_setToArray.js");
var _setToArrayJsDefault = parcelHelpers.interopDefault(_setToArrayJs);
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */ function baseUniq(array, iteratee, comparator) {
    var index = -1, includes = _arrayIncludesJsDefault.default, length = array.length, isCommon = true, result = [], seen = result;
    if (comparator) {
        isCommon = false;
        includes = _arrayIncludesWithJsDefault.default;
    } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : _createSetJsDefault.default(array);
        if (set) return _setToArrayJsDefault.default(set);
        isCommon = false;
        includes = _cacheHasJsDefault.default;
        seen = new _setCacheJsDefault.default;
    } else seen = iteratee ? [] : result;
    outer: while((++index) < length){
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while(seenIndex--){
                if (seen[seenIndex] === computed) continue outer;
            }
            if (iteratee) seen.push(computed);
            result.push(value);
        } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) seen.push(computed);
            result.push(value);
        }
    }
    return result;
}
exports.default = baseUniq;

},{"./_SetCache.js":"cojUc","./_arrayIncludes.js":"dNWOV","./_arrayIncludesWith.js":"eqsLX","./_cacheHas.js":"9Bp52","./_createSet.js":"155mc","./_setToArray.js":"hb3ta","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"155mc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setJs = require("./_Set.js");
var _setJsDefault = parcelHelpers.interopDefault(_setJs);
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _setToArrayJs = require("./_setToArray.js");
var _setToArrayJsDefault = parcelHelpers.interopDefault(_setToArrayJs);
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */ var createSet = !(_setJsDefault.default && 1 / _setToArrayJsDefault.default(new _setJsDefault.default([
    ,
    -0
]))[1] == INFINITY) ? _noopJsDefault.default : function(values) {
    return new _setJsDefault.default(values);
};
exports.default = createSet;

},{"./_Set.js":"kiwU7","./noop.js":"fQpra","./_setToArray.js":"hb3ta","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fpkGI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseUniqJs = require("./_baseUniq.js");
var _baseUniqJsDefault = parcelHelpers.interopDefault(_baseUniqJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.union` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which uniqueness is computed. Result values are chosen from the first
 * array in which the value occurs. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */ var unionBy = _baseRestJsDefault.default(function(arrays) {
    var iteratee = _lastJsDefault.default(arrays);
    if (_isArrayLikeObjectJsDefault.default(iteratee)) iteratee = undefined;
    return _baseUniqJsDefault.default(_baseFlattenJsDefault.default(arrays, 1, _isArrayLikeObjectJsDefault.default, true), _baseIterateeJsDefault.default(iteratee, 2));
});
exports.default = unionBy;

},{"./_baseFlatten.js":"dXyiK","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","./_baseUniq.js":"c02RT","./isArrayLikeObject.js":"7pSqJ","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kq5Ay":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseUniqJs = require("./_baseUniq.js");
var _baseUniqJsDefault = parcelHelpers.interopDefault(_baseUniqJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.union` except that it accepts `comparator` which
 * is invoked to compare elements of `arrays`. Result values are chosen from
 * the first array in which the value occurs. The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.unionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
 */ var unionWith = _baseRestJsDefault.default(function(arrays) {
    var comparator = _lastJsDefault.default(arrays);
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return _baseUniqJsDefault.default(_baseFlattenJsDefault.default(arrays, 1, _isArrayLikeObjectJsDefault.default, true), undefined, comparator);
});
exports.default = unionWith;

},{"./_baseFlatten.js":"dXyiK","./_baseRest.js":"6GMnO","./_baseUniq.js":"c02RT","./isArrayLikeObject.js":"7pSqJ","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8bgCK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseUniqJs = require("./_baseUniq.js");
var _baseUniqJsDefault = parcelHelpers.interopDefault(_baseUniqJs);
/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each element
 * is kept. The order of result values is determined by the order they occur
 * in the array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */ function uniq(array) {
    return array && array.length ? _baseUniqJsDefault.default(array) : [];
}
exports.default = uniq;

},{"./_baseUniq.js":"c02RT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"13uh6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseUniqJs = require("./_baseUniq.js");
var _baseUniqJsDefault = parcelHelpers.interopDefault(_baseUniqJs);
/**
 * This method is like `_.uniq` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * uniqueness is computed. The order of result values is determined by the
 * order they occur in the array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */ function uniqBy(array, iteratee) {
    return array && array.length ? _baseUniqJsDefault.default(array, _baseIterateeJsDefault.default(iteratee, 2)) : [];
}
exports.default = uniqBy;

},{"./_baseIteratee.js":"6ue66","./_baseUniq.js":"c02RT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7OEJc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseUniqJs = require("./_baseUniq.js");
var _baseUniqJsDefault = parcelHelpers.interopDefault(_baseUniqJs);
/**
 * This method is like `_.uniq` except that it accepts `comparator` which
 * is invoked to compare elements of `array`. The order of result values is
 * determined by the order they occur in the array.The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.uniqWith(objects, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
 */ function uniqWith(array, comparator) {
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return array && array.length ? _baseUniqJsDefault.default(array, undefined, comparator) : [];
}
exports.default = uniqWith;

},{"./_baseUniq.js":"c02RT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bIK1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
/** Used to generate unique IDs. */ var idCounter = 0;
/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */ function uniqueId(prefix) {
    var id = ++idCounter;
    return _toStringJsDefault.default(prefix) + id;
}
exports.default = uniqueId;

},{"./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"l8xZg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseUnsetJs = require("./_baseUnset.js");
var _baseUnsetJsDefault = parcelHelpers.interopDefault(_baseUnsetJs);
/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */ function unset(object, path) {
    return object == null ? true : _baseUnsetJsDefault.default(object, path);
}
exports.default = unset;

},{"./_baseUnset.js":"laAQR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7fsw4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _basePropertyJs = require("./_baseProperty.js");
var _basePropertyJsDefault = parcelHelpers.interopDefault(_basePropertyJs);
var _baseTimesJs = require("./_baseTimes.js");
var _baseTimesJsDefault = parcelHelpers.interopDefault(_baseTimesJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * This method is like `_.zip` except that it accepts an array of grouped
 * elements and creates an array regrouping the elements to their pre-zip
 * configuration.
 *
 * @static
 * @memberOf _
 * @since 1.2.0
 * @category Array
 * @param {Array} array The array of grouped elements to process.
 * @returns {Array} Returns the new array of regrouped elements.
 * @example
 *
 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
 * // => [['a', 1, true], ['b', 2, false]]
 *
 * _.unzip(zipped);
 * // => [['a', 'b'], [1, 2], [true, false]]
 */ function unzip(array) {
    if (!(array && array.length)) return [];
    var length = 0;
    array = _arrayFilterJsDefault.default(array, function(group) {
        if (_isArrayLikeObjectJsDefault.default(group)) {
            length = nativeMax(group.length, length);
            return true;
        }
    });
    return _baseTimesJsDefault.default(length, function(index) {
        return _arrayMapJsDefault.default(array, _basePropertyJsDefault.default(index));
    });
}
exports.default = unzip;

},{"./_arrayFilter.js":"aSstn","./_arrayMap.js":"jjvFU","./_baseProperty.js":"3ekfC","./_baseTimes.js":"dPjSj","./isArrayLikeObject.js":"7pSqJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"erJvr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _applyJs = require("./_apply.js");
var _applyJsDefault = parcelHelpers.interopDefault(_applyJs);
var _arrayMapJs = require("./_arrayMap.js");
var _arrayMapJsDefault = parcelHelpers.interopDefault(_arrayMapJs);
var _unzipJs = require("./unzip.js");
var _unzipJsDefault = parcelHelpers.interopDefault(_unzipJs);
/**
 * This method is like `_.unzip` except that it accepts `iteratee` to specify
 * how regrouped values should be combined. The iteratee is invoked with the
 * elements of each group: (...group).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Array
 * @param {Array} array The array of grouped elements to process.
 * @param {Function} [iteratee=_.identity] The function to combine
 *  regrouped values.
 * @returns {Array} Returns the new array of regrouped elements.
 * @example
 *
 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
 * // => [[1, 10, 100], [2, 20, 200]]
 *
 * _.unzipWith(zipped, _.add);
 * // => [3, 30, 300]
 */ function unzipWith(array, iteratee) {
    if (!(array && array.length)) return [];
    var result = _unzipJsDefault.default(array);
    if (iteratee == null) return result;
    return _arrayMapJsDefault.default(result, function(group) {
        return _applyJsDefault.default(iteratee, undefined, group);
    });
}
exports.default = unzipWith;

},{"./_apply.js":"jcowS","./_arrayMap.js":"jjvFU","./unzip.js":"7fsw4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hp0Ki":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseUpdateJs = require("./_baseUpdate.js");
var _baseUpdateJsDefault = parcelHelpers.interopDefault(_baseUpdateJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
/**
 * This method is like `_.set` except that accepts `updater` to produce the
 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
 * is invoked with one argument: (value).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {Function} updater The function to produce the updated value.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
 * console.log(object.a[0].b.c);
 * // => 9
 *
 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
 * console.log(object.x[0].y.z);
 * // => 0
 */ function update(object, path, updater) {
    return object == null ? object : _baseUpdateJsDefault.default(object, path, _castFunctionJsDefault.default(updater));
}
exports.default = update;

},{"./_baseUpdate.js":"2u40b","./_castFunction.js":"6ccaN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2u40b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGetJs = require("./_baseGet.js");
var _baseGetJsDefault = parcelHelpers.interopDefault(_baseGetJs);
var _baseSetJs = require("./_baseSet.js");
var _baseSetJsDefault = parcelHelpers.interopDefault(_baseSetJs);
/**
 * The base implementation of `_.update`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to update.
 * @param {Function} updater The function to produce the updated value.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */ function baseUpdate(object, path, updater, customizer) {
    return _baseSetJsDefault.default(object, path, updater(_baseGetJsDefault.default(object, path)), customizer);
}
exports.default = baseUpdate;

},{"./_baseGet.js":"h5I8S","./_baseSet.js":"eyFmh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9USiB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseUpdateJs = require("./_baseUpdate.js");
var _baseUpdateJsDefault = parcelHelpers.interopDefault(_baseUpdateJs);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
/**
 * This method is like `_.update` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {Function} updater The function to produce the updated value.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
 * // => { '0': { '1': 'a' } }
 */ function updateWith(object, path, updater, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return object == null ? object : _baseUpdateJsDefault.default(object, path, _castFunctionJsDefault.default(updater), customizer);
}
exports.default = updateWith;

},{"./_baseUpdate.js":"2u40b","./_castFunction.js":"6ccaN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4dxE8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createCompounderJs = require("./_createCompounder.js");
var _createCompounderJsDefault = parcelHelpers.interopDefault(_createCompounderJs);
/**
 * Converts `string`, as space separated words, to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the upper cased string.
 * @example
 *
 * _.upperCase('--foo-bar');
 * // => 'FOO BAR'
 *
 * _.upperCase('fooBar');
 * // => 'FOO BAR'
 *
 * _.upperCase('__foo_bar__');
 * // => 'FOO BAR'
 */ var upperCase = _createCompounderJsDefault.default(function(result, word, index) {
    return result + (index ? ' ' : '') + word.toUpperCase();
});
exports.default = upperCase;

},{"./_createCompounder.js":"5YHiY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lxPpk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_wrapperValueJsDefault.default
);
var _wrapperValueJs = require("./wrapperValue.js");
var _wrapperValueJsDefault = parcelHelpers.interopDefault(_wrapperValueJs);

},{"./wrapperValue.js":"NZdLY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hhNpZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_wrapperValueJsDefault.default
);
var _wrapperValueJs = require("./wrapperValue.js");
var _wrapperValueJsDefault = parcelHelpers.interopDefault(_wrapperValueJs);

},{"./wrapperValue.js":"NZdLY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"alC0f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseValuesJs = require("./_baseValues.js");
var _baseValuesJsDefault = parcelHelpers.interopDefault(_baseValuesJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
/**
 * Creates an array of the own and inherited enumerable string keyed property
 * values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.valuesIn(new Foo);
 * // => [1, 2, 3] (iteration order is not guaranteed)
 */ function valuesIn(object) {
    return object == null ? [] : _baseValuesJsDefault.default(object, _keysInJsDefault.default(object));
}
exports.default = valuesIn;

},{"./_baseValues.js":"88gxA","./keysIn.js":"dwsZb","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7trOS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseDifferenceJs = require("./_baseDifference.js");
var _baseDifferenceJsDefault = parcelHelpers.interopDefault(_baseDifferenceJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */ var without = _baseRestJsDefault.default(function(array, values) {
    return _isArrayLikeObjectJsDefault.default(array) ? _baseDifferenceJsDefault.default(array, values) : [];
});
exports.default = without;

},{"./_baseDifference.js":"7M3du","./_baseRest.js":"6GMnO","./isArrayLikeObject.js":"7pSqJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"an6Ep":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _castFunctionJs = require("./_castFunction.js");
var _castFunctionJsDefault = parcelHelpers.interopDefault(_castFunctionJs);
var _partialJs = require("./partial.js");
var _partialJsDefault = parcelHelpers.interopDefault(_partialJs);
/**
 * Creates a function that provides `value` to `wrapper` as its first
 * argument. Any additional arguments provided to the function are appended
 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
 * binding of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {*} value The value to wrap.
 * @param {Function} [wrapper=identity] The wrapper function.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var p = _.wrap(_.escape, function(func, text) {
 *   return '<p>' + func(text) + '</p>';
 * });
 *
 * p('fred, barney, & pebbles');
 * // => '<p>fred, barney, &amp; pebbles</p>'
 */ function wrap(value, wrapper) {
    return _partialJsDefault.default(_castFunctionJsDefault.default(wrapper), value);
}
exports.default = wrap;

},{"./_castFunction.js":"6ccaN","./partial.js":"cUFQ0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3fNZ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _lodashWrapperJs = require("./_LodashWrapper.js");
var _lodashWrapperJsDefault = parcelHelpers.interopDefault(_lodashWrapperJs);
var _baseAtJs = require("./_baseAt.js");
var _baseAtJsDefault = parcelHelpers.interopDefault(_baseAtJs);
var _flatRestJs = require("./_flatRest.js");
var _flatRestJsDefault = parcelHelpers.interopDefault(_flatRestJs);
var _isIndexJs = require("./_isIndex.js");
var _isIndexJsDefault = parcelHelpers.interopDefault(_isIndexJs);
var _thruJs = require("./thru.js");
var _thruJsDefault = parcelHelpers.interopDefault(_thruJs);
/**
 * This method is the wrapper version of `_.at`.
 *
 * @name at
 * @memberOf _
 * @since 1.0.0
 * @category Seq
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
 *
 * _(object).at(['a[0].b.c', 'a[1]']).value();
 * // => [3, 4]
 */ var wrapperAt = _flatRestJsDefault.default(function(paths) {
    var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
        return _baseAtJsDefault.default(object, paths);
    };
    if (length > 1 || this.__actions__.length || !(value instanceof _lazyWrapperJsDefault.default) || !_isIndexJsDefault.default(start)) return this.thru(interceptor);
    value = value.slice(start, +start + (length ? 1 : 0));
    value.__actions__.push({
        'func': _thruJsDefault.default,
        'args': [
            interceptor
        ],
        'thisArg': undefined
    });
    return new _lodashWrapperJsDefault.default(value, this.__chain__).thru(function(array) {
        if (length && !array.length) array.push(undefined);
        return array;
    });
});
exports.default = wrapperAt;

},{"./_LazyWrapper.js":"kpKkJ","./_LodashWrapper.js":"6ZE49","./_baseAt.js":"aMz8r","./_flatRest.js":"iG3bQ","./_isIndex.js":"gfLoM","./thru.js":"hy1jT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fVQIr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chainJs = require("./chain.js");
var _chainJsDefault = parcelHelpers.interopDefault(_chainJs);
/**
 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
 *
 * @name chain
 * @memberOf _
 * @since 0.1.0
 * @category Seq
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 40 }
 * ];
 *
 * // A sequence without explicit chaining.
 * _(users).head();
 * // => { 'user': 'barney', 'age': 36 }
 *
 * // A sequence with explicit chaining.
 * _(users)
 *   .chain()
 *   .head()
 *   .pick('user')
 *   .value();
 * // => { 'user': 'barney' }
 */ function wrapperChain() {
    return _chainJsDefault.default(this);
}
exports.default = wrapperChain;

},{"./chain.js":"gcLZ4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jcPLi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _lodashWrapperJs = require("./_LodashWrapper.js");
var _lodashWrapperJsDefault = parcelHelpers.interopDefault(_lodashWrapperJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _thruJs = require("./thru.js");
var _thruJsDefault = parcelHelpers.interopDefault(_thruJs);
/**
 * This method is the wrapper version of `_.reverse`.
 *
 * **Note:** This method mutates the wrapped array.
 *
 * @name reverse
 * @memberOf _
 * @since 0.1.0
 * @category Seq
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _(array).reverse().value()
 * // => [3, 2, 1]
 *
 * console.log(array);
 * // => [3, 2, 1]
 */ function wrapperReverse() {
    var value = this.__wrapped__;
    if (value instanceof _lazyWrapperJsDefault.default) {
        var wrapped = value;
        if (this.__actions__.length) wrapped = new _lazyWrapperJsDefault.default(this);
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
            'func': _thruJsDefault.default,
            'args': [_reverseJsDefault.default],
            'thisArg': undefined
        });
        return new _lodashWrapperJsDefault.default(wrapped, this.__chain__);
    }
    return this.thru(_reverseJsDefault.default);
}
exports.default = wrapperReverse;

},{"./_LazyWrapper.js":"kpKkJ","./_LodashWrapper.js":"6ZE49","./reverse.js":"g4G7I","./thru.js":"hy1jT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dO8Bk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseXorJs = require("./_baseXor.js");
var _baseXorJsDefault = parcelHelpers.interopDefault(_baseXorJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
/**
 * Creates an array of unique values that is the
 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
 * of the given arrays. The order of result values is determined by the order
 * they occur in the arrays.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.without
 * @example
 *
 * _.xor([2, 1], [2, 3]);
 * // => [1, 3]
 */ var xor = _baseRestJsDefault.default(function(arrays) {
    return _baseXorJsDefault.default(_arrayFilterJsDefault.default(arrays, _isArrayLikeObjectJsDefault.default));
});
exports.default = xor;

},{"./_arrayFilter.js":"aSstn","./_baseRest.js":"6GMnO","./_baseXor.js":"iBKFN","./isArrayLikeObject.js":"7pSqJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iBKFN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseDifferenceJs = require("./_baseDifference.js");
var _baseDifferenceJsDefault = parcelHelpers.interopDefault(_baseDifferenceJs);
var _baseFlattenJs = require("./_baseFlatten.js");
var _baseFlattenJsDefault = parcelHelpers.interopDefault(_baseFlattenJs);
var _baseUniqJs = require("./_baseUniq.js");
var _baseUniqJsDefault = parcelHelpers.interopDefault(_baseUniqJs);
/**
 * The base implementation of methods like `_.xor`, without support for
 * iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of values.
 */ function baseXor(arrays, iteratee, comparator) {
    var length = arrays.length;
    if (length < 2) return length ? _baseUniqJsDefault.default(arrays[0]) : [];
    var index = -1, result = Array(length);
    while((++index) < length){
        var array = arrays[index], othIndex = -1;
        while((++othIndex) < length)if (othIndex != index) result[index] = _baseDifferenceJsDefault.default(result[index] || array, arrays[othIndex], iteratee, comparator);
    }
    return _baseUniqJsDefault.default(_baseFlattenJsDefault.default(result, 1), iteratee, comparator);
}
exports.default = baseXor;

},{"./_baseDifference.js":"7M3du","./_baseFlatten.js":"dXyiK","./_baseUniq.js":"c02RT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6y0zh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseXorJs = require("./_baseXor.js");
var _baseXorJsDefault = parcelHelpers.interopDefault(_baseXorJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.xor` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which by which they're compared. The order of result values is determined
 * by the order they occur in the arrays. The iteratee is invoked with one
 * argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [1.2, 3.4]
 *
 * // The `_.property` iteratee shorthand.
 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 2 }]
 */ var xorBy = _baseRestJsDefault.default(function(arrays) {
    var iteratee = _lastJsDefault.default(arrays);
    if (_isArrayLikeObjectJsDefault.default(iteratee)) iteratee = undefined;
    return _baseXorJsDefault.default(_arrayFilterJsDefault.default(arrays, _isArrayLikeObjectJsDefault.default), _baseIterateeJsDefault.default(iteratee, 2));
});
exports.default = xorBy;

},{"./_arrayFilter.js":"aSstn","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","./_baseXor.js":"iBKFN","./isArrayLikeObject.js":"7pSqJ","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dEPfN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require("./_arrayFilter.js");
var _arrayFilterJsDefault = parcelHelpers.interopDefault(_arrayFilterJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _baseXorJs = require("./_baseXor.js");
var _baseXorJsDefault = parcelHelpers.interopDefault(_baseXorJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
/**
 * This method is like `_.xor` except that it accepts `comparator` which is
 * invoked to compare elements of `arrays`. The order of result values is
 * determined by the order they occur in the arrays. The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.xorWith(objects, others, _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
 */ var xorWith = _baseRestJsDefault.default(function(arrays) {
    var comparator = _lastJsDefault.default(arrays);
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return _baseXorJsDefault.default(_arrayFilterJsDefault.default(arrays, _isArrayLikeObjectJsDefault.default), undefined, comparator);
});
exports.default = xorWith;

},{"./_arrayFilter.js":"aSstn","./_baseRest.js":"6GMnO","./_baseXor.js":"iBKFN","./isArrayLikeObject.js":"7pSqJ","./last.js":"cAZFz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lfegQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _unzipJs = require("./unzip.js");
var _unzipJsDefault = parcelHelpers.interopDefault(_unzipJs);
/**
 * Creates an array of grouped elements, the first of which contains the
 * first elements of the given arrays, the second of which contains the
 * second elements of the given arrays, and so on.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to process.
 * @returns {Array} Returns the new array of grouped elements.
 * @example
 *
 * _.zip(['a', 'b'], [1, 2], [true, false]);
 * // => [['a', 1, true], ['b', 2, false]]
 */ var zip = _baseRestJsDefault.default(_unzipJsDefault.default);
exports.default = zip;

},{"./_baseRest.js":"6GMnO","./unzip.js":"7fsw4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g8sfy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignValueJs = require("./_assignValue.js");
var _assignValueJsDefault = parcelHelpers.interopDefault(_assignValueJs);
var _baseZipObjectJs = require("./_baseZipObject.js");
var _baseZipObjectJsDefault = parcelHelpers.interopDefault(_baseZipObjectJs);
/**
 * This method is like `_.fromPairs` except that it accepts two arrays,
 * one of property identifiers and one of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 0.4.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObject(['a', 'b'], [1, 2]);
 * // => { 'a': 1, 'b': 2 }
 */ function zipObject(props, values) {
    return _baseZipObjectJsDefault.default(props || [], values || [], _assignValueJsDefault.default);
}
exports.default = zipObject;

},{"./_assignValue.js":"1zOlb","./_baseZipObject.js":"hJdLO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hJdLO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
 *
 * @private
 * @param {Array} props The property identifiers.
 * @param {Array} values The property values.
 * @param {Function} assignFunc The function to assign values.
 * @returns {Object} Returns the new object.
 */ function baseZipObject(props, values, assignFunc) {
    var index = -1, length = props.length, valsLength = values.length, result = {
    };
    while((++index) < length){
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
    }
    return result;
}
exports.default = baseZipObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5UIBl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSetJs = require("./_baseSet.js");
var _baseSetJsDefault = parcelHelpers.interopDefault(_baseSetJs);
var _baseZipObjectJs = require("./_baseZipObject.js");
var _baseZipObjectJsDefault = parcelHelpers.interopDefault(_baseZipObjectJs);
/**
 * This method is like `_.zipObject` except that it supports property paths.
 *
 * @static
 * @memberOf _
 * @since 4.1.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
 */ function zipObjectDeep(props, values) {
    return _baseZipObjectJsDefault.default(props || [], values || [], _baseSetJsDefault.default);
}
exports.default = zipObjectDeep;

},{"./_baseSet.js":"eyFmh","./_baseZipObject.js":"hJdLO","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eCmbh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _unzipWithJs = require("./unzipWith.js");
var _unzipWithJsDefault = parcelHelpers.interopDefault(_unzipWithJs);
/**
 * This method is like `_.zip` except that it accepts `iteratee` to specify
 * how grouped values should be combined. The iteratee is invoked with the
 * elements of each group: (...group).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Array
 * @param {...Array} [arrays] The arrays to process.
 * @param {Function} [iteratee=_.identity] The function to combine
 *  grouped values.
 * @returns {Array} Returns the new array of grouped elements.
 * @example
 *
 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
 *   return a + b + c;
 * });
 * // => [111, 222]
 */ var zipWith = _baseRestJsDefault.default(function(arrays) {
    var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
    iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
    return _unzipWithJsDefault.default(arrays, iteratee);
});
exports.default = zipWith;

},{"./_baseRest.js":"6GMnO","./unzipWith.js":"erJvr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hCk7j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _collectionJs = require("./collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _dateJs = require("./date.js");
var _dateJsDefault = parcelHelpers.interopDefault(_dateJs);
var _functionJs = require("./function.js");
var _functionJsDefault = parcelHelpers.interopDefault(_functionJs);
var _langJs = require("./lang.js");
var _langJsDefault = parcelHelpers.interopDefault(_langJs);
var _mathJs = require("./math.js");
var _mathJsDefault = parcelHelpers.interopDefault(_mathJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _objectJs = require("./object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _seqJs = require("./seq.js");
var _seqJsDefault = parcelHelpers.interopDefault(_seqJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
var _utilJs = require("./util.js");
var _utilJsDefault = parcelHelpers.interopDefault(_utilJs);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _lodashWrapperJs = require("./_LodashWrapper.js");
var _lodashWrapperJsDefault = parcelHelpers.interopDefault(_lodashWrapperJs);
var _symbolJs = require("./_Symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _arrayEachJs = require("./_arrayEach.js");
var _arrayEachJsDefault = parcelHelpers.interopDefault(_arrayEachJs);
var _arrayPushJs = require("./_arrayPush.js");
var _arrayPushJsDefault = parcelHelpers.interopDefault(_arrayPushJs);
var _baseForOwnJs = require("./_baseForOwn.js");
var _baseForOwnJsDefault = parcelHelpers.interopDefault(_baseForOwnJs);
var _baseFunctionsJs = require("./_baseFunctions.js");
var _baseFunctionsJsDefault = parcelHelpers.interopDefault(_baseFunctionsJs);
var _baseInvokeJs = require("./_baseInvoke.js");
var _baseInvokeJsDefault = parcelHelpers.interopDefault(_baseInvokeJs);
var _baseIterateeJs = require("./_baseIteratee.js");
var _baseIterateeJsDefault = parcelHelpers.interopDefault(_baseIterateeJs);
var _baseRestJs = require("./_baseRest.js");
var _baseRestJsDefault = parcelHelpers.interopDefault(_baseRestJs);
var _createHybridJs = require("./_createHybrid.js");
var _createHybridJsDefault = parcelHelpers.interopDefault(_createHybridJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
var _lazyCloneJs = require("./_lazyClone.js");
var _lazyCloneJsDefault = parcelHelpers.interopDefault(_lazyCloneJs);
var _lazyReverseJs = require("./_lazyReverse.js");
var _lazyReverseJsDefault = parcelHelpers.interopDefault(_lazyReverseJs);
var _lazyValueJs = require("./_lazyValue.js");
var _lazyValueJsDefault = parcelHelpers.interopDefault(_lazyValueJs);
var _mixinJs = require("./mixin.js");
var _mixinJsDefault = parcelHelpers.interopDefault(_mixinJs);
var _negateJs = require("./negate.js");
var _negateJsDefault = parcelHelpers.interopDefault(_negateJs);
var _realNamesJs = require("./_realNames.js");
var _realNamesJsDefault = parcelHelpers.interopDefault(_realNamesJs);
var _thruJs = require("./thru.js");
var _thruJsDefault = parcelHelpers.interopDefault(_thruJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _wrapperLodashJs = require("./wrapperLodash.js");
var _wrapperLodashJsDefault = parcelHelpers.interopDefault(_wrapperLodashJs);
/** Used as the semantic version number. */ var VERSION = '4.17.21';
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_KEY_FLAG = 2;
/** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_WHILE_FLAG = 3;
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/** Used for built-in method references. */ var arrayProto = Array.prototype, objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var symIterator = _symbolJsDefault.default ? _symbolJsDefault.default.iterator : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
// wrap `_.mixin` so it works when provided only one argument
var mixin = function(func) {
    return function(object, source, options) {
        if (options == null) {
            var isObj = _isObjectJsDefault.default(source), props = isObj && _keysJsDefault.default(source), methodNames = props && props.length && _baseFunctionsJsDefault.default(source, props);
            if (!(methodNames ? methodNames.length : isObj)) {
                options = source;
                source = object;
                object = this;
            }
        }
        return func(object, source, options);
    };
}(_mixinJsDefault.default);
// Add methods that return wrapped values in chain sequences.
_wrapperLodashJsDefault.default.after = _functionJsDefault.default.after;
_wrapperLodashJsDefault.default.ary = _functionJsDefault.default.ary;
_wrapperLodashJsDefault.default.assign = _objectJsDefault.default.assign;
_wrapperLodashJsDefault.default.assignIn = _objectJsDefault.default.assignIn;
_wrapperLodashJsDefault.default.assignInWith = _objectJsDefault.default.assignInWith;
_wrapperLodashJsDefault.default.assignWith = _objectJsDefault.default.assignWith;
_wrapperLodashJsDefault.default.at = _objectJsDefault.default.at;
_wrapperLodashJsDefault.default.before = _functionJsDefault.default.before;
_wrapperLodashJsDefault.default.bind = _functionJsDefault.default.bind;
_wrapperLodashJsDefault.default.bindAll = _utilJsDefault.default.bindAll;
_wrapperLodashJsDefault.default.bindKey = _functionJsDefault.default.bindKey;
_wrapperLodashJsDefault.default.castArray = _langJsDefault.default.castArray;
_wrapperLodashJsDefault.default.chain = _seqJsDefault.default.chain;
_wrapperLodashJsDefault.default.chunk = _arrayJsDefault.default.chunk;
_wrapperLodashJsDefault.default.compact = _arrayJsDefault.default.compact;
_wrapperLodashJsDefault.default.concat = _arrayJsDefault.default.concat;
_wrapperLodashJsDefault.default.cond = _utilJsDefault.default.cond;
_wrapperLodashJsDefault.default.conforms = _utilJsDefault.default.conforms;
_wrapperLodashJsDefault.default.constant = _utilJsDefault.default.constant;
_wrapperLodashJsDefault.default.countBy = _collectionJsDefault.default.countBy;
_wrapperLodashJsDefault.default.create = _objectJsDefault.default.create;
_wrapperLodashJsDefault.default.curry = _functionJsDefault.default.curry;
_wrapperLodashJsDefault.default.curryRight = _functionJsDefault.default.curryRight;
_wrapperLodashJsDefault.default.debounce = _functionJsDefault.default.debounce;
_wrapperLodashJsDefault.default.defaults = _objectJsDefault.default.defaults;
_wrapperLodashJsDefault.default.defaultsDeep = _objectJsDefault.default.defaultsDeep;
_wrapperLodashJsDefault.default.defer = _functionJsDefault.default.defer;
_wrapperLodashJsDefault.default.delay = _functionJsDefault.default.delay;
_wrapperLodashJsDefault.default.difference = _arrayJsDefault.default.difference;
_wrapperLodashJsDefault.default.differenceBy = _arrayJsDefault.default.differenceBy;
_wrapperLodashJsDefault.default.differenceWith = _arrayJsDefault.default.differenceWith;
_wrapperLodashJsDefault.default.drop = _arrayJsDefault.default.drop;
_wrapperLodashJsDefault.default.dropRight = _arrayJsDefault.default.dropRight;
_wrapperLodashJsDefault.default.dropRightWhile = _arrayJsDefault.default.dropRightWhile;
_wrapperLodashJsDefault.default.dropWhile = _arrayJsDefault.default.dropWhile;
_wrapperLodashJsDefault.default.fill = _arrayJsDefault.default.fill;
_wrapperLodashJsDefault.default.filter = _collectionJsDefault.default.filter;
_wrapperLodashJsDefault.default.flatMap = _collectionJsDefault.default.flatMap;
_wrapperLodashJsDefault.default.flatMapDeep = _collectionJsDefault.default.flatMapDeep;
_wrapperLodashJsDefault.default.flatMapDepth = _collectionJsDefault.default.flatMapDepth;
_wrapperLodashJsDefault.default.flatten = _arrayJsDefault.default.flatten;
_wrapperLodashJsDefault.default.flattenDeep = _arrayJsDefault.default.flattenDeep;
_wrapperLodashJsDefault.default.flattenDepth = _arrayJsDefault.default.flattenDepth;
_wrapperLodashJsDefault.default.flip = _functionJsDefault.default.flip;
_wrapperLodashJsDefault.default.flow = _utilJsDefault.default.flow;
_wrapperLodashJsDefault.default.flowRight = _utilJsDefault.default.flowRight;
_wrapperLodashJsDefault.default.fromPairs = _arrayJsDefault.default.fromPairs;
_wrapperLodashJsDefault.default.functions = _objectJsDefault.default.functions;
_wrapperLodashJsDefault.default.functionsIn = _objectJsDefault.default.functionsIn;
_wrapperLodashJsDefault.default.groupBy = _collectionJsDefault.default.groupBy;
_wrapperLodashJsDefault.default.initial = _arrayJsDefault.default.initial;
_wrapperLodashJsDefault.default.intersection = _arrayJsDefault.default.intersection;
_wrapperLodashJsDefault.default.intersectionBy = _arrayJsDefault.default.intersectionBy;
_wrapperLodashJsDefault.default.intersectionWith = _arrayJsDefault.default.intersectionWith;
_wrapperLodashJsDefault.default.invert = _objectJsDefault.default.invert;
_wrapperLodashJsDefault.default.invertBy = _objectJsDefault.default.invertBy;
_wrapperLodashJsDefault.default.invokeMap = _collectionJsDefault.default.invokeMap;
_wrapperLodashJsDefault.default.iteratee = _utilJsDefault.default.iteratee;
_wrapperLodashJsDefault.default.keyBy = _collectionJsDefault.default.keyBy;
_wrapperLodashJsDefault.default.keys = _keysJsDefault.default;
_wrapperLodashJsDefault.default.keysIn = _objectJsDefault.default.keysIn;
_wrapperLodashJsDefault.default.map = _collectionJsDefault.default.map;
_wrapperLodashJsDefault.default.mapKeys = _objectJsDefault.default.mapKeys;
_wrapperLodashJsDefault.default.mapValues = _objectJsDefault.default.mapValues;
_wrapperLodashJsDefault.default.matches = _utilJsDefault.default.matches;
_wrapperLodashJsDefault.default.matchesProperty = _utilJsDefault.default.matchesProperty;
_wrapperLodashJsDefault.default.memoize = _functionJsDefault.default.memoize;
_wrapperLodashJsDefault.default.merge = _objectJsDefault.default.merge;
_wrapperLodashJsDefault.default.mergeWith = _objectJsDefault.default.mergeWith;
_wrapperLodashJsDefault.default.method = _utilJsDefault.default.method;
_wrapperLodashJsDefault.default.methodOf = _utilJsDefault.default.methodOf;
_wrapperLodashJsDefault.default.mixin = mixin;
_wrapperLodashJsDefault.default.negate = _negateJsDefault.default;
_wrapperLodashJsDefault.default.nthArg = _utilJsDefault.default.nthArg;
_wrapperLodashJsDefault.default.omit = _objectJsDefault.default.omit;
_wrapperLodashJsDefault.default.omitBy = _objectJsDefault.default.omitBy;
_wrapperLodashJsDefault.default.once = _functionJsDefault.default.once;
_wrapperLodashJsDefault.default.orderBy = _collectionJsDefault.default.orderBy;
_wrapperLodashJsDefault.default.over = _utilJsDefault.default.over;
_wrapperLodashJsDefault.default.overArgs = _functionJsDefault.default.overArgs;
_wrapperLodashJsDefault.default.overEvery = _utilJsDefault.default.overEvery;
_wrapperLodashJsDefault.default.overSome = _utilJsDefault.default.overSome;
_wrapperLodashJsDefault.default.partial = _functionJsDefault.default.partial;
_wrapperLodashJsDefault.default.partialRight = _functionJsDefault.default.partialRight;
_wrapperLodashJsDefault.default.partition = _collectionJsDefault.default.partition;
_wrapperLodashJsDefault.default.pick = _objectJsDefault.default.pick;
_wrapperLodashJsDefault.default.pickBy = _objectJsDefault.default.pickBy;
_wrapperLodashJsDefault.default.property = _utilJsDefault.default.property;
_wrapperLodashJsDefault.default.propertyOf = _utilJsDefault.default.propertyOf;
_wrapperLodashJsDefault.default.pull = _arrayJsDefault.default.pull;
_wrapperLodashJsDefault.default.pullAll = _arrayJsDefault.default.pullAll;
_wrapperLodashJsDefault.default.pullAllBy = _arrayJsDefault.default.pullAllBy;
_wrapperLodashJsDefault.default.pullAllWith = _arrayJsDefault.default.pullAllWith;
_wrapperLodashJsDefault.default.pullAt = _arrayJsDefault.default.pullAt;
_wrapperLodashJsDefault.default.range = _utilJsDefault.default.range;
_wrapperLodashJsDefault.default.rangeRight = _utilJsDefault.default.rangeRight;
_wrapperLodashJsDefault.default.rearg = _functionJsDefault.default.rearg;
_wrapperLodashJsDefault.default.reject = _collectionJsDefault.default.reject;
_wrapperLodashJsDefault.default.remove = _arrayJsDefault.default.remove;
_wrapperLodashJsDefault.default.rest = _functionJsDefault.default.rest;
_wrapperLodashJsDefault.default.reverse = _arrayJsDefault.default.reverse;
_wrapperLodashJsDefault.default.sampleSize = _collectionJsDefault.default.sampleSize;
_wrapperLodashJsDefault.default.set = _objectJsDefault.default.set;
_wrapperLodashJsDefault.default.setWith = _objectJsDefault.default.setWith;
_wrapperLodashJsDefault.default.shuffle = _collectionJsDefault.default.shuffle;
_wrapperLodashJsDefault.default.slice = _arrayJsDefault.default.slice;
_wrapperLodashJsDefault.default.sortBy = _collectionJsDefault.default.sortBy;
_wrapperLodashJsDefault.default.sortedUniq = _arrayJsDefault.default.sortedUniq;
_wrapperLodashJsDefault.default.sortedUniqBy = _arrayJsDefault.default.sortedUniqBy;
_wrapperLodashJsDefault.default.split = _stringJsDefault.default.split;
_wrapperLodashJsDefault.default.spread = _functionJsDefault.default.spread;
_wrapperLodashJsDefault.default.tail = _arrayJsDefault.default.tail;
_wrapperLodashJsDefault.default.take = _arrayJsDefault.default.take;
_wrapperLodashJsDefault.default.takeRight = _arrayJsDefault.default.takeRight;
_wrapperLodashJsDefault.default.takeRightWhile = _arrayJsDefault.default.takeRightWhile;
_wrapperLodashJsDefault.default.takeWhile = _arrayJsDefault.default.takeWhile;
_wrapperLodashJsDefault.default.tap = _seqJsDefault.default.tap;
_wrapperLodashJsDefault.default.throttle = _functionJsDefault.default.throttle;
_wrapperLodashJsDefault.default.thru = _thruJsDefault.default;
_wrapperLodashJsDefault.default.toArray = _langJsDefault.default.toArray;
_wrapperLodashJsDefault.default.toPairs = _objectJsDefault.default.toPairs;
_wrapperLodashJsDefault.default.toPairsIn = _objectJsDefault.default.toPairsIn;
_wrapperLodashJsDefault.default.toPath = _utilJsDefault.default.toPath;
_wrapperLodashJsDefault.default.toPlainObject = _langJsDefault.default.toPlainObject;
_wrapperLodashJsDefault.default.transform = _objectJsDefault.default.transform;
_wrapperLodashJsDefault.default.unary = _functionJsDefault.default.unary;
_wrapperLodashJsDefault.default.union = _arrayJsDefault.default.union;
_wrapperLodashJsDefault.default.unionBy = _arrayJsDefault.default.unionBy;
_wrapperLodashJsDefault.default.unionWith = _arrayJsDefault.default.unionWith;
_wrapperLodashJsDefault.default.uniq = _arrayJsDefault.default.uniq;
_wrapperLodashJsDefault.default.uniqBy = _arrayJsDefault.default.uniqBy;
_wrapperLodashJsDefault.default.uniqWith = _arrayJsDefault.default.uniqWith;
_wrapperLodashJsDefault.default.unset = _objectJsDefault.default.unset;
_wrapperLodashJsDefault.default.unzip = _arrayJsDefault.default.unzip;
_wrapperLodashJsDefault.default.unzipWith = _arrayJsDefault.default.unzipWith;
_wrapperLodashJsDefault.default.update = _objectJsDefault.default.update;
_wrapperLodashJsDefault.default.updateWith = _objectJsDefault.default.updateWith;
_wrapperLodashJsDefault.default.values = _objectJsDefault.default.values;
_wrapperLodashJsDefault.default.valuesIn = _objectJsDefault.default.valuesIn;
_wrapperLodashJsDefault.default.without = _arrayJsDefault.default.without;
_wrapperLodashJsDefault.default.words = _stringJsDefault.default.words;
_wrapperLodashJsDefault.default.wrap = _functionJsDefault.default.wrap;
_wrapperLodashJsDefault.default.xor = _arrayJsDefault.default.xor;
_wrapperLodashJsDefault.default.xorBy = _arrayJsDefault.default.xorBy;
_wrapperLodashJsDefault.default.xorWith = _arrayJsDefault.default.xorWith;
_wrapperLodashJsDefault.default.zip = _arrayJsDefault.default.zip;
_wrapperLodashJsDefault.default.zipObject = _arrayJsDefault.default.zipObject;
_wrapperLodashJsDefault.default.zipObjectDeep = _arrayJsDefault.default.zipObjectDeep;
_wrapperLodashJsDefault.default.zipWith = _arrayJsDefault.default.zipWith;
// Add aliases.
_wrapperLodashJsDefault.default.entries = _objectJsDefault.default.toPairs;
_wrapperLodashJsDefault.default.entriesIn = _objectJsDefault.default.toPairsIn;
_wrapperLodashJsDefault.default.extend = _objectJsDefault.default.assignIn;
_wrapperLodashJsDefault.default.extendWith = _objectJsDefault.default.assignInWith;
// Add methods to `lodash.prototype`.
mixin(_wrapperLodashJsDefault.default, _wrapperLodashJsDefault.default);
// Add methods that return unwrapped values in chain sequences.
_wrapperLodashJsDefault.default.add = _mathJsDefault.default.add;
_wrapperLodashJsDefault.default.attempt = _utilJsDefault.default.attempt;
_wrapperLodashJsDefault.default.camelCase = _stringJsDefault.default.camelCase;
_wrapperLodashJsDefault.default.capitalize = _stringJsDefault.default.capitalize;
_wrapperLodashJsDefault.default.ceil = _mathJsDefault.default.ceil;
_wrapperLodashJsDefault.default.clamp = _numberJsDefault.default.clamp;
_wrapperLodashJsDefault.default.clone = _langJsDefault.default.clone;
_wrapperLodashJsDefault.default.cloneDeep = _langJsDefault.default.cloneDeep;
_wrapperLodashJsDefault.default.cloneDeepWith = _langJsDefault.default.cloneDeepWith;
_wrapperLodashJsDefault.default.cloneWith = _langJsDefault.default.cloneWith;
_wrapperLodashJsDefault.default.conformsTo = _langJsDefault.default.conformsTo;
_wrapperLodashJsDefault.default.deburr = _stringJsDefault.default.deburr;
_wrapperLodashJsDefault.default.defaultTo = _utilJsDefault.default.defaultTo;
_wrapperLodashJsDefault.default.divide = _mathJsDefault.default.divide;
_wrapperLodashJsDefault.default.endsWith = _stringJsDefault.default.endsWith;
_wrapperLodashJsDefault.default.eq = _langJsDefault.default.eq;
_wrapperLodashJsDefault.default.escape = _stringJsDefault.default.escape;
_wrapperLodashJsDefault.default.escapeRegExp = _stringJsDefault.default.escapeRegExp;
_wrapperLodashJsDefault.default.every = _collectionJsDefault.default.every;
_wrapperLodashJsDefault.default.find = _collectionJsDefault.default.find;
_wrapperLodashJsDefault.default.findIndex = _arrayJsDefault.default.findIndex;
_wrapperLodashJsDefault.default.findKey = _objectJsDefault.default.findKey;
_wrapperLodashJsDefault.default.findLast = _collectionJsDefault.default.findLast;
_wrapperLodashJsDefault.default.findLastIndex = _arrayJsDefault.default.findLastIndex;
_wrapperLodashJsDefault.default.findLastKey = _objectJsDefault.default.findLastKey;
_wrapperLodashJsDefault.default.floor = _mathJsDefault.default.floor;
_wrapperLodashJsDefault.default.forEach = _collectionJsDefault.default.forEach;
_wrapperLodashJsDefault.default.forEachRight = _collectionJsDefault.default.forEachRight;
_wrapperLodashJsDefault.default.forIn = _objectJsDefault.default.forIn;
_wrapperLodashJsDefault.default.forInRight = _objectJsDefault.default.forInRight;
_wrapperLodashJsDefault.default.forOwn = _objectJsDefault.default.forOwn;
_wrapperLodashJsDefault.default.forOwnRight = _objectJsDefault.default.forOwnRight;
_wrapperLodashJsDefault.default.get = _objectJsDefault.default.get;
_wrapperLodashJsDefault.default.gt = _langJsDefault.default.gt;
_wrapperLodashJsDefault.default.gte = _langJsDefault.default.gte;
_wrapperLodashJsDefault.default.has = _objectJsDefault.default.has;
_wrapperLodashJsDefault.default.hasIn = _objectJsDefault.default.hasIn;
_wrapperLodashJsDefault.default.head = _arrayJsDefault.default.head;
_wrapperLodashJsDefault.default.identity = _identityJsDefault.default;
_wrapperLodashJsDefault.default.includes = _collectionJsDefault.default.includes;
_wrapperLodashJsDefault.default.indexOf = _arrayJsDefault.default.indexOf;
_wrapperLodashJsDefault.default.inRange = _numberJsDefault.default.inRange;
_wrapperLodashJsDefault.default.invoke = _objectJsDefault.default.invoke;
_wrapperLodashJsDefault.default.isArguments = _langJsDefault.default.isArguments;
_wrapperLodashJsDefault.default.isArray = _isArrayJsDefault.default;
_wrapperLodashJsDefault.default.isArrayBuffer = _langJsDefault.default.isArrayBuffer;
_wrapperLodashJsDefault.default.isArrayLike = _langJsDefault.default.isArrayLike;
_wrapperLodashJsDefault.default.isArrayLikeObject = _langJsDefault.default.isArrayLikeObject;
_wrapperLodashJsDefault.default.isBoolean = _langJsDefault.default.isBoolean;
_wrapperLodashJsDefault.default.isBuffer = _langJsDefault.default.isBuffer;
_wrapperLodashJsDefault.default.isDate = _langJsDefault.default.isDate;
_wrapperLodashJsDefault.default.isElement = _langJsDefault.default.isElement;
_wrapperLodashJsDefault.default.isEmpty = _langJsDefault.default.isEmpty;
_wrapperLodashJsDefault.default.isEqual = _langJsDefault.default.isEqual;
_wrapperLodashJsDefault.default.isEqualWith = _langJsDefault.default.isEqualWith;
_wrapperLodashJsDefault.default.isError = _langJsDefault.default.isError;
_wrapperLodashJsDefault.default.isFinite = _langJsDefault.default.isFinite;
_wrapperLodashJsDefault.default.isFunction = _langJsDefault.default.isFunction;
_wrapperLodashJsDefault.default.isInteger = _langJsDefault.default.isInteger;
_wrapperLodashJsDefault.default.isLength = _langJsDefault.default.isLength;
_wrapperLodashJsDefault.default.isMap = _langJsDefault.default.isMap;
_wrapperLodashJsDefault.default.isMatch = _langJsDefault.default.isMatch;
_wrapperLodashJsDefault.default.isMatchWith = _langJsDefault.default.isMatchWith;
_wrapperLodashJsDefault.default.isNaN = _langJsDefault.default.isNaN;
_wrapperLodashJsDefault.default.isNative = _langJsDefault.default.isNative;
_wrapperLodashJsDefault.default.isNil = _langJsDefault.default.isNil;
_wrapperLodashJsDefault.default.isNull = _langJsDefault.default.isNull;
_wrapperLodashJsDefault.default.isNumber = _langJsDefault.default.isNumber;
_wrapperLodashJsDefault.default.isObject = _isObjectJsDefault.default;
_wrapperLodashJsDefault.default.isObjectLike = _langJsDefault.default.isObjectLike;
_wrapperLodashJsDefault.default.isPlainObject = _langJsDefault.default.isPlainObject;
_wrapperLodashJsDefault.default.isRegExp = _langJsDefault.default.isRegExp;
_wrapperLodashJsDefault.default.isSafeInteger = _langJsDefault.default.isSafeInteger;
_wrapperLodashJsDefault.default.isSet = _langJsDefault.default.isSet;
_wrapperLodashJsDefault.default.isString = _langJsDefault.default.isString;
_wrapperLodashJsDefault.default.isSymbol = _langJsDefault.default.isSymbol;
_wrapperLodashJsDefault.default.isTypedArray = _langJsDefault.default.isTypedArray;
_wrapperLodashJsDefault.default.isUndefined = _langJsDefault.default.isUndefined;
_wrapperLodashJsDefault.default.isWeakMap = _langJsDefault.default.isWeakMap;
_wrapperLodashJsDefault.default.isWeakSet = _langJsDefault.default.isWeakSet;
_wrapperLodashJsDefault.default.join = _arrayJsDefault.default.join;
_wrapperLodashJsDefault.default.kebabCase = _stringJsDefault.default.kebabCase;
_wrapperLodashJsDefault.default.last = _lastJsDefault.default;
_wrapperLodashJsDefault.default.lastIndexOf = _arrayJsDefault.default.lastIndexOf;
_wrapperLodashJsDefault.default.lowerCase = _stringJsDefault.default.lowerCase;
_wrapperLodashJsDefault.default.lowerFirst = _stringJsDefault.default.lowerFirst;
_wrapperLodashJsDefault.default.lt = _langJsDefault.default.lt;
_wrapperLodashJsDefault.default.lte = _langJsDefault.default.lte;
_wrapperLodashJsDefault.default.max = _mathJsDefault.default.max;
_wrapperLodashJsDefault.default.maxBy = _mathJsDefault.default.maxBy;
_wrapperLodashJsDefault.default.mean = _mathJsDefault.default.mean;
_wrapperLodashJsDefault.default.meanBy = _mathJsDefault.default.meanBy;
_wrapperLodashJsDefault.default.min = _mathJsDefault.default.min;
_wrapperLodashJsDefault.default.minBy = _mathJsDefault.default.minBy;
_wrapperLodashJsDefault.default.stubArray = _utilJsDefault.default.stubArray;
_wrapperLodashJsDefault.default.stubFalse = _utilJsDefault.default.stubFalse;
_wrapperLodashJsDefault.default.stubObject = _utilJsDefault.default.stubObject;
_wrapperLodashJsDefault.default.stubString = _utilJsDefault.default.stubString;
_wrapperLodashJsDefault.default.stubTrue = _utilJsDefault.default.stubTrue;
_wrapperLodashJsDefault.default.multiply = _mathJsDefault.default.multiply;
_wrapperLodashJsDefault.default.nth = _arrayJsDefault.default.nth;
_wrapperLodashJsDefault.default.noop = _utilJsDefault.default.noop;
_wrapperLodashJsDefault.default.now = _dateJsDefault.default.now;
_wrapperLodashJsDefault.default.pad = _stringJsDefault.default.pad;
_wrapperLodashJsDefault.default.padEnd = _stringJsDefault.default.padEnd;
_wrapperLodashJsDefault.default.padStart = _stringJsDefault.default.padStart;
_wrapperLodashJsDefault.default.parseInt = _stringJsDefault.default.parseInt;
_wrapperLodashJsDefault.default.random = _numberJsDefault.default.random;
_wrapperLodashJsDefault.default.reduce = _collectionJsDefault.default.reduce;
_wrapperLodashJsDefault.default.reduceRight = _collectionJsDefault.default.reduceRight;
_wrapperLodashJsDefault.default.repeat = _stringJsDefault.default.repeat;
_wrapperLodashJsDefault.default.replace = _stringJsDefault.default.replace;
_wrapperLodashJsDefault.default.result = _objectJsDefault.default.result;
_wrapperLodashJsDefault.default.round = _mathJsDefault.default.round;
_wrapperLodashJsDefault.default.sample = _collectionJsDefault.default.sample;
_wrapperLodashJsDefault.default.size = _collectionJsDefault.default.size;
_wrapperLodashJsDefault.default.snakeCase = _stringJsDefault.default.snakeCase;
_wrapperLodashJsDefault.default.some = _collectionJsDefault.default.some;
_wrapperLodashJsDefault.default.sortedIndex = _arrayJsDefault.default.sortedIndex;
_wrapperLodashJsDefault.default.sortedIndexBy = _arrayJsDefault.default.sortedIndexBy;
_wrapperLodashJsDefault.default.sortedIndexOf = _arrayJsDefault.default.sortedIndexOf;
_wrapperLodashJsDefault.default.sortedLastIndex = _arrayJsDefault.default.sortedLastIndex;
_wrapperLodashJsDefault.default.sortedLastIndexBy = _arrayJsDefault.default.sortedLastIndexBy;
_wrapperLodashJsDefault.default.sortedLastIndexOf = _arrayJsDefault.default.sortedLastIndexOf;
_wrapperLodashJsDefault.default.startCase = _stringJsDefault.default.startCase;
_wrapperLodashJsDefault.default.startsWith = _stringJsDefault.default.startsWith;
_wrapperLodashJsDefault.default.subtract = _mathJsDefault.default.subtract;
_wrapperLodashJsDefault.default.sum = _mathJsDefault.default.sum;
_wrapperLodashJsDefault.default.sumBy = _mathJsDefault.default.sumBy;
_wrapperLodashJsDefault.default.template = _stringJsDefault.default.template;
_wrapperLodashJsDefault.default.times = _utilJsDefault.default.times;
_wrapperLodashJsDefault.default.toFinite = _langJsDefault.default.toFinite;
_wrapperLodashJsDefault.default.toInteger = _toIntegerJsDefault.default;
_wrapperLodashJsDefault.default.toLength = _langJsDefault.default.toLength;
_wrapperLodashJsDefault.default.toLower = _stringJsDefault.default.toLower;
_wrapperLodashJsDefault.default.toNumber = _langJsDefault.default.toNumber;
_wrapperLodashJsDefault.default.toSafeInteger = _langJsDefault.default.toSafeInteger;
_wrapperLodashJsDefault.default.toString = _langJsDefault.default.toString;
_wrapperLodashJsDefault.default.toUpper = _stringJsDefault.default.toUpper;
_wrapperLodashJsDefault.default.trim = _stringJsDefault.default.trim;
_wrapperLodashJsDefault.default.trimEnd = _stringJsDefault.default.trimEnd;
_wrapperLodashJsDefault.default.trimStart = _stringJsDefault.default.trimStart;
_wrapperLodashJsDefault.default.truncate = _stringJsDefault.default.truncate;
_wrapperLodashJsDefault.default.unescape = _stringJsDefault.default.unescape;
_wrapperLodashJsDefault.default.uniqueId = _utilJsDefault.default.uniqueId;
_wrapperLodashJsDefault.default.upperCase = _stringJsDefault.default.upperCase;
_wrapperLodashJsDefault.default.upperFirst = _stringJsDefault.default.upperFirst;
// Add aliases.
_wrapperLodashJsDefault.default.each = _collectionJsDefault.default.forEach;
_wrapperLodashJsDefault.default.eachRight = _collectionJsDefault.default.forEachRight;
_wrapperLodashJsDefault.default.first = _arrayJsDefault.default.head;
mixin(_wrapperLodashJsDefault.default, function() {
    var source = {
    };
    _baseForOwnJsDefault.default(_wrapperLodashJsDefault.default, function(func, methodName) {
        if (!hasOwnProperty.call(_wrapperLodashJsDefault.default.prototype, methodName)) source[methodName] = func;
    });
    return source;
}(), {
    'chain': false
});
/**
 * The semantic version number.
 *
 * @static
 * @memberOf _
 * @type {string}
 */ _wrapperLodashJsDefault.default.VERSION = VERSION;
(_wrapperLodashJsDefault.default.templateSettings = _stringJsDefault.default.templateSettings).imports._ = _wrapperLodashJsDefault.default;
// Assign default placeholders.
_arrayEachJsDefault.default([
    'bind',
    'bindKey',
    'curry',
    'curryRight',
    'partial',
    'partialRight'
], function(methodName) {
    _wrapperLodashJsDefault.default[methodName].placeholder = _wrapperLodashJsDefault.default;
});
// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
_arrayEachJsDefault.default([
    'drop',
    'take'
], function(methodName, index) {
    _lazyWrapperJsDefault.default.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(_toIntegerJsDefault.default(n), 0);
        var result = this.__filtered__ && !index ? new _lazyWrapperJsDefault.default(this) : this.clone();
        if (result.__filtered__) result.__takeCount__ = nativeMin(n, result.__takeCount__);
        else result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
        });
        return result;
    };
    _lazyWrapperJsDefault.default.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
    };
});
// Add `LazyWrapper` methods that accept an `iteratee` value.
_arrayEachJsDefault.default([
    'filter',
    'map',
    'takeWhile'
], function(methodName, index) {
    var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
    _lazyWrapperJsDefault.default.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
            'iteratee': _baseIterateeJsDefault.default(iteratee, 3),
            'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
    };
});
// Add `LazyWrapper` methods for `_.head` and `_.last`.
_arrayEachJsDefault.default([
    'head',
    'last'
], function(methodName, index) {
    var takeName = 'take' + (index ? 'Right' : '');
    _lazyWrapperJsDefault.default.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
    };
});
// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
_arrayEachJsDefault.default([
    'initial',
    'tail'
], function(methodName, index) {
    var dropName = 'drop' + (index ? '' : 'Right');
    _lazyWrapperJsDefault.default.prototype[methodName] = function() {
        return this.__filtered__ ? new _lazyWrapperJsDefault.default(this) : this[dropName](1);
    };
});
_lazyWrapperJsDefault.default.prototype.compact = function() {
    return this.filter(_identityJsDefault.default);
};
_lazyWrapperJsDefault.default.prototype.find = function(predicate) {
    return this.filter(predicate).head();
};
_lazyWrapperJsDefault.default.prototype.findLast = function(predicate) {
    return this.reverse().find(predicate);
};
_lazyWrapperJsDefault.default.prototype.invokeMap = _baseRestJsDefault.default(function(path, args) {
    if (typeof path == 'function') return new _lazyWrapperJsDefault.default(this);
    return this.map(function(value) {
        return _baseInvokeJsDefault.default(value, path, args);
    });
});
_lazyWrapperJsDefault.default.prototype.reject = function(predicate) {
    return this.filter(_negateJsDefault.default(_baseIterateeJsDefault.default(predicate)));
};
_lazyWrapperJsDefault.default.prototype.slice = function(start, end) {
    start = _toIntegerJsDefault.default(start);
    var result = this;
    if (result.__filtered__ && (start > 0 || end < 0)) return new _lazyWrapperJsDefault.default(result);
    if (start < 0) result = result.takeRight(-start);
    else if (start) result = result.drop(start);
    if (end !== undefined) {
        end = _toIntegerJsDefault.default(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    }
    return result;
};
_lazyWrapperJsDefault.default.prototype.takeRightWhile = function(predicate) {
    return this.reverse().takeWhile(predicate).reverse();
};
_lazyWrapperJsDefault.default.prototype.toArray = function() {
    return this.take(MAX_ARRAY_LENGTH);
};
// Add `LazyWrapper` methods to `lodash.prototype`.
_baseForOwnJsDefault.default(_lazyWrapperJsDefault.default.prototype, function(func, methodName) {
    var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = _wrapperLodashJsDefault.default[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
    if (!lodashFunc) return;
    _wrapperLodashJsDefault.default.prototype[methodName] = function() {
        var value = this.__wrapped__, args = isTaker ? [
            1
        ] : arguments, isLazy = value instanceof _lazyWrapperJsDefault.default, iteratee = args[0], useLazy = isLazy || _isArrayJsDefault.default(value);
        var interceptor = function(value1) {
            var result = lodashFunc.apply(_wrapperLodashJsDefault.default, _arrayPushJsDefault.default([
                value1
            ], args));
            return isTaker && chainAll ? result[0] : result;
        };
        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) // Avoid lazy use if the iteratee has a "length" value other than `1`.
        isLazy = useLazy = false;
        var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
        if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new _lazyWrapperJsDefault.default(this);
            var result = func.apply(value, args);
            result.__actions__.push({
                'func': _thruJsDefault.default,
                'args': [
                    interceptor
                ],
                'thisArg': undefined
            });
            return new _lodashWrapperJsDefault.default(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) return func.apply(this, args);
        result = this.thru(interceptor);
        return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
    };
});
// Add `Array` methods to `lodash.prototype`.
_arrayEachJsDefault.default([
    'pop',
    'push',
    'shift',
    'sort',
    'splice',
    'unshift'
], function(methodName) {
    var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
    _wrapperLodashJsDefault.default.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(_isArrayJsDefault.default(value) ? value : [], args);
        }
        return this[chainName](function(value) {
            return func.apply(_isArrayJsDefault.default(value) ? value : [], args);
        });
    };
});
// Map minified method names to their real names.
_baseForOwnJsDefault.default(_lazyWrapperJsDefault.default.prototype, function(func, methodName) {
    var lodashFunc = _wrapperLodashJsDefault.default[methodName];
    if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(_realNamesJsDefault.default, key)) _realNamesJsDefault.default[key] = [];
        _realNamesJsDefault.default[key].push({
            'name': methodName,
            'func': lodashFunc
        });
    }
});
_realNamesJsDefault.default[_createHybridJsDefault.default(undefined, WRAP_BIND_KEY_FLAG).name] = [
    {
        'name': 'wrapper',
        'func': undefined
    }
];
// Add methods to `LazyWrapper`.
_lazyWrapperJsDefault.default.prototype.clone = _lazyCloneJsDefault.default;
_lazyWrapperJsDefault.default.prototype.reverse = _lazyReverseJsDefault.default;
_lazyWrapperJsDefault.default.prototype.value = _lazyValueJsDefault.default;
// Add chain sequence methods to the `lodash` wrapper.
_wrapperLodashJsDefault.default.prototype.at = _seqJsDefault.default.at;
_wrapperLodashJsDefault.default.prototype.chain = _seqJsDefault.default.wrapperChain;
_wrapperLodashJsDefault.default.prototype.commit = _seqJsDefault.default.commit;
_wrapperLodashJsDefault.default.prototype.next = _seqJsDefault.default.next;
_wrapperLodashJsDefault.default.prototype.plant = _seqJsDefault.default.plant;
_wrapperLodashJsDefault.default.prototype.reverse = _seqJsDefault.default.reverse;
_wrapperLodashJsDefault.default.prototype.toJSON = _wrapperLodashJsDefault.default.prototype.valueOf = _wrapperLodashJsDefault.default.prototype.value = _seqJsDefault.default.value;
// Add lazy aliases.
_wrapperLodashJsDefault.default.prototype.first = _wrapperLodashJsDefault.default.prototype.head;
if (symIterator) _wrapperLodashJsDefault.default.prototype[symIterator] = _seqJsDefault.default.toIterator;
exports.default = _wrapperLodashJsDefault.default;

},{"./array.js":"bkfcm","./collection.js":"18V4P","./date.js":"lRVMh","./function.js":"hzTc5","./lang.js":"8Rh9w","./math.js":"eb9cF","./number.js":"1TSyW","./object.js":"fU6ob","./seq.js":"8UaAN","./string.js":"kMupA","./util.js":"kLuBI","./_LazyWrapper.js":"kpKkJ","./_LodashWrapper.js":"6ZE49","./_Symbol.js":"lUHHK","./_arrayEach.js":"6ICgZ","./_arrayPush.js":"t745A","./_baseForOwn.js":"17EGa","./_baseFunctions.js":"5UufQ","./_baseInvoke.js":"bZh6J","./_baseIteratee.js":"6ue66","./_baseRest.js":"6GMnO","./_createHybrid.js":"b2Yu6","./identity.js":"fqqWQ","./isArray.js":"aM5De","./isObject.js":"1IOOk","./keys.js":"f9Mo9","./last.js":"cAZFz","./_lazyClone.js":"4YBMg","./_lazyReverse.js":"7dkG9","./_lazyValue.js":"5cL9P","./mixin.js":"hdMVM","./negate.js":"7g9li","./_realNames.js":"agJJS","./thru.js":"hy1jT","./toInteger.js":"69J4a","./wrapperLodash.js":"4HPB1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bkfcm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chunk", ()=>_chunkJsDefault.default
);
parcelHelpers.export(exports, "compact", ()=>_compactJsDefault.default
);
parcelHelpers.export(exports, "concat", ()=>_concatJsDefault.default
);
parcelHelpers.export(exports, "difference", ()=>_differenceJsDefault.default
);
parcelHelpers.export(exports, "differenceBy", ()=>_differenceByJsDefault.default
);
parcelHelpers.export(exports, "differenceWith", ()=>_differenceWithJsDefault.default
);
parcelHelpers.export(exports, "drop", ()=>_dropJsDefault.default
);
parcelHelpers.export(exports, "dropRight", ()=>_dropRightJsDefault.default
);
parcelHelpers.export(exports, "dropRightWhile", ()=>_dropRightWhileJsDefault.default
);
parcelHelpers.export(exports, "dropWhile", ()=>_dropWhileJsDefault.default
);
parcelHelpers.export(exports, "fill", ()=>_fillJsDefault.default
);
parcelHelpers.export(exports, "findIndex", ()=>_findIndexJsDefault.default
);
parcelHelpers.export(exports, "findLastIndex", ()=>_findLastIndexJsDefault.default
);
parcelHelpers.export(exports, "first", ()=>_firstJsDefault.default
);
parcelHelpers.export(exports, "flatten", ()=>_flattenJsDefault.default
);
parcelHelpers.export(exports, "flattenDeep", ()=>_flattenDeepJsDefault.default
);
parcelHelpers.export(exports, "flattenDepth", ()=>_flattenDepthJsDefault.default
);
parcelHelpers.export(exports, "fromPairs", ()=>_fromPairsJsDefault.default
);
parcelHelpers.export(exports, "head", ()=>_headJsDefault.default
);
parcelHelpers.export(exports, "indexOf", ()=>_indexOfJsDefault.default
);
parcelHelpers.export(exports, "initial", ()=>_initialJsDefault.default
);
parcelHelpers.export(exports, "intersection", ()=>_intersectionJsDefault.default
);
parcelHelpers.export(exports, "intersectionBy", ()=>_intersectionByJsDefault.default
);
parcelHelpers.export(exports, "intersectionWith", ()=>_intersectionWithJsDefault.default
);
parcelHelpers.export(exports, "join", ()=>_joinJsDefault.default
);
parcelHelpers.export(exports, "last", ()=>_lastJsDefault.default
);
parcelHelpers.export(exports, "lastIndexOf", ()=>_lastIndexOfJsDefault.default
);
parcelHelpers.export(exports, "nth", ()=>_nthJsDefault.default
);
parcelHelpers.export(exports, "pull", ()=>_pullJsDefault.default
);
parcelHelpers.export(exports, "pullAll", ()=>_pullAllJsDefault.default
);
parcelHelpers.export(exports, "pullAllBy", ()=>_pullAllByJsDefault.default
);
parcelHelpers.export(exports, "pullAllWith", ()=>_pullAllWithJsDefault.default
);
parcelHelpers.export(exports, "pullAt", ()=>_pullAtJsDefault.default
);
parcelHelpers.export(exports, "remove", ()=>_removeJsDefault.default
);
parcelHelpers.export(exports, "reverse", ()=>_reverseJsDefault.default
);
parcelHelpers.export(exports, "slice", ()=>_sliceJsDefault.default
);
parcelHelpers.export(exports, "sortedIndex", ()=>_sortedIndexJsDefault.default
);
parcelHelpers.export(exports, "sortedIndexBy", ()=>_sortedIndexByJsDefault.default
);
parcelHelpers.export(exports, "sortedIndexOf", ()=>_sortedIndexOfJsDefault.default
);
parcelHelpers.export(exports, "sortedLastIndex", ()=>_sortedLastIndexJsDefault.default
);
parcelHelpers.export(exports, "sortedLastIndexBy", ()=>_sortedLastIndexByJsDefault.default
);
parcelHelpers.export(exports, "sortedLastIndexOf", ()=>_sortedLastIndexOfJsDefault.default
);
parcelHelpers.export(exports, "sortedUniq", ()=>_sortedUniqJsDefault.default
);
parcelHelpers.export(exports, "sortedUniqBy", ()=>_sortedUniqByJsDefault.default
);
parcelHelpers.export(exports, "tail", ()=>_tailJsDefault.default
);
parcelHelpers.export(exports, "take", ()=>_takeJsDefault.default
);
parcelHelpers.export(exports, "takeRight", ()=>_takeRightJsDefault.default
);
parcelHelpers.export(exports, "takeRightWhile", ()=>_takeRightWhileJsDefault.default
);
parcelHelpers.export(exports, "takeWhile", ()=>_takeWhileJsDefault.default
);
parcelHelpers.export(exports, "union", ()=>_unionJsDefault.default
);
parcelHelpers.export(exports, "unionBy", ()=>_unionByJsDefault.default
);
parcelHelpers.export(exports, "unionWith", ()=>_unionWithJsDefault.default
);
parcelHelpers.export(exports, "uniq", ()=>_uniqJsDefault.default
);
parcelHelpers.export(exports, "uniqBy", ()=>_uniqByJsDefault.default
);
parcelHelpers.export(exports, "uniqWith", ()=>_uniqWithJsDefault.default
);
parcelHelpers.export(exports, "unzip", ()=>_unzipJsDefault.default
);
parcelHelpers.export(exports, "unzipWith", ()=>_unzipWithJsDefault.default
);
parcelHelpers.export(exports, "without", ()=>_withoutJsDefault.default
);
parcelHelpers.export(exports, "xor", ()=>_xorJsDefault.default
);
parcelHelpers.export(exports, "xorBy", ()=>_xorByJsDefault.default
);
parcelHelpers.export(exports, "xorWith", ()=>_xorWithJsDefault.default
);
parcelHelpers.export(exports, "zip", ()=>_zipJsDefault.default
);
parcelHelpers.export(exports, "zipObject", ()=>_zipObjectJsDefault.default
);
parcelHelpers.export(exports, "zipObjectDeep", ()=>_zipObjectDeepJsDefault.default
);
parcelHelpers.export(exports, "zipWith", ()=>_zipWithJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_arrayDefaultJsDefault.default
);
var _chunkJs = require("./chunk.js");
var _chunkJsDefault = parcelHelpers.interopDefault(_chunkJs);
var _compactJs = require("./compact.js");
var _compactJsDefault = parcelHelpers.interopDefault(_compactJs);
var _concatJs = require("./concat.js");
var _concatJsDefault = parcelHelpers.interopDefault(_concatJs);
var _differenceJs = require("./difference.js");
var _differenceJsDefault = parcelHelpers.interopDefault(_differenceJs);
var _differenceByJs = require("./differenceBy.js");
var _differenceByJsDefault = parcelHelpers.interopDefault(_differenceByJs);
var _differenceWithJs = require("./differenceWith.js");
var _differenceWithJsDefault = parcelHelpers.interopDefault(_differenceWithJs);
var _dropJs = require("./drop.js");
var _dropJsDefault = parcelHelpers.interopDefault(_dropJs);
var _dropRightJs = require("./dropRight.js");
var _dropRightJsDefault = parcelHelpers.interopDefault(_dropRightJs);
var _dropRightWhileJs = require("./dropRightWhile.js");
var _dropRightWhileJsDefault = parcelHelpers.interopDefault(_dropRightWhileJs);
var _dropWhileJs = require("./dropWhile.js");
var _dropWhileJsDefault = parcelHelpers.interopDefault(_dropWhileJs);
var _fillJs = require("./fill.js");
var _fillJsDefault = parcelHelpers.interopDefault(_fillJs);
var _findIndexJs = require("./findIndex.js");
var _findIndexJsDefault = parcelHelpers.interopDefault(_findIndexJs);
var _findLastIndexJs = require("./findLastIndex.js");
var _findLastIndexJsDefault = parcelHelpers.interopDefault(_findLastIndexJs);
var _firstJs = require("./first.js");
var _firstJsDefault = parcelHelpers.interopDefault(_firstJs);
var _flattenJs = require("./flatten.js");
var _flattenJsDefault = parcelHelpers.interopDefault(_flattenJs);
var _flattenDeepJs = require("./flattenDeep.js");
var _flattenDeepJsDefault = parcelHelpers.interopDefault(_flattenDeepJs);
var _flattenDepthJs = require("./flattenDepth.js");
var _flattenDepthJsDefault = parcelHelpers.interopDefault(_flattenDepthJs);
var _fromPairsJs = require("./fromPairs.js");
var _fromPairsJsDefault = parcelHelpers.interopDefault(_fromPairsJs);
var _headJs = require("./head.js");
var _headJsDefault = parcelHelpers.interopDefault(_headJs);
var _indexOfJs = require("./indexOf.js");
var _indexOfJsDefault = parcelHelpers.interopDefault(_indexOfJs);
var _initialJs = require("./initial.js");
var _initialJsDefault = parcelHelpers.interopDefault(_initialJs);
var _intersectionJs = require("./intersection.js");
var _intersectionJsDefault = parcelHelpers.interopDefault(_intersectionJs);
var _intersectionByJs = require("./intersectionBy.js");
var _intersectionByJsDefault = parcelHelpers.interopDefault(_intersectionByJs);
var _intersectionWithJs = require("./intersectionWith.js");
var _intersectionWithJsDefault = parcelHelpers.interopDefault(_intersectionWithJs);
var _joinJs = require("./join.js");
var _joinJsDefault = parcelHelpers.interopDefault(_joinJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
var _lastIndexOfJs = require("./lastIndexOf.js");
var _lastIndexOfJsDefault = parcelHelpers.interopDefault(_lastIndexOfJs);
var _nthJs = require("./nth.js");
var _nthJsDefault = parcelHelpers.interopDefault(_nthJs);
var _pullJs = require("./pull.js");
var _pullJsDefault = parcelHelpers.interopDefault(_pullJs);
var _pullAllJs = require("./pullAll.js");
var _pullAllJsDefault = parcelHelpers.interopDefault(_pullAllJs);
var _pullAllByJs = require("./pullAllBy.js");
var _pullAllByJsDefault = parcelHelpers.interopDefault(_pullAllByJs);
var _pullAllWithJs = require("./pullAllWith.js");
var _pullAllWithJsDefault = parcelHelpers.interopDefault(_pullAllWithJs);
var _pullAtJs = require("./pullAt.js");
var _pullAtJsDefault = parcelHelpers.interopDefault(_pullAtJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _sortedIndexJs = require("./sortedIndex.js");
var _sortedIndexJsDefault = parcelHelpers.interopDefault(_sortedIndexJs);
var _sortedIndexByJs = require("./sortedIndexBy.js");
var _sortedIndexByJsDefault = parcelHelpers.interopDefault(_sortedIndexByJs);
var _sortedIndexOfJs = require("./sortedIndexOf.js");
var _sortedIndexOfJsDefault = parcelHelpers.interopDefault(_sortedIndexOfJs);
var _sortedLastIndexJs = require("./sortedLastIndex.js");
var _sortedLastIndexJsDefault = parcelHelpers.interopDefault(_sortedLastIndexJs);
var _sortedLastIndexByJs = require("./sortedLastIndexBy.js");
var _sortedLastIndexByJsDefault = parcelHelpers.interopDefault(_sortedLastIndexByJs);
var _sortedLastIndexOfJs = require("./sortedLastIndexOf.js");
var _sortedLastIndexOfJsDefault = parcelHelpers.interopDefault(_sortedLastIndexOfJs);
var _sortedUniqJs = require("./sortedUniq.js");
var _sortedUniqJsDefault = parcelHelpers.interopDefault(_sortedUniqJs);
var _sortedUniqByJs = require("./sortedUniqBy.js");
var _sortedUniqByJsDefault = parcelHelpers.interopDefault(_sortedUniqByJs);
var _tailJs = require("./tail.js");
var _tailJsDefault = parcelHelpers.interopDefault(_tailJs);
var _takeJs = require("./take.js");
var _takeJsDefault = parcelHelpers.interopDefault(_takeJs);
var _takeRightJs = require("./takeRight.js");
var _takeRightJsDefault = parcelHelpers.interopDefault(_takeRightJs);
var _takeRightWhileJs = require("./takeRightWhile.js");
var _takeRightWhileJsDefault = parcelHelpers.interopDefault(_takeRightWhileJs);
var _takeWhileJs = require("./takeWhile.js");
var _takeWhileJsDefault = parcelHelpers.interopDefault(_takeWhileJs);
var _unionJs = require("./union.js");
var _unionJsDefault = parcelHelpers.interopDefault(_unionJs);
var _unionByJs = require("./unionBy.js");
var _unionByJsDefault = parcelHelpers.interopDefault(_unionByJs);
var _unionWithJs = require("./unionWith.js");
var _unionWithJsDefault = parcelHelpers.interopDefault(_unionWithJs);
var _uniqJs = require("./uniq.js");
var _uniqJsDefault = parcelHelpers.interopDefault(_uniqJs);
var _uniqByJs = require("./uniqBy.js");
var _uniqByJsDefault = parcelHelpers.interopDefault(_uniqByJs);
var _uniqWithJs = require("./uniqWith.js");
var _uniqWithJsDefault = parcelHelpers.interopDefault(_uniqWithJs);
var _unzipJs = require("./unzip.js");
var _unzipJsDefault = parcelHelpers.interopDefault(_unzipJs);
var _unzipWithJs = require("./unzipWith.js");
var _unzipWithJsDefault = parcelHelpers.interopDefault(_unzipWithJs);
var _withoutJs = require("./without.js");
var _withoutJsDefault = parcelHelpers.interopDefault(_withoutJs);
var _xorJs = require("./xor.js");
var _xorJsDefault = parcelHelpers.interopDefault(_xorJs);
var _xorByJs = require("./xorBy.js");
var _xorByJsDefault = parcelHelpers.interopDefault(_xorByJs);
var _xorWithJs = require("./xorWith.js");
var _xorWithJsDefault = parcelHelpers.interopDefault(_xorWithJs);
var _zipJs = require("./zip.js");
var _zipJsDefault = parcelHelpers.interopDefault(_zipJs);
var _zipObjectJs = require("./zipObject.js");
var _zipObjectJsDefault = parcelHelpers.interopDefault(_zipObjectJs);
var _zipObjectDeepJs = require("./zipObjectDeep.js");
var _zipObjectDeepJsDefault = parcelHelpers.interopDefault(_zipObjectDeepJs);
var _zipWithJs = require("./zipWith.js");
var _zipWithJsDefault = parcelHelpers.interopDefault(_zipWithJs);
var _arrayDefaultJs = require("./array.default.js");
var _arrayDefaultJsDefault = parcelHelpers.interopDefault(_arrayDefaultJs);

},{"./chunk.js":"aah23","./compact.js":"k48LX","./concat.js":"gl4B0","./difference.js":"bCldF","./differenceBy.js":"gw2AS","./differenceWith.js":"3hQVe","./drop.js":"5Sf8Z","./dropRight.js":"qlemU","./dropRightWhile.js":"2rwBJ","./dropWhile.js":"glm5L","./fill.js":"kfgEy","./findIndex.js":"YGDUB","./findLastIndex.js":"5alCm","./first.js":"gkRo5","./flatten.js":"01lll","./flattenDeep.js":"4JIPO","./flattenDepth.js":"6tDIj","./fromPairs.js":"1jSmF","./head.js":"dWVx1","./indexOf.js":"f1w5R","./initial.js":"8v8fG","./intersection.js":"6KnES","./intersectionBy.js":"k9SKv","./intersectionWith.js":"b2qne","./join.js":"k8m3s","./last.js":"cAZFz","./lastIndexOf.js":"bwXQU","./nth.js":"1AwpH","./pull.js":"h46Lz","./pullAll.js":"hfsh3","./pullAllBy.js":"8miuf","./pullAllWith.js":"1U40C","./pullAt.js":"m59fR","./remove.js":"e0bSt","./reverse.js":"g4G7I","./slice.js":"8dFmQ","./sortedIndex.js":"1RrZA","./sortedIndexBy.js":"fM825","./sortedIndexOf.js":"lne1W","./sortedLastIndex.js":"bSQkU","./sortedLastIndexBy.js":"gnrPv","./sortedLastIndexOf.js":"iqcKK","./sortedUniq.js":"8aI7N","./sortedUniqBy.js":"c9p7V","./tail.js":"3VhUc","./take.js":"1jAnF","./takeRight.js":"gNCaE","./takeRightWhile.js":"5EXP3","./takeWhile.js":"aNaWv","./union.js":"3KDyG","./unionBy.js":"fpkGI","./unionWith.js":"kq5Ay","./uniq.js":"8bgCK","./uniqBy.js":"13uh6","./uniqWith.js":"7OEJc","./unzip.js":"7fsw4","./unzipWith.js":"erJvr","./without.js":"7trOS","./xor.js":"dO8Bk","./xorBy.js":"6y0zh","./xorWith.js":"dEPfN","./zip.js":"lfegQ","./zipObject.js":"g8sfy","./zipObjectDeep.js":"5UIBl","./zipWith.js":"eCmbh","./array.default.js":"4lPta","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4lPta":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chunkJs = require("./chunk.js");
var _chunkJsDefault = parcelHelpers.interopDefault(_chunkJs);
var _compactJs = require("./compact.js");
var _compactJsDefault = parcelHelpers.interopDefault(_compactJs);
var _concatJs = require("./concat.js");
var _concatJsDefault = parcelHelpers.interopDefault(_concatJs);
var _differenceJs = require("./difference.js");
var _differenceJsDefault = parcelHelpers.interopDefault(_differenceJs);
var _differenceByJs = require("./differenceBy.js");
var _differenceByJsDefault = parcelHelpers.interopDefault(_differenceByJs);
var _differenceWithJs = require("./differenceWith.js");
var _differenceWithJsDefault = parcelHelpers.interopDefault(_differenceWithJs);
var _dropJs = require("./drop.js");
var _dropJsDefault = parcelHelpers.interopDefault(_dropJs);
var _dropRightJs = require("./dropRight.js");
var _dropRightJsDefault = parcelHelpers.interopDefault(_dropRightJs);
var _dropRightWhileJs = require("./dropRightWhile.js");
var _dropRightWhileJsDefault = parcelHelpers.interopDefault(_dropRightWhileJs);
var _dropWhileJs = require("./dropWhile.js");
var _dropWhileJsDefault = parcelHelpers.interopDefault(_dropWhileJs);
var _fillJs = require("./fill.js");
var _fillJsDefault = parcelHelpers.interopDefault(_fillJs);
var _findIndexJs = require("./findIndex.js");
var _findIndexJsDefault = parcelHelpers.interopDefault(_findIndexJs);
var _findLastIndexJs = require("./findLastIndex.js");
var _findLastIndexJsDefault = parcelHelpers.interopDefault(_findLastIndexJs);
var _firstJs = require("./first.js");
var _firstJsDefault = parcelHelpers.interopDefault(_firstJs);
var _flattenJs = require("./flatten.js");
var _flattenJsDefault = parcelHelpers.interopDefault(_flattenJs);
var _flattenDeepJs = require("./flattenDeep.js");
var _flattenDeepJsDefault = parcelHelpers.interopDefault(_flattenDeepJs);
var _flattenDepthJs = require("./flattenDepth.js");
var _flattenDepthJsDefault = parcelHelpers.interopDefault(_flattenDepthJs);
var _fromPairsJs = require("./fromPairs.js");
var _fromPairsJsDefault = parcelHelpers.interopDefault(_fromPairsJs);
var _headJs = require("./head.js");
var _headJsDefault = parcelHelpers.interopDefault(_headJs);
var _indexOfJs = require("./indexOf.js");
var _indexOfJsDefault = parcelHelpers.interopDefault(_indexOfJs);
var _initialJs = require("./initial.js");
var _initialJsDefault = parcelHelpers.interopDefault(_initialJs);
var _intersectionJs = require("./intersection.js");
var _intersectionJsDefault = parcelHelpers.interopDefault(_intersectionJs);
var _intersectionByJs = require("./intersectionBy.js");
var _intersectionByJsDefault = parcelHelpers.interopDefault(_intersectionByJs);
var _intersectionWithJs = require("./intersectionWith.js");
var _intersectionWithJsDefault = parcelHelpers.interopDefault(_intersectionWithJs);
var _joinJs = require("./join.js");
var _joinJsDefault = parcelHelpers.interopDefault(_joinJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
var _lastIndexOfJs = require("./lastIndexOf.js");
var _lastIndexOfJsDefault = parcelHelpers.interopDefault(_lastIndexOfJs);
var _nthJs = require("./nth.js");
var _nthJsDefault = parcelHelpers.interopDefault(_nthJs);
var _pullJs = require("./pull.js");
var _pullJsDefault = parcelHelpers.interopDefault(_pullJs);
var _pullAllJs = require("./pullAll.js");
var _pullAllJsDefault = parcelHelpers.interopDefault(_pullAllJs);
var _pullAllByJs = require("./pullAllBy.js");
var _pullAllByJsDefault = parcelHelpers.interopDefault(_pullAllByJs);
var _pullAllWithJs = require("./pullAllWith.js");
var _pullAllWithJsDefault = parcelHelpers.interopDefault(_pullAllWithJs);
var _pullAtJs = require("./pullAt.js");
var _pullAtJsDefault = parcelHelpers.interopDefault(_pullAtJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _sortedIndexJs = require("./sortedIndex.js");
var _sortedIndexJsDefault = parcelHelpers.interopDefault(_sortedIndexJs);
var _sortedIndexByJs = require("./sortedIndexBy.js");
var _sortedIndexByJsDefault = parcelHelpers.interopDefault(_sortedIndexByJs);
var _sortedIndexOfJs = require("./sortedIndexOf.js");
var _sortedIndexOfJsDefault = parcelHelpers.interopDefault(_sortedIndexOfJs);
var _sortedLastIndexJs = require("./sortedLastIndex.js");
var _sortedLastIndexJsDefault = parcelHelpers.interopDefault(_sortedLastIndexJs);
var _sortedLastIndexByJs = require("./sortedLastIndexBy.js");
var _sortedLastIndexByJsDefault = parcelHelpers.interopDefault(_sortedLastIndexByJs);
var _sortedLastIndexOfJs = require("./sortedLastIndexOf.js");
var _sortedLastIndexOfJsDefault = parcelHelpers.interopDefault(_sortedLastIndexOfJs);
var _sortedUniqJs = require("./sortedUniq.js");
var _sortedUniqJsDefault = parcelHelpers.interopDefault(_sortedUniqJs);
var _sortedUniqByJs = require("./sortedUniqBy.js");
var _sortedUniqByJsDefault = parcelHelpers.interopDefault(_sortedUniqByJs);
var _tailJs = require("./tail.js");
var _tailJsDefault = parcelHelpers.interopDefault(_tailJs);
var _takeJs = require("./take.js");
var _takeJsDefault = parcelHelpers.interopDefault(_takeJs);
var _takeRightJs = require("./takeRight.js");
var _takeRightJsDefault = parcelHelpers.interopDefault(_takeRightJs);
var _takeRightWhileJs = require("./takeRightWhile.js");
var _takeRightWhileJsDefault = parcelHelpers.interopDefault(_takeRightWhileJs);
var _takeWhileJs = require("./takeWhile.js");
var _takeWhileJsDefault = parcelHelpers.interopDefault(_takeWhileJs);
var _unionJs = require("./union.js");
var _unionJsDefault = parcelHelpers.interopDefault(_unionJs);
var _unionByJs = require("./unionBy.js");
var _unionByJsDefault = parcelHelpers.interopDefault(_unionByJs);
var _unionWithJs = require("./unionWith.js");
var _unionWithJsDefault = parcelHelpers.interopDefault(_unionWithJs);
var _uniqJs = require("./uniq.js");
var _uniqJsDefault = parcelHelpers.interopDefault(_uniqJs);
var _uniqByJs = require("./uniqBy.js");
var _uniqByJsDefault = parcelHelpers.interopDefault(_uniqByJs);
var _uniqWithJs = require("./uniqWith.js");
var _uniqWithJsDefault = parcelHelpers.interopDefault(_uniqWithJs);
var _unzipJs = require("./unzip.js");
var _unzipJsDefault = parcelHelpers.interopDefault(_unzipJs);
var _unzipWithJs = require("./unzipWith.js");
var _unzipWithJsDefault = parcelHelpers.interopDefault(_unzipWithJs);
var _withoutJs = require("./without.js");
var _withoutJsDefault = parcelHelpers.interopDefault(_withoutJs);
var _xorJs = require("./xor.js");
var _xorJsDefault = parcelHelpers.interopDefault(_xorJs);
var _xorByJs = require("./xorBy.js");
var _xorByJsDefault = parcelHelpers.interopDefault(_xorByJs);
var _xorWithJs = require("./xorWith.js");
var _xorWithJsDefault = parcelHelpers.interopDefault(_xorWithJs);
var _zipJs = require("./zip.js");
var _zipJsDefault = parcelHelpers.interopDefault(_zipJs);
var _zipObjectJs = require("./zipObject.js");
var _zipObjectJsDefault = parcelHelpers.interopDefault(_zipObjectJs);
var _zipObjectDeepJs = require("./zipObjectDeep.js");
var _zipObjectDeepJsDefault = parcelHelpers.interopDefault(_zipObjectDeepJs);
var _zipWithJs = require("./zipWith.js");
var _zipWithJsDefault = parcelHelpers.interopDefault(_zipWithJs);
exports.default = {
    chunk: _chunkJsDefault.default,
    compact: _compactJsDefault.default,
    concat: _concatJsDefault.default,
    difference: _differenceJsDefault.default,
    differenceBy: _differenceByJsDefault.default,
    differenceWith: _differenceWithJsDefault.default,
    drop: _dropJsDefault.default,
    dropRight: _dropRightJsDefault.default,
    dropRightWhile: _dropRightWhileJsDefault.default,
    dropWhile: _dropWhileJsDefault.default,
    fill: _fillJsDefault.default,
    findIndex: _findIndexJsDefault.default,
    findLastIndex: _findLastIndexJsDefault.default,
    first: _firstJsDefault.default,
    flatten: _flattenJsDefault.default,
    flattenDeep: _flattenDeepJsDefault.default,
    flattenDepth: _flattenDepthJsDefault.default,
    fromPairs: _fromPairsJsDefault.default,
    head: _headJsDefault.default,
    indexOf: _indexOfJsDefault.default,
    initial: _initialJsDefault.default,
    intersection: _intersectionJsDefault.default,
    intersectionBy: _intersectionByJsDefault.default,
    intersectionWith: _intersectionWithJsDefault.default,
    join: _joinJsDefault.default,
    last: _lastJsDefault.default,
    lastIndexOf: _lastIndexOfJsDefault.default,
    nth: _nthJsDefault.default,
    pull: _pullJsDefault.default,
    pullAll: _pullAllJsDefault.default,
    pullAllBy: _pullAllByJsDefault.default,
    pullAllWith: _pullAllWithJsDefault.default,
    pullAt: _pullAtJsDefault.default,
    remove: _removeJsDefault.default,
    reverse: _reverseJsDefault.default,
    slice: _sliceJsDefault.default,
    sortedIndex: _sortedIndexJsDefault.default,
    sortedIndexBy: _sortedIndexByJsDefault.default,
    sortedIndexOf: _sortedIndexOfJsDefault.default,
    sortedLastIndex: _sortedLastIndexJsDefault.default,
    sortedLastIndexBy: _sortedLastIndexByJsDefault.default,
    sortedLastIndexOf: _sortedLastIndexOfJsDefault.default,
    sortedUniq: _sortedUniqJsDefault.default,
    sortedUniqBy: _sortedUniqByJsDefault.default,
    tail: _tailJsDefault.default,
    take: _takeJsDefault.default,
    takeRight: _takeRightJsDefault.default,
    takeRightWhile: _takeRightWhileJsDefault.default,
    takeWhile: _takeWhileJsDefault.default,
    union: _unionJsDefault.default,
    unionBy: _unionByJsDefault.default,
    unionWith: _unionWithJsDefault.default,
    uniq: _uniqJsDefault.default,
    uniqBy: _uniqByJsDefault.default,
    uniqWith: _uniqWithJsDefault.default,
    unzip: _unzipJsDefault.default,
    unzipWith: _unzipWithJsDefault.default,
    without: _withoutJsDefault.default,
    xor: _xorJsDefault.default,
    xorBy: _xorByJsDefault.default,
    xorWith: _xorWithJsDefault.default,
    zip: _zipJsDefault.default,
    zipObject: _zipObjectJsDefault.default,
    zipObjectDeep: _zipObjectDeepJsDefault.default,
    zipWith: _zipWithJsDefault.default
};

},{"./chunk.js":"aah23","./compact.js":"k48LX","./concat.js":"gl4B0","./difference.js":"bCldF","./differenceBy.js":"gw2AS","./differenceWith.js":"3hQVe","./drop.js":"5Sf8Z","./dropRight.js":"qlemU","./dropRightWhile.js":"2rwBJ","./dropWhile.js":"glm5L","./fill.js":"kfgEy","./findIndex.js":"YGDUB","./findLastIndex.js":"5alCm","./first.js":"gkRo5","./flatten.js":"01lll","./flattenDeep.js":"4JIPO","./flattenDepth.js":"6tDIj","./fromPairs.js":"1jSmF","./head.js":"dWVx1","./indexOf.js":"f1w5R","./initial.js":"8v8fG","./intersection.js":"6KnES","./intersectionBy.js":"k9SKv","./intersectionWith.js":"b2qne","./join.js":"k8m3s","./last.js":"cAZFz","./lastIndexOf.js":"bwXQU","./nth.js":"1AwpH","./pull.js":"h46Lz","./pullAll.js":"hfsh3","./pullAllBy.js":"8miuf","./pullAllWith.js":"1U40C","./pullAt.js":"m59fR","./remove.js":"e0bSt","./reverse.js":"g4G7I","./slice.js":"8dFmQ","./sortedIndex.js":"1RrZA","./sortedIndexBy.js":"fM825","./sortedIndexOf.js":"lne1W","./sortedLastIndex.js":"bSQkU","./sortedLastIndexBy.js":"gnrPv","./sortedLastIndexOf.js":"iqcKK","./sortedUniq.js":"8aI7N","./sortedUniqBy.js":"c9p7V","./tail.js":"3VhUc","./take.js":"1jAnF","./takeRight.js":"gNCaE","./takeRightWhile.js":"5EXP3","./takeWhile.js":"aNaWv","./union.js":"3KDyG","./unionBy.js":"fpkGI","./unionWith.js":"kq5Ay","./uniq.js":"8bgCK","./uniqBy.js":"13uh6","./uniqWith.js":"7OEJc","./unzip.js":"7fsw4","./unzipWith.js":"erJvr","./without.js":"7trOS","./xor.js":"dO8Bk","./xorBy.js":"6y0zh","./xorWith.js":"dEPfN","./zip.js":"lfegQ","./zipObject.js":"g8sfy","./zipObjectDeep.js":"5UIBl","./zipWith.js":"eCmbh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"18V4P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "countBy", ()=>_countByJsDefault.default
);
parcelHelpers.export(exports, "each", ()=>_eachJsDefault.default
);
parcelHelpers.export(exports, "eachRight", ()=>_eachRightJsDefault.default
);
parcelHelpers.export(exports, "every", ()=>_everyJsDefault.default
);
parcelHelpers.export(exports, "filter", ()=>_filterJsDefault.default
);
parcelHelpers.export(exports, "find", ()=>_findJsDefault.default
);
parcelHelpers.export(exports, "findLast", ()=>_findLastJsDefault.default
);
parcelHelpers.export(exports, "flatMap", ()=>_flatMapJsDefault.default
);
parcelHelpers.export(exports, "flatMapDeep", ()=>_flatMapDeepJsDefault.default
);
parcelHelpers.export(exports, "flatMapDepth", ()=>_flatMapDepthJsDefault.default
);
parcelHelpers.export(exports, "forEach", ()=>_forEachJsDefault.default
);
parcelHelpers.export(exports, "forEachRight", ()=>_forEachRightJsDefault.default
);
parcelHelpers.export(exports, "groupBy", ()=>_groupByJsDefault.default
);
parcelHelpers.export(exports, "includes", ()=>_includesJsDefault.default
);
parcelHelpers.export(exports, "invokeMap", ()=>_invokeMapJsDefault.default
);
parcelHelpers.export(exports, "keyBy", ()=>_keyByJsDefault.default
);
parcelHelpers.export(exports, "map", ()=>_mapJsDefault.default
);
parcelHelpers.export(exports, "orderBy", ()=>_orderByJsDefault.default
);
parcelHelpers.export(exports, "partition", ()=>_partitionJsDefault.default
);
parcelHelpers.export(exports, "reduce", ()=>_reduceJsDefault.default
);
parcelHelpers.export(exports, "reduceRight", ()=>_reduceRightJsDefault.default
);
parcelHelpers.export(exports, "reject", ()=>_rejectJsDefault.default
);
parcelHelpers.export(exports, "sample", ()=>_sampleJsDefault.default
);
parcelHelpers.export(exports, "sampleSize", ()=>_sampleSizeJsDefault.default
);
parcelHelpers.export(exports, "shuffle", ()=>_shuffleJsDefault.default
);
parcelHelpers.export(exports, "size", ()=>_sizeJsDefault.default
);
parcelHelpers.export(exports, "some", ()=>_someJsDefault.default
);
parcelHelpers.export(exports, "sortBy", ()=>_sortByJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_collectionDefaultJsDefault.default
);
var _countByJs = require("./countBy.js");
var _countByJsDefault = parcelHelpers.interopDefault(_countByJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _eachRightJs = require("./eachRight.js");
var _eachRightJsDefault = parcelHelpers.interopDefault(_eachRightJs);
var _everyJs = require("./every.js");
var _everyJsDefault = parcelHelpers.interopDefault(_everyJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _findLastJs = require("./findLast.js");
var _findLastJsDefault = parcelHelpers.interopDefault(_findLastJs);
var _flatMapJs = require("./flatMap.js");
var _flatMapJsDefault = parcelHelpers.interopDefault(_flatMapJs);
var _flatMapDeepJs = require("./flatMapDeep.js");
var _flatMapDeepJsDefault = parcelHelpers.interopDefault(_flatMapDeepJs);
var _flatMapDepthJs = require("./flatMapDepth.js");
var _flatMapDepthJsDefault = parcelHelpers.interopDefault(_flatMapDepthJs);
var _forEachJs = require("./forEach.js");
var _forEachJsDefault = parcelHelpers.interopDefault(_forEachJs);
var _forEachRightJs = require("./forEachRight.js");
var _forEachRightJsDefault = parcelHelpers.interopDefault(_forEachRightJs);
var _groupByJs = require("./groupBy.js");
var _groupByJsDefault = parcelHelpers.interopDefault(_groupByJs);
var _includesJs = require("./includes.js");
var _includesJsDefault = parcelHelpers.interopDefault(_includesJs);
var _invokeMapJs = require("./invokeMap.js");
var _invokeMapJsDefault = parcelHelpers.interopDefault(_invokeMapJs);
var _keyByJs = require("./keyBy.js");
var _keyByJsDefault = parcelHelpers.interopDefault(_keyByJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _orderByJs = require("./orderBy.js");
var _orderByJsDefault = parcelHelpers.interopDefault(_orderByJs);
var _partitionJs = require("./partition.js");
var _partitionJsDefault = parcelHelpers.interopDefault(_partitionJs);
var _reduceJs = require("./reduce.js");
var _reduceJsDefault = parcelHelpers.interopDefault(_reduceJs);
var _reduceRightJs = require("./reduceRight.js");
var _reduceRightJsDefault = parcelHelpers.interopDefault(_reduceRightJs);
var _rejectJs = require("./reject.js");
var _rejectJsDefault = parcelHelpers.interopDefault(_rejectJs);
var _sampleJs = require("./sample.js");
var _sampleJsDefault = parcelHelpers.interopDefault(_sampleJs);
var _sampleSizeJs = require("./sampleSize.js");
var _sampleSizeJsDefault = parcelHelpers.interopDefault(_sampleSizeJs);
var _shuffleJs = require("./shuffle.js");
var _shuffleJsDefault = parcelHelpers.interopDefault(_shuffleJs);
var _sizeJs = require("./size.js");
var _sizeJsDefault = parcelHelpers.interopDefault(_sizeJs);
var _someJs = require("./some.js");
var _someJsDefault = parcelHelpers.interopDefault(_someJs);
var _sortByJs = require("./sortBy.js");
var _sortByJsDefault = parcelHelpers.interopDefault(_sortByJs);
var _collectionDefaultJs = require("./collection.default.js");
var _collectionDefaultJsDefault = parcelHelpers.interopDefault(_collectionDefaultJs);

},{"./countBy.js":"45iHO","./each.js":"mIhlP","./eachRight.js":"da27m","./every.js":"a4oI7","./filter.js":"a6Bax","./find.js":"53X6i","./findLast.js":"lGU8L","./flatMap.js":"9iEVp","./flatMapDeep.js":"bSuHQ","./flatMapDepth.js":"9Kt9L","./forEach.js":"bCmxz","./forEachRight.js":"e4t4U","./groupBy.js":"6j2ap","./includes.js":"70WvX","./invokeMap.js":"gynst","./keyBy.js":"pGTr8","./map.js":"2jjVU","./orderBy.js":"gyxQe","./partition.js":"8Ci7G","./reduce.js":"dYEXo","./reduceRight.js":"gwBXk","./reject.js":"9h1ez","./sample.js":"jEj1E","./sampleSize.js":"jj60k","./shuffle.js":"geZjV","./size.js":"deADP","./some.js":"52iYS","./sortBy.js":"j1LMa","./collection.default.js":"5AjCG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5AjCG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _countByJs = require("./countBy.js");
var _countByJsDefault = parcelHelpers.interopDefault(_countByJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _eachRightJs = require("./eachRight.js");
var _eachRightJsDefault = parcelHelpers.interopDefault(_eachRightJs);
var _everyJs = require("./every.js");
var _everyJsDefault = parcelHelpers.interopDefault(_everyJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _findLastJs = require("./findLast.js");
var _findLastJsDefault = parcelHelpers.interopDefault(_findLastJs);
var _flatMapJs = require("./flatMap.js");
var _flatMapJsDefault = parcelHelpers.interopDefault(_flatMapJs);
var _flatMapDeepJs = require("./flatMapDeep.js");
var _flatMapDeepJsDefault = parcelHelpers.interopDefault(_flatMapDeepJs);
var _flatMapDepthJs = require("./flatMapDepth.js");
var _flatMapDepthJsDefault = parcelHelpers.interopDefault(_flatMapDepthJs);
var _forEachJs = require("./forEach.js");
var _forEachJsDefault = parcelHelpers.interopDefault(_forEachJs);
var _forEachRightJs = require("./forEachRight.js");
var _forEachRightJsDefault = parcelHelpers.interopDefault(_forEachRightJs);
var _groupByJs = require("./groupBy.js");
var _groupByJsDefault = parcelHelpers.interopDefault(_groupByJs);
var _includesJs = require("./includes.js");
var _includesJsDefault = parcelHelpers.interopDefault(_includesJs);
var _invokeMapJs = require("./invokeMap.js");
var _invokeMapJsDefault = parcelHelpers.interopDefault(_invokeMapJs);
var _keyByJs = require("./keyBy.js");
var _keyByJsDefault = parcelHelpers.interopDefault(_keyByJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _orderByJs = require("./orderBy.js");
var _orderByJsDefault = parcelHelpers.interopDefault(_orderByJs);
var _partitionJs = require("./partition.js");
var _partitionJsDefault = parcelHelpers.interopDefault(_partitionJs);
var _reduceJs = require("./reduce.js");
var _reduceJsDefault = parcelHelpers.interopDefault(_reduceJs);
var _reduceRightJs = require("./reduceRight.js");
var _reduceRightJsDefault = parcelHelpers.interopDefault(_reduceRightJs);
var _rejectJs = require("./reject.js");
var _rejectJsDefault = parcelHelpers.interopDefault(_rejectJs);
var _sampleJs = require("./sample.js");
var _sampleJsDefault = parcelHelpers.interopDefault(_sampleJs);
var _sampleSizeJs = require("./sampleSize.js");
var _sampleSizeJsDefault = parcelHelpers.interopDefault(_sampleSizeJs);
var _shuffleJs = require("./shuffle.js");
var _shuffleJsDefault = parcelHelpers.interopDefault(_shuffleJs);
var _sizeJs = require("./size.js");
var _sizeJsDefault = parcelHelpers.interopDefault(_sizeJs);
var _someJs = require("./some.js");
var _someJsDefault = parcelHelpers.interopDefault(_someJs);
var _sortByJs = require("./sortBy.js");
var _sortByJsDefault = parcelHelpers.interopDefault(_sortByJs);
exports.default = {
    countBy: _countByJsDefault.default,
    each: _eachJsDefault.default,
    eachRight: _eachRightJsDefault.default,
    every: _everyJsDefault.default,
    filter: _filterJsDefault.default,
    find: _findJsDefault.default,
    findLast: _findLastJsDefault.default,
    flatMap: _flatMapJsDefault.default,
    flatMapDeep: _flatMapDeepJsDefault.default,
    flatMapDepth: _flatMapDepthJsDefault.default,
    forEach: _forEachJsDefault.default,
    forEachRight: _forEachRightJsDefault.default,
    groupBy: _groupByJsDefault.default,
    includes: _includesJsDefault.default,
    invokeMap: _invokeMapJsDefault.default,
    keyBy: _keyByJsDefault.default,
    map: _mapJsDefault.default,
    orderBy: _orderByJsDefault.default,
    partition: _partitionJsDefault.default,
    reduce: _reduceJsDefault.default,
    reduceRight: _reduceRightJsDefault.default,
    reject: _rejectJsDefault.default,
    sample: _sampleJsDefault.default,
    sampleSize: _sampleSizeJsDefault.default,
    shuffle: _shuffleJsDefault.default,
    size: _sizeJsDefault.default,
    some: _someJsDefault.default,
    sortBy: _sortByJsDefault.default
};

},{"./countBy.js":"45iHO","./each.js":"mIhlP","./eachRight.js":"da27m","./every.js":"a4oI7","./filter.js":"a6Bax","./find.js":"53X6i","./findLast.js":"lGU8L","./flatMap.js":"9iEVp","./flatMapDeep.js":"bSuHQ","./flatMapDepth.js":"9Kt9L","./forEach.js":"bCmxz","./forEachRight.js":"e4t4U","./groupBy.js":"6j2ap","./includes.js":"70WvX","./invokeMap.js":"gynst","./keyBy.js":"pGTr8","./map.js":"2jjVU","./orderBy.js":"gyxQe","./partition.js":"8Ci7G","./reduce.js":"dYEXo","./reduceRight.js":"gwBXk","./reject.js":"9h1ez","./sample.js":"jEj1E","./sampleSize.js":"jj60k","./shuffle.js":"geZjV","./size.js":"deADP","./some.js":"52iYS","./sortBy.js":"j1LMa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lRVMh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "now", ()=>_nowJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_dateDefaultJsDefault.default
);
var _nowJs = require("./now.js");
var _nowJsDefault = parcelHelpers.interopDefault(_nowJs);
var _dateDefaultJs = require("./date.default.js");
var _dateDefaultJsDefault = parcelHelpers.interopDefault(_dateDefaultJs);

},{"./now.js":"aHjJy","./date.default.js":"kBpsE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kBpsE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nowJs = require("./now.js");
var _nowJsDefault = parcelHelpers.interopDefault(_nowJs);
exports.default = {
    now: _nowJsDefault.default
};

},{"./now.js":"aHjJy","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hzTc5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "after", ()=>_afterJsDefault.default
);
parcelHelpers.export(exports, "ary", ()=>_aryJsDefault.default
);
parcelHelpers.export(exports, "before", ()=>_beforeJsDefault.default
);
parcelHelpers.export(exports, "bind", ()=>_bindJsDefault.default
);
parcelHelpers.export(exports, "bindKey", ()=>_bindKeyJsDefault.default
);
parcelHelpers.export(exports, "curry", ()=>_curryJsDefault.default
);
parcelHelpers.export(exports, "curryRight", ()=>_curryRightJsDefault.default
);
parcelHelpers.export(exports, "debounce", ()=>_debounceJsDefault.default
);
parcelHelpers.export(exports, "defer", ()=>_deferJsDefault.default
);
parcelHelpers.export(exports, "delay", ()=>_delayJsDefault.default
);
parcelHelpers.export(exports, "flip", ()=>_flipJsDefault.default
);
parcelHelpers.export(exports, "memoize", ()=>_memoizeJsDefault.default
);
parcelHelpers.export(exports, "negate", ()=>_negateJsDefault.default
);
parcelHelpers.export(exports, "once", ()=>_onceJsDefault.default
);
parcelHelpers.export(exports, "overArgs", ()=>_overArgsJsDefault.default
);
parcelHelpers.export(exports, "partial", ()=>_partialJsDefault.default
);
parcelHelpers.export(exports, "partialRight", ()=>_partialRightJsDefault.default
);
parcelHelpers.export(exports, "rearg", ()=>_reargJsDefault.default
);
parcelHelpers.export(exports, "rest", ()=>_restJsDefault.default
);
parcelHelpers.export(exports, "spread", ()=>_spreadJsDefault.default
);
parcelHelpers.export(exports, "throttle", ()=>_throttleJsDefault.default
);
parcelHelpers.export(exports, "unary", ()=>_unaryJsDefault.default
);
parcelHelpers.export(exports, "wrap", ()=>_wrapJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_functionDefaultJsDefault.default
);
var _afterJs = require("./after.js");
var _afterJsDefault = parcelHelpers.interopDefault(_afterJs);
var _aryJs = require("./ary.js");
var _aryJsDefault = parcelHelpers.interopDefault(_aryJs);
var _beforeJs = require("./before.js");
var _beforeJsDefault = parcelHelpers.interopDefault(_beforeJs);
var _bindJs = require("./bind.js");
var _bindJsDefault = parcelHelpers.interopDefault(_bindJs);
var _bindKeyJs = require("./bindKey.js");
var _bindKeyJsDefault = parcelHelpers.interopDefault(_bindKeyJs);
var _curryJs = require("./curry.js");
var _curryJsDefault = parcelHelpers.interopDefault(_curryJs);
var _curryRightJs = require("./curryRight.js");
var _curryRightJsDefault = parcelHelpers.interopDefault(_curryRightJs);
var _debounceJs = require("./debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _deferJs = require("./defer.js");
var _deferJsDefault = parcelHelpers.interopDefault(_deferJs);
var _delayJs = require("./delay.js");
var _delayJsDefault = parcelHelpers.interopDefault(_delayJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _memoizeJs = require("./memoize.js");
var _memoizeJsDefault = parcelHelpers.interopDefault(_memoizeJs);
var _negateJs = require("./negate.js");
var _negateJsDefault = parcelHelpers.interopDefault(_negateJs);
var _onceJs = require("./once.js");
var _onceJsDefault = parcelHelpers.interopDefault(_onceJs);
var _overArgsJs = require("./overArgs.js");
var _overArgsJsDefault = parcelHelpers.interopDefault(_overArgsJs);
var _partialJs = require("./partial.js");
var _partialJsDefault = parcelHelpers.interopDefault(_partialJs);
var _partialRightJs = require("./partialRight.js");
var _partialRightJsDefault = parcelHelpers.interopDefault(_partialRightJs);
var _reargJs = require("./rearg.js");
var _reargJsDefault = parcelHelpers.interopDefault(_reargJs);
var _restJs = require("./rest.js");
var _restJsDefault = parcelHelpers.interopDefault(_restJs);
var _spreadJs = require("./spread.js");
var _spreadJsDefault = parcelHelpers.interopDefault(_spreadJs);
var _throttleJs = require("./throttle.js");
var _throttleJsDefault = parcelHelpers.interopDefault(_throttleJs);
var _unaryJs = require("./unary.js");
var _unaryJsDefault = parcelHelpers.interopDefault(_unaryJs);
var _wrapJs = require("./wrap.js");
var _wrapJsDefault = parcelHelpers.interopDefault(_wrapJs);
var _functionDefaultJs = require("./function.default.js");
var _functionDefaultJsDefault = parcelHelpers.interopDefault(_functionDefaultJs);

},{"./after.js":"hDjR2","./ary.js":"buIy2","./before.js":"12IeX","./bind.js":"41ULs","./bindKey.js":"bhMDu","./curry.js":"sHOcy","./curryRight.js":"cZ5bV","./debounce.js":"dgroW","./defer.js":"9itZG","./delay.js":"lM266","./flip.js":"fyJZi","./memoize.js":"1d29b","./negate.js":"7g9li","./once.js":"7moj2","./overArgs.js":"2Q39E","./partial.js":"cUFQ0","./partialRight.js":"6mDsd","./rearg.js":"gIgPN","./rest.js":"eLF2v","./spread.js":"g2dsa","./throttle.js":"d5icF","./unary.js":"9TV6B","./wrap.js":"an6Ep","./function.default.js":"js4JN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"js4JN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _afterJs = require("./after.js");
var _afterJsDefault = parcelHelpers.interopDefault(_afterJs);
var _aryJs = require("./ary.js");
var _aryJsDefault = parcelHelpers.interopDefault(_aryJs);
var _beforeJs = require("./before.js");
var _beforeJsDefault = parcelHelpers.interopDefault(_beforeJs);
var _bindJs = require("./bind.js");
var _bindJsDefault = parcelHelpers.interopDefault(_bindJs);
var _bindKeyJs = require("./bindKey.js");
var _bindKeyJsDefault = parcelHelpers.interopDefault(_bindKeyJs);
var _curryJs = require("./curry.js");
var _curryJsDefault = parcelHelpers.interopDefault(_curryJs);
var _curryRightJs = require("./curryRight.js");
var _curryRightJsDefault = parcelHelpers.interopDefault(_curryRightJs);
var _debounceJs = require("./debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _deferJs = require("./defer.js");
var _deferJsDefault = parcelHelpers.interopDefault(_deferJs);
var _delayJs = require("./delay.js");
var _delayJsDefault = parcelHelpers.interopDefault(_delayJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _memoizeJs = require("./memoize.js");
var _memoizeJsDefault = parcelHelpers.interopDefault(_memoizeJs);
var _negateJs = require("./negate.js");
var _negateJsDefault = parcelHelpers.interopDefault(_negateJs);
var _onceJs = require("./once.js");
var _onceJsDefault = parcelHelpers.interopDefault(_onceJs);
var _overArgsJs = require("./overArgs.js");
var _overArgsJsDefault = parcelHelpers.interopDefault(_overArgsJs);
var _partialJs = require("./partial.js");
var _partialJsDefault = parcelHelpers.interopDefault(_partialJs);
var _partialRightJs = require("./partialRight.js");
var _partialRightJsDefault = parcelHelpers.interopDefault(_partialRightJs);
var _reargJs = require("./rearg.js");
var _reargJsDefault = parcelHelpers.interopDefault(_reargJs);
var _restJs = require("./rest.js");
var _restJsDefault = parcelHelpers.interopDefault(_restJs);
var _spreadJs = require("./spread.js");
var _spreadJsDefault = parcelHelpers.interopDefault(_spreadJs);
var _throttleJs = require("./throttle.js");
var _throttleJsDefault = parcelHelpers.interopDefault(_throttleJs);
var _unaryJs = require("./unary.js");
var _unaryJsDefault = parcelHelpers.interopDefault(_unaryJs);
var _wrapJs = require("./wrap.js");
var _wrapJsDefault = parcelHelpers.interopDefault(_wrapJs);
exports.default = {
    after: _afterJsDefault.default,
    ary: _aryJsDefault.default,
    before: _beforeJsDefault.default,
    bind: _bindJsDefault.default,
    bindKey: _bindKeyJsDefault.default,
    curry: _curryJsDefault.default,
    curryRight: _curryRightJsDefault.default,
    debounce: _debounceJsDefault.default,
    defer: _deferJsDefault.default,
    delay: _delayJsDefault.default,
    flip: _flipJsDefault.default,
    memoize: _memoizeJsDefault.default,
    negate: _negateJsDefault.default,
    once: _onceJsDefault.default,
    overArgs: _overArgsJsDefault.default,
    partial: _partialJsDefault.default,
    partialRight: _partialRightJsDefault.default,
    rearg: _reargJsDefault.default,
    rest: _restJsDefault.default,
    spread: _spreadJsDefault.default,
    throttle: _throttleJsDefault.default,
    unary: _unaryJsDefault.default,
    wrap: _wrapJsDefault.default
};

},{"./after.js":"hDjR2","./ary.js":"buIy2","./before.js":"12IeX","./bind.js":"41ULs","./bindKey.js":"bhMDu","./curry.js":"sHOcy","./curryRight.js":"cZ5bV","./debounce.js":"dgroW","./defer.js":"9itZG","./delay.js":"lM266","./flip.js":"fyJZi","./memoize.js":"1d29b","./negate.js":"7g9li","./once.js":"7moj2","./overArgs.js":"2Q39E","./partial.js":"cUFQ0","./partialRight.js":"6mDsd","./rearg.js":"gIgPN","./rest.js":"eLF2v","./spread.js":"g2dsa","./throttle.js":"d5icF","./unary.js":"9TV6B","./wrap.js":"an6Ep","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8Rh9w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "castArray", ()=>_castArrayJsDefault.default
);
parcelHelpers.export(exports, "clone", ()=>_cloneJsDefault.default
);
parcelHelpers.export(exports, "cloneDeep", ()=>_cloneDeepJsDefault.default
);
parcelHelpers.export(exports, "cloneDeepWith", ()=>_cloneDeepWithJsDefault.default
);
parcelHelpers.export(exports, "cloneWith", ()=>_cloneWithJsDefault.default
);
parcelHelpers.export(exports, "conformsTo", ()=>_conformsToJsDefault.default
);
parcelHelpers.export(exports, "eq", ()=>_eqJsDefault.default
);
parcelHelpers.export(exports, "gt", ()=>_gtJsDefault.default
);
parcelHelpers.export(exports, "gte", ()=>_gteJsDefault.default
);
parcelHelpers.export(exports, "isArguments", ()=>_isArgumentsJsDefault.default
);
parcelHelpers.export(exports, "isArray", ()=>_isArrayJsDefault.default
);
parcelHelpers.export(exports, "isArrayBuffer", ()=>_isArrayBufferJsDefault.default
);
parcelHelpers.export(exports, "isArrayLike", ()=>_isArrayLikeJsDefault.default
);
parcelHelpers.export(exports, "isArrayLikeObject", ()=>_isArrayLikeObjectJsDefault.default
);
parcelHelpers.export(exports, "isBoolean", ()=>_isBooleanJsDefault.default
);
parcelHelpers.export(exports, "isBuffer", ()=>_isBufferJsDefault.default
);
parcelHelpers.export(exports, "isDate", ()=>_isDateJsDefault.default
);
parcelHelpers.export(exports, "isElement", ()=>_isElementJsDefault.default
);
parcelHelpers.export(exports, "isEmpty", ()=>_isEmptyJsDefault.default
);
parcelHelpers.export(exports, "isEqual", ()=>_isEqualJsDefault.default
);
parcelHelpers.export(exports, "isEqualWith", ()=>_isEqualWithJsDefault.default
);
parcelHelpers.export(exports, "isError", ()=>_isErrorJsDefault.default
);
parcelHelpers.export(exports, "isFinite", ()=>_isFiniteJsDefault.default
);
parcelHelpers.export(exports, "isFunction", ()=>_isFunctionJsDefault.default
);
parcelHelpers.export(exports, "isInteger", ()=>_isIntegerJsDefault.default
);
parcelHelpers.export(exports, "isLength", ()=>_isLengthJsDefault.default
);
parcelHelpers.export(exports, "isMap", ()=>_isMapJsDefault.default
);
parcelHelpers.export(exports, "isMatch", ()=>_isMatchJsDefault.default
);
parcelHelpers.export(exports, "isMatchWith", ()=>_isMatchWithJsDefault.default
);
parcelHelpers.export(exports, "isNaN", ()=>_isNaNJsDefault.default
);
parcelHelpers.export(exports, "isNative", ()=>_isNativeJsDefault.default
);
parcelHelpers.export(exports, "isNil", ()=>_isNilJsDefault.default
);
parcelHelpers.export(exports, "isNull", ()=>_isNullJsDefault.default
);
parcelHelpers.export(exports, "isNumber", ()=>_isNumberJsDefault.default
);
parcelHelpers.export(exports, "isObject", ()=>_isObjectJsDefault.default
);
parcelHelpers.export(exports, "isObjectLike", ()=>_isObjectLikeJsDefault.default
);
parcelHelpers.export(exports, "isPlainObject", ()=>_isPlainObjectJsDefault.default
);
parcelHelpers.export(exports, "isRegExp", ()=>_isRegExpJsDefault.default
);
parcelHelpers.export(exports, "isSafeInteger", ()=>_isSafeIntegerJsDefault.default
);
parcelHelpers.export(exports, "isSet", ()=>_isSetJsDefault.default
);
parcelHelpers.export(exports, "isString", ()=>_isStringJsDefault.default
);
parcelHelpers.export(exports, "isSymbol", ()=>_isSymbolJsDefault.default
);
parcelHelpers.export(exports, "isTypedArray", ()=>_isTypedArrayJsDefault.default
);
parcelHelpers.export(exports, "isUndefined", ()=>_isUndefinedJsDefault.default
);
parcelHelpers.export(exports, "isWeakMap", ()=>_isWeakMapJsDefault.default
);
parcelHelpers.export(exports, "isWeakSet", ()=>_isWeakSetJsDefault.default
);
parcelHelpers.export(exports, "lt", ()=>_ltJsDefault.default
);
parcelHelpers.export(exports, "lte", ()=>_lteJsDefault.default
);
parcelHelpers.export(exports, "toArray", ()=>_toArrayJsDefault.default
);
parcelHelpers.export(exports, "toFinite", ()=>_toFiniteJsDefault.default
);
parcelHelpers.export(exports, "toInteger", ()=>_toIntegerJsDefault.default
);
parcelHelpers.export(exports, "toLength", ()=>_toLengthJsDefault.default
);
parcelHelpers.export(exports, "toNumber", ()=>_toNumberJsDefault.default
);
parcelHelpers.export(exports, "toPlainObject", ()=>_toPlainObjectJsDefault.default
);
parcelHelpers.export(exports, "toSafeInteger", ()=>_toSafeIntegerJsDefault.default
);
parcelHelpers.export(exports, "toString", ()=>_toStringJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_langDefaultJsDefault.default
);
var _castArrayJs = require("./castArray.js");
var _castArrayJsDefault = parcelHelpers.interopDefault(_castArrayJs);
var _cloneJs = require("./clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _cloneDeepJs = require("./cloneDeep.js");
var _cloneDeepJsDefault = parcelHelpers.interopDefault(_cloneDeepJs);
var _cloneDeepWithJs = require("./cloneDeepWith.js");
var _cloneDeepWithJsDefault = parcelHelpers.interopDefault(_cloneDeepWithJs);
var _cloneWithJs = require("./cloneWith.js");
var _cloneWithJsDefault = parcelHelpers.interopDefault(_cloneWithJs);
var _conformsToJs = require("./conformsTo.js");
var _conformsToJsDefault = parcelHelpers.interopDefault(_conformsToJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
var _gtJs = require("./gt.js");
var _gtJsDefault = parcelHelpers.interopDefault(_gtJs);
var _gteJs = require("./gte.js");
var _gteJsDefault = parcelHelpers.interopDefault(_gteJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isArrayBufferJs = require("./isArrayBuffer.js");
var _isArrayBufferJsDefault = parcelHelpers.interopDefault(_isArrayBufferJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _isBooleanJs = require("./isBoolean.js");
var _isBooleanJsDefault = parcelHelpers.interopDefault(_isBooleanJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isDateJs = require("./isDate.js");
var _isDateJsDefault = parcelHelpers.interopDefault(_isDateJs);
var _isElementJs = require("./isElement.js");
var _isElementJsDefault = parcelHelpers.interopDefault(_isElementJs);
var _isEmptyJs = require("./isEmpty.js");
var _isEmptyJsDefault = parcelHelpers.interopDefault(_isEmptyJs);
var _isEqualJs = require("./isEqual.js");
var _isEqualJsDefault = parcelHelpers.interopDefault(_isEqualJs);
var _isEqualWithJs = require("./isEqualWith.js");
var _isEqualWithJsDefault = parcelHelpers.interopDefault(_isEqualWithJs);
var _isErrorJs = require("./isError.js");
var _isErrorJsDefault = parcelHelpers.interopDefault(_isErrorJs);
var _isFiniteJs = require("./isFinite.js");
var _isFiniteJsDefault = parcelHelpers.interopDefault(_isFiniteJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isIntegerJs = require("./isInteger.js");
var _isIntegerJsDefault = parcelHelpers.interopDefault(_isIntegerJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
var _isMapJs = require("./isMap.js");
var _isMapJsDefault = parcelHelpers.interopDefault(_isMapJs);
var _isMatchJs = require("./isMatch.js");
var _isMatchJsDefault = parcelHelpers.interopDefault(_isMatchJs);
var _isMatchWithJs = require("./isMatchWith.js");
var _isMatchWithJsDefault = parcelHelpers.interopDefault(_isMatchWithJs);
var _isNaNJs = require("./isNaN.js");
var _isNaNJsDefault = parcelHelpers.interopDefault(_isNaNJs);
var _isNativeJs = require("./isNative.js");
var _isNativeJsDefault = parcelHelpers.interopDefault(_isNativeJs);
var _isNilJs = require("./isNil.js");
var _isNilJsDefault = parcelHelpers.interopDefault(_isNilJs);
var _isNullJs = require("./isNull.js");
var _isNullJsDefault = parcelHelpers.interopDefault(_isNullJs);
var _isNumberJs = require("./isNumber.js");
var _isNumberJsDefault = parcelHelpers.interopDefault(_isNumberJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
var _isPlainObjectJs = require("./isPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
var _isRegExpJs = require("./isRegExp.js");
var _isRegExpJsDefault = parcelHelpers.interopDefault(_isRegExpJs);
var _isSafeIntegerJs = require("./isSafeInteger.js");
var _isSafeIntegerJsDefault = parcelHelpers.interopDefault(_isSafeIntegerJs);
var _isSetJs = require("./isSet.js");
var _isSetJsDefault = parcelHelpers.interopDefault(_isSetJs);
var _isStringJs = require("./isString.js");
var _isStringJsDefault = parcelHelpers.interopDefault(_isStringJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
var _isUndefinedJs = require("./isUndefined.js");
var _isUndefinedJsDefault = parcelHelpers.interopDefault(_isUndefinedJs);
var _isWeakMapJs = require("./isWeakMap.js");
var _isWeakMapJsDefault = parcelHelpers.interopDefault(_isWeakMapJs);
var _isWeakSetJs = require("./isWeakSet.js");
var _isWeakSetJsDefault = parcelHelpers.interopDefault(_isWeakSetJs);
var _ltJs = require("./lt.js");
var _ltJsDefault = parcelHelpers.interopDefault(_ltJs);
var _lteJs = require("./lte.js");
var _lteJsDefault = parcelHelpers.interopDefault(_lteJs);
var _toArrayJs = require("./toArray.js");
var _toArrayJsDefault = parcelHelpers.interopDefault(_toArrayJs);
var _toFiniteJs = require("./toFinite.js");
var _toFiniteJsDefault = parcelHelpers.interopDefault(_toFiniteJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toLengthJs = require("./toLength.js");
var _toLengthJsDefault = parcelHelpers.interopDefault(_toLengthJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
var _toPlainObjectJs = require("./toPlainObject.js");
var _toPlainObjectJsDefault = parcelHelpers.interopDefault(_toPlainObjectJs);
var _toSafeIntegerJs = require("./toSafeInteger.js");
var _toSafeIntegerJsDefault = parcelHelpers.interopDefault(_toSafeIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
var _langDefaultJs = require("./lang.default.js");
var _langDefaultJsDefault = parcelHelpers.interopDefault(_langDefaultJs);

},{"./castArray.js":"fYgXC","./clone.js":"cM6tT","./cloneDeep.js":"gqrPs","./cloneDeepWith.js":"6sZ5p","./cloneWith.js":"49X9q","./conformsTo.js":"3cwvY","./eq.js":"1PtGj","./gt.js":"k8AO5","./gte.js":"hjsUD","./isArguments.js":"bCq5F","./isArray.js":"aM5De","./isArrayBuffer.js":"gyupv","./isArrayLike.js":"5oD0E","./isArrayLikeObject.js":"7pSqJ","./isBoolean.js":"efxLR","./isBuffer.js":"5zLdt","./isDate.js":"kKAeM","./isElement.js":"ioFiY","./isEmpty.js":"dL2SH","./isEqual.js":"eR5BF","./isEqualWith.js":"gow7r","./isError.js":"c9Nxf","./isFinite.js":"6Q6di","./isFunction.js":"flqKI","./isInteger.js":"19KFx","./isLength.js":"8LHjk","./isMap.js":"aTCvg","./isMatch.js":"624E0","./isMatchWith.js":"jOdji","./isNaN.js":"hFSO6","./isNative.js":"9xeht","./isNil.js":"hACpm","./isNull.js":"4OqX5","./isNumber.js":"5Ybx7","./isObject.js":"1IOOk","./isObjectLike.js":"KrkRc","./isPlainObject.js":"bA6mR","./isRegExp.js":"mkI2R","./isSafeInteger.js":"hsB1y","./isSet.js":"gu32A","./isString.js":"jLC5S","./isSymbol.js":"5Ijw9","./isTypedArray.js":"4zD9H","./isUndefined.js":"2mxpV","./isWeakMap.js":"fkEwZ","./isWeakSet.js":"fbaJM","./lt.js":"fFOPj","./lte.js":"2JrKG","./toArray.js":"9ylTH","./toFinite.js":"he24v","./toInteger.js":"69J4a","./toLength.js":"agxNV","./toNumber.js":"laU14","./toPlainObject.js":"ZojMJ","./toSafeInteger.js":"74MCf","./toString.js":"fzVGZ","./lang.default.js":"lJXzN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lJXzN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _castArrayJs = require("./castArray.js");
var _castArrayJsDefault = parcelHelpers.interopDefault(_castArrayJs);
var _cloneJs = require("./clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _cloneDeepJs = require("./cloneDeep.js");
var _cloneDeepJsDefault = parcelHelpers.interopDefault(_cloneDeepJs);
var _cloneDeepWithJs = require("./cloneDeepWith.js");
var _cloneDeepWithJsDefault = parcelHelpers.interopDefault(_cloneDeepWithJs);
var _cloneWithJs = require("./cloneWith.js");
var _cloneWithJsDefault = parcelHelpers.interopDefault(_cloneWithJs);
var _conformsToJs = require("./conformsTo.js");
var _conformsToJsDefault = parcelHelpers.interopDefault(_conformsToJs);
var _eqJs = require("./eq.js");
var _eqJsDefault = parcelHelpers.interopDefault(_eqJs);
var _gtJs = require("./gt.js");
var _gtJsDefault = parcelHelpers.interopDefault(_gtJs);
var _gteJs = require("./gte.js");
var _gteJsDefault = parcelHelpers.interopDefault(_gteJs);
var _isArgumentsJs = require("./isArguments.js");
var _isArgumentsJsDefault = parcelHelpers.interopDefault(_isArgumentsJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _isArrayBufferJs = require("./isArrayBuffer.js");
var _isArrayBufferJsDefault = parcelHelpers.interopDefault(_isArrayBufferJs);
var _isArrayLikeJs = require("./isArrayLike.js");
var _isArrayLikeJsDefault = parcelHelpers.interopDefault(_isArrayLikeJs);
var _isArrayLikeObjectJs = require("./isArrayLikeObject.js");
var _isArrayLikeObjectJsDefault = parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _isBooleanJs = require("./isBoolean.js");
var _isBooleanJsDefault = parcelHelpers.interopDefault(_isBooleanJs);
var _isBufferJs = require("./isBuffer.js");
var _isBufferJsDefault = parcelHelpers.interopDefault(_isBufferJs);
var _isDateJs = require("./isDate.js");
var _isDateJsDefault = parcelHelpers.interopDefault(_isDateJs);
var _isElementJs = require("./isElement.js");
var _isElementJsDefault = parcelHelpers.interopDefault(_isElementJs);
var _isEmptyJs = require("./isEmpty.js");
var _isEmptyJsDefault = parcelHelpers.interopDefault(_isEmptyJs);
var _isEqualJs = require("./isEqual.js");
var _isEqualJsDefault = parcelHelpers.interopDefault(_isEqualJs);
var _isEqualWithJs = require("./isEqualWith.js");
var _isEqualWithJsDefault = parcelHelpers.interopDefault(_isEqualWithJs);
var _isErrorJs = require("./isError.js");
var _isErrorJsDefault = parcelHelpers.interopDefault(_isErrorJs);
var _isFiniteJs = require("./isFinite.js");
var _isFiniteJsDefault = parcelHelpers.interopDefault(_isFiniteJs);
var _isFunctionJs = require("./isFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isIntegerJs = require("./isInteger.js");
var _isIntegerJsDefault = parcelHelpers.interopDefault(_isIntegerJs);
var _isLengthJs = require("./isLength.js");
var _isLengthJsDefault = parcelHelpers.interopDefault(_isLengthJs);
var _isMapJs = require("./isMap.js");
var _isMapJsDefault = parcelHelpers.interopDefault(_isMapJs);
var _isMatchJs = require("./isMatch.js");
var _isMatchJsDefault = parcelHelpers.interopDefault(_isMatchJs);
var _isMatchWithJs = require("./isMatchWith.js");
var _isMatchWithJsDefault = parcelHelpers.interopDefault(_isMatchWithJs);
var _isNaNJs = require("./isNaN.js");
var _isNaNJsDefault = parcelHelpers.interopDefault(_isNaNJs);
var _isNativeJs = require("./isNative.js");
var _isNativeJsDefault = parcelHelpers.interopDefault(_isNativeJs);
var _isNilJs = require("./isNil.js");
var _isNilJsDefault = parcelHelpers.interopDefault(_isNilJs);
var _isNullJs = require("./isNull.js");
var _isNullJsDefault = parcelHelpers.interopDefault(_isNullJs);
var _isNumberJs = require("./isNumber.js");
var _isNumberJsDefault = parcelHelpers.interopDefault(_isNumberJs);
var _isObjectJs = require("./isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _isObjectLikeJs = require("./isObjectLike.js");
var _isObjectLikeJsDefault = parcelHelpers.interopDefault(_isObjectLikeJs);
var _isPlainObjectJs = require("./isPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
var _isRegExpJs = require("./isRegExp.js");
var _isRegExpJsDefault = parcelHelpers.interopDefault(_isRegExpJs);
var _isSafeIntegerJs = require("./isSafeInteger.js");
var _isSafeIntegerJsDefault = parcelHelpers.interopDefault(_isSafeIntegerJs);
var _isSetJs = require("./isSet.js");
var _isSetJsDefault = parcelHelpers.interopDefault(_isSetJs);
var _isStringJs = require("./isString.js");
var _isStringJsDefault = parcelHelpers.interopDefault(_isStringJs);
var _isSymbolJs = require("./isSymbol.js");
var _isSymbolJsDefault = parcelHelpers.interopDefault(_isSymbolJs);
var _isTypedArrayJs = require("./isTypedArray.js");
var _isTypedArrayJsDefault = parcelHelpers.interopDefault(_isTypedArrayJs);
var _isUndefinedJs = require("./isUndefined.js");
var _isUndefinedJsDefault = parcelHelpers.interopDefault(_isUndefinedJs);
var _isWeakMapJs = require("./isWeakMap.js");
var _isWeakMapJsDefault = parcelHelpers.interopDefault(_isWeakMapJs);
var _isWeakSetJs = require("./isWeakSet.js");
var _isWeakSetJsDefault = parcelHelpers.interopDefault(_isWeakSetJs);
var _ltJs = require("./lt.js");
var _ltJsDefault = parcelHelpers.interopDefault(_ltJs);
var _lteJs = require("./lte.js");
var _lteJsDefault = parcelHelpers.interopDefault(_lteJs);
var _toArrayJs = require("./toArray.js");
var _toArrayJsDefault = parcelHelpers.interopDefault(_toArrayJs);
var _toFiniteJs = require("./toFinite.js");
var _toFiniteJsDefault = parcelHelpers.interopDefault(_toFiniteJs);
var _toIntegerJs = require("./toInteger.js");
var _toIntegerJsDefault = parcelHelpers.interopDefault(_toIntegerJs);
var _toLengthJs = require("./toLength.js");
var _toLengthJsDefault = parcelHelpers.interopDefault(_toLengthJs);
var _toNumberJs = require("./toNumber.js");
var _toNumberJsDefault = parcelHelpers.interopDefault(_toNumberJs);
var _toPlainObjectJs = require("./toPlainObject.js");
var _toPlainObjectJsDefault = parcelHelpers.interopDefault(_toPlainObjectJs);
var _toSafeIntegerJs = require("./toSafeInteger.js");
var _toSafeIntegerJsDefault = parcelHelpers.interopDefault(_toSafeIntegerJs);
var _toStringJs = require("./toString.js");
var _toStringJsDefault = parcelHelpers.interopDefault(_toStringJs);
exports.default = {
    castArray: _castArrayJsDefault.default,
    clone: _cloneJsDefault.default,
    cloneDeep: _cloneDeepJsDefault.default,
    cloneDeepWith: _cloneDeepWithJsDefault.default,
    cloneWith: _cloneWithJsDefault.default,
    conformsTo: _conformsToJsDefault.default,
    eq: _eqJsDefault.default,
    gt: _gtJsDefault.default,
    gte: _gteJsDefault.default,
    isArguments: _isArgumentsJsDefault.default,
    isArray: _isArrayJsDefault.default,
    isArrayBuffer: _isArrayBufferJsDefault.default,
    isArrayLike: _isArrayLikeJsDefault.default,
    isArrayLikeObject: _isArrayLikeObjectJsDefault.default,
    isBoolean: _isBooleanJsDefault.default,
    isBuffer: _isBufferJsDefault.default,
    isDate: _isDateJsDefault.default,
    isElement: _isElementJsDefault.default,
    isEmpty: _isEmptyJsDefault.default,
    isEqual: _isEqualJsDefault.default,
    isEqualWith: _isEqualWithJsDefault.default,
    isError: _isErrorJsDefault.default,
    isFinite: _isFiniteJsDefault.default,
    isFunction: _isFunctionJsDefault.default,
    isInteger: _isIntegerJsDefault.default,
    isLength: _isLengthJsDefault.default,
    isMap: _isMapJsDefault.default,
    isMatch: _isMatchJsDefault.default,
    isMatchWith: _isMatchWithJsDefault.default,
    isNaN: _isNaNJsDefault.default,
    isNative: _isNativeJsDefault.default,
    isNil: _isNilJsDefault.default,
    isNull: _isNullJsDefault.default,
    isNumber: _isNumberJsDefault.default,
    isObject: _isObjectJsDefault.default,
    isObjectLike: _isObjectLikeJsDefault.default,
    isPlainObject: _isPlainObjectJsDefault.default,
    isRegExp: _isRegExpJsDefault.default,
    isSafeInteger: _isSafeIntegerJsDefault.default,
    isSet: _isSetJsDefault.default,
    isString: _isStringJsDefault.default,
    isSymbol: _isSymbolJsDefault.default,
    isTypedArray: _isTypedArrayJsDefault.default,
    isUndefined: _isUndefinedJsDefault.default,
    isWeakMap: _isWeakMapJsDefault.default,
    isWeakSet: _isWeakSetJsDefault.default,
    lt: _ltJsDefault.default,
    lte: _lteJsDefault.default,
    toArray: _toArrayJsDefault.default,
    toFinite: _toFiniteJsDefault.default,
    toInteger: _toIntegerJsDefault.default,
    toLength: _toLengthJsDefault.default,
    toNumber: _toNumberJsDefault.default,
    toPlainObject: _toPlainObjectJsDefault.default,
    toSafeInteger: _toSafeIntegerJsDefault.default,
    toString: _toStringJsDefault.default
};

},{"./castArray.js":"fYgXC","./clone.js":"cM6tT","./cloneDeep.js":"gqrPs","./cloneDeepWith.js":"6sZ5p","./cloneWith.js":"49X9q","./conformsTo.js":"3cwvY","./eq.js":"1PtGj","./gt.js":"k8AO5","./gte.js":"hjsUD","./isArguments.js":"bCq5F","./isArray.js":"aM5De","./isArrayBuffer.js":"gyupv","./isArrayLike.js":"5oD0E","./isArrayLikeObject.js":"7pSqJ","./isBoolean.js":"efxLR","./isBuffer.js":"5zLdt","./isDate.js":"kKAeM","./isElement.js":"ioFiY","./isEmpty.js":"dL2SH","./isEqual.js":"eR5BF","./isEqualWith.js":"gow7r","./isError.js":"c9Nxf","./isFinite.js":"6Q6di","./isFunction.js":"flqKI","./isInteger.js":"19KFx","./isLength.js":"8LHjk","./isMap.js":"aTCvg","./isMatch.js":"624E0","./isMatchWith.js":"jOdji","./isNaN.js":"hFSO6","./isNative.js":"9xeht","./isNil.js":"hACpm","./isNull.js":"4OqX5","./isNumber.js":"5Ybx7","./isObject.js":"1IOOk","./isObjectLike.js":"KrkRc","./isPlainObject.js":"bA6mR","./isRegExp.js":"mkI2R","./isSafeInteger.js":"hsB1y","./isSet.js":"gu32A","./isString.js":"jLC5S","./isSymbol.js":"5Ijw9","./isTypedArray.js":"4zD9H","./isUndefined.js":"2mxpV","./isWeakMap.js":"fkEwZ","./isWeakSet.js":"fbaJM","./lt.js":"fFOPj","./lte.js":"2JrKG","./toArray.js":"9ylTH","./toFinite.js":"he24v","./toInteger.js":"69J4a","./toLength.js":"agxNV","./toNumber.js":"laU14","./toPlainObject.js":"ZojMJ","./toSafeInteger.js":"74MCf","./toString.js":"fzVGZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eb9cF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "add", ()=>_addJsDefault.default
);
parcelHelpers.export(exports, "ceil", ()=>_ceilJsDefault.default
);
parcelHelpers.export(exports, "divide", ()=>_divideJsDefault.default
);
parcelHelpers.export(exports, "floor", ()=>_floorJsDefault.default
);
parcelHelpers.export(exports, "max", ()=>_maxJsDefault.default
);
parcelHelpers.export(exports, "maxBy", ()=>_maxByJsDefault.default
);
parcelHelpers.export(exports, "mean", ()=>_meanJsDefault.default
);
parcelHelpers.export(exports, "meanBy", ()=>_meanByJsDefault.default
);
parcelHelpers.export(exports, "min", ()=>_minJsDefault.default
);
parcelHelpers.export(exports, "minBy", ()=>_minByJsDefault.default
);
parcelHelpers.export(exports, "multiply", ()=>_multiplyJsDefault.default
);
parcelHelpers.export(exports, "round", ()=>_roundJsDefault.default
);
parcelHelpers.export(exports, "subtract", ()=>_subtractJsDefault.default
);
parcelHelpers.export(exports, "sum", ()=>_sumJsDefault.default
);
parcelHelpers.export(exports, "sumBy", ()=>_sumByJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_mathDefaultJsDefault.default
);
var _addJs = require("./add.js");
var _addJsDefault = parcelHelpers.interopDefault(_addJs);
var _ceilJs = require("./ceil.js");
var _ceilJsDefault = parcelHelpers.interopDefault(_ceilJs);
var _divideJs = require("./divide.js");
var _divideJsDefault = parcelHelpers.interopDefault(_divideJs);
var _floorJs = require("./floor.js");
var _floorJsDefault = parcelHelpers.interopDefault(_floorJs);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxByJs = require("./maxBy.js");
var _maxByJsDefault = parcelHelpers.interopDefault(_maxByJs);
var _meanJs = require("./mean.js");
var _meanJsDefault = parcelHelpers.interopDefault(_meanJs);
var _meanByJs = require("./meanBy.js");
var _meanByJsDefault = parcelHelpers.interopDefault(_meanByJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minByJs = require("./minBy.js");
var _minByJsDefault = parcelHelpers.interopDefault(_minByJs);
var _multiplyJs = require("./multiply.js");
var _multiplyJsDefault = parcelHelpers.interopDefault(_multiplyJs);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _subtractJs = require("./subtract.js");
var _subtractJsDefault = parcelHelpers.interopDefault(_subtractJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _sumByJs = require("./sumBy.js");
var _sumByJsDefault = parcelHelpers.interopDefault(_sumByJs);
var _mathDefaultJs = require("./math.default.js");
var _mathDefaultJsDefault = parcelHelpers.interopDefault(_mathDefaultJs);

},{"./add.js":"h2xoL","./ceil.js":"CLSpr","./divide.js":"gvIlS","./floor.js":"dkukl","./max.js":"jpVbu","./maxBy.js":"7ilJg","./mean.js":"hv8hp","./meanBy.js":"kgCT8","./min.js":"94N5R","./minBy.js":"159CG","./multiply.js":"fK88J","./round.js":"m9KU4","./subtract.js":"bkRtL","./sum.js":"lFod9","./sumBy.js":"fveXh","./math.default.js":"b995C","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b995C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addJs = require("./add.js");
var _addJsDefault = parcelHelpers.interopDefault(_addJs);
var _ceilJs = require("./ceil.js");
var _ceilJsDefault = parcelHelpers.interopDefault(_ceilJs);
var _divideJs = require("./divide.js");
var _divideJsDefault = parcelHelpers.interopDefault(_divideJs);
var _floorJs = require("./floor.js");
var _floorJsDefault = parcelHelpers.interopDefault(_floorJs);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxByJs = require("./maxBy.js");
var _maxByJsDefault = parcelHelpers.interopDefault(_maxByJs);
var _meanJs = require("./mean.js");
var _meanJsDefault = parcelHelpers.interopDefault(_meanJs);
var _meanByJs = require("./meanBy.js");
var _meanByJsDefault = parcelHelpers.interopDefault(_meanByJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minByJs = require("./minBy.js");
var _minByJsDefault = parcelHelpers.interopDefault(_minByJs);
var _multiplyJs = require("./multiply.js");
var _multiplyJsDefault = parcelHelpers.interopDefault(_multiplyJs);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _subtractJs = require("./subtract.js");
var _subtractJsDefault = parcelHelpers.interopDefault(_subtractJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _sumByJs = require("./sumBy.js");
var _sumByJsDefault = parcelHelpers.interopDefault(_sumByJs);
exports.default = {
    add: _addJsDefault.default,
    ceil: _ceilJsDefault.default,
    divide: _divideJsDefault.default,
    floor: _floorJsDefault.default,
    max: _maxJsDefault.default,
    maxBy: _maxByJsDefault.default,
    mean: _meanJsDefault.default,
    meanBy: _meanByJsDefault.default,
    min: _minJsDefault.default,
    minBy: _minByJsDefault.default,
    multiply: _multiplyJsDefault.default,
    round: _roundJsDefault.default,
    subtract: _subtractJsDefault.default,
    sum: _sumJsDefault.default,
    sumBy: _sumByJsDefault.default
};

},{"./add.js":"h2xoL","./ceil.js":"CLSpr","./divide.js":"gvIlS","./floor.js":"dkukl","./max.js":"jpVbu","./maxBy.js":"7ilJg","./mean.js":"hv8hp","./meanBy.js":"kgCT8","./min.js":"94N5R","./minBy.js":"159CG","./multiply.js":"fK88J","./round.js":"m9KU4","./subtract.js":"bkRtL","./sum.js":"lFod9","./sumBy.js":"fveXh","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1TSyW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clamp", ()=>_clampJsDefault.default
);
parcelHelpers.export(exports, "inRange", ()=>_inRangeJsDefault.default
);
parcelHelpers.export(exports, "random", ()=>_randomJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_numberDefaultJsDefault.default
);
var _clampJs = require("./clamp.js");
var _clampJsDefault = parcelHelpers.interopDefault(_clampJs);
var _inRangeJs = require("./inRange.js");
var _inRangeJsDefault = parcelHelpers.interopDefault(_inRangeJs);
var _randomJs = require("./random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
var _numberDefaultJs = require("./number.default.js");
var _numberDefaultJsDefault = parcelHelpers.interopDefault(_numberDefaultJs);

},{"./clamp.js":"1BIUN","./inRange.js":"eQg6n","./random.js":"iHku7","./number.default.js":"cDyYV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cDyYV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clampJs = require("./clamp.js");
var _clampJsDefault = parcelHelpers.interopDefault(_clampJs);
var _inRangeJs = require("./inRange.js");
var _inRangeJsDefault = parcelHelpers.interopDefault(_inRangeJs);
var _randomJs = require("./random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
exports.default = {
    clamp: _clampJsDefault.default,
    inRange: _inRangeJsDefault.default,
    random: _randomJsDefault.default
};

},{"./clamp.js":"1BIUN","./inRange.js":"eQg6n","./random.js":"iHku7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fU6ob":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assign", ()=>_assignJsDefault.default
);
parcelHelpers.export(exports, "assignIn", ()=>_assignInJsDefault.default
);
parcelHelpers.export(exports, "assignInWith", ()=>_assignInWithJsDefault.default
);
parcelHelpers.export(exports, "assignWith", ()=>_assignWithJsDefault.default
);
parcelHelpers.export(exports, "at", ()=>_atJsDefault.default
);
parcelHelpers.export(exports, "create", ()=>_createJsDefault.default
);
parcelHelpers.export(exports, "defaults", ()=>_defaultsJsDefault.default
);
parcelHelpers.export(exports, "defaultsDeep", ()=>_defaultsDeepJsDefault.default
);
parcelHelpers.export(exports, "entries", ()=>_entriesJsDefault.default
);
parcelHelpers.export(exports, "entriesIn", ()=>_entriesInJsDefault.default
);
parcelHelpers.export(exports, "extend", ()=>_extendJsDefault.default
);
parcelHelpers.export(exports, "extendWith", ()=>_extendWithJsDefault.default
);
parcelHelpers.export(exports, "findKey", ()=>_findKeyJsDefault.default
);
parcelHelpers.export(exports, "findLastKey", ()=>_findLastKeyJsDefault.default
);
parcelHelpers.export(exports, "forIn", ()=>_forInJsDefault.default
);
parcelHelpers.export(exports, "forInRight", ()=>_forInRightJsDefault.default
);
parcelHelpers.export(exports, "forOwn", ()=>_forOwnJsDefault.default
);
parcelHelpers.export(exports, "forOwnRight", ()=>_forOwnRightJsDefault.default
);
parcelHelpers.export(exports, "functions", ()=>_functionsJsDefault.default
);
parcelHelpers.export(exports, "functionsIn", ()=>_functionsInJsDefault.default
);
parcelHelpers.export(exports, "get", ()=>_getJsDefault.default
);
parcelHelpers.export(exports, "has", ()=>_hasJsDefault.default
);
parcelHelpers.export(exports, "hasIn", ()=>_hasInJsDefault.default
);
parcelHelpers.export(exports, "invert", ()=>_invertJsDefault.default
);
parcelHelpers.export(exports, "invertBy", ()=>_invertByJsDefault.default
);
parcelHelpers.export(exports, "invoke", ()=>_invokeJsDefault.default
);
parcelHelpers.export(exports, "keys", ()=>_keysJsDefault.default
);
parcelHelpers.export(exports, "keysIn", ()=>_keysInJsDefault.default
);
parcelHelpers.export(exports, "mapKeys", ()=>_mapKeysJsDefault.default
);
parcelHelpers.export(exports, "mapValues", ()=>_mapValuesJsDefault.default
);
parcelHelpers.export(exports, "merge", ()=>_mergeJsDefault.default
);
parcelHelpers.export(exports, "mergeWith", ()=>_mergeWithJsDefault.default
);
parcelHelpers.export(exports, "omit", ()=>_omitJsDefault.default
);
parcelHelpers.export(exports, "omitBy", ()=>_omitByJsDefault.default
);
parcelHelpers.export(exports, "pick", ()=>_pickJsDefault.default
);
parcelHelpers.export(exports, "pickBy", ()=>_pickByJsDefault.default
);
parcelHelpers.export(exports, "result", ()=>_resultJsDefault.default
);
parcelHelpers.export(exports, "set", ()=>_setJsDefault.default
);
parcelHelpers.export(exports, "setWith", ()=>_setWithJsDefault.default
);
parcelHelpers.export(exports, "toPairs", ()=>_toPairsJsDefault.default
);
parcelHelpers.export(exports, "toPairsIn", ()=>_toPairsInJsDefault.default
);
parcelHelpers.export(exports, "transform", ()=>_transformJsDefault.default
);
parcelHelpers.export(exports, "unset", ()=>_unsetJsDefault.default
);
parcelHelpers.export(exports, "update", ()=>_updateJsDefault.default
);
parcelHelpers.export(exports, "updateWith", ()=>_updateWithJsDefault.default
);
parcelHelpers.export(exports, "values", ()=>_valuesJsDefault.default
);
parcelHelpers.export(exports, "valuesIn", ()=>_valuesInJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_objectDefaultJsDefault.default
);
var _assignJs = require("./assign.js");
var _assignJsDefault = parcelHelpers.interopDefault(_assignJs);
var _assignInJs = require("./assignIn.js");
var _assignInJsDefault = parcelHelpers.interopDefault(_assignInJs);
var _assignInWithJs = require("./assignInWith.js");
var _assignInWithJsDefault = parcelHelpers.interopDefault(_assignInWithJs);
var _assignWithJs = require("./assignWith.js");
var _assignWithJsDefault = parcelHelpers.interopDefault(_assignWithJs);
var _atJs = require("./at.js");
var _atJsDefault = parcelHelpers.interopDefault(_atJs);
var _createJs = require("./create.js");
var _createJsDefault = parcelHelpers.interopDefault(_createJs);
var _defaultsJs = require("./defaults.js");
var _defaultsJsDefault = parcelHelpers.interopDefault(_defaultsJs);
var _defaultsDeepJs = require("./defaultsDeep.js");
var _defaultsDeepJsDefault = parcelHelpers.interopDefault(_defaultsDeepJs);
var _entriesJs = require("./entries.js");
var _entriesJsDefault = parcelHelpers.interopDefault(_entriesJs);
var _entriesInJs = require("./entriesIn.js");
var _entriesInJsDefault = parcelHelpers.interopDefault(_entriesInJs);
var _extendJs = require("./extend.js");
var _extendJsDefault = parcelHelpers.interopDefault(_extendJs);
var _extendWithJs = require("./extendWith.js");
var _extendWithJsDefault = parcelHelpers.interopDefault(_extendWithJs);
var _findKeyJs = require("./findKey.js");
var _findKeyJsDefault = parcelHelpers.interopDefault(_findKeyJs);
var _findLastKeyJs = require("./findLastKey.js");
var _findLastKeyJsDefault = parcelHelpers.interopDefault(_findLastKeyJs);
var _forInJs = require("./forIn.js");
var _forInJsDefault = parcelHelpers.interopDefault(_forInJs);
var _forInRightJs = require("./forInRight.js");
var _forInRightJsDefault = parcelHelpers.interopDefault(_forInRightJs);
var _forOwnJs = require("./forOwn.js");
var _forOwnJsDefault = parcelHelpers.interopDefault(_forOwnJs);
var _forOwnRightJs = require("./forOwnRight.js");
var _forOwnRightJsDefault = parcelHelpers.interopDefault(_forOwnRightJs);
var _functionsJs = require("./functions.js");
var _functionsJsDefault = parcelHelpers.interopDefault(_functionsJs);
var _functionsInJs = require("./functionsIn.js");
var _functionsInJsDefault = parcelHelpers.interopDefault(_functionsInJs);
var _getJs = require("./get.js");
var _getJsDefault = parcelHelpers.interopDefault(_getJs);
var _hasJs = require("./has.js");
var _hasJsDefault = parcelHelpers.interopDefault(_hasJs);
var _hasInJs = require("./hasIn.js");
var _hasInJsDefault = parcelHelpers.interopDefault(_hasInJs);
var _invertJs = require("./invert.js");
var _invertJsDefault = parcelHelpers.interopDefault(_invertJs);
var _invertByJs = require("./invertBy.js");
var _invertByJsDefault = parcelHelpers.interopDefault(_invertByJs);
var _invokeJs = require("./invoke.js");
var _invokeJsDefault = parcelHelpers.interopDefault(_invokeJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
var _mapKeysJs = require("./mapKeys.js");
var _mapKeysJsDefault = parcelHelpers.interopDefault(_mapKeysJs);
var _mapValuesJs = require("./mapValues.js");
var _mapValuesJsDefault = parcelHelpers.interopDefault(_mapValuesJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _mergeWithJs = require("./mergeWith.js");
var _mergeWithJsDefault = parcelHelpers.interopDefault(_mergeWithJs);
var _omitJs = require("./omit.js");
var _omitJsDefault = parcelHelpers.interopDefault(_omitJs);
var _omitByJs = require("./omitBy.js");
var _omitByJsDefault = parcelHelpers.interopDefault(_omitByJs);
var _pickJs = require("./pick.js");
var _pickJsDefault = parcelHelpers.interopDefault(_pickJs);
var _pickByJs = require("./pickBy.js");
var _pickByJsDefault = parcelHelpers.interopDefault(_pickByJs);
var _resultJs = require("./result.js");
var _resultJsDefault = parcelHelpers.interopDefault(_resultJs);
var _setJs = require("./set.js");
var _setJsDefault = parcelHelpers.interopDefault(_setJs);
var _setWithJs = require("./setWith.js");
var _setWithJsDefault = parcelHelpers.interopDefault(_setWithJs);
var _toPairsJs = require("./toPairs.js");
var _toPairsJsDefault = parcelHelpers.interopDefault(_toPairsJs);
var _toPairsInJs = require("./toPairsIn.js");
var _toPairsInJsDefault = parcelHelpers.interopDefault(_toPairsInJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);
var _unsetJs = require("./unset.js");
var _unsetJsDefault = parcelHelpers.interopDefault(_unsetJs);
var _updateJs = require("./update.js");
var _updateJsDefault = parcelHelpers.interopDefault(_updateJs);
var _updateWithJs = require("./updateWith.js");
var _updateWithJsDefault = parcelHelpers.interopDefault(_updateWithJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
var _valuesInJs = require("./valuesIn.js");
var _valuesInJsDefault = parcelHelpers.interopDefault(_valuesInJs);
var _objectDefaultJs = require("./object.default.js");
var _objectDefaultJsDefault = parcelHelpers.interopDefault(_objectDefaultJs);

},{"./assign.js":"lp4KX","./assignIn.js":"8GeoO","./assignInWith.js":"e4uIW","./assignWith.js":"1UrHD","./at.js":"7dHgP","./create.js":"g3pk5","./defaults.js":"d3gia","./defaultsDeep.js":"i9k30","./entries.js":"j8uzz","./entriesIn.js":"7Roxa","./extend.js":"dmzZi","./extendWith.js":"2f1gj","./findKey.js":"1JJrl","./findLastKey.js":"hF3xZ","./forIn.js":"bQtaB","./forInRight.js":"gtOyD","./forOwn.js":"fo8YY","./forOwnRight.js":"hHuwC","./functions.js":"3hupY","./functionsIn.js":"3mPM8","./get.js":"zh4Vj","./has.js":"eMgo7","./hasIn.js":"kRN1R","./invert.js":"2KPOP","./invertBy.js":"jY6q1","./invoke.js":"g4wAP","./keys.js":"f9Mo9","./keysIn.js":"dwsZb","./mapKeys.js":"fp9mD","./mapValues.js":"jXAEX","./merge.js":"iz6Iv","./mergeWith.js":"cVSbE","./omit.js":"3N7DR","./omitBy.js":"9dpfL","./pick.js":"j4dOW","./pickBy.js":"jAj8s","./result.js":"3UERD","./set.js":"7RnBM","./setWith.js":"hJ6lo","./toPairs.js":"lKvG2","./toPairsIn.js":"9ITR9","./transform.js":"96jPF","./unset.js":"l8xZg","./update.js":"hp0Ki","./updateWith.js":"9USiB","./values.js":"abMLz","./valuesIn.js":"alC0f","./object.default.js":"aBInv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aBInv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _assignJs = require("./assign.js");
var _assignJsDefault = parcelHelpers.interopDefault(_assignJs);
var _assignInJs = require("./assignIn.js");
var _assignInJsDefault = parcelHelpers.interopDefault(_assignInJs);
var _assignInWithJs = require("./assignInWith.js");
var _assignInWithJsDefault = parcelHelpers.interopDefault(_assignInWithJs);
var _assignWithJs = require("./assignWith.js");
var _assignWithJsDefault = parcelHelpers.interopDefault(_assignWithJs);
var _atJs = require("./at.js");
var _atJsDefault = parcelHelpers.interopDefault(_atJs);
var _createJs = require("./create.js");
var _createJsDefault = parcelHelpers.interopDefault(_createJs);
var _defaultsJs = require("./defaults.js");
var _defaultsJsDefault = parcelHelpers.interopDefault(_defaultsJs);
var _defaultsDeepJs = require("./defaultsDeep.js");
var _defaultsDeepJsDefault = parcelHelpers.interopDefault(_defaultsDeepJs);
var _entriesJs = require("./entries.js");
var _entriesJsDefault = parcelHelpers.interopDefault(_entriesJs);
var _entriesInJs = require("./entriesIn.js");
var _entriesInJsDefault = parcelHelpers.interopDefault(_entriesInJs);
var _extendJs = require("./extend.js");
var _extendJsDefault = parcelHelpers.interopDefault(_extendJs);
var _extendWithJs = require("./extendWith.js");
var _extendWithJsDefault = parcelHelpers.interopDefault(_extendWithJs);
var _findKeyJs = require("./findKey.js");
var _findKeyJsDefault = parcelHelpers.interopDefault(_findKeyJs);
var _findLastKeyJs = require("./findLastKey.js");
var _findLastKeyJsDefault = parcelHelpers.interopDefault(_findLastKeyJs);
var _forInJs = require("./forIn.js");
var _forInJsDefault = parcelHelpers.interopDefault(_forInJs);
var _forInRightJs = require("./forInRight.js");
var _forInRightJsDefault = parcelHelpers.interopDefault(_forInRightJs);
var _forOwnJs = require("./forOwn.js");
var _forOwnJsDefault = parcelHelpers.interopDefault(_forOwnJs);
var _forOwnRightJs = require("./forOwnRight.js");
var _forOwnRightJsDefault = parcelHelpers.interopDefault(_forOwnRightJs);
var _functionsJs = require("./functions.js");
var _functionsJsDefault = parcelHelpers.interopDefault(_functionsJs);
var _functionsInJs = require("./functionsIn.js");
var _functionsInJsDefault = parcelHelpers.interopDefault(_functionsInJs);
var _getJs = require("./get.js");
var _getJsDefault = parcelHelpers.interopDefault(_getJs);
var _hasJs = require("./has.js");
var _hasJsDefault = parcelHelpers.interopDefault(_hasJs);
var _hasInJs = require("./hasIn.js");
var _hasInJsDefault = parcelHelpers.interopDefault(_hasInJs);
var _invertJs = require("./invert.js");
var _invertJsDefault = parcelHelpers.interopDefault(_invertJs);
var _invertByJs = require("./invertBy.js");
var _invertByJsDefault = parcelHelpers.interopDefault(_invertByJs);
var _invokeJs = require("./invoke.js");
var _invokeJsDefault = parcelHelpers.interopDefault(_invokeJs);
var _keysJs = require("./keys.js");
var _keysJsDefault = parcelHelpers.interopDefault(_keysJs);
var _keysInJs = require("./keysIn.js");
var _keysInJsDefault = parcelHelpers.interopDefault(_keysInJs);
var _mapKeysJs = require("./mapKeys.js");
var _mapKeysJsDefault = parcelHelpers.interopDefault(_mapKeysJs);
var _mapValuesJs = require("./mapValues.js");
var _mapValuesJsDefault = parcelHelpers.interopDefault(_mapValuesJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _mergeWithJs = require("./mergeWith.js");
var _mergeWithJsDefault = parcelHelpers.interopDefault(_mergeWithJs);
var _omitJs = require("./omit.js");
var _omitJsDefault = parcelHelpers.interopDefault(_omitJs);
var _omitByJs = require("./omitBy.js");
var _omitByJsDefault = parcelHelpers.interopDefault(_omitByJs);
var _pickJs = require("./pick.js");
var _pickJsDefault = parcelHelpers.interopDefault(_pickJs);
var _pickByJs = require("./pickBy.js");
var _pickByJsDefault = parcelHelpers.interopDefault(_pickByJs);
var _resultJs = require("./result.js");
var _resultJsDefault = parcelHelpers.interopDefault(_resultJs);
var _setJs = require("./set.js");
var _setJsDefault = parcelHelpers.interopDefault(_setJs);
var _setWithJs = require("./setWith.js");
var _setWithJsDefault = parcelHelpers.interopDefault(_setWithJs);
var _toPairsJs = require("./toPairs.js");
var _toPairsJsDefault = parcelHelpers.interopDefault(_toPairsJs);
var _toPairsInJs = require("./toPairsIn.js");
var _toPairsInJsDefault = parcelHelpers.interopDefault(_toPairsInJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);
var _unsetJs = require("./unset.js");
var _unsetJsDefault = parcelHelpers.interopDefault(_unsetJs);
var _updateJs = require("./update.js");
var _updateJsDefault = parcelHelpers.interopDefault(_updateJs);
var _updateWithJs = require("./updateWith.js");
var _updateWithJsDefault = parcelHelpers.interopDefault(_updateWithJs);
var _valuesJs = require("./values.js");
var _valuesJsDefault = parcelHelpers.interopDefault(_valuesJs);
var _valuesInJs = require("./valuesIn.js");
var _valuesInJsDefault = parcelHelpers.interopDefault(_valuesInJs);
exports.default = {
    assign: _assignJsDefault.default,
    assignIn: _assignInJsDefault.default,
    assignInWith: _assignInWithJsDefault.default,
    assignWith: _assignWithJsDefault.default,
    at: _atJsDefault.default,
    create: _createJsDefault.default,
    defaults: _defaultsJsDefault.default,
    defaultsDeep: _defaultsDeepJsDefault.default,
    entries: _entriesJsDefault.default,
    entriesIn: _entriesInJsDefault.default,
    extend: _extendJsDefault.default,
    extendWith: _extendWithJsDefault.default,
    findKey: _findKeyJsDefault.default,
    findLastKey: _findLastKeyJsDefault.default,
    forIn: _forInJsDefault.default,
    forInRight: _forInRightJsDefault.default,
    forOwn: _forOwnJsDefault.default,
    forOwnRight: _forOwnRightJsDefault.default,
    functions: _functionsJsDefault.default,
    functionsIn: _functionsInJsDefault.default,
    get: _getJsDefault.default,
    has: _hasJsDefault.default,
    hasIn: _hasInJsDefault.default,
    invert: _invertJsDefault.default,
    invertBy: _invertByJsDefault.default,
    invoke: _invokeJsDefault.default,
    keys: _keysJsDefault.default,
    keysIn: _keysInJsDefault.default,
    mapKeys: _mapKeysJsDefault.default,
    mapValues: _mapValuesJsDefault.default,
    merge: _mergeJsDefault.default,
    mergeWith: _mergeWithJsDefault.default,
    omit: _omitJsDefault.default,
    omitBy: _omitByJsDefault.default,
    pick: _pickJsDefault.default,
    pickBy: _pickByJsDefault.default,
    result: _resultJsDefault.default,
    set: _setJsDefault.default,
    setWith: _setWithJsDefault.default,
    toPairs: _toPairsJsDefault.default,
    toPairsIn: _toPairsInJsDefault.default,
    transform: _transformJsDefault.default,
    unset: _unsetJsDefault.default,
    update: _updateJsDefault.default,
    updateWith: _updateWithJsDefault.default,
    values: _valuesJsDefault.default,
    valuesIn: _valuesInJsDefault.default
};

},{"./assign.js":"lp4KX","./assignIn.js":"8GeoO","./assignInWith.js":"e4uIW","./assignWith.js":"1UrHD","./at.js":"7dHgP","./create.js":"g3pk5","./defaults.js":"d3gia","./defaultsDeep.js":"i9k30","./entries.js":"j8uzz","./entriesIn.js":"7Roxa","./extend.js":"dmzZi","./extendWith.js":"2f1gj","./findKey.js":"1JJrl","./findLastKey.js":"hF3xZ","./forIn.js":"bQtaB","./forInRight.js":"gtOyD","./forOwn.js":"fo8YY","./forOwnRight.js":"hHuwC","./functions.js":"3hupY","./functionsIn.js":"3mPM8","./get.js":"zh4Vj","./has.js":"eMgo7","./hasIn.js":"kRN1R","./invert.js":"2KPOP","./invertBy.js":"jY6q1","./invoke.js":"g4wAP","./keys.js":"f9Mo9","./keysIn.js":"dwsZb","./mapKeys.js":"fp9mD","./mapValues.js":"jXAEX","./merge.js":"iz6Iv","./mergeWith.js":"cVSbE","./omit.js":"3N7DR","./omitBy.js":"9dpfL","./pick.js":"j4dOW","./pickBy.js":"jAj8s","./result.js":"3UERD","./set.js":"7RnBM","./setWith.js":"hJ6lo","./toPairs.js":"lKvG2","./toPairsIn.js":"9ITR9","./transform.js":"96jPF","./unset.js":"l8xZg","./update.js":"hp0Ki","./updateWith.js":"9USiB","./values.js":"abMLz","./valuesIn.js":"alC0f","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8UaAN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "at", ()=>_wrapperAtJsDefault.default
);
parcelHelpers.export(exports, "chain", ()=>_chainJsDefault.default
);
parcelHelpers.export(exports, "commit", ()=>_commitJsDefault.default
);
parcelHelpers.export(exports, "lodash", ()=>_wrapperLodashJsDefault.default
);
parcelHelpers.export(exports, "next", ()=>_nextJsDefault.default
);
parcelHelpers.export(exports, "plant", ()=>_plantJsDefault.default
);
parcelHelpers.export(exports, "reverse", ()=>_wrapperReverseJsDefault.default
);
parcelHelpers.export(exports, "tap", ()=>_tapJsDefault.default
);
parcelHelpers.export(exports, "thru", ()=>_thruJsDefault.default
);
parcelHelpers.export(exports, "toIterator", ()=>_toIteratorJsDefault.default
);
parcelHelpers.export(exports, "toJSON", ()=>_toJSONJsDefault.default
);
parcelHelpers.export(exports, "value", ()=>_wrapperValueJsDefault.default
);
parcelHelpers.export(exports, "valueOf", ()=>_valueOfJsDefault.default
);
parcelHelpers.export(exports, "wrapperChain", ()=>_wrapperChainJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_seqDefaultJsDefault.default
);
var _wrapperAtJs = require("./wrapperAt.js");
var _wrapperAtJsDefault = parcelHelpers.interopDefault(_wrapperAtJs);
var _chainJs = require("./chain.js");
var _chainJsDefault = parcelHelpers.interopDefault(_chainJs);
var _commitJs = require("./commit.js");
var _commitJsDefault = parcelHelpers.interopDefault(_commitJs);
var _wrapperLodashJs = require("./wrapperLodash.js");
var _wrapperLodashJsDefault = parcelHelpers.interopDefault(_wrapperLodashJs);
var _nextJs = require("./next.js");
var _nextJsDefault = parcelHelpers.interopDefault(_nextJs);
var _plantJs = require("./plant.js");
var _plantJsDefault = parcelHelpers.interopDefault(_plantJs);
var _wrapperReverseJs = require("./wrapperReverse.js");
var _wrapperReverseJsDefault = parcelHelpers.interopDefault(_wrapperReverseJs);
var _tapJs = require("./tap.js");
var _tapJsDefault = parcelHelpers.interopDefault(_tapJs);
var _thruJs = require("./thru.js");
var _thruJsDefault = parcelHelpers.interopDefault(_thruJs);
var _toIteratorJs = require("./toIterator.js");
var _toIteratorJsDefault = parcelHelpers.interopDefault(_toIteratorJs);
var _toJSONJs = require("./toJSON.js");
var _toJSONJsDefault = parcelHelpers.interopDefault(_toJSONJs);
var _wrapperValueJs = require("./wrapperValue.js");
var _wrapperValueJsDefault = parcelHelpers.interopDefault(_wrapperValueJs);
var _valueOfJs = require("./valueOf.js");
var _valueOfJsDefault = parcelHelpers.interopDefault(_valueOfJs);
var _wrapperChainJs = require("./wrapperChain.js");
var _wrapperChainJsDefault = parcelHelpers.interopDefault(_wrapperChainJs);
var _seqDefaultJs = require("./seq.default.js");
var _seqDefaultJsDefault = parcelHelpers.interopDefault(_seqDefaultJs);

},{"./wrapperAt.js":"3fNZ6","./chain.js":"gcLZ4","./commit.js":"mifX9","./wrapperLodash.js":"4HPB1","./next.js":"4eB5h","./plant.js":"aC9CN","./wrapperReverse.js":"jcPLi","./tap.js":"2FfKw","./thru.js":"hy1jT","./toIterator.js":"dotvV","./toJSON.js":"l7j50","./wrapperValue.js":"NZdLY","./valueOf.js":"hhNpZ","./wrapperChain.js":"fVQIr","./seq.default.js":"4sz3L","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4sz3L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _wrapperAtJs = require("./wrapperAt.js");
var _wrapperAtJsDefault = parcelHelpers.interopDefault(_wrapperAtJs);
var _chainJs = require("./chain.js");
var _chainJsDefault = parcelHelpers.interopDefault(_chainJs);
var _commitJs = require("./commit.js");
var _commitJsDefault = parcelHelpers.interopDefault(_commitJs);
var _wrapperLodashJs = require("./wrapperLodash.js");
var _wrapperLodashJsDefault = parcelHelpers.interopDefault(_wrapperLodashJs);
var _nextJs = require("./next.js");
var _nextJsDefault = parcelHelpers.interopDefault(_nextJs);
var _plantJs = require("./plant.js");
var _plantJsDefault = parcelHelpers.interopDefault(_plantJs);
var _wrapperReverseJs = require("./wrapperReverse.js");
var _wrapperReverseJsDefault = parcelHelpers.interopDefault(_wrapperReverseJs);
var _tapJs = require("./tap.js");
var _tapJsDefault = parcelHelpers.interopDefault(_tapJs);
var _thruJs = require("./thru.js");
var _thruJsDefault = parcelHelpers.interopDefault(_thruJs);
var _toIteratorJs = require("./toIterator.js");
var _toIteratorJsDefault = parcelHelpers.interopDefault(_toIteratorJs);
var _toJSONJs = require("./toJSON.js");
var _toJSONJsDefault = parcelHelpers.interopDefault(_toJSONJs);
var _wrapperValueJs = require("./wrapperValue.js");
var _wrapperValueJsDefault = parcelHelpers.interopDefault(_wrapperValueJs);
var _valueOfJs = require("./valueOf.js");
var _valueOfJsDefault = parcelHelpers.interopDefault(_valueOfJs);
var _wrapperChainJs = require("./wrapperChain.js");
var _wrapperChainJsDefault = parcelHelpers.interopDefault(_wrapperChainJs);
exports.default = {
    at: _wrapperAtJsDefault.default,
    chain: _chainJsDefault.default,
    commit: _commitJsDefault.default,
    lodash: _wrapperLodashJsDefault.default,
    next: _nextJsDefault.default,
    plant: _plantJsDefault.default,
    reverse: _wrapperReverseJsDefault.default,
    tap: _tapJsDefault.default,
    thru: _thruJsDefault.default,
    toIterator: _toIteratorJsDefault.default,
    toJSON: _toJSONJsDefault.default,
    value: _wrapperValueJsDefault.default,
    valueOf: _valueOfJsDefault.default,
    wrapperChain: _wrapperChainJsDefault.default
};

},{"./wrapperAt.js":"3fNZ6","./chain.js":"gcLZ4","./commit.js":"mifX9","./wrapperLodash.js":"4HPB1","./next.js":"4eB5h","./plant.js":"aC9CN","./wrapperReverse.js":"jcPLi","./tap.js":"2FfKw","./thru.js":"hy1jT","./toIterator.js":"dotvV","./toJSON.js":"l7j50","./wrapperValue.js":"NZdLY","./valueOf.js":"hhNpZ","./wrapperChain.js":"fVQIr","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kMupA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "camelCase", ()=>_camelCaseJsDefault.default
);
parcelHelpers.export(exports, "capitalize", ()=>_capitalizeJsDefault.default
);
parcelHelpers.export(exports, "deburr", ()=>_deburrJsDefault.default
);
parcelHelpers.export(exports, "endsWith", ()=>_endsWithJsDefault.default
);
parcelHelpers.export(exports, "escape", ()=>_escapeJsDefault.default
);
parcelHelpers.export(exports, "escapeRegExp", ()=>_escapeRegExpJsDefault.default
);
parcelHelpers.export(exports, "kebabCase", ()=>_kebabCaseJsDefault.default
);
parcelHelpers.export(exports, "lowerCase", ()=>_lowerCaseJsDefault.default
);
parcelHelpers.export(exports, "lowerFirst", ()=>_lowerFirstJsDefault.default
);
parcelHelpers.export(exports, "pad", ()=>_padJsDefault.default
);
parcelHelpers.export(exports, "padEnd", ()=>_padEndJsDefault.default
);
parcelHelpers.export(exports, "padStart", ()=>_padStartJsDefault.default
);
parcelHelpers.export(exports, "parseInt", ()=>_parseIntJsDefault.default
);
parcelHelpers.export(exports, "repeat", ()=>_repeatJsDefault.default
);
parcelHelpers.export(exports, "replace", ()=>_replaceJsDefault.default
);
parcelHelpers.export(exports, "snakeCase", ()=>_snakeCaseJsDefault.default
);
parcelHelpers.export(exports, "split", ()=>_splitJsDefault.default
);
parcelHelpers.export(exports, "startCase", ()=>_startCaseJsDefault.default
);
parcelHelpers.export(exports, "startsWith", ()=>_startsWithJsDefault.default
);
parcelHelpers.export(exports, "template", ()=>_templateJsDefault.default
);
parcelHelpers.export(exports, "templateSettings", ()=>_templateSettingsJsDefault.default
);
parcelHelpers.export(exports, "toLower", ()=>_toLowerJsDefault.default
);
parcelHelpers.export(exports, "toUpper", ()=>_toUpperJsDefault.default
);
parcelHelpers.export(exports, "trim", ()=>_trimJsDefault.default
);
parcelHelpers.export(exports, "trimEnd", ()=>_trimEndJsDefault.default
);
parcelHelpers.export(exports, "trimStart", ()=>_trimStartJsDefault.default
);
parcelHelpers.export(exports, "truncate", ()=>_truncateJsDefault.default
);
parcelHelpers.export(exports, "unescape", ()=>_unescapeJsDefault.default
);
parcelHelpers.export(exports, "upperCase", ()=>_upperCaseJsDefault.default
);
parcelHelpers.export(exports, "upperFirst", ()=>_upperFirstJsDefault.default
);
parcelHelpers.export(exports, "words", ()=>_wordsJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_stringDefaultJsDefault.default
);
var _camelCaseJs = require("./camelCase.js");
var _camelCaseJsDefault = parcelHelpers.interopDefault(_camelCaseJs);
var _capitalizeJs = require("./capitalize.js");
var _capitalizeJsDefault = parcelHelpers.interopDefault(_capitalizeJs);
var _deburrJs = require("./deburr.js");
var _deburrJsDefault = parcelHelpers.interopDefault(_deburrJs);
var _endsWithJs = require("./endsWith.js");
var _endsWithJsDefault = parcelHelpers.interopDefault(_endsWithJs);
var _escapeJs = require("./escape.js");
var _escapeJsDefault = parcelHelpers.interopDefault(_escapeJs);
var _escapeRegExpJs = require("./escapeRegExp.js");
var _escapeRegExpJsDefault = parcelHelpers.interopDefault(_escapeRegExpJs);
var _kebabCaseJs = require("./kebabCase.js");
var _kebabCaseJsDefault = parcelHelpers.interopDefault(_kebabCaseJs);
var _lowerCaseJs = require("./lowerCase.js");
var _lowerCaseJsDefault = parcelHelpers.interopDefault(_lowerCaseJs);
var _lowerFirstJs = require("./lowerFirst.js");
var _lowerFirstJsDefault = parcelHelpers.interopDefault(_lowerFirstJs);
var _padJs = require("./pad.js");
var _padJsDefault = parcelHelpers.interopDefault(_padJs);
var _padEndJs = require("./padEnd.js");
var _padEndJsDefault = parcelHelpers.interopDefault(_padEndJs);
var _padStartJs = require("./padStart.js");
var _padStartJsDefault = parcelHelpers.interopDefault(_padStartJs);
var _parseIntJs = require("./parseInt.js");
var _parseIntJsDefault = parcelHelpers.interopDefault(_parseIntJs);
var _repeatJs = require("./repeat.js");
var _repeatJsDefault = parcelHelpers.interopDefault(_repeatJs);
var _replaceJs = require("./replace.js");
var _replaceJsDefault = parcelHelpers.interopDefault(_replaceJs);
var _snakeCaseJs = require("./snakeCase.js");
var _snakeCaseJsDefault = parcelHelpers.interopDefault(_snakeCaseJs);
var _splitJs = require("./split.js");
var _splitJsDefault = parcelHelpers.interopDefault(_splitJs);
var _startCaseJs = require("./startCase.js");
var _startCaseJsDefault = parcelHelpers.interopDefault(_startCaseJs);
var _startsWithJs = require("./startsWith.js");
var _startsWithJsDefault = parcelHelpers.interopDefault(_startsWithJs);
var _templateJs = require("./template.js");
var _templateJsDefault = parcelHelpers.interopDefault(_templateJs);
var _templateSettingsJs = require("./templateSettings.js");
var _templateSettingsJsDefault = parcelHelpers.interopDefault(_templateSettingsJs);
var _toLowerJs = require("./toLower.js");
var _toLowerJsDefault = parcelHelpers.interopDefault(_toLowerJs);
var _toUpperJs = require("./toUpper.js");
var _toUpperJsDefault = parcelHelpers.interopDefault(_toUpperJs);
var _trimJs = require("./trim.js");
var _trimJsDefault = parcelHelpers.interopDefault(_trimJs);
var _trimEndJs = require("./trimEnd.js");
var _trimEndJsDefault = parcelHelpers.interopDefault(_trimEndJs);
var _trimStartJs = require("./trimStart.js");
var _trimStartJsDefault = parcelHelpers.interopDefault(_trimStartJs);
var _truncateJs = require("./truncate.js");
var _truncateJsDefault = parcelHelpers.interopDefault(_truncateJs);
var _unescapeJs = require("./unescape.js");
var _unescapeJsDefault = parcelHelpers.interopDefault(_unescapeJs);
var _upperCaseJs = require("./upperCase.js");
var _upperCaseJsDefault = parcelHelpers.interopDefault(_upperCaseJs);
var _upperFirstJs = require("./upperFirst.js");
var _upperFirstJsDefault = parcelHelpers.interopDefault(_upperFirstJs);
var _wordsJs = require("./words.js");
var _wordsJsDefault = parcelHelpers.interopDefault(_wordsJs);
var _stringDefaultJs = require("./string.default.js");
var _stringDefaultJsDefault = parcelHelpers.interopDefault(_stringDefaultJs);

},{"./camelCase.js":"1Ki56","./capitalize.js":"iD0PA","./deburr.js":"4207h","./endsWith.js":"7h2su","./escape.js":"9Kfvx","./escapeRegExp.js":"ilQiZ","./kebabCase.js":"aUlYs","./lowerCase.js":"1r9dC","./lowerFirst.js":"cOtgl","./pad.js":"fM3n7","./padEnd.js":"g9SMd","./padStart.js":"hbBM7","./parseInt.js":"5TorV","./repeat.js":"b8tN6","./replace.js":"7TcPA","./snakeCase.js":"5RQq2","./split.js":"8bJdK","./startCase.js":"jr30l","./startsWith.js":"77WAQ","./template.js":"dENJ7","./templateSettings.js":"bZAfI","./toLower.js":"lS55I","./toUpper.js":"4Bvdp","./trim.js":"ke4Ba","./trimEnd.js":"iU7QI","./trimStart.js":"52Seo","./truncate.js":"cv1a3","./unescape.js":"1LMbJ","./upperCase.js":"4dxE8","./upperFirst.js":"bubwY","./words.js":"fp6cV","./string.default.js":"2acNl","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2acNl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _camelCaseJs = require("./camelCase.js");
var _camelCaseJsDefault = parcelHelpers.interopDefault(_camelCaseJs);
var _capitalizeJs = require("./capitalize.js");
var _capitalizeJsDefault = parcelHelpers.interopDefault(_capitalizeJs);
var _deburrJs = require("./deburr.js");
var _deburrJsDefault = parcelHelpers.interopDefault(_deburrJs);
var _endsWithJs = require("./endsWith.js");
var _endsWithJsDefault = parcelHelpers.interopDefault(_endsWithJs);
var _escapeJs = require("./escape.js");
var _escapeJsDefault = parcelHelpers.interopDefault(_escapeJs);
var _escapeRegExpJs = require("./escapeRegExp.js");
var _escapeRegExpJsDefault = parcelHelpers.interopDefault(_escapeRegExpJs);
var _kebabCaseJs = require("./kebabCase.js");
var _kebabCaseJsDefault = parcelHelpers.interopDefault(_kebabCaseJs);
var _lowerCaseJs = require("./lowerCase.js");
var _lowerCaseJsDefault = parcelHelpers.interopDefault(_lowerCaseJs);
var _lowerFirstJs = require("./lowerFirst.js");
var _lowerFirstJsDefault = parcelHelpers.interopDefault(_lowerFirstJs);
var _padJs = require("./pad.js");
var _padJsDefault = parcelHelpers.interopDefault(_padJs);
var _padEndJs = require("./padEnd.js");
var _padEndJsDefault = parcelHelpers.interopDefault(_padEndJs);
var _padStartJs = require("./padStart.js");
var _padStartJsDefault = parcelHelpers.interopDefault(_padStartJs);
var _parseIntJs = require("./parseInt.js");
var _parseIntJsDefault = parcelHelpers.interopDefault(_parseIntJs);
var _repeatJs = require("./repeat.js");
var _repeatJsDefault = parcelHelpers.interopDefault(_repeatJs);
var _replaceJs = require("./replace.js");
var _replaceJsDefault = parcelHelpers.interopDefault(_replaceJs);
var _snakeCaseJs = require("./snakeCase.js");
var _snakeCaseJsDefault = parcelHelpers.interopDefault(_snakeCaseJs);
var _splitJs = require("./split.js");
var _splitJsDefault = parcelHelpers.interopDefault(_splitJs);
var _startCaseJs = require("./startCase.js");
var _startCaseJsDefault = parcelHelpers.interopDefault(_startCaseJs);
var _startsWithJs = require("./startsWith.js");
var _startsWithJsDefault = parcelHelpers.interopDefault(_startsWithJs);
var _templateJs = require("./template.js");
var _templateJsDefault = parcelHelpers.interopDefault(_templateJs);
var _templateSettingsJs = require("./templateSettings.js");
var _templateSettingsJsDefault = parcelHelpers.interopDefault(_templateSettingsJs);
var _toLowerJs = require("./toLower.js");
var _toLowerJsDefault = parcelHelpers.interopDefault(_toLowerJs);
var _toUpperJs = require("./toUpper.js");
var _toUpperJsDefault = parcelHelpers.interopDefault(_toUpperJs);
var _trimJs = require("./trim.js");
var _trimJsDefault = parcelHelpers.interopDefault(_trimJs);
var _trimEndJs = require("./trimEnd.js");
var _trimEndJsDefault = parcelHelpers.interopDefault(_trimEndJs);
var _trimStartJs = require("./trimStart.js");
var _trimStartJsDefault = parcelHelpers.interopDefault(_trimStartJs);
var _truncateJs = require("./truncate.js");
var _truncateJsDefault = parcelHelpers.interopDefault(_truncateJs);
var _unescapeJs = require("./unescape.js");
var _unescapeJsDefault = parcelHelpers.interopDefault(_unescapeJs);
var _upperCaseJs = require("./upperCase.js");
var _upperCaseJsDefault = parcelHelpers.interopDefault(_upperCaseJs);
var _upperFirstJs = require("./upperFirst.js");
var _upperFirstJsDefault = parcelHelpers.interopDefault(_upperFirstJs);
var _wordsJs = require("./words.js");
var _wordsJsDefault = parcelHelpers.interopDefault(_wordsJs);
exports.default = {
    camelCase: _camelCaseJsDefault.default,
    capitalize: _capitalizeJsDefault.default,
    deburr: _deburrJsDefault.default,
    endsWith: _endsWithJsDefault.default,
    escape: _escapeJsDefault.default,
    escapeRegExp: _escapeRegExpJsDefault.default,
    kebabCase: _kebabCaseJsDefault.default,
    lowerCase: _lowerCaseJsDefault.default,
    lowerFirst: _lowerFirstJsDefault.default,
    pad: _padJsDefault.default,
    padEnd: _padEndJsDefault.default,
    padStart: _padStartJsDefault.default,
    parseInt: _parseIntJsDefault.default,
    repeat: _repeatJsDefault.default,
    replace: _replaceJsDefault.default,
    snakeCase: _snakeCaseJsDefault.default,
    split: _splitJsDefault.default,
    startCase: _startCaseJsDefault.default,
    startsWith: _startsWithJsDefault.default,
    template: _templateJsDefault.default,
    templateSettings: _templateSettingsJsDefault.default,
    toLower: _toLowerJsDefault.default,
    toUpper: _toUpperJsDefault.default,
    trim: _trimJsDefault.default,
    trimEnd: _trimEndJsDefault.default,
    trimStart: _trimStartJsDefault.default,
    truncate: _truncateJsDefault.default,
    unescape: _unescapeJsDefault.default,
    upperCase: _upperCaseJsDefault.default,
    upperFirst: _upperFirstJsDefault.default,
    words: _wordsJsDefault.default
};

},{"./camelCase.js":"1Ki56","./capitalize.js":"iD0PA","./deburr.js":"4207h","./endsWith.js":"7h2su","./escape.js":"9Kfvx","./escapeRegExp.js":"ilQiZ","./kebabCase.js":"aUlYs","./lowerCase.js":"1r9dC","./lowerFirst.js":"cOtgl","./pad.js":"fM3n7","./padEnd.js":"g9SMd","./padStart.js":"hbBM7","./parseInt.js":"5TorV","./repeat.js":"b8tN6","./replace.js":"7TcPA","./snakeCase.js":"5RQq2","./split.js":"8bJdK","./startCase.js":"jr30l","./startsWith.js":"77WAQ","./template.js":"dENJ7","./templateSettings.js":"bZAfI","./toLower.js":"lS55I","./toUpper.js":"4Bvdp","./trim.js":"ke4Ba","./trimEnd.js":"iU7QI","./trimStart.js":"52Seo","./truncate.js":"cv1a3","./unescape.js":"1LMbJ","./upperCase.js":"4dxE8","./upperFirst.js":"bubwY","./words.js":"fp6cV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kLuBI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "attempt", ()=>_attemptJsDefault.default
);
parcelHelpers.export(exports, "bindAll", ()=>_bindAllJsDefault.default
);
parcelHelpers.export(exports, "cond", ()=>_condJsDefault.default
);
parcelHelpers.export(exports, "conforms", ()=>_conformsJsDefault.default
);
parcelHelpers.export(exports, "constant", ()=>_constantJsDefault.default
);
parcelHelpers.export(exports, "defaultTo", ()=>_defaultToJsDefault.default
);
parcelHelpers.export(exports, "flow", ()=>_flowJsDefault.default
);
parcelHelpers.export(exports, "flowRight", ()=>_flowRightJsDefault.default
);
parcelHelpers.export(exports, "identity", ()=>_identityJsDefault.default
);
parcelHelpers.export(exports, "iteratee", ()=>_iterateeJsDefault.default
);
parcelHelpers.export(exports, "matches", ()=>_matchesJsDefault.default
);
parcelHelpers.export(exports, "matchesProperty", ()=>_matchesPropertyJsDefault.default
);
parcelHelpers.export(exports, "method", ()=>_methodJsDefault.default
);
parcelHelpers.export(exports, "methodOf", ()=>_methodOfJsDefault.default
);
parcelHelpers.export(exports, "mixin", ()=>_mixinJsDefault.default
);
parcelHelpers.export(exports, "noop", ()=>_noopJsDefault.default
);
parcelHelpers.export(exports, "nthArg", ()=>_nthArgJsDefault.default
);
parcelHelpers.export(exports, "over", ()=>_overJsDefault.default
);
parcelHelpers.export(exports, "overEvery", ()=>_overEveryJsDefault.default
);
parcelHelpers.export(exports, "overSome", ()=>_overSomeJsDefault.default
);
parcelHelpers.export(exports, "property", ()=>_propertyJsDefault.default
);
parcelHelpers.export(exports, "propertyOf", ()=>_propertyOfJsDefault.default
);
parcelHelpers.export(exports, "range", ()=>_rangeJsDefault.default
);
parcelHelpers.export(exports, "rangeRight", ()=>_rangeRightJsDefault.default
);
parcelHelpers.export(exports, "stubArray", ()=>_stubArrayJsDefault.default
);
parcelHelpers.export(exports, "stubFalse", ()=>_stubFalseJsDefault.default
);
parcelHelpers.export(exports, "stubObject", ()=>_stubObjectJsDefault.default
);
parcelHelpers.export(exports, "stubString", ()=>_stubStringJsDefault.default
);
parcelHelpers.export(exports, "stubTrue", ()=>_stubTrueJsDefault.default
);
parcelHelpers.export(exports, "times", ()=>_timesJsDefault.default
);
parcelHelpers.export(exports, "toPath", ()=>_toPathJsDefault.default
);
parcelHelpers.export(exports, "uniqueId", ()=>_uniqueIdJsDefault.default
);
parcelHelpers.export(exports, "default", ()=>_utilDefaultJsDefault.default
);
var _attemptJs = require("./attempt.js");
var _attemptJsDefault = parcelHelpers.interopDefault(_attemptJs);
var _bindAllJs = require("./bindAll.js");
var _bindAllJsDefault = parcelHelpers.interopDefault(_bindAllJs);
var _condJs = require("./cond.js");
var _condJsDefault = parcelHelpers.interopDefault(_condJs);
var _conformsJs = require("./conforms.js");
var _conformsJsDefault = parcelHelpers.interopDefault(_conformsJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _defaultToJs = require("./defaultTo.js");
var _defaultToJsDefault = parcelHelpers.interopDefault(_defaultToJs);
var _flowJs = require("./flow.js");
var _flowJsDefault = parcelHelpers.interopDefault(_flowJs);
var _flowRightJs = require("./flowRight.js");
var _flowRightJsDefault = parcelHelpers.interopDefault(_flowRightJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _iterateeJs = require("./iteratee.js");
var _iterateeJsDefault = parcelHelpers.interopDefault(_iterateeJs);
var _matchesJs = require("./matches.js");
var _matchesJsDefault = parcelHelpers.interopDefault(_matchesJs);
var _matchesPropertyJs = require("./matchesProperty.js");
var _matchesPropertyJsDefault = parcelHelpers.interopDefault(_matchesPropertyJs);
var _methodJs = require("./method.js");
var _methodJsDefault = parcelHelpers.interopDefault(_methodJs);
var _methodOfJs = require("./methodOf.js");
var _methodOfJsDefault = parcelHelpers.interopDefault(_methodOfJs);
var _mixinJs = require("./mixin.js");
var _mixinJsDefault = parcelHelpers.interopDefault(_mixinJs);
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _nthArgJs = require("./nthArg.js");
var _nthArgJsDefault = parcelHelpers.interopDefault(_nthArgJs);
var _overJs = require("./over.js");
var _overJsDefault = parcelHelpers.interopDefault(_overJs);
var _overEveryJs = require("./overEvery.js");
var _overEveryJsDefault = parcelHelpers.interopDefault(_overEveryJs);
var _overSomeJs = require("./overSome.js");
var _overSomeJsDefault = parcelHelpers.interopDefault(_overSomeJs);
var _propertyJs = require("./property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _propertyOfJs = require("./propertyOf.js");
var _propertyOfJsDefault = parcelHelpers.interopDefault(_propertyOfJs);
var _rangeJs = require("./range.js");
var _rangeJsDefault = parcelHelpers.interopDefault(_rangeJs);
var _rangeRightJs = require("./rangeRight.js");
var _rangeRightJsDefault = parcelHelpers.interopDefault(_rangeRightJs);
var _stubArrayJs = require("./stubArray.js");
var _stubArrayJsDefault = parcelHelpers.interopDefault(_stubArrayJs);
var _stubFalseJs = require("./stubFalse.js");
var _stubFalseJsDefault = parcelHelpers.interopDefault(_stubFalseJs);
var _stubObjectJs = require("./stubObject.js");
var _stubObjectJsDefault = parcelHelpers.interopDefault(_stubObjectJs);
var _stubStringJs = require("./stubString.js");
var _stubStringJsDefault = parcelHelpers.interopDefault(_stubStringJs);
var _stubTrueJs = require("./stubTrue.js");
var _stubTrueJsDefault = parcelHelpers.interopDefault(_stubTrueJs);
var _timesJs = require("./times.js");
var _timesJsDefault = parcelHelpers.interopDefault(_timesJs);
var _toPathJs = require("./toPath.js");
var _toPathJsDefault = parcelHelpers.interopDefault(_toPathJs);
var _uniqueIdJs = require("./uniqueId.js");
var _uniqueIdJsDefault = parcelHelpers.interopDefault(_uniqueIdJs);
var _utilDefaultJs = require("./util.default.js");
var _utilDefaultJsDefault = parcelHelpers.interopDefault(_utilDefaultJs);

},{"./attempt.js":"cIrGS","./bindAll.js":"d4mAG","./cond.js":"lCwJ0","./conforms.js":"2mmY2","./constant.js":"izIhX","./defaultTo.js":"iFguT","./flow.js":"axHzW","./flowRight.js":"3zLY6","./identity.js":"fqqWQ","./iteratee.js":"bBOpM","./matches.js":"dGEIs","./matchesProperty.js":"bDzEN","./method.js":"jhNNz","./methodOf.js":"ez29f","./mixin.js":"hdMVM","./noop.js":"fQpra","./nthArg.js":"8W3Xb","./over.js":"fESBh","./overEvery.js":"10sDM","./overSome.js":"jVMwj","./property.js":"8Doag","./propertyOf.js":"4RAwz","./range.js":"hHEyI","./rangeRight.js":"g1XoZ","./stubArray.js":"a0dCJ","./stubFalse.js":"2zFwJ","./stubObject.js":"72wCy","./stubString.js":"kXZaJ","./stubTrue.js":"1QVGB","./times.js":"ikpOD","./toPath.js":"61Rh0","./uniqueId.js":"bIK1H","./util.default.js":"1vQNl","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1vQNl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _attemptJs = require("./attempt.js");
var _attemptJsDefault = parcelHelpers.interopDefault(_attemptJs);
var _bindAllJs = require("./bindAll.js");
var _bindAllJsDefault = parcelHelpers.interopDefault(_bindAllJs);
var _condJs = require("./cond.js");
var _condJsDefault = parcelHelpers.interopDefault(_condJs);
var _conformsJs = require("./conforms.js");
var _conformsJsDefault = parcelHelpers.interopDefault(_conformsJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _defaultToJs = require("./defaultTo.js");
var _defaultToJsDefault = parcelHelpers.interopDefault(_defaultToJs);
var _flowJs = require("./flow.js");
var _flowJsDefault = parcelHelpers.interopDefault(_flowJs);
var _flowRightJs = require("./flowRight.js");
var _flowRightJsDefault = parcelHelpers.interopDefault(_flowRightJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _iterateeJs = require("./iteratee.js");
var _iterateeJsDefault = parcelHelpers.interopDefault(_iterateeJs);
var _matchesJs = require("./matches.js");
var _matchesJsDefault = parcelHelpers.interopDefault(_matchesJs);
var _matchesPropertyJs = require("./matchesProperty.js");
var _matchesPropertyJsDefault = parcelHelpers.interopDefault(_matchesPropertyJs);
var _methodJs = require("./method.js");
var _methodJsDefault = parcelHelpers.interopDefault(_methodJs);
var _methodOfJs = require("./methodOf.js");
var _methodOfJsDefault = parcelHelpers.interopDefault(_methodOfJs);
var _mixinJs = require("./mixin.js");
var _mixinJsDefault = parcelHelpers.interopDefault(_mixinJs);
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _nthArgJs = require("./nthArg.js");
var _nthArgJsDefault = parcelHelpers.interopDefault(_nthArgJs);
var _overJs = require("./over.js");
var _overJsDefault = parcelHelpers.interopDefault(_overJs);
var _overEveryJs = require("./overEvery.js");
var _overEveryJsDefault = parcelHelpers.interopDefault(_overEveryJs);
var _overSomeJs = require("./overSome.js");
var _overSomeJsDefault = parcelHelpers.interopDefault(_overSomeJs);
var _propertyJs = require("./property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _propertyOfJs = require("./propertyOf.js");
var _propertyOfJsDefault = parcelHelpers.interopDefault(_propertyOfJs);
var _rangeJs = require("./range.js");
var _rangeJsDefault = parcelHelpers.interopDefault(_rangeJs);
var _rangeRightJs = require("./rangeRight.js");
var _rangeRightJsDefault = parcelHelpers.interopDefault(_rangeRightJs);
var _stubArrayJs = require("./stubArray.js");
var _stubArrayJsDefault = parcelHelpers.interopDefault(_stubArrayJs);
var _stubFalseJs = require("./stubFalse.js");
var _stubFalseJsDefault = parcelHelpers.interopDefault(_stubFalseJs);
var _stubObjectJs = require("./stubObject.js");
var _stubObjectJsDefault = parcelHelpers.interopDefault(_stubObjectJs);
var _stubStringJs = require("./stubString.js");
var _stubStringJsDefault = parcelHelpers.interopDefault(_stubStringJs);
var _stubTrueJs = require("./stubTrue.js");
var _stubTrueJsDefault = parcelHelpers.interopDefault(_stubTrueJs);
var _timesJs = require("./times.js");
var _timesJsDefault = parcelHelpers.interopDefault(_timesJs);
var _toPathJs = require("./toPath.js");
var _toPathJsDefault = parcelHelpers.interopDefault(_toPathJs);
var _uniqueIdJs = require("./uniqueId.js");
var _uniqueIdJsDefault = parcelHelpers.interopDefault(_uniqueIdJs);
exports.default = {
    attempt: _attemptJsDefault.default,
    bindAll: _bindAllJsDefault.default,
    cond: _condJsDefault.default,
    conforms: _conformsJsDefault.default,
    constant: _constantJsDefault.default,
    defaultTo: _defaultToJsDefault.default,
    flow: _flowJsDefault.default,
    flowRight: _flowRightJsDefault.default,
    identity: _identityJsDefault.default,
    iteratee: _iterateeJsDefault.default,
    matches: _matchesJsDefault.default,
    matchesProperty: _matchesPropertyJsDefault.default,
    method: _methodJsDefault.default,
    methodOf: _methodOfJsDefault.default,
    mixin: _mixinJsDefault.default,
    noop: _noopJsDefault.default,
    nthArg: _nthArgJsDefault.default,
    over: _overJsDefault.default,
    overEvery: _overEveryJsDefault.default,
    overSome: _overSomeJsDefault.default,
    property: _propertyJsDefault.default,
    propertyOf: _propertyOfJsDefault.default,
    range: _rangeJsDefault.default,
    rangeRight: _rangeRightJsDefault.default,
    stubArray: _stubArrayJsDefault.default,
    stubFalse: _stubFalseJsDefault.default,
    stubObject: _stubObjectJsDefault.default,
    stubString: _stubStringJsDefault.default,
    stubTrue: _stubTrueJsDefault.default,
    times: _timesJsDefault.default,
    toPath: _toPathJsDefault.default,
    uniqueId: _uniqueIdJsDefault.default
};

},{"./attempt.js":"cIrGS","./bindAll.js":"d4mAG","./cond.js":"lCwJ0","./conforms.js":"2mmY2","./constant.js":"izIhX","./defaultTo.js":"iFguT","./flow.js":"axHzW","./flowRight.js":"3zLY6","./identity.js":"fqqWQ","./iteratee.js":"bBOpM","./matches.js":"dGEIs","./matchesProperty.js":"bDzEN","./method.js":"jhNNz","./methodOf.js":"ez29f","./mixin.js":"hdMVM","./noop.js":"fQpra","./nthArg.js":"8W3Xb","./over.js":"fESBh","./overEvery.js":"10sDM","./overSome.js":"jVMwj","./property.js":"8Doag","./propertyOf.js":"4RAwz","./range.js":"hHEyI","./rangeRight.js":"g1XoZ","./stubArray.js":"a0dCJ","./stubFalse.js":"2zFwJ","./stubObject.js":"72wCy","./stubString.js":"kXZaJ","./stubTrue.js":"1QVGB","./times.js":"ikpOD","./toPath.js":"61Rh0","./uniqueId.js":"bIK1H","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4YBMg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
var _copyArrayJs = require("./_copyArray.js");
var _copyArrayJsDefault = parcelHelpers.interopDefault(_copyArrayJs);
/**
 * Creates a clone of the lazy wrapper object.
 *
 * @private
 * @name clone
 * @memberOf LazyWrapper
 * @returns {Object} Returns the cloned `LazyWrapper` object.
 */ function lazyClone() {
    var result = new _lazyWrapperJsDefault.default(this.__wrapped__);
    result.__actions__ = _copyArrayJsDefault.default(this.__actions__);
    result.__dir__ = this.__dir__;
    result.__filtered__ = this.__filtered__;
    result.__iteratees__ = _copyArrayJsDefault.default(this.__iteratees__);
    result.__takeCount__ = this.__takeCount__;
    result.__views__ = _copyArrayJsDefault.default(this.__views__);
    return result;
}
exports.default = lazyClone;

},{"./_LazyWrapper.js":"kpKkJ","./_copyArray.js":"aKKbc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7dkG9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lazyWrapperJs = require("./_LazyWrapper.js");
var _lazyWrapperJsDefault = parcelHelpers.interopDefault(_lazyWrapperJs);
/**
 * Reverses the direction of lazy iteration.
 *
 * @private
 * @name reverse
 * @memberOf LazyWrapper
 * @returns {Object} Returns the new reversed `LazyWrapper` object.
 */ function lazyReverse() {
    if (this.__filtered__) {
        var result = new _lazyWrapperJsDefault.default(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
    } else {
        result = this.clone();
        result.__dir__ *= -1;
    }
    return result;
}
exports.default = lazyReverse;

},{"./_LazyWrapper.js":"kpKkJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5cL9P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseWrapperValueJs = require("./_baseWrapperValue.js");
var _baseWrapperValueJsDefault = parcelHelpers.interopDefault(_baseWrapperValueJs);
var _getViewJs = require("./_getView.js");
var _getViewJsDefault = parcelHelpers.interopDefault(_getViewJs);
var _isArrayJs = require("./isArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
/** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Extracts the unwrapped value from its lazy wrapper.
 *
 * @private
 * @name value
 * @memberOf LazyWrapper
 * @returns {*} Returns the unwrapped value.
 */ function lazyValue() {
    var array = this.__wrapped__.value(), dir = this.__dir__, isArr = _isArrayJsDefault.default(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = _getViewJsDefault.default(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
    if (!isArr || !isRight && arrLength == length && takeCount == length) return _baseWrapperValueJsDefault.default(array, this.__actions__);
    var result = [];
    outer: while((length--) && resIndex < takeCount){
        index += dir;
        var iterIndex = -1, value = array[index];
        while((++iterIndex) < iterLength){
            var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
            if (type == LAZY_MAP_FLAG) value = computed;
            else if (!computed) {
                if (type == LAZY_FILTER_FLAG) continue outer;
                else break outer;
            }
        }
        result[resIndex++] = value;
    }
    return result;
}
exports.default = lazyValue;

},{"./_baseWrapperValue.js":"hnxcw","./_getView.js":"e8fUN","./isArray.js":"aM5De","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e8fUN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * Gets the view, applying any `transforms` to the `start` and `end` positions.
 *
 * @private
 * @param {number} start The start of the view.
 * @param {number} end The end of the view.
 * @param {Array} transforms The transformations to apply to the view.
 * @returns {Object} Returns an object containing the `start` and `end`
 *  positions of the view.
 */ function getView(start, end, transforms) {
    var index = -1, length = transforms.length;
    while((++index) < length){
        var data = transforms[index], size = data.size;
        switch(data.type){
            case 'drop':
                start += size;
                break;
            case 'dropRight':
                end -= size;
                break;
            case 'take':
                end = nativeMin(end, start + size);
                break;
            case 'takeRight':
                start = nativeMax(start, end - size);
                break;
        }
    }
    return {
        'start': start,
        'end': end
    };
}
exports.default = getView;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"qMSaL":[function() {},{}],"5V79J":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"fNmB3"}]},["2rAXy","aMN3l","6mQMX"], "6mQMX", "parcelRequired98c")

//# sourceMappingURL=index.a2b4c36f.js.map
